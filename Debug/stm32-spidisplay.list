
stm32-spidisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004534  08009664  08009664  0000a664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db98  0800db98  0000f188  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800db98  0800db98  0000eb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dba0  0800dba0  0000f188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800dba0  0800dba0  0000eba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dba8  0800dba8  0000eba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  0800dbac  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001668  20000188  0800dd34  0000f188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017f0  0800dd34  0000f7f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f43  00000000  00000000  0000f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004722  00000000  00000000  000280fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  0002c820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001102  00000000  00000000  0002dea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cda5  00000000  00000000  0002efa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0ab  00000000  00000000  0004bd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094065  00000000  00000000  00066df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fae57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000616c  00000000  00000000  000fae9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00101008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000188 	.word	0x20000188
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800964c 	.word	0x0800964c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000018c 	.word	0x2000018c
 80001d0:	0800964c 	.word	0x0800964c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <MX_DMA_Init+0x3c>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a0b      	ldr	r2, [pc, #44]	@ (800053c <MX_DMA_Init+0x3c>)
 8000510:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b09      	ldr	r3, [pc, #36]	@ (800053c <MX_DMA_Init+0x3c>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2100      	movs	r1, #0
 8000526:	203b      	movs	r0, #59	@ 0x3b
 8000528:	f001 fcb3 	bl	8001e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800052c:	203b      	movs	r0, #59	@ 0x3b
 800052e:	f001 fccc 	bl	8001eca <HAL_NVIC_EnableIRQ>

}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023800 	.word	0x40023800

08000540 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	@ 0x28
 8000544:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
 800055a:	4b33      	ldr	r3, [pc, #204]	@ (8000628 <MX_GPIO_Init+0xe8>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a32      	ldr	r2, [pc, #200]	@ (8000628 <MX_GPIO_Init+0xe8>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b30      	ldr	r3, [pc, #192]	@ (8000628 <MX_GPIO_Init+0xe8>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	4b2c      	ldr	r3, [pc, #176]	@ (8000628 <MX_GPIO_Init+0xe8>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	4a2b      	ldr	r2, [pc, #172]	@ (8000628 <MX_GPIO_Init+0xe8>)
 800057c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000580:	6313      	str	r3, [r2, #48]	@ 0x30
 8000582:	4b29      	ldr	r3, [pc, #164]	@ (8000628 <MX_GPIO_Init+0xe8>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	4b25      	ldr	r3, [pc, #148]	@ (8000628 <MX_GPIO_Init+0xe8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	4a24      	ldr	r2, [pc, #144]	@ (8000628 <MX_GPIO_Init+0xe8>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6313      	str	r3, [r2, #48]	@ 0x30
 800059e:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <MX_GPIO_Init+0xe8>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <MX_GPIO_Init+0xe8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000628 <MX_GPIO_Init+0xe8>)
 80005b4:	f043 0302 	orr.w	r3, r3, #2
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000628 <MX_GPIO_Init+0xe8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005cc:	4817      	ldr	r0, [pc, #92]	@ (800062c <MX_GPIO_Init+0xec>)
 80005ce:	f002 f98b 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(chip_select_GPIO_Port, chip_select_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2108      	movs	r1, #8
 80005d6:	4816      	ldr	r0, [pc, #88]	@ (8000630 <MX_GPIO_Init+0xf0>)
 80005d8:	f002 f986 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, register_select_Pin|reset_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2130      	movs	r1, #48	@ 0x30
 80005e0:	4813      	ldr	r0, [pc, #76]	@ (8000630 <MX_GPIO_Init+0xf0>)
 80005e2:	f002 f981 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	480b      	ldr	r0, [pc, #44]	@ (800062c <MX_GPIO_Init+0xec>)
 8000600:	f001 ffee 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : chip_select_Pin register_select_Pin reset_Pin */
  GPIO_InitStruct.Pin = chip_select_Pin|register_select_Pin|reset_Pin;
 8000604:	2338      	movs	r3, #56	@ 0x38
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_GPIO_Init+0xf0>)
 800061c:	f001 ffe0 	bl	80025e0 <HAL_GPIO_Init>

}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	@ 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40020800 	.word	0x40020800
 8000630:	40020400 	.word	0x40020400

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063a:	f001 fab9 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063e:	f000 f855 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f7ff ff7d 	bl	8000540 <MX_GPIO_Init>
  MX_DMA_Init();
 8000646:	f7ff ff5b 	bl	8000500 <MX_DMA_Init>
  MX_SPI1_Init();
 800064a:	f000 f8c1 	bl	80007d0 <MX_SPI1_Init>
  MX_TIM4_Init();
 800064e:	f000 fa4b 	bl	8000ae8 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000652:	f008 f95b 	bl	800890c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for (int i = 0; i < 5; i++) {
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	e014      	b.n	8000686 <main+0x52>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000662:	481f      	ldr	r0, [pc, #124]	@ (80006e0 <main+0xac>)
 8000664:	f002 f940 	bl	80028e8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	@ 0x64
 800066a:	f001 fb13 	bl	8001c94 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000674:	481a      	ldr	r0, [pc, #104]	@ (80006e0 <main+0xac>)
 8000676:	f002 f937 	bl	80028e8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800067a:	2064      	movs	r0, #100	@ 0x64
 800067c:	f001 fb0a 	bl	8001c94 <HAL_Delay>
  for (int i = 0; i < 5; i++) {
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3301      	adds	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b04      	cmp	r3, #4
 800068a:	dde7      	ble.n	800065c <main+0x28>
  }

  resetScreen();
 800068c:	f000 fce0 	bl	8001050 <resetScreen>
  initializeScreen();
 8000690:	f000 fcfc 	bl	800108c <initializeScreen>

  char *uga = "uga motorsports";
 8000694:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <main+0xb0>)
 8000696:	603b      	str	r3, [r7, #0]
  clearScreenfast(0xF100);
 8000698:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 800069c:	f000 fdf0 	bl	8001280 <clearScreenfast>
  drawString(uga, FREE_SANS_18PT7B, 240, 160, CENTER_OBJECT, 0x0000);
 80006a0:	2300      	movs	r3, #0
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	2302      	movs	r3, #2
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	23a0      	movs	r3, #160	@ 0xa0
 80006aa:	22f0      	movs	r2, #240	@ 0xf0
 80006ac:	490e      	ldr	r1, [pc, #56]	@ (80006e8 <main+0xb4>)
 80006ae:	6838      	ldr	r0, [r7, #0]
 80006b0:	f001 f837 	bl	8001722 <drawString>
  HAL_Delay(200);
 80006b4:	20c8      	movs	r0, #200	@ 0xc8
 80006b6:	f001 faed 	bl	8001c94 <HAL_Delay>
  clearScreenfast(0x0000);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 fde0 	bl	8001280 <clearScreenfast>
  while (1)
  {

	  clearScreenfast(0x0000);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 fddd 	bl	8001280 <clearScreenfast>
	  dootherstring();
 80006c6:	f001 f951 	bl	800196c <dootherstring>
	  HAL_Delay(10);
 80006ca:	200a      	movs	r0, #10
 80006cc:	f001 fae2 	bl	8001c94 <HAL_Delay>
	  clearScreenfast(0x0000);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 fdd5 	bl	8001280 <clearScreenfast>
	  dostring();
 80006d6:	f001 f8c3 	bl	8001860 <dostring>
	  clearScreenfast(0x0000);
 80006da:	bf00      	nop
 80006dc:	e7f0      	b.n	80006c0 <main+0x8c>
 80006de:	bf00      	nop
 80006e0:	40020800 	.word	0x40020800
 80006e4:	08009664 	.word	0x08009664
 80006e8:	0800aa54 	.word	0x0800aa54

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	@ 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	@ 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f008 fed4 	bl	80094a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <SystemClock_Config+0xd0>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a28      	ldr	r2, [pc, #160]	@ (80007bc <SystemClock_Config+0xd0>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <SystemClock_Config+0xd0>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b23      	ldr	r3, [pc, #140]	@ (80007c0 <SystemClock_Config+0xd4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000738:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <SystemClock_Config+0xd4>)
 800073a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <SystemClock_Config+0xd4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800075e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000760:	2319      	movs	r3, #25
 8000762:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000764:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000768:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800076a:	2304      	movs	r3, #4
 800076c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800076e:	2307      	movs	r3, #7
 8000770:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	4618      	mov	r0, r3
 8000778:	f003 fb22 	bl	8003dc0 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000782:	f000 f81f 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000796:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2102      	movs	r1, #2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 fd84 	bl	80042b0 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ae:	f000 f809 	bl	80007c4 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	@ 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <Error_Handler+0x8>

080007d0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007d4:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <MX_SPI1_Init+0x68>)
 80007d6:	4a19      	ldr	r2, [pc, #100]	@ (800083c <MX_SPI1_Init+0x6c>)
 80007d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_SPI1_Init+0x68>)
 80007dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <MX_SPI1_Init+0x68>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80007e8:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <MX_SPI1_Init+0x68>)
 80007ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f0:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_SPI1_Init+0x68>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <MX_SPI1_Init+0x68>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_SPI1_Init+0x68>)
 80007fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000802:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_SPI1_Init+0x68>)
 8000806:	2208      	movs	r2, #8
 8000808:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <MX_SPI1_Init+0x68>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_SPI1_Init+0x68>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <MX_SPI1_Init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_SPI1_Init+0x68>)
 800081e:	220a      	movs	r2, #10
 8000820:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_SPI1_Init+0x68>)
 8000824:	f003 fefc 	bl	8004620 <HAL_SPI_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800082e:	f7ff ffc9 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200001a4 	.word	0x200001a4
 800083c:	40013000 	.word	0x40013000

08000840 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	@ 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a31      	ldr	r2, [pc, #196]	@ (8000924 <HAL_SPI_MspInit+0xe4>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d15b      	bne.n	800091a <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b30      	ldr	r3, [pc, #192]	@ (8000928 <HAL_SPI_MspInit+0xe8>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086a:	4a2f      	ldr	r2, [pc, #188]	@ (8000928 <HAL_SPI_MspInit+0xe8>)
 800086c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000870:	6453      	str	r3, [r2, #68]	@ 0x44
 8000872:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <HAL_SPI_MspInit+0xe8>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000876:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b29      	ldr	r3, [pc, #164]	@ (8000928 <HAL_SPI_MspInit+0xe8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a28      	ldr	r2, [pc, #160]	@ (8000928 <HAL_SPI_MspInit+0xe8>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <HAL_SPI_MspInit+0xe8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800089a:	23a0      	movs	r3, #160	@ 0xa0
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008aa:	2305      	movs	r3, #5
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	481d      	ldr	r0, [pc, #116]	@ (800092c <HAL_SPI_MspInit+0xec>)
 80008b6:	f001 fe93 	bl	80025e0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <HAL_SPI_MspInit+0xf0>)
 80008bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000934 <HAL_SPI_MspInit+0xf4>)
 80008be:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <HAL_SPI_MspInit+0xf0>)
 80008c2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80008c6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008c8:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <HAL_SPI_MspInit+0xf0>)
 80008ca:	2240      	movs	r2, #64	@ 0x40
 80008cc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <HAL_SPI_MspInit+0xf0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008d4:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <HAL_SPI_MspInit+0xf0>)
 80008d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008da:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <HAL_SPI_MspInit+0xf0>)
 80008de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008e2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <HAL_SPI_MspInit+0xf0>)
 80008e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008ea:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80008ec:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <HAL_SPI_MspInit+0xf0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <HAL_SPI_MspInit+0xf0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <HAL_SPI_MspInit+0xf0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80008fe:	480c      	ldr	r0, [pc, #48]	@ (8000930 <HAL_SPI_MspInit+0xf0>)
 8000900:	f001 fafe 	bl	8001f00 <HAL_DMA_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800090a:	f7ff ff5b 	bl	80007c4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a07      	ldr	r2, [pc, #28]	@ (8000930 <HAL_SPI_MspInit+0xf0>)
 8000912:	649a      	str	r2, [r3, #72]	@ 0x48
 8000914:	4a06      	ldr	r2, [pc, #24]	@ (8000930 <HAL_SPI_MspInit+0xf0>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	@ 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40013000 	.word	0x40013000
 8000928:	40023800 	.word	0x40023800
 800092c:	40020000 	.word	0x40020000
 8000930:	200001fc 	.word	0x200001fc
 8000934:	40026458 	.word	0x40026458

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	4a0f      	ldr	r2, [pc, #60]	@ (8000984 <HAL_MspInit+0x4c>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094c:	6453      	str	r3, [r2, #68]	@ 0x44
 800094e:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <HAL_MspInit+0x4c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	@ 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <NMI_Handler+0x4>

08000990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <MemManage_Handler+0x4>

080009a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <UsageFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f001 f939 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80009ec:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <DMA2_Stream3_IRQHandler+0x10>)
 80009ee:	f001 fb8d 	bl	800210c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200001fc 	.word	0x200001fc

080009fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a00:	4802      	ldr	r0, [pc, #8]	@ (8000a0c <OTG_FS_IRQHandler+0x10>)
 8000a02:	f002 f8ce 	bl	8002ba2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000fa0 	.word	0x20000fa0

08000a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return 1;
 8000a14:	2301      	movs	r3, #1
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <_kill>:

int _kill(int pid, int sig)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a2a:	f008 fd99 	bl	8009560 <__errno>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2216      	movs	r2, #22
 8000a32:	601a      	str	r2, [r3, #0]
  return -1;
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <_exit>:

void _exit (int status)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ffe7 	bl	8000a20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a52:	bf00      	nop
 8000a54:	e7fd      	b.n	8000a52 <_exit+0x12>
	...

08000a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a60:	4a14      	ldr	r2, [pc, #80]	@ (8000ab4 <_sbrk+0x5c>)
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <_sbrk+0x60>)
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a6c:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <_sbrk+0x64>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	@ (8000ac0 <_sbrk+0x68>)
 8000a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d207      	bcs.n	8000a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a88:	f008 fd6a 	bl	8009560 <__errno>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a96:	e009      	b.n	8000aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a98:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a05      	ldr	r2, [pc, #20]	@ (8000abc <_sbrk+0x64>)
 8000aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20010000 	.word	0x20010000
 8000ab8:	00000400 	.word	0x00000400
 8000abc:	2000025c 	.word	0x2000025c
 8000ac0:	200017f0 	.word	0x200017f0

08000ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afc:	463b      	mov	r3, r7
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <MX_TIM4_Init+0x90>)
 8000b06:	4a1d      	ldr	r2, [pc, #116]	@ (8000b7c <MX_TIM4_Init+0x94>)
 8000b08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <MX_TIM4_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b10:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <MX_TIM4_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 8000b16:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <MX_TIM4_Init+0x90>)
 8000b18:	2269      	movs	r2, #105	@ 0x69
 8000b1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	@ (8000b78 <MX_TIM4_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <MX_TIM4_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b28:	4813      	ldr	r0, [pc, #76]	@ (8000b78 <MX_TIM4_Init+0x90>)
 8000b2a:	f004 f96b 	bl	8004e04 <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000b34:	f7ff fe46 	bl	80007c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <MX_TIM4_Init+0x90>)
 8000b46:	f004 f9ac 	bl	8004ea2 <HAL_TIM_ConfigClockSource>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000b50:	f7ff fe38 	bl	80007c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_TIM4_Init+0x90>)
 8000b62:	f004 fb8b 	bl	800527c <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000b6c:	f7ff fe2a 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000260 	.word	0x20000260
 8000b7c:	40000800 	.word	0x40000800

08000b80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000bbc <HAL_TIM_Base_MspInit+0x3c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d10d      	bne.n	8000bae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <HAL_TIM_Base_MspInit+0x40>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	4a09      	ldr	r2, [pc, #36]	@ (8000bc0 <HAL_TIM_Base_MspInit+0x40>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba2:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <HAL_TIM_Base_MspInit+0x40>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40000800 	.word	0x40000800
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <transmitdma>:

#include "dmatransmitter.h"

volatile uint8_t spidatasentflag = 0;

void transmitdma(SPI_HandleTypeDef *hspi, uint16_t* buffer1, uint16_t size) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	80fb      	strh	r3, [r7, #6]
	spidatasentflag = 0;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <transmitdma+0x28>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, (uint8_t*)buffer1, size);
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f003 feec 	bl	80049bc <HAL_SPI_Transmit_DMA>
}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200002a8 	.word	0x200002a8

08000bf0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <HAL_SPI_TxCpltCallback+0x24>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d102      	bne.n	8000c08 <HAL_SPI_TxCpltCallback+0x18>
		spidatasentflag = 1;
 8000c02:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <HAL_SPI_TxCpltCallback+0x28>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
	}
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40013000 	.word	0x40013000
 8000c18:	200002a8 	.word	0x200002a8

08000c1c <_ZN13DisplayObjectD1Ev>:
#include <stdint.h>
#include "rpiDisplayShapes.h"

class DisplayObject {
public:
	virtual ~DisplayObject() {};
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <_ZN13DisplayObjectD1Ev+0x1c>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	0800aaa4 	.word	0x0800aaa4

08000c3c <_ZN13DisplayObjectD0Ev>:
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ffe9 	bl	8000c1c <_ZN13DisplayObjectD1Ev>
 8000c4a:	210c      	movs	r1, #12
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f008 fb47 	bl	80092e0 <_ZdlPvj>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <_ZN13DisplayObject7getxposEv>:

void DisplayObject::redrawObject() {
	this->changed = 1;
}

uint16_t DisplayObject::getxpos() {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	return this->xpos;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	88db      	ldrh	r3, [r3, #6]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_ZN13DisplayObject7setxposEt>:

void DisplayObject::setxpos(uint16_t xpos) {
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
	this->xpos = xpos;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	887a      	ldrh	r2, [r7, #2]
 8000c84:	80da      	strh	r2, [r3, #6]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <_ZN13DisplayObject7getyposEv>:

uint16_t DisplayObject::getypos() {
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
	return this->ypos;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	891b      	ldrh	r3, [r3, #8]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_ZN13DisplayObject7setyposEt>:

void DisplayObject::setypos(uint16_t ypos) {
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	807b      	strh	r3, [r7, #2]
	this->ypos = ypos;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	887a      	ldrh	r2, [r7, #2]
 8000cba:	811a      	strh	r2, [r3, #8]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_ZN13DisplayObject11setpriorityEh>:

uint8_t DisplayObject::getpriority() {
	return this->priority;
}

void DisplayObject::setpriority(uint8_t priority) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	70fb      	strb	r3, [r7, #3]
	this->priority = priority;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	78fa      	ldrb	r2, [r7, #3]
 8000cd8:	711a      	strb	r2, [r3, #4]
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <_ZN13DisplayObjectC1Ev>:
class DisplayObject {
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <_ZN13DisplayObjectC1Ev+0x1c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	0800aaa4 	.word	0x0800aaa4

08000d08 <_ZN12StringObjectC1EtttPK7GFXfonthPch>:

/*
 * the following are StringObject method dofinitions
 */

StringObject::StringObject(uint16_t xpos, uint16_t ypos, uint16_t colorvalue, const GFXfont *font, uint8_t positioning, char* buffer, uint8_t priority) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	4608      	mov	r0, r1
 8000d12:	4611      	mov	r1, r2
 8000d14:	461a      	mov	r2, r3
 8000d16:	4603      	mov	r3, r0
 8000d18:	817b      	strh	r3, [r7, #10]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	813b      	strh	r3, [r7, #8]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	80fb      	strh	r3, [r7, #6]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ffdf 	bl	8000ce8 <_ZN13DisplayObjectC1Ev>
 8000d2a:	4a13      	ldr	r2, [pc, #76]	@ (8000d78 <_ZN12StringObjectC1EtttPK7GFXfonthPch+0x70>)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	601a      	str	r2, [r3, #0]
	this->buffer = buffer;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6a3a      	ldr	r2, [r7, #32]
 8000d34:	60da      	str	r2, [r3, #12]
	this->setxpos(xpos);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	897a      	ldrh	r2, [r7, #10]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff99 	bl	8000c74 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	893a      	ldrh	r2, [r7, #8]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ffae 	bl	8000caa <_ZN13DisplayObject7setyposEt>
	this->colorvalue = colorvalue;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	88fa      	ldrh	r2, [r7, #6]
 8000d52:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	7f3a      	ldrb	r2, [r7, #28]
 8000d58:	751a      	strb	r2, [r3, #20]
	this->font = font;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	611a      	str	r2, [r3, #16]
	this->setpriority(priority);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ffad 	bl	8000cc8 <_ZN13DisplayObject11setpriorityEh>
}
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	0800aa90 	.word	0x0800aa90

08000d7c <_ZN12StringObject19drawIntoFramebufferEPttt>:

uint16_t StringObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8000d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d80:	b08a      	sub	sp, #40	@ 0x28
 8000d82:	af06      	add	r7, sp, #24
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	4611      	mov	r1, r2
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	80fb      	strh	r3, [r7, #6]
 8000d90:	4613      	mov	r3, r2
 8000d92:	80bb      	strh	r3, [r7, #4]
	return drawStringIntoFramebuffer(this->buffer, font, this->colorvalue, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	68dc      	ldr	r4, [r3, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	691d      	ldr	r5, [r3, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	895e      	ldrh	r6, [r3, #10]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff5a 	bl	8000c5c <_ZN13DisplayObject7getxposEv>
 8000da8:	4603      	mov	r3, r0
 8000daa:	4698      	mov	r8, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff6f 	bl	8000c92 <_ZN13DisplayObject7getyposEv>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4619      	mov	r1, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	7d1b      	ldrb	r3, [r3, #20]
 8000dbc:	88ba      	ldrh	r2, [r7, #4]
 8000dbe:	9204      	str	r2, [sp, #16]
 8000dc0:	88fa      	ldrh	r2, [r7, #6]
 8000dc2:	9203      	str	r2, [sp, #12]
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	9202      	str	r2, [sp, #8]
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	9100      	str	r1, [sp, #0]
 8000dcc:	4643      	mov	r3, r8
 8000dce:	4632      	mov	r2, r6
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f000 fcf0 	bl	80017b8 <drawStringIntoFramebuffer>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000de4 <_ZN16FilledRectObjectC1Ettttth>:

/*
 * the following are all RectObject definitions
 */

FilledRectObject::FilledRectObject(uint16_t xpos, uint16_t ypos, uint16_t length, uint16_t height, uint16_t colorvalue, uint8_t priority) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	4608      	mov	r0, r1
 8000dee:	4611      	mov	r1, r2
 8000df0:	461a      	mov	r2, r3
 8000df2:	4603      	mov	r3, r0
 8000df4:	817b      	strh	r3, [r7, #10]
 8000df6:	460b      	mov	r3, r1
 8000df8:	813b      	strh	r3, [r7, #8]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	80fb      	strh	r3, [r7, #6]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff71 	bl	8000ce8 <_ZN13DisplayObjectC1Ev>
 8000e06:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <_ZN16FilledRectObjectC1Ettttth+0x6c>)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	601a      	str	r2, [r3, #0]
	this->setxpos(xpos);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	897a      	ldrh	r2, [r7, #10]
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff2e 	bl	8000c74 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	893a      	ldrh	r2, [r7, #8]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff43 	bl	8000caa <_ZN13DisplayObject7setyposEt>
	this->length = length;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	88fa      	ldrh	r2, [r7, #6]
 8000e28:	819a      	strh	r2, [r3, #12]
	this->height = height;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	8b3a      	ldrh	r2, [r7, #24]
 8000e2e:	81da      	strh	r2, [r3, #14]
	this->colorvalue = colorvalue;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	8bba      	ldrh	r2, [r7, #28]
 8000e34:	815a      	strh	r2, [r3, #10]
	this->setpriority(priority);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff42 	bl	8000cc8 <_ZN13DisplayObject11setpriorityEh>
}
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	0800aa7c 	.word	0x0800aa7c

08000e54 <_ZN16FilledRectObject19drawIntoFramebufferEPttt>:

uint16_t FilledRectObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af04      	add	r7, sp, #16
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	461a      	mov	r2, r3
 8000e62:	460b      	mov	r3, r1
 8000e64:	80fb      	strh	r3, [r7, #6]
 8000e66:	4613      	mov	r3, r2
 8000e68:	80bb      	strh	r3, [r7, #4]
	drawRectangleFilledIntoFramebuffer(this->getxpos(), this->getypos(), this->length, this->height, this->colorvalue, framebuffer, framewidth, xstart);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fef5 	bl	8000c5c <_ZN13DisplayObject7getxposEv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461c      	mov	r4, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff0a 	bl	8000c92 <_ZN13DisplayObject7getyposEv>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	461d      	mov	r5, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	8999      	ldrh	r1, [r3, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	89d8      	ldrh	r0, [r3, #14]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	895b      	ldrh	r3, [r3, #10]
 8000e8e:	88ba      	ldrh	r2, [r7, #4]
 8000e90:	9203      	str	r2, [sp, #12]
 8000e92:	88fa      	ldrh	r2, [r7, #6]
 8000e94:	9202      	str	r2, [sp, #8]
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	9201      	str	r2, [sp, #4]
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	460a      	mov	r2, r1
 8000ea0:	4629      	mov	r1, r5
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f000 fa80 	bl	80013a8 <drawRectangleFilledIntoFramebuffer>
	return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000eb4 <_ZN16FilledRectObjectD1Ev>:
	char* buffer;
	const GFXfont *font;
	uint8_t positioning;
};

class FilledRectObject : public DisplayObject {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <_ZN16FilledRectObjectD1Ev+0x20>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fea9 	bl	8000c1c <_ZN13DisplayObjectD1Ev>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	0800aa7c 	.word	0x0800aa7c

08000ed8 <_ZN16FilledRectObjectD0Ev>:
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ffe7 	bl	8000eb4 <_ZN16FilledRectObjectD1Ev>
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f008 f9f9 	bl	80092e0 <_ZdlPvj>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_ZN12StringObjectD1Ev>:
class StringObject : public DisplayObject {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <_ZN12StringObjectD1Ev+0x20>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fe87 	bl	8000c1c <_ZN13DisplayObjectD1Ev>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	0800aa90 	.word	0x0800aa90

08000f1c <_ZN12StringObjectD0Ev>:
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ffe7 	bl	8000ef8 <_ZN12StringObjectD1Ev>
 8000f2a:	2118      	movs	r1, #24
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f008 f9d7 	bl	80092e0 <_ZdlPvj>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <startTransaction>:
#include "gpio.h"
#include "spi.h"
#include "dmatransmitter.h"


void startTransaction() {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2108      	movs	r1, #8
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <startTransaction+0x14>)
 8000f46:	f001 fccf 	bl	80028e8 <HAL_GPIO_WritePin>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40020400 	.word	0x40020400

08000f54 <endTransaction>:

void endTransaction() {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2108      	movs	r1, #8
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <endTransaction+0x14>)
 8000f5e:	f001 fcc3 	bl	80028e8 <HAL_GPIO_WritePin>
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40020400 	.word	0x40020400

08000f6c <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	if (data) {
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d005      	beq.n	8000f88 <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2110      	movs	r1, #16
 8000f80:	4806      	ldr	r0, [pc, #24]	@ (8000f9c <dataOrRegister+0x30>)
 8000f82:	f001 fcb1 	bl	80028e8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8000f86:	e004      	b.n	8000f92 <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <dataOrRegister+0x30>)
 8000f8e:	f001 fcab 	bl	80028e8 <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8000fae:	f7ff ffc5 	bl	8000f3c <startTransaction>

	dataOrRegister(0);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff ffda 	bl	8000f6c <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8000fb8:	f107 010e 	add.w	r1, r7, #14
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	480a      	ldr	r0, [pc, #40]	@ (8000fec <commandAndData+0x4c>)
 8000fc2:	f003 fbb6 	bl	8004732 <HAL_SPI_Transmit>

	if (size) {
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d009      	beq.n	8000fe0 <commandAndData+0x40>
		dataOrRegister(1);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f7ff ffcd 	bl	8000f6c <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	4804      	ldr	r0, [pc, #16]	@ (8000fec <commandAndData+0x4c>)
 8000fdc:	f003 fba9 	bl	8004732 <HAL_SPI_Transmit>
	}

	endTransaction();
 8000fe0:	f7ff ffb8 	bl	8000f54 <endTransaction>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200001a4 	.word	0x200001a4

08000ff0 <startCommand>:

void startCommand(uint16_t command) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 8000ffa:	f7ff ff9f 	bl	8000f3c <startTransaction>
	dataOrRegister(0);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff ffb4 	bl	8000f6c <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8001004:	1db9      	adds	r1, r7, #6
 8001006:	230a      	movs	r3, #10
 8001008:	2201      	movs	r2, #1
 800100a:	4803      	ldr	r0, [pc, #12]	@ (8001018 <startCommand+0x28>)
 800100c:	f003 fb91 	bl	8004732 <HAL_SPI_Transmit>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200001a4 	.word	0x200001a4

0800101c <transmitSingleData>:
	for (int i = 0; i < count; i++) {
		HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
	}
}

void transmitSingleData(uint16_t data16) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
	dataOrRegister(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f7ff ffa0 	bl	8000f6c <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
 800102c:	1db9      	adds	r1, r7, #6
 800102e:	230a      	movs	r3, #10
 8001030:	2201      	movs	r2, #1
 8001032:	4803      	ldr	r0, [pc, #12]	@ (8001040 <transmitSingleData+0x24>)
 8001034:	f003 fb7d 	bl	8004732 <HAL_SPI_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200001a4 	.word	0x200001a4

08001044 <endCommand>:

void endCommand() {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	endTransaction();
 8001048:	f7ff ff84 	bl	8000f54 <endTransaction>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <resetScreen>:

void resetScreen() {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2120      	movs	r1, #32
 8001058:	480b      	ldr	r0, [pc, #44]	@ (8001088 <resetScreen+0x38>)
 800105a:	f001 fc45 	bl	80028e8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800105e:	2014      	movs	r0, #20
 8001060:	f000 fe18 	bl	8001c94 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2120      	movs	r1, #32
 8001068:	4807      	ldr	r0, [pc, #28]	@ (8001088 <resetScreen+0x38>)
 800106a:	f001 fc3d 	bl	80028e8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800106e:	2014      	movs	r0, #20
 8001070:	f000 fe10 	bl	8001c94 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	2120      	movs	r1, #32
 8001078:	4803      	ldr	r0, [pc, #12]	@ (8001088 <resetScreen+0x38>)
 800107a:	f001 fc35 	bl	80028e8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800107e:	2064      	movs	r0, #100	@ 0x64
 8001080:	f000 fe08 	bl	8001c94 <HAL_Delay>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40020400 	.word	0x40020400

0800108c <initializeScreen>:

void initializeScreen() {
 800108c:	b5b0      	push	{r4, r5, r7, lr}
 800108e:	b09c      	sub	sp, #112	@ 0x70
 8001090:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff ff82 	bl	8000fa0 <commandAndData>
	commandAndData(0x11, NULL, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	2011      	movs	r0, #17
 80010a2:	f7ff ff7d 	bl	8000fa0 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 80010a6:	2355      	movs	r3, #85	@ 0x55
 80010a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		commandAndData(0x3A, data, sizeof(data));
 80010ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010b0:	2202      	movs	r2, #2
 80010b2:	4619      	mov	r1, r3
 80010b4:	203a      	movs	r0, #58	@ 0x3a
 80010b6:	f7ff ff73 	bl	8000fa0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 80010ba:	4b47      	ldr	r3, [pc, #284]	@ (80011d8 <initializeScreen+0x14c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xC0, data, sizeof(data));
 80010c0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80010c4:	2204      	movs	r2, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	20c0      	movs	r0, #192	@ 0xc0
 80010ca:	f7ff ff69 	bl	8000fa0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 80010ce:	2345      	movs	r3, #69	@ 0x45
 80010d0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		commandAndData(0xC1, data, sizeof(data));
 80010da:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010de:	2204      	movs	r2, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	20c1      	movs	r0, #193	@ 0xc1
 80010e4:	f7ff ff5c 	bl	8000fa0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 80010e8:	2333      	movs	r3, #51	@ 0x33
 80010ea:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		commandAndData(0xC2, data, sizeof(data));
 80010ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010f2:	2202      	movs	r2, #2
 80010f4:	4619      	mov	r1, r3
 80010f6:	20c2      	movs	r0, #194	@ 0xc2
 80010f8:	f7ff ff52 	bl	8000fa0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8001102:	2328      	movs	r3, #40	@ 0x28
 8001104:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		commandAndData(0xC5, data, sizeof(data));
 8001108:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800110c:	2204      	movs	r2, #4
 800110e:	4619      	mov	r1, r3
 8001110:	20c5      	movs	r0, #197	@ 0xc5
 8001112:	f7ff ff45 	bl	8000fa0 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 8001116:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <initializeScreen+0x150>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	65bb      	str	r3, [r7, #88]	@ 0x58
		commandAndData(0xB1, data, sizeof(data));
 800111c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001120:	2204      	movs	r2, #4
 8001122:	4619      	mov	r1, r3
 8001124:	20b1      	movs	r0, #177	@ 0xb1
 8001126:	f7ff ff3b 	bl	8000fa0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 800112a:	2302      	movs	r3, #2
 800112c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		commandAndData(0xB4, data, sizeof(data));
 8001130:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001134:	2202      	movs	r2, #2
 8001136:	4619      	mov	r1, r3
 8001138:	20b4      	movs	r0, #180	@ 0xb4
 800113a:	f7ff ff31 	bl	8000fa0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 800113e:	4a28      	ldr	r2, [pc, #160]	@ (80011e0 <initializeScreen+0x154>)
 8001140:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001144:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001148:	6018      	str	r0, [r3, #0]
 800114a:	3304      	adds	r3, #4
 800114c:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 800114e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001152:	2206      	movs	r2, #6
 8001154:	4619      	mov	r1, r3
 8001156:	20b6      	movs	r0, #182	@ 0xb6
 8001158:	f7ff ff22 	bl	8000fa0 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 800115c:	4b21      	ldr	r3, [pc, #132]	@ (80011e4 <initializeScreen+0x158>)
 800115e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001162:	461d      	mov	r5, r3
 8001164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001168:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800116c:	c407      	stmia	r4!, {r0, r1, r2}
 800116e:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8001170:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001174:	221e      	movs	r2, #30
 8001176:	4619      	mov	r1, r3
 8001178:	20e0      	movs	r0, #224	@ 0xe0
 800117a:	f7ff ff11 	bl	8000fa0 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 800117e:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <initializeScreen+0x15c>)
 8001180:	f107 040c 	add.w	r4, r7, #12
 8001184:	461d      	mov	r5, r3
 8001186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800118e:	c407      	stmia	r4!, {r0, r1, r2}
 8001190:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	221e      	movs	r2, #30
 8001198:	4619      	mov	r1, r3
 800119a:	20e1      	movs	r0, #225	@ 0xe1
 800119c:	f7ff ff00 	bl	8000fa0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 80011a0:	2300      	movs	r3, #0
 80011a2:	813b      	strh	r3, [r7, #8]
 80011a4:	2322      	movs	r3, #34	@ 0x22
 80011a6:	817b      	strh	r3, [r7, #10]
		commandAndData(0xB6, data, sizeof(data));
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	2204      	movs	r2, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	20b6      	movs	r0, #182	@ 0xb6
 80011b2:	f7ff fef5 	bl	8000fa0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0088}; //CHANGE THIS TO FLIP SCREEN
 80011b6:	2388      	movs	r3, #136	@ 0x88
 80011b8:	80bb      	strh	r3, [r7, #4]
		commandAndData(0x36, data, sizeof(data));
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2202      	movs	r2, #2
 80011be:	4619      	mov	r1, r3
 80011c0:	2036      	movs	r0, #54	@ 0x36
 80011c2:	f7ff feed 	bl	8000fa0 <commandAndData>
	}
	clearScreenfast(0x0000);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 f85a 	bl	8001280 <clearScreenfast>
	displayOn();
 80011cc:	f000 f80e 	bl	80011ec <displayOn>
}
 80011d0:	bf00      	nop
 80011d2:	3770      	adds	r7, #112	@ 0x70
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bdb0      	pop	{r4, r5, r7, pc}
 80011d8:	08009674 	.word	0x08009674
 80011dc:	08009678 	.word	0x08009678
 80011e0:	0800967c 	.word	0x0800967c
 80011e4:	08009684 	.word	0x08009684
 80011e8:	080096a4 	.word	0x080096a4

080011ec <displayOn>:

void displayOn() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	commandAndData(0x29, NULL, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	2029      	movs	r0, #41	@ 0x29
 80011f6:	f7ff fed3 	bl	8000fa0 <commandAndData>
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}

080011fe <modifySpace>:
}

/**
 * x2 and y2 are included in the pixels, (ex: 0 to 8 includes 0 and 8 so this is 9 pixels)
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b087      	sub	sp, #28
 8001202:	af00      	add	r7, sp, #0
 8001204:	4604      	mov	r4, r0
 8001206:	4608      	mov	r0, r1
 8001208:	4611      	mov	r1, r2
 800120a:	461a      	mov	r2, r3
 800120c:	4623      	mov	r3, r4
 800120e:	80fb      	strh	r3, [r7, #6]
 8001210:	4603      	mov	r3, r0
 8001212:	80bb      	strh	r3, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0x00FF, y1 & 0x00FF, (y2 >> 8) & 0x00FF, y2 & 0x00FF};
 800121c:	88bb      	ldrh	r3, [r7, #4]
 800121e:	0a1b      	lsrs	r3, r3, #8
 8001220:	b29b      	uxth	r3, r3
 8001222:	823b      	strh	r3, [r7, #16]
 8001224:	88bb      	ldrh	r3, [r7, #4]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	b29b      	uxth	r3, r3
 800122a:	827b      	strh	r3, [r7, #18]
 800122c:	883b      	ldrh	r3, [r7, #0]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	b29b      	uxth	r3, r3
 8001232:	82bb      	strh	r3, [r7, #20]
 8001234:	883b      	ldrh	r3, [r7, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	b29b      	uxth	r3, r3
 800123a:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	2208      	movs	r2, #8
 8001242:	4619      	mov	r1, r3
 8001244:	202a      	movs	r0, #42	@ 0x2a
 8001246:	f7ff feab 	bl	8000fa0 <commandAndData>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0x00FF, x1 & 0x00FF, (x2 >> 8) & 0x00FF, x2 & 0x00FF};
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	b29b      	uxth	r3, r3
 8001250:	813b      	strh	r3, [r7, #8]
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	b29b      	uxth	r3, r3
 8001258:	817b      	strh	r3, [r7, #10]
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	b29b      	uxth	r3, r3
 8001260:	81bb      	strh	r3, [r7, #12]
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	b29b      	uxth	r3, r3
 8001268:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	2208      	movs	r2, #8
 8001270:	4619      	mov	r1, r3
 8001272:	202b      	movs	r0, #43	@ 0x2b
 8001274:	f7ff fe94 	bl	8000fa0 <commandAndData>
	}
}
 8001278:	bf00      	nop
 800127a:	371c      	adds	r7, #28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd90      	pop	{r4, r7, pc}

08001280 <clearScreenfast>:

void clearScreenfast(uint16_t color) {
 8001280:	b580      	push	{r7, lr}
 8001282:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	4602      	mov	r2, r0
 800128c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001290:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8001294:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[FRAMEBUFFER_SIZE];
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8001296:	2300      	movs	r3, #0
 8001298:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800129c:	f102 020c 	add.w	r2, r2, #12
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e01a      	b.n	80012da <clearScreenfast+0x5a>
		buffer1[i] = color;
 80012a4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80012a8:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 80012ac:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80012b0:	f102 020c 	add.w	r2, r2, #12
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 80012ba:	f6a1 010a 	subw	r1, r1, #2058	@ 0x80a
 80012be:	8809      	ldrh	r1, [r1, #0]
 80012c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 80012c4:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80012c8:	f103 030c 	add.w	r3, r3, #12
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80012d4:	f102 020c 	add.w	r2, r2, #12
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80012de:	f103 030c 	add.w	r3, r3, #12
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80012e8:	dbdc      	blt.n	80012a4 <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 80012ea:	f240 133f 	movw	r3, #319	@ 0x13f
 80012ee:	f240 12df 	movw	r2, #479	@ 0x1df
 80012f2:	2100      	movs	r1, #0
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff ff82 	bl	80011fe <modifySpace>
	startCommand(0x2C);
 80012fa:	202c      	movs	r0, #44	@ 0x2c
 80012fc:	f7ff fe78 	bl	8000ff0 <startCommand>
	dataOrRegister(1);
 8001300:	2001      	movs	r0, #1
 8001302:	f7ff fe33 	bl	8000f6c <dataOrRegister>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8001306:	2300      	movs	r3, #0
 8001308:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800130c:	f102 0208 	add.w	r2, r2, #8
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e019      	b.n	8001348 <clearScreenfast+0xc8>
		transmitdma(&hspi1, buffer1, FRAMEBUFFER_SIZE);
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	3b08      	subs	r3, #8
 800131a:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 800131e:	4619      	mov	r1, r3
 8001320:	4811      	ldr	r0, [pc, #68]	@ (8001368 <clearScreenfast+0xe8>)
 8001322:	f7ff fc4f 	bl	8000bc4 <transmitdma>
		while (!spidatasentflag) {}
 8001326:	bf00      	nop
 8001328:	4b10      	ldr	r3, [pc, #64]	@ (800136c <clearScreenfast+0xec>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0fa      	beq.n	8001328 <clearScreenfast+0xa8>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8001332:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001336:	f103 0308 	add.w	r3, r3, #8
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001342:	f102 0208 	add.w	r2, r2, #8
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800134c:	f103 0308 	add.w	r3, r3, #8
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b05      	cmp	r3, #5
 8001354:	ddde      	ble.n	8001314 <clearScreenfast+0x94>
	}
	endCommand();
 8001356:	f7ff fe75 	bl	8001044 <endCommand>
}
 800135a:	bf00      	nop
 800135c:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001a4 	.word	0x200001a4
 800136c:	200002a8 	.word	0x200002a8

08001370 <drawPoint>:

void drawVLine(uint16_t x1, uint16_t y1, uint16_t height, uint16_t color) {
	fillArea(x1, y1, 1, height, color);
}

void drawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
 800137a:	460b      	mov	r3, r1
 800137c:	80bb      	strh	r3, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	807b      	strh	r3, [r7, #2]
	modifySpace(x, y, x, y);
 8001382:	88bb      	ldrh	r3, [r7, #4]
 8001384:	88fa      	ldrh	r2, [r7, #6]
 8001386:	88b9      	ldrh	r1, [r7, #4]
 8001388:	88f8      	ldrh	r0, [r7, #6]
 800138a:	f7ff ff38 	bl	80011fe <modifySpace>
	startCommand(0x2C);
 800138e:	202c      	movs	r0, #44	@ 0x2c
 8001390:	f7ff fe2e 	bl	8000ff0 <startCommand>
	transmitSingleData(color);
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe40 	bl	800101c <transmitSingleData>
	endCommand();
 800139c:	f7ff fe52 	bl	8001044 <endCommand>

}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <drawRectangleFilledIntoFramebuffer>:

void drawRectangleFilled(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color) {
	fillArea(x1, y1, length, height, color);
}

void drawRectangleFilledIntoFramebuffer(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80013a8:	b490      	push	{r4, r7}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4604      	mov	r4, r0
 80013b0:	4608      	mov	r0, r1
 80013b2:	4611      	mov	r1, r2
 80013b4:	461a      	mov	r2, r3
 80013b6:	4623      	mov	r3, r4
 80013b8:	80fb      	strh	r3, [r7, #6]
 80013ba:	4603      	mov	r3, r0
 80013bc:	80bb      	strh	r3, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]
 80013c2:	4613      	mov	r3, r2
 80013c4:	803b      	strh	r3, [r7, #0]
	for (int x = x1; x < x1 + length; x++) {
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	e031      	b.n	8001430 <drawRectangleFilledIntoFramebuffer+0x88>
		for (int y = y1; y < y1 + height; y++) {
 80013cc:	88bb      	ldrh	r3, [r7, #4]
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	e025      	b.n	800141e <drawRectangleFilledIntoFramebuffer+0x76>
			if ((x >= xstart) & (x < (xstart + framewidth))) {
 80013d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	bfac      	ite	ge
 80013da:	2301      	movge	r3, #1
 80013dc:	2300      	movlt	r3, #0
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80013e2:	8c3b      	ldrh	r3, [r7, #32]
 80013e4:	440b      	add	r3, r1
 80013e6:	68f9      	ldr	r1, [r7, #12]
 80013e8:	4299      	cmp	r1, r3
 80013ea:	bfb4      	ite	lt
 80013ec:	2301      	movlt	r3, #1
 80013ee:	2300      	movge	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	4013      	ands	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00e      	beq.n	8001418 <drawRectangleFilledIntoFramebuffer+0x70>
				framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
 80013fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	1ad2      	subs	r2, r2, r3
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	019b      	lsls	r3, r3, #6
 8001408:	461a      	mov	r2, r3
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	4413      	add	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	4413      	add	r3, r2
 8001414:	8b3a      	ldrh	r2, [r7, #24]
 8001416:	801a      	strh	r2, [r3, #0]
		for (int y = y1; y < y1 + height; y++) {
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3301      	adds	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	88ba      	ldrh	r2, [r7, #4]
 8001420:	883b      	ldrh	r3, [r7, #0]
 8001422:	4413      	add	r3, r2
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	429a      	cmp	r2, r3
 8001428:	dbd3      	blt.n	80013d2 <drawRectangleFilledIntoFramebuffer+0x2a>
	for (int x = x1; x < x1 + length; x++) {
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3301      	adds	r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	88fa      	ldrh	r2, [r7, #6]
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	4413      	add	r3, r2
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	dbc7      	blt.n	80013cc <drawRectangleFilledIntoFramebuffer+0x24>
			}
		}
	}
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bc90      	pop	{r4, r7}
 8001446:	4770      	bx	lr

08001448 <getStringCenter>:
			}
		}
	}
}

void getStringCenter(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	@ 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 800145e:	e012      	b.n	8001486 <getStringCenter+0x3e>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800146c:	3b20      	subs	r3, #32
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4413      	add	r3, r2
 8001472:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	791b      	ldrb	r3, [r3, #4]
 8001478:	461a      	mov	r2, r3
 800147a:	8b7b      	ldrh	r3, [r7, #26]
 800147c:	4413      	add	r3, r2
 800147e:	837b      	strh	r3, [r7, #26]
		currentletter++;
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	3301      	adds	r3, #1
 8001484:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1e8      	bne.n	8001460 <getStringCenter+0x18>
	}
	*currentx -= totallength / 2;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	881a      	ldrh	r2, [r3, #0]
 8001492:	8b7b      	ldrh	r3, [r7, #26]
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	b29b      	uxth	r3, r3
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	b29a      	uxth	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 80014a0:	bf00      	nop
 80014a2:	3724      	adds	r7, #36	@ 0x24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <drawChar>:

uint16_t drawChar(char letter, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t positioning, uint16_t color) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	4611      	mov	r1, r2
 80014b6:	461a      	mov	r2, r3
 80014b8:	4603      	mov	r3, r0
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	460b      	mov	r3, r1
 80014be:	81bb      	strh	r3, [r7, #12]
 80014c0:	4613      	mov	r3, r2
 80014c2:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80014ce:	3b20      	subs	r3, #32
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4413      	add	r3, r2
 80014d4:	61fb      	str	r3, [r7, #28]
	int16_t width = toDraw->width, height = toDraw->height;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	789b      	ldrb	r3, [r3, #2]
 80014da:	837b      	strh	r3, [r7, #26]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	78db      	ldrb	r3, [r3, #3]
 80014e0:	833b      	strh	r3, [r7, #24]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	795b      	ldrb	r3, [r3, #5]
 80014e6:	75fb      	strb	r3, [r7, #23]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	799b      	ldrb	r3, [r3, #6]
 80014ec:	75bb      	strb	r3, [r7, #22]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	791b      	ldrb	r3, [r3, #4]
 80014f2:	757b      	strb	r3, [r7, #21]
	uint8_t *bitlist = font->bitmap;
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	613b      	str	r3, [r7, #16]
	uint16_t bo = toDraw->bitmapOffset;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t bits = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t bit = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	for (int16_t yy = 0; yy < height; yy++) {
 800150c:	2300      	movs	r3, #0
 800150e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001510:	e04a      	b.n	80015a8 <drawChar+0xfc>
		for (int16_t xx = 0; xx < width; xx++) {
 8001512:	2300      	movs	r3, #0
 8001514:	843b      	strh	r3, [r7, #32]
 8001516:	e03b      	b.n	8001590 <drawChar+0xe4>
			if (!(bit++ & 7)) {
 8001518:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	2b00      	cmp	r3, #0
 8001528:	d108      	bne.n	800153c <drawChar+0x90>
				bits = bitlist[bo++];
 800152a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8001530:	461a      	mov	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4413      	add	r3, r2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			}
			if (bits & 0b10000000) {
 800153c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8001540:	2b00      	cmp	r3, #0
 8001542:	da1a      	bge.n	800157a <drawChar+0xce>
				drawPoint((uint16_t)((int16_t)xpos + xadv - xo - xx), (uint16_t)((int16_t)ypos - yy - yo), color);
 8001544:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001548:	b29a      	uxth	r2, r3
 800154a:	89bb      	ldrh	r3, [r7, #12]
 800154c:	4413      	add	r3, r2
 800154e:	b29a      	uxth	r2, r3
 8001550:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001554:	b29b      	uxth	r3, r3
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	b29a      	uxth	r2, r3
 800155a:	8c3b      	ldrh	r3, [r7, #32]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b298      	uxth	r0, r3
 8001560:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001562:	88fa      	ldrh	r2, [r7, #6]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	b29a      	uxth	r2, r3
 8001568:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800156c:	b29b      	uxth	r3, r3
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	b29b      	uxth	r3, r3
 8001572:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fefb 	bl	8001370 <drawPoint>
			}
			bits <<= 1;
 800157a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		for (int16_t xx = 0; xx < width; xx++) {
 8001584:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001588:	b29b      	uxth	r3, r3
 800158a:	3301      	adds	r3, #1
 800158c:	b29b      	uxth	r3, r3
 800158e:	843b      	strh	r3, [r7, #32]
 8001590:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001594:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbbd      	blt.n	8001518 <drawChar+0x6c>
	for (int16_t yy = 0; yy < height; yy++) {
 800159c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80015a8:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80015ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbae      	blt.n	8001512 <drawChar+0x66>
		}
	}

	return (uint16_t)xadv;
 80015b4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80015b8:	b29b      	uxth	r3, r3
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3728      	adds	r7, #40	@ 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <drawCharIntoFramebuffer>:

uint16_t drawCharIntoFramebuffer(char letter, const GFXfont *font, uint16_t color, uint16_t xpos, uint16_t ypos, uint8_t positioning,
		uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80015c2:	b480      	push	{r7}
 80015c4:	b08d      	sub	sp, #52	@ 0x34
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	460b      	mov	r3, r1
 80015d4:	81bb      	strh	r3, [r7, #12]
 80015d6:	4613      	mov	r3, r2
 80015d8:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80015e4:	3b20      	subs	r3, #32
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4413      	add	r3, r2
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
	int16_t width = toDraw->width, height = toDraw->height;
 80015ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ee:	789b      	ldrb	r3, [r3, #2]
 80015f0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	78db      	ldrb	r3, [r3, #3]
 80015f6:	843b      	strh	r3, [r7, #32]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	795b      	ldrb	r3, [r3, #5]
 80015fc:	77fb      	strb	r3, [r7, #31]
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	799b      	ldrb	r3, [r3, #6]
 8001602:	77bb      	strb	r3, [r7, #30]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 8001604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001606:	791b      	ldrb	r3, [r3, #4]
 8001608:	777b      	strb	r3, [r7, #29]
	uint8_t *bitlist = font->bitmap;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	61bb      	str	r3, [r7, #24]
	uint16_t bo = toDraw->bitmapOffset;
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t bits = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t bit = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	for (int16_t yy = 0; yy < height; yy++) {
 8001622:	2300      	movs	r3, #0
 8001624:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001626:	e06d      	b.n	8001704 <drawCharIntoFramebuffer+0x142>
		for (int16_t xx = 0; xx < width; xx++) {
 8001628:	2300      	movs	r3, #0
 800162a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800162c:	e05e      	b.n	80016ec <drawCharIntoFramebuffer+0x12a>
			if (!(bit++ & 7)) {
 800162e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	f887 202c 	strb.w	r2, [r7, #44]	@ 0x2c
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	2b00      	cmp	r3, #0
 800163e:	d108      	bne.n	8001652 <drawCharIntoFramebuffer+0x90>
				bits = bitlist[bo++];
 8001640:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8001646:	461a      	mov	r2, r3
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			}
			if (bits & 0b10000000) {
 8001652:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8001656:	2b00      	cmp	r3, #0
 8001658:	da3d      	bge.n	80016d6 <drawCharIntoFramebuffer+0x114>
				uint16_t pointx = (uint16_t)((int16_t)xpos + xadv - xo - xx);
 800165a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800165e:	b29a      	uxth	r2, r3
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	4413      	add	r3, r2
 8001664:	b29a      	uxth	r2, r3
 8001666:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800166a:	b29b      	uxth	r3, r3
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	b29a      	uxth	r2, r3
 8001670:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	82fb      	strh	r3, [r7, #22]
				uint16_t pointy = (uint16_t)((int16_t)ypos - yy - yo);
 8001676:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001678:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	b29a      	uxth	r2, r3
 800167e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001682:	b29b      	uxth	r3, r3
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	82bb      	strh	r3, [r7, #20]
				if ((pointx >= xstart) & (pointx < (xstart + framewidth))) {
 8001688:	8afa      	ldrh	r2, [r7, #22]
 800168a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800168e:	429a      	cmp	r2, r3
 8001690:	bf2c      	ite	cs
 8001692:	2301      	movcs	r3, #1
 8001694:	2300      	movcc	r3, #0
 8001696:	b2da      	uxtb	r2, r3
 8001698:	8af9      	ldrh	r1, [r7, #22]
 800169a:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 800169e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80016a2:	4403      	add	r3, r0
 80016a4:	4299      	cmp	r1, r3
 80016a6:	bfb4      	ite	lt
 80016a8:	2301      	movlt	r3, #1
 80016aa:	2300      	movge	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4013      	ands	r3, r2
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00f      	beq.n	80016d6 <drawCharIntoFramebuffer+0x114>
					framebuffer[(pointx - xstart) * SCREEN_HEIGHT + pointy] = color;
 80016b6:	8afa      	ldrh	r2, [r7, #22]
 80016b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80016bc:	1ad2      	subs	r2, r2, r3
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	019b      	lsls	r3, r3, #6
 80016c6:	461a      	mov	r2, r3
 80016c8:	8abb      	ldrh	r3, [r7, #20]
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016d0:	4413      	add	r3, r2
 80016d2:	89ba      	ldrh	r2, [r7, #12]
 80016d4:	801a      	strh	r2, [r3, #0]
				}
			}
			bits <<= 1;
 80016d6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		for (int16_t xx = 0; xx < width; xx++) {
 80016e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	3301      	adds	r3, #1
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	853b      	strh	r3, [r7, #40]	@ 0x28
 80016ec:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 80016f0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80016f4:	429a      	cmp	r2, r3
 80016f6:	db9a      	blt.n	800162e <drawCharIntoFramebuffer+0x6c>
	for (int16_t yy = 0; yy < height; yy++) {
 80016f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	b29b      	uxth	r3, r3
 8001702:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001704:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8001708:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800170c:	429a      	cmp	r2, r3
 800170e:	db8b      	blt.n	8001628 <drawCharIntoFramebuffer+0x66>
		}
	}

	return (uint16_t)xadv;
 8001710:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001714:	b29b      	uxth	r3, r3
}
 8001716:	4618      	mov	r0, r3
 8001718:	3734      	adds	r7, #52	@ 0x34
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <drawString>:

uint8_t drawString(char *buffer, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t positioning, uint16_t color) {
 8001722:	b580      	push	{r7, lr}
 8001724:	b088      	sub	sp, #32
 8001726:	af02      	add	r7, sp, #8
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	4611      	mov	r1, r2
 800172e:	461a      	mov	r2, r3
 8001730:	460b      	mov	r3, r1
 8001732:	80fb      	strh	r3, [r7, #6]
 8001734:	4613      	mov	r3, r2
 8001736:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 8001738:	f897 3020 	ldrb.w	r3, [r7, #32]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <drawString+0x2e>
		getStringCenter(&xpos, &ypos, buffer, font);
 8001744:	1d39      	adds	r1, r7, #4
 8001746:	1db8      	adds	r0, r7, #6
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	f7ff fe7c 	bl	8001448 <getStringCenter>
	}
	uint16_t xAdvance = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	82fb      	strh	r3, [r7, #22]
	uint16_t buffersize = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	82bb      	strh	r3, [r7, #20]
	while (buffer[++buffersize]) {};
 8001758:	bf00      	nop
 800175a:	8abb      	ldrh	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	82bb      	strh	r3, [r7, #20]
 8001760:	8abb      	ldrh	r3, [r7, #20]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4413      	add	r3, r2
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f6      	bne.n	800175a <drawString+0x38>
	for (int i = buffersize - 1; i >= 0; i--) {
 800176c:	8abb      	ldrh	r3, [r7, #20]
 800176e:	3b01      	subs	r3, #1
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	e018      	b.n	80017a6 <drawString+0x84>
		xAdvance += drawChar(buffer[i], font, xpos + xAdvance, ypos, NO_CENTER_OBJECT, color);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	7818      	ldrb	r0, [r3, #0]
 800177c:	88fa      	ldrh	r2, [r7, #6]
 800177e:	8afb      	ldrh	r3, [r7, #22]
 8001780:	4413      	add	r3, r2
 8001782:	b29a      	uxth	r2, r3
 8001784:	88b9      	ldrh	r1, [r7, #4]
 8001786:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	2300      	movs	r3, #0
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	460b      	mov	r3, r1
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	f7ff fe8b 	bl	80014ac <drawChar>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	8afb      	ldrh	r3, [r7, #22]
 800179c:	4413      	add	r3, r2
 800179e:	82fb      	strh	r3, [r7, #22]
	for (int i = buffersize - 1; i >= 0; i--) {
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dae3      	bge.n	8001774 <drawString+0x52>
	}
	return font->yAdvance;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	7b1b      	ldrb	r3, [r3, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <drawStringIntoFramebuffer>:

uint16_t drawStringIntoFramebuffer(char* buffer, const GFXfont *font, uint16_t color, uint16_t stringxpos, uint16_t stringypos,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b08d      	sub	sp, #52	@ 0x34
 80017bc:	af06      	add	r7, sp, #24
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	4611      	mov	r1, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	460b      	mov	r3, r1
 80017c8:	80fb      	strh	r3, [r7, #6]
 80017ca:	4613      	mov	r3, r2
 80017cc:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 80017ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d006      	beq.n	80017e8 <drawStringIntoFramebuffer+0x30>
		getStringCenter(&stringxpos, &stringypos, buffer, font);
 80017da:	1d38      	adds	r0, r7, #4
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80017e4:	f7ff fe30 	bl	8001448 <getStringCenter>
	}
	uint16_t xAdvance = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	82fb      	strh	r3, [r7, #22]
	uint16_t buffersize = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	82bb      	strh	r3, [r7, #20]
	while (buffer[++buffersize]) {};
 80017f0:	bf00      	nop
 80017f2:	8abb      	ldrh	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	82bb      	strh	r3, [r7, #20]
 80017f8:	8abb      	ldrh	r3, [r7, #20]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f6      	bne.n	80017f2 <drawStringIntoFramebuffer+0x3a>
	for (int i = buffersize - 1; i >= 0; i--) {
 8001804:	8abb      	ldrh	r3, [r7, #20]
 8001806:	3b01      	subs	r3, #1
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	e01f      	b.n	800184c <drawStringIntoFramebuffer+0x94>
		xAdvance += drawCharIntoFramebuffer(buffer[i], font, color, stringxpos + xAdvance, stringypos, NO_CENTER_OBJECT, framebuffer, framewidth, xstart);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4413      	add	r3, r2
 8001812:	7818      	ldrb	r0, [r3, #0]
 8001814:	88ba      	ldrh	r2, [r7, #4]
 8001816:	8afb      	ldrh	r3, [r7, #22]
 8001818:	4413      	add	r3, r2
 800181a:	b29c      	uxth	r4, r3
 800181c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800181e:	88f9      	ldrh	r1, [r7, #6]
 8001820:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001822:	9204      	str	r2, [sp, #16]
 8001824:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001826:	9203      	str	r2, [sp, #12]
 8001828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800182a:	9202      	str	r2, [sp, #8]
 800182c:	2200      	movs	r2, #0
 800182e:	9201      	str	r2, [sp, #4]
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	4623      	mov	r3, r4
 8001834:	460a      	mov	r2, r1
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	f7ff fec3 	bl	80015c2 <drawCharIntoFramebuffer>
 800183c:	4603      	mov	r3, r0
 800183e:	461a      	mov	r2, r3
 8001840:	8afb      	ldrh	r3, [r7, #22]
 8001842:	4413      	add	r3, r2
 8001844:	82fb      	strh	r3, [r7, #22]
	for (int i = buffersize - 1; i >= 0; i--) {
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	3b01      	subs	r3, #1
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	2b00      	cmp	r3, #0
 8001850:	dadc      	bge.n	800180c <drawStringIntoFramebuffer+0x54>
	}
	return font->yAdvance;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	7b1b      	ldrb	r3, [r3, #12]
}
 8001856:	4618      	mov	r0, r3
 8001858:	371c      	adds	r7, #28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd90      	pop	{r4, r7, pc}
	...

08001860 <dostring>:
#include "FreeMonoBold24pt7b.h"
#include "dmatransmitter.h"

char buffer[18] = "hello hello hello";
DisplayObject* objects[2] = { new FilledRectObject(30, 30, 50, 50, 0xF000, 2), new StringObject(240, 160, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, buffer, 3) };
void dostring() {
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
	modifySpace(0, 0, SCREEN_WIDTH - 1, SCREEN_HEIGHT - 1);
 800186a:	f240 133f 	movw	r3, #319	@ 0x13f
 800186e:	f240 12df 	movw	r2, #479	@ 0x1df
 8001872:	2100      	movs	r1, #0
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff fcc2 	bl	80011fe <modifySpace>
	startCommand(WRITE_COMMAND);
 800187a:	202c      	movs	r0, #44	@ 0x2c
 800187c:	f7ff fbb8 	bl	8000ff0 <startCommand>
	dataOrRegister(1);
 8001880:	2001      	movs	r0, #1
 8001882:	f7ff fb73 	bl	8000f6c <dataOrRegister>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8001886:	2300      	movs	r3, #0
 8001888:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800188c:	f102 0204 	add.w	r2, r2, #4
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e055      	b.n	8001940 <dostring+0xe0>
		uint16_t buffer[FRAMEBUFFER_SIZE] = { 0 };
 8001894:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001898:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 800189c:	4618      	mov	r0, r3
 800189e:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80018a2:	461a      	mov	r2, r3
 80018a4:	2100      	movs	r1, #0
 80018a6:	f007 fdff 	bl	80094a8 <memset>
		const int startx = i * FRAMEBUFFER_WIDTH;
 80018aa:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80018ae:	f103 0304 	add.w	r3, r3, #4
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80018c0:	6013      	str	r3, [r2, #0]
		objects[1]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 80018c2:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <dostring+0x100>)
 80018c4:	6858      	ldr	r0, [r3, #4]
 80018c6:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <dostring+0x100>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	3308      	adds	r3, #8
 80018ce:	681c      	ldr	r4, [r3, #0]
 80018d0:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	f107 0108 	add.w	r1, r7, #8
 80018dc:	3908      	subs	r1, #8
 80018de:	2250      	movs	r2, #80	@ 0x50
 80018e0:	47a0      	blx	r4
		objects[0]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 80018e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <dostring+0x100>)
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <dostring+0x100>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3308      	adds	r3, #8
 80018ee:	681c      	ldr	r4, [r3, #0]
 80018f0:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	f107 0108 	add.w	r1, r7, #8
 80018fc:	3908      	subs	r1, #8
 80018fe:	2250      	movs	r2, #80	@ 0x50
 8001900:	47a0      	blx	r4
		transmitdma(&hspi1, buffer, FRAMEBUFFER_SIZE);
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	3b08      	subs	r3, #8
 8001908:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 800190c:	4619      	mov	r1, r3
 800190e:	4815      	ldr	r0, [pc, #84]	@ (8001964 <dostring+0x104>)
 8001910:	f7ff f958 	bl	8000bc4 <transmitdma>
		while(!spidatasentflag) {}
 8001914:	bf00      	nop
 8001916:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <dostring+0x108>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf0c      	ite	eq
 8001920:	2301      	moveq	r3, #1
 8001922:	2300      	movne	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f5      	bne.n	8001916 <dostring+0xb6>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 800192a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800192e:	f103 0304 	add.w	r3, r3, #4
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3301      	adds	r3, #1
 8001936:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800193a:	f102 0204 	add.w	r2, r2, #4
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001944:	f103 0304 	add.w	r3, r3, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b05      	cmp	r3, #5
 800194c:	dda2      	ble.n	8001894 <dostring+0x34>
	}
	endCommand();
 800194e:	f7ff fb79 	bl	8001044 <endCommand>
}
 8001952:	bf00      	nop
 8001954:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bd90      	pop	{r4, r7, pc}
 800195e:	bf00      	nop
 8001960:	200002ac 	.word	0x200002ac
 8001964:	200001a4 	.word	0x200001a4
 8001968:	200002a8 	.word	0x200002a8

0800196c <dootherstring>:

char rpmresult[17] = "not recieved rpm";
char tempresult[18] = "not recieved temp";
DisplayObject* otherobjects[2] = { new StringObject(240, 160, 0xFFFF, FREE_MONO_BOLD_24PT7B, CENTER_OBJECT, rpmresult, 1), new StringObject(240, 100, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, tempresult, 3) };
void dootherstring() {
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
	modifySpace(0, 0, SCREEN_WIDTH - 1, SCREEN_HEIGHT - 1);
 8001976:	f240 133f 	movw	r3, #319	@ 0x13f
 800197a:	f240 12df 	movw	r2, #479	@ 0x1df
 800197e:	2100      	movs	r1, #0
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff fc3c 	bl	80011fe <modifySpace>
	startCommand(WRITE_COMMAND);
 8001986:	202c      	movs	r0, #44	@ 0x2c
 8001988:	f7ff fb32 	bl	8000ff0 <startCommand>
	dataOrRegister(1);
 800198c:	2001      	movs	r0, #1
 800198e:	f7ff faed 	bl	8000f6c <dataOrRegister>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8001992:	2300      	movs	r3, #0
 8001994:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001998:	f102 0204 	add.w	r2, r2, #4
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e055      	b.n	8001a4c <dootherstring+0xe0>
		uint16_t buffer[FRAMEBUFFER_SIZE] = { 0 };
 80019a0:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 80019a4:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 80019a8:	4618      	mov	r0, r3
 80019aa:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80019ae:	461a      	mov	r2, r3
 80019b0:	2100      	movs	r1, #0
 80019b2:	f007 fd79 	bl	80094a8 <memset>
		const int startx = i * FRAMEBUFFER_WIDTH;
 80019b6:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80019ba:	f103 0304 	add.w	r3, r3, #4
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80019cc:	6013      	str	r3, [r2, #0]
		otherobjects[1]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 80019ce:	4b27      	ldr	r3, [pc, #156]	@ (8001a6c <dootherstring+0x100>)
 80019d0:	6858      	ldr	r0, [r3, #4]
 80019d2:	4b26      	ldr	r3, [pc, #152]	@ (8001a6c <dootherstring+0x100>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3308      	adds	r3, #8
 80019da:	681c      	ldr	r4, [r3, #0]
 80019dc:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	f107 0108 	add.w	r1, r7, #8
 80019e8:	3908      	subs	r1, #8
 80019ea:	2250      	movs	r2, #80	@ 0x50
 80019ec:	47a0      	blx	r4
		otherobjects[0]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 80019ee:	4b1f      	ldr	r3, [pc, #124]	@ (8001a6c <dootherstring+0x100>)
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a6c <dootherstring+0x100>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3308      	adds	r3, #8
 80019fa:	681c      	ldr	r4, [r3, #0]
 80019fc:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f107 0108 	add.w	r1, r7, #8
 8001a08:	3908      	subs	r1, #8
 8001a0a:	2250      	movs	r2, #80	@ 0x50
 8001a0c:	47a0      	blx	r4
		transmitdma(&hspi1, buffer, FRAMEBUFFER_SIZE);
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	3b08      	subs	r3, #8
 8001a14:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4815      	ldr	r0, [pc, #84]	@ (8001a70 <dootherstring+0x104>)
 8001a1c:	f7ff f8d2 	bl	8000bc4 <transmitdma>
		while(!spidatasentflag) {}
 8001a20:	bf00      	nop
 8001a22:	4b14      	ldr	r3, [pc, #80]	@ (8001a74 <dootherstring+0x108>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f5      	bne.n	8001a22 <dootherstring+0xb6>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8001a36:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001a3a:	f103 0304 	add.w	r3, r3, #4
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001a46:	f102 0204 	add.w	r2, r2, #4
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001a50:	f103 0304 	add.w	r3, r3, #4
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	dda2      	ble.n	80019a0 <dootherstring+0x34>
	}
	endCommand();
 8001a5a:	f7ff faf3 	bl	8001044 <endCommand>
}
 8001a5e:	bf00      	nop
 8001a60:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200002b4 	.word	0x200002b4
 8001a70:	200001a4 	.word	0x200001a4
 8001a74:	200002a8 	.word	0x200002a8

08001a78 <_Z41__static_initialization_and_destruction_0v>:
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af04      	add	r7, sp, #16
DisplayObject* objects[2] = { new FilledRectObject(30, 30, 50, 50, 0xF000, 2), new StringObject(240, 160, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, buffer, 3) };
 8001a7e:	2010      	movs	r0, #16
 8001a80:	f007 fc30 	bl	80092e4 <_Znwj>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461c      	mov	r4, r3
 8001a88:	2302      	movs	r3, #2
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	2332      	movs	r3, #50	@ 0x32
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2332      	movs	r3, #50	@ 0x32
 8001a98:	221e      	movs	r2, #30
 8001a9a:	211e      	movs	r1, #30
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	f7ff f9a1 	bl	8000de4 <_ZN16FilledRectObjectC1Ettttth>
 8001aa2:	4b24      	ldr	r3, [pc, #144]	@ (8001b34 <_Z41__static_initialization_and_destruction_0v+0xbc>)
 8001aa4:	601c      	str	r4, [r3, #0]
 8001aa6:	2018      	movs	r0, #24
 8001aa8:	f007 fc1c 	bl	80092e4 <_Znwj>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461c      	mov	r4, r3
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	9303      	str	r3, [sp, #12]
 8001ab4:	4b20      	ldr	r3, [pc, #128]	@ (8001b38 <_Z41__static_initialization_and_destruction_0v+0xc0>)
 8001ab6:	9302      	str	r3, [sp, #8]
 8001ab8:	2302      	movs	r3, #2
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b3c <_Z41__static_initialization_and_destruction_0v+0xc4>)
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ac4:	22a0      	movs	r2, #160	@ 0xa0
 8001ac6:	21f0      	movs	r1, #240	@ 0xf0
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f7ff f91d 	bl	8000d08 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
 8001ace:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <_Z41__static_initialization_and_destruction_0v+0xbc>)
 8001ad0:	605c      	str	r4, [r3, #4]
DisplayObject* otherobjects[2] = { new StringObject(240, 160, 0xFFFF, FREE_MONO_BOLD_24PT7B, CENTER_OBJECT, rpmresult, 1), new StringObject(240, 100, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, tempresult, 3) };
 8001ad2:	2018      	movs	r0, #24
 8001ad4:	f007 fc06 	bl	80092e4 <_Znwj>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461c      	mov	r4, r3
 8001adc:	2301      	movs	r3, #1
 8001ade:	9303      	str	r3, [sp, #12]
 8001ae0:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <_Z41__static_initialization_and_destruction_0v+0xc8>)
 8001ae2:	9302      	str	r3, [sp, #8]
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <_Z41__static_initialization_and_destruction_0v+0xcc>)
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001af0:	22a0      	movs	r2, #160	@ 0xa0
 8001af2:	21f0      	movs	r1, #240	@ 0xf0
 8001af4:	4620      	mov	r0, r4
 8001af6:	f7ff f907 	bl	8000d08 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
 8001afa:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <_Z41__static_initialization_and_destruction_0v+0xd0>)
 8001afc:	601c      	str	r4, [r3, #0]
 8001afe:	2018      	movs	r0, #24
 8001b00:	f007 fbf0 	bl	80092e4 <_Znwj>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461c      	mov	r4, r3
 8001b08:	2303      	movs	r3, #3
 8001b0a:	9303      	str	r3, [sp, #12]
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <_Z41__static_initialization_and_destruction_0v+0xd4>)
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	2302      	movs	r3, #2
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <_Z41__static_initialization_and_destruction_0v+0xc4>)
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b1c:	2264      	movs	r2, #100	@ 0x64
 8001b1e:	21f0      	movs	r1, #240	@ 0xf0
 8001b20:	4620      	mov	r0, r4
 8001b22:	f7ff f8f1 	bl	8000d08 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
 8001b26:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <_Z41__static_initialization_and_destruction_0v+0xd0>)
 8001b28:	605c      	str	r4, [r3, #4]
}
 8001b2a:	bf00      	nop
 8001b2c:	3704      	adds	r7, #4
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd90      	pop	{r4, r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200002ac 	.word	0x200002ac
 8001b38:	20000004 	.word	0x20000004
 8001b3c:	0800bde8 	.word	0x0800bde8
 8001b40:	20000018 	.word	0x20000018
 8001b44:	0800db80 	.word	0x0800db80
 8001b48:	200002b4 	.word	0x200002b4
 8001b4c:	2000002c 	.word	0x2000002c

08001b50 <_GLOBAL__sub_I_buffer>:
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	f7ff ff90 	bl	8001a78 <_Z41__static_initialization_and_destruction_0v>
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b60:	f7fe ffb0 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b64:	480c      	ldr	r0, [pc, #48]	@ (8001b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b66:	490d      	ldr	r1, [pc, #52]	@ (8001b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f007 fcef 	bl	800956c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8e:	f7fe fd51 	bl	8000634 <main>
  bx  lr    
 8001b92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b9c:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8001ba0:	0800dbac 	.word	0x0800dbac
  ldr r2, =_sbss
 8001ba4:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001ba8:	200017f0 	.word	0x200017f0

08001bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf0 <HAL_Init+0x40>)
 8001bba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_Init+0x40>)
 8001bc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	@ (8001bf0 <HAL_Init+0x40>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 f94f 	bl	8001e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bde:	200f      	movs	r0, #15
 8001be0:	f000 f808 	bl	8001bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be4:	f7fe fea8 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_InitTick+0x54>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <HAL_InitTick+0x58>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f967 	bl	8001ee6 <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c30:	f000 f92f 	bl	8001e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	@ (8001c50 <HAL_InitTick+0x5c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000044 	.word	0x20000044
 8001c50:	20000040 	.word	0x20000040

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_IncTick+0x20>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_IncTick+0x24>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <HAL_IncTick+0x24>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000044 	.word	0x20000044
 8001c78:	200002bc 	.word	0x200002bc

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	200002bc 	.word	0x200002bc

08001c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff ffee 	bl	8001c7c <HAL_GetTick>
 8001ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cac:	d005      	beq.n	8001cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <HAL_Delay+0x44>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cba:	bf00      	nop
 8001cbc:	f7ff ffde 	bl	8001c7c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d8f7      	bhi.n	8001cbc <HAL_Delay+0x28>
  {
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000044 	.word	0x20000044

08001cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cec:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	@ (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	db0b      	blt.n	8001d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	4907      	ldr	r1, [pc, #28]	@ (8001d78 <__NVIC_EnableIRQ+0x38>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2001      	movs	r0, #1
 8001d62:	fa00 f202 	lsl.w	r2, r0, r2
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000e100 	.word	0xe000e100

08001d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	db0a      	blt.n	8001da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	490c      	ldr	r1, [pc, #48]	@ (8001dc8 <__NVIC_SetPriority+0x4c>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da4:	e00a      	b.n	8001dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4908      	ldr	r1, [pc, #32]	@ (8001dcc <__NVIC_SetPriority+0x50>)
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	3b04      	subs	r3, #4
 8001db4:	0112      	lsls	r2, r2, #4
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	440b      	add	r3, r1
 8001dba:	761a      	strb	r2, [r3, #24]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000e100 	.word	0xe000e100
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	@ 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f1c3 0307 	rsb	r3, r3, #7
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	bf28      	it	cs
 8001dee:	2304      	movcs	r3, #4
 8001df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d902      	bls.n	8001e00 <NVIC_EncodePriority+0x30>
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3b03      	subs	r3, #3
 8001dfe:	e000      	b.n	8001e02 <NVIC_EncodePriority+0x32>
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	4313      	orrs	r3, r2
         );
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	@ 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e48:	d301      	bcc.n	8001e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00f      	b.n	8001e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <SysTick_Config+0x40>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e56:	210f      	movs	r1, #15
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e5c:	f7ff ff8e 	bl	8001d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <SysTick_Config+0x40>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e66:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <SysTick_Config+0x40>)
 8001e68:	2207      	movs	r2, #7
 8001e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	e000e010 	.word	0xe000e010

08001e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ff29 	bl	8001cdc <__NVIC_SetPriorityGrouping>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea4:	f7ff ff3e 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 8001ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	6978      	ldr	r0, [r7, #20]
 8001eb0:	f7ff ff8e 	bl	8001dd0 <NVIC_EncodePriority>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff5d 	bl	8001d7c <__NVIC_SetPriority>
}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff31 	bl	8001d40 <__NVIC_EnableIRQ>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ffa2 	bl	8001e38 <SysTick_Config>
 8001ef4:	4603      	mov	r3, r0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f0c:	f7ff feb6 	bl	8001c7c <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e099      	b.n	8002050 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f3c:	e00f      	b.n	8001f5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f3e:	f7ff fe9d 	bl	8001c7c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d908      	bls.n	8001f5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2203      	movs	r2, #3
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e078      	b.n	8002050 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1e8      	bne.n	8001f3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4b38      	ldr	r3, [pc, #224]	@ (8002058 <HAL_DMA_Init+0x158>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d107      	bne.n	8001fc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f023 0307 	bic.w	r3, r3, #7
 8001fde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d117      	bne.n	8002022 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00e      	beq.n	8002022 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fa6f 	bl	80024e8 <DMA_CheckFifoParam>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2240      	movs	r2, #64	@ 0x40
 8002014:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800201e:	2301      	movs	r3, #1
 8002020:	e016      	b.n	8002050 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fa26 	bl	800247c <DMA_CalcBaseAndBitshift>
 8002030:	4603      	mov	r3, r0
 8002032:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002038:	223f      	movs	r2, #63	@ 0x3f
 800203a:	409a      	lsls	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	f010803f 	.word	0xf010803f

0800205c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002072:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_DMA_Start_IT+0x26>
 800207e:	2302      	movs	r3, #2
 8002080:	e040      	b.n	8002104 <HAL_DMA_Start_IT+0xa8>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d12f      	bne.n	80020f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2202      	movs	r2, #2
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f9b8 	bl	8002420 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b4:	223f      	movs	r2, #63	@ 0x3f
 80020b6:	409a      	lsls	r2, r3
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0216 	orr.w	r2, r2, #22
 80020ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0208 	orr.w	r2, r2, #8
 80020e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	e005      	b.n	8002102 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020fe:	2302      	movs	r3, #2
 8002100:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002102:	7dfb      	ldrb	r3, [r7, #23]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002118:	4b8e      	ldr	r3, [pc, #568]	@ (8002354 <HAL_DMA_IRQHandler+0x248>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a8e      	ldr	r2, [pc, #568]	@ (8002358 <HAL_DMA_IRQHandler+0x24c>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0a9b      	lsrs	r3, r3, #10
 8002124:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002136:	2208      	movs	r2, #8
 8002138:	409a      	lsls	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d01a      	beq.n	8002178 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d013      	beq.n	8002178 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0204 	bic.w	r2, r2, #4
 800215e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002164:	2208      	movs	r2, #8
 8002166:	409a      	lsls	r2, r3
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217c:	2201      	movs	r2, #1
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d012      	beq.n	80021ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00b      	beq.n	80021ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	2201      	movs	r2, #1
 800219c:	409a      	lsls	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a6:	f043 0202 	orr.w	r2, r3, #2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b2:	2204      	movs	r2, #4
 80021b4:	409a      	lsls	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d012      	beq.n	80021e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00b      	beq.n	80021e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d0:	2204      	movs	r2, #4
 80021d2:	409a      	lsls	r2, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021dc:	f043 0204 	orr.w	r2, r3, #4
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e8:	2210      	movs	r2, #16
 80021ea:	409a      	lsls	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d043      	beq.n	800227c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d03c      	beq.n	800227c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002206:	2210      	movs	r2, #16
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d018      	beq.n	800224e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d108      	bne.n	800223c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d024      	beq.n	800227c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	4798      	blx	r3
 800223a:	e01f      	b.n	800227c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01b      	beq.n	800227c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
 800224c:	e016      	b.n	800227c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0208 	bic.w	r2, r2, #8
 800226a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002280:	2220      	movs	r2, #32
 8002282:	409a      	lsls	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 808f 	beq.w	80023ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8087 	beq.w	80023ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a2:	2220      	movs	r2, #32
 80022a4:	409a      	lsls	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b05      	cmp	r3, #5
 80022b4:	d136      	bne.n	8002324 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0216 	bic.w	r2, r2, #22
 80022c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d103      	bne.n	80022e6 <HAL_DMA_IRQHandler+0x1da>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d007      	beq.n	80022f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0208 	bic.w	r2, r2, #8
 80022f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fa:	223f      	movs	r2, #63	@ 0x3f
 80022fc:	409a      	lsls	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002316:	2b00      	cmp	r3, #0
 8002318:	d07e      	beq.n	8002418 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
        }
        return;
 8002322:	e079      	b.n	8002418 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01d      	beq.n	800236e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10d      	bne.n	800235c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002344:	2b00      	cmp	r3, #0
 8002346:	d031      	beq.n	80023ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
 8002350:	e02c      	b.n	80023ac <HAL_DMA_IRQHandler+0x2a0>
 8002352:	bf00      	nop
 8002354:	20000000 	.word	0x20000000
 8002358:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d023      	beq.n	80023ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4798      	blx	r3
 800236c:	e01e      	b.n	80023ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10f      	bne.n	800239c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0210 	bic.w	r2, r2, #16
 800238a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d032      	beq.n	800241a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d022      	beq.n	8002406 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2205      	movs	r2, #5
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	3301      	adds	r3, #1
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d307      	bcc.n	80023f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f2      	bne.n	80023d8 <HAL_DMA_IRQHandler+0x2cc>
 80023f2:	e000      	b.n	80023f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	4798      	blx	r3
 8002416:	e000      	b.n	800241a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002418:	bf00      	nop
    }
  }
}
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800243c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b40      	cmp	r3, #64	@ 0x40
 800244c:	d108      	bne.n	8002460 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800245e:	e007      	b.n	8002470 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	60da      	str	r2, [r3, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	3b10      	subs	r3, #16
 800248c:	4a14      	ldr	r2, [pc, #80]	@ (80024e0 <DMA_CalcBaseAndBitshift+0x64>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002496:	4a13      	ldr	r2, [pc, #76]	@ (80024e4 <DMA_CalcBaseAndBitshift+0x68>)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4413      	add	r3, r2
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d909      	bls.n	80024be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024b2:	f023 0303 	bic.w	r3, r3, #3
 80024b6:	1d1a      	adds	r2, r3, #4
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80024bc:	e007      	b.n	80024ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024c6:	f023 0303 	bic.w	r3, r3, #3
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	aaaaaaab 	.word	0xaaaaaaab
 80024e4:	0800db90 	.word	0x0800db90

080024e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d11f      	bne.n	8002542 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d856      	bhi.n	80025b6 <DMA_CheckFifoParam+0xce>
 8002508:	a201      	add	r2, pc, #4	@ (adr r2, 8002510 <DMA_CheckFifoParam+0x28>)
 800250a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250e:	bf00      	nop
 8002510:	08002521 	.word	0x08002521
 8002514:	08002533 	.word	0x08002533
 8002518:	08002521 	.word	0x08002521
 800251c:	080025b7 	.word	0x080025b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002524:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d046      	beq.n	80025ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002530:	e043      	b.n	80025ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002536:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800253a:	d140      	bne.n	80025be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002540:	e03d      	b.n	80025be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800254a:	d121      	bne.n	8002590 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b03      	cmp	r3, #3
 8002550:	d837      	bhi.n	80025c2 <DMA_CheckFifoParam+0xda>
 8002552:	a201      	add	r2, pc, #4	@ (adr r2, 8002558 <DMA_CheckFifoParam+0x70>)
 8002554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002558:	08002569 	.word	0x08002569
 800255c:	0800256f 	.word	0x0800256f
 8002560:	08002569 	.word	0x08002569
 8002564:	08002581 	.word	0x08002581
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
      break;
 800256c:	e030      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d025      	beq.n	80025c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257e:	e022      	b.n	80025c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002588:	d11f      	bne.n	80025ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800258e:	e01c      	b.n	80025ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d903      	bls.n	800259e <DMA_CheckFifoParam+0xb6>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d003      	beq.n	80025a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800259c:	e018      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
      break;
 80025a2:	e015      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00e      	beq.n	80025ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      break;
 80025b4:	e00b      	b.n	80025ce <DMA_CheckFifoParam+0xe6>
      break;
 80025b6:	bf00      	nop
 80025b8:	e00a      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ba:	bf00      	nop
 80025bc:	e008      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      break;
 80025be:	bf00      	nop
 80025c0:	e006      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      break;
 80025c2:	bf00      	nop
 80025c4:	e004      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      break;
 80025c6:	bf00      	nop
 80025c8:	e002      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ca:	bf00      	nop
 80025cc:	e000      	b.n	80025d0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ce:	bf00      	nop
    }
  } 
  
  return status; 
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop

080025e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e159      	b.n	80028b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025fc:	2201      	movs	r2, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	429a      	cmp	r2, r3
 8002616:	f040 8148 	bne.w	80028aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d005      	beq.n	8002632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262e:	2b02      	cmp	r3, #2
 8002630:	d130      	bne.n	8002694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2203      	movs	r2, #3
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 0201 	and.w	r2, r3, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b03      	cmp	r3, #3
 800269e:	d017      	beq.n	80026d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d123      	bne.n	8002724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	08da      	lsrs	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3208      	adds	r2, #8
 80026e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	220f      	movs	r2, #15
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	08da      	lsrs	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3208      	adds	r2, #8
 800271e:	69b9      	ldr	r1, [r7, #24]
 8002720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0203 	and.w	r2, r3, #3
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80a2 	beq.w	80028aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b57      	ldr	r3, [pc, #348]	@ (80028c8 <HAL_GPIO_Init+0x2e8>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	4a56      	ldr	r2, [pc, #344]	@ (80028c8 <HAL_GPIO_Init+0x2e8>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002774:	6453      	str	r3, [r2, #68]	@ 0x44
 8002776:	4b54      	ldr	r3, [pc, #336]	@ (80028c8 <HAL_GPIO_Init+0x2e8>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002782:	4a52      	ldr	r2, [pc, #328]	@ (80028cc <HAL_GPIO_Init+0x2ec>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a49      	ldr	r2, [pc, #292]	@ (80028d0 <HAL_GPIO_Init+0x2f0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d019      	beq.n	80027e2 <HAL_GPIO_Init+0x202>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a48      	ldr	r2, [pc, #288]	@ (80028d4 <HAL_GPIO_Init+0x2f4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_GPIO_Init+0x1fe>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a47      	ldr	r2, [pc, #284]	@ (80028d8 <HAL_GPIO_Init+0x2f8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00d      	beq.n	80027da <HAL_GPIO_Init+0x1fa>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a46      	ldr	r2, [pc, #280]	@ (80028dc <HAL_GPIO_Init+0x2fc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d007      	beq.n	80027d6 <HAL_GPIO_Init+0x1f6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a45      	ldr	r2, [pc, #276]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_GPIO_Init+0x1f2>
 80027ce:	2304      	movs	r3, #4
 80027d0:	e008      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027d2:	2307      	movs	r3, #7
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027d6:	2303      	movs	r3, #3
 80027d8:	e004      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027da:	2302      	movs	r3, #2
 80027dc:	e002      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027e2:	2300      	movs	r3, #0
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f002 0203 	and.w	r2, r2, #3
 80027ea:	0092      	lsls	r2, r2, #2
 80027ec:	4093      	lsls	r3, r2
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f4:	4935      	ldr	r1, [pc, #212]	@ (80028cc <HAL_GPIO_Init+0x2ec>)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3302      	adds	r3, #2
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002802:	4b38      	ldr	r3, [pc, #224]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002826:	4a2f      	ldr	r2, [pc, #188]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800282c:	4b2d      	ldr	r3, [pc, #180]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002850:	4a24      	ldr	r2, [pc, #144]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002856:	4b23      	ldr	r3, [pc, #140]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287a:	4a1a      	ldr	r2, [pc, #104]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002880:	4b18      	ldr	r3, [pc, #96]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a4:	4a0f      	ldr	r2, [pc, #60]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b0f      	cmp	r3, #15
 80028b4:	f67f aea2 	bls.w	80025fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3724      	adds	r7, #36	@ 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40013800 	.word	0x40013800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40020c00 	.word	0x40020c00
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40013c00 	.word	0x40013c00

080028e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
 80028f4:	4613      	mov	r3, r2
 80028f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f8:	787b      	ldrb	r3, [r7, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002904:	e003      	b.n	800290e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	041a      	lsls	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af02      	add	r7, sp, #8
 8002920:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e101      	b.n	8002b30 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f006 f9c0 	bl	8008ccc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2203      	movs	r2, #3
 8002950:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800295a:	d102      	bne.n	8002962 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f002 fe0d 	bl	8005586 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7c1a      	ldrb	r2, [r3, #16]
 8002974:	f88d 2000 	strb.w	r2, [sp]
 8002978:	3304      	adds	r3, #4
 800297a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800297c:	f002 fcec 	bl	8005358 <USB_CoreInit>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2202      	movs	r2, #2
 800298a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e0ce      	b.n	8002b30 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f002 fe05 	bl	80055a8 <USB_SetCurrentMode>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0bf      	b.n	8002b30 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b0:	2300      	movs	r3, #0
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	e04a      	b.n	8002a4c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	3315      	adds	r3, #21
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3314      	adds	r3, #20
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	b298      	uxth	r0, r3
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	332e      	adds	r3, #46	@ 0x2e
 80029f2:	4602      	mov	r2, r0
 80029f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3318      	adds	r3, #24
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	331c      	adds	r3, #28
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3320      	adds	r3, #32
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a32:	7bfa      	ldrb	r2, [r7, #15]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	3324      	adds	r3, #36	@ 0x24
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	791b      	ldrb	r3, [r3, #4]
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d3af      	bcc.n	80029b6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	e044      	b.n	8002ae6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ab4:	7bfa      	ldrb	r2, [r7, #15]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002aca:	7bfa      	ldrb	r2, [r7, #15]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	791b      	ldrb	r3, [r3, #4]
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d3b5      	bcc.n	8002a5c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	7c1a      	ldrb	r2, [r3, #16]
 8002af8:	f88d 2000 	strb.w	r2, [sp]
 8002afc:	3304      	adds	r3, #4
 8002afe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b00:	f002 fd9e 	bl	8005640 <USB_DevInit>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00c      	b.n	8002b30 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f003 fde8 	bl	80066fe <USB_DevDisconnect>

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_PCD_Start+0x1c>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e022      	b.n	8002b9a <HAL_PCD_Start+0x62>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f002 fcef 	bl	8005564 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f003 fd96 	bl	80066bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ba2:	b590      	push	{r4, r7, lr}
 8002ba4:	b08d      	sub	sp, #52	@ 0x34
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 fe54 	bl	8006866 <USB_GetMode>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f040 848c 	bne.w	80034de <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f003 fdb8 	bl	8006740 <USB_ReadInterrupts>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8482 	beq.w	80034dc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f003 fda5 	bl	8006740 <USB_ReadInterrupts>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d107      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f002 0202 	and.w	r2, r2, #2
 8002c0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 fd93 	bl	8006740 <USB_ReadInterrupts>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d161      	bne.n	8002ce8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0210 	bic.w	r2, r2, #16
 8002c32:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	f003 020f 	and.w	r2, r3, #15
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	4413      	add	r3, r2
 8002c50:	3304      	adds	r3, #4
 8002c52:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002c5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c5e:	d124      	bne.n	8002caa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d035      	beq.n	8002cd8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	6a38      	ldr	r0, [r7, #32]
 8002c80:	f003 fbca 	bl	8006418 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	091b      	lsrs	r3, r3, #4
 8002c8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c90:	441a      	add	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ca2:	441a      	add	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	615a      	str	r2, [r3, #20]
 8002ca8:	e016      	b.n	8002cd8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002cb0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002cb4:	d110      	bne.n	8002cd8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6a38      	ldr	r0, [r7, #32]
 8002cc2:	f003 fba9 	bl	8006418 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cd2:	441a      	add	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0210 	orr.w	r2, r2, #16
 8002ce6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fd27 	bl	8006740 <USB_ReadInterrupts>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cf8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002cfc:	f040 80a7 	bne.w	8002e4e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f003 fd2c 	bl	8006766 <USB_ReadDevAllOutEpInterrupt>
 8002d0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002d10:	e099      	b.n	8002e46 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 808e 	beq.w	8002e3a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 fd50 	bl	80067ce <USB_ReadDevOutEPInterrupt>
 8002d2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00c      	beq.n	8002d54 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d46:	461a      	mov	r2, r3
 8002d48:	2301      	movs	r3, #1
 8002d4a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fea4 	bl	8003a9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00c      	beq.n	8002d78 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 ff7a 	bl	8003c6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2310      	movs	r3, #16
 8002d92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d030      	beq.n	8002e00 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da6:	2b80      	cmp	r3, #128	@ 0x80
 8002da8:	d109      	bne.n	8002dbe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002db8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dbc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4413      	add	r3, r2
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	78db      	ldrb	r3, [r3, #3]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d108      	bne.n	8002dee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2200      	movs	r2, #0
 8002de0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	4619      	mov	r1, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f006 f86b 	bl	8008ec4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e16:	461a      	mov	r2, r3
 8002e18:	2320      	movs	r3, #32
 8002e1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e32:	461a      	mov	r2, r3
 8002e34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e38:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f47f af62 	bne.w	8002d12 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 fc74 	bl	8006740 <USB_ReadInterrupts>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e62:	f040 80db 	bne.w	800301c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 fc95 	bl	800679a <USB_ReadDevAllInEpInterrupt>
 8002e70:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002e76:	e0cd      	b.n	8003014 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80c2 	beq.w	8003008 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 fcbb 	bl	800680a <USB_ReadDevInEPInterrupt>
 8002e94:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d057      	beq.n	8002f50 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69f9      	ldr	r1, [r7, #28]
 8002ebc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	799b      	ldrb	r3, [r3, #6]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d132      	bne.n	8002f44 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	3320      	adds	r3, #32
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4403      	add	r3, r0
 8002efe:	331c      	adds	r3, #28
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4419      	add	r1, r3
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4403      	add	r3, r0
 8002f12:	3320      	adds	r3, #32
 8002f14:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d113      	bne.n	8002f44 <HAL_PCD_IRQHandler+0x3a2>
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	3324      	adds	r3, #36	@ 0x24
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d108      	bne.n	8002f44 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2101      	movs	r1, #1
 8002f40:	f003 fcc2 	bl	80068c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	4619      	mov	r1, r3
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f005 ff3f 	bl	8008dce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f66:	461a      	mov	r2, r3
 8002f68:	2308      	movs	r3, #8
 8002f6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f82:	461a      	mov	r2, r3
 8002f84:	2310      	movs	r3, #16
 8002f86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2340      	movs	r3, #64	@ 0x40
 8002fa2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d023      	beq.n	8002ff6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002fae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fb0:	6a38      	ldr	r0, [r7, #32]
 8002fb2:	f002 fca9 	bl	8005908 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	3310      	adds	r3, #16
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	78db      	ldrb	r3, [r3, #3]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d108      	bne.n	8002fe4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	4619      	mov	r1, r3
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f005 ff82 	bl	8008ee8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003000:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fcbd 	bl	8003982 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300a:	3301      	adds	r3, #1
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800300e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003016:	2b00      	cmp	r3, #0
 8003018:	f47f af2e 	bne.w	8002e78 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f003 fb8d 	bl	8006740 <USB_ReadInterrupts>
 8003026:	4603      	mov	r3, r0
 8003028:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800302c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003030:	d122      	bne.n	8003078 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800304c:	2b01      	cmp	r3, #1
 800304e:	d108      	bne.n	8003062 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003058:	2100      	movs	r1, #0
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fea4 	bl	8003da8 <HAL_PCDEx_LPM_Callback>
 8003060:	e002      	b.n	8003068 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f005 ff20 	bl	8008ea8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003076:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f003 fb5f 	bl	8006740 <USB_ReadInterrupts>
 8003082:	4603      	mov	r3, r0
 8003084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800308c:	d112      	bne.n	80030b4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d102      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f005 fedc 	bl	8008e5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80030b2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f003 fb41 	bl	8006740 <USB_ReadInterrupts>
 80030be:	4603      	mov	r3, r0
 80030c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030c8:	f040 80b7 	bne.w	800323a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2110      	movs	r1, #16
 80030e6:	4618      	mov	r0, r3
 80030e8:	f002 fc0e 	bl	8005908 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ec:	2300      	movs	r3, #0
 80030ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030f0:	e046      	b.n	8003180 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030fe:	461a      	mov	r2, r3
 8003100:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003104:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003116:	0151      	lsls	r1, r2, #5
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	440a      	add	r2, r1
 800311c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003120:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003124:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003132:	461a      	mov	r2, r3
 8003134:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003138:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800313a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800314a:	0151      	lsls	r1, r2, #5
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	440a      	add	r2, r1
 8003150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003154:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003158:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800315a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800316a:	0151      	lsls	r1, r2, #5
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	440a      	add	r2, r1
 8003170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003174:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003178:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317c:	3301      	adds	r3, #1
 800317e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	791b      	ldrb	r3, [r3, #4]
 8003184:	461a      	mov	r2, r3
 8003186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003188:	4293      	cmp	r3, r2
 800318a:	d3b2      	bcc.n	80030f2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800319a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800319e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7bdb      	ldrb	r3, [r3, #15]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d016      	beq.n	80031d6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031b8:	f043 030b 	orr.w	r3, r3, #11
 80031bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031ce:	f043 030b 	orr.w	r3, r3, #11
 80031d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80031d4:	e015      	b.n	8003202 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031e8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80031ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	69fa      	ldr	r2, [r7, #28]
 80031f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031fc:	f043 030b 	orr.w	r3, r3, #11
 8003200:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003210:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003214:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003224:	461a      	mov	r2, r3
 8003226:	f003 fb4f 	bl	80068c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003238:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f003 fa7e 	bl	8006740 <USB_ReadInterrupts>
 8003244:	4603      	mov	r3, r0
 8003246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800324a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800324e:	d123      	bne.n	8003298 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f003 fb14 	bl	8006882 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f002 fbcb 	bl	80059fa <USB_GetDevSpeed>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681c      	ldr	r4, [r3, #0]
 8003270:	f001 f9ca 	bl	8004608 <HAL_RCC_GetHCLKFreq>
 8003274:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800327a:	461a      	mov	r2, r3
 800327c:	4620      	mov	r0, r4
 800327e:	f002 f8cf 	bl	8005420 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f005 fdcb 	bl	8008e1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003296:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f003 fa4f 	bl	8006740 <USB_ReadInterrupts>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d10a      	bne.n	80032c2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f005 fda8 	bl	8008e02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f002 0208 	and.w	r2, r2, #8
 80032c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 fa3a 	bl	8006740 <USB_ReadInterrupts>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d2:	2b80      	cmp	r3, #128	@ 0x80
 80032d4:	d123      	bne.n	800331e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032e2:	2301      	movs	r3, #1
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e6:	e014      	b.n	8003312 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d105      	bne.n	800330c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	b2db      	uxtb	r3, r3
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fb0a 	bl	8003920 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	3301      	adds	r3, #1
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	791b      	ldrb	r3, [r3, #4]
 8003316:	461a      	mov	r2, r3
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	4293      	cmp	r3, r2
 800331c:	d3e4      	bcc.n	80032e8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f003 fa0c 	bl	8006740 <USB_ReadInterrupts>
 8003328:	4603      	mov	r3, r0
 800332a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800332e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003332:	d13c      	bne.n	80033ae <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003334:	2301      	movs	r3, #1
 8003336:	627b      	str	r3, [r7, #36]	@ 0x24
 8003338:	e02b      	b.n	8003392 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334e:	4613      	mov	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	3318      	adds	r3, #24
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d115      	bne.n	800338c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003360:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003362:	2b00      	cmp	r3, #0
 8003364:	da12      	bge.n	800338c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	3317      	adds	r3, #23
 8003376:	2201      	movs	r2, #1
 8003378:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003382:	b2db      	uxtb	r3, r3
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 faca 	bl	8003920 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800338c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338e:	3301      	adds	r3, #1
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	791b      	ldrb	r3, [r3, #4]
 8003396:	461a      	mov	r2, r3
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	4293      	cmp	r3, r2
 800339c:	d3cd      	bcc.n	800333a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80033ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f003 f9c4 	bl	8006740 <USB_ReadInterrupts>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033c2:	d156      	bne.n	8003472 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033c4:	2301      	movs	r3, #1
 80033c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c8:	e045      	b.n	8003456 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d12e      	bne.n	8003450 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	da2b      	bge.n	8003450 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003404:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003408:	429a      	cmp	r2, r3
 800340a:	d121      	bne.n	8003450 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003448:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800344c:	6053      	str	r3, [r2, #4]
            break;
 800344e:	e008      	b.n	8003462 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	3301      	adds	r3, #1
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	791b      	ldrb	r3, [r3, #4]
 800345a:	461a      	mov	r2, r3
 800345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345e:	4293      	cmp	r3, r2
 8003460:	d3b3      	bcc.n	80033ca <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003470:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f003 f962 	bl	8006740 <USB_ReadInterrupts>
 800347c:	4603      	mov	r3, r0
 800347e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003486:	d10a      	bne.n	800349e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f005 fd3f 	bl	8008f0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800349c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f003 f94c 	bl	8006740 <USB_ReadInterrupts>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d115      	bne.n	80034de <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f005 fd2f 	bl	8008f28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	e000      	b.n	80034de <HAL_PCD_IRQHandler+0x93c>
      return;
 80034dc:	bf00      	nop
    }
  }
}
 80034de:	3734      	adds	r7, #52	@ 0x34
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd90      	pop	{r4, r7, pc}

080034e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_PCD_SetAddress+0x1a>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e012      	b.n	8003524 <HAL_PCD_SetAddress+0x40>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f003 f8ab 	bl	8006670 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	4608      	mov	r0, r1
 8003536:	4611      	mov	r1, r2
 8003538:	461a      	mov	r2, r3
 800353a:	4603      	mov	r3, r0
 800353c:	70fb      	strb	r3, [r7, #3]
 800353e:	460b      	mov	r3, r1
 8003540:	803b      	strh	r3, [r7, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800354a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800354e:	2b00      	cmp	r3, #0
 8003550:	da0f      	bge.n	8003572 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	f003 020f 	and.w	r2, r3, #15
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	3310      	adds	r3, #16
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	3304      	adds	r3, #4
 8003568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	705a      	strb	r2, [r3, #1]
 8003570:	e00f      	b.n	8003592 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	f003 020f 	and.w	r2, r3, #15
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4413      	add	r3, r2
 8003588:	3304      	adds	r3, #4
 800358a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800359e:	883b      	ldrh	r3, [r7, #0]
 80035a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	78ba      	ldrb	r2, [r7, #2]
 80035ac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	785b      	ldrb	r3, [r3, #1]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d004      	beq.n	80035c0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035c0:	78bb      	ldrb	r3, [r7, #2]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d102      	bne.n	80035cc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_PCD_EP_Open+0xae>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e00e      	b.n	80035f8 <HAL_PCD_EP_Open+0xcc>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68f9      	ldr	r1, [r7, #12]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f002 fa2b 	bl	8005a44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80035f6:	7afb      	ldrb	r3, [r7, #11]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800360c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003610:	2b00      	cmp	r3, #0
 8003612:	da0f      	bge.n	8003634 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	f003 020f 	and.w	r2, r3, #15
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	3310      	adds	r3, #16
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	3304      	adds	r3, #4
 800362a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	705a      	strb	r2, [r3, #1]
 8003632:	e00f      	b.n	8003654 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	f003 020f 	and.w	r2, r3, #15
 800363a:	4613      	mov	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	3304      	adds	r3, #4
 800364c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	b2da      	uxtb	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_PCD_EP_Close+0x6e>
 800366a:	2302      	movs	r3, #2
 800366c:	e00e      	b.n	800368c <HAL_PCD_EP_Close+0x8c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	4618      	mov	r0, r3
 800367e:	f002 fa69 	bl	8005b54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	460b      	mov	r3, r1
 80036a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036a4:	7afb      	ldrb	r3, [r7, #11]
 80036a6:	f003 020f 	and.w	r2, r3, #15
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4413      	add	r3, r2
 80036ba:	3304      	adds	r3, #4
 80036bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2200      	movs	r2, #0
 80036ce:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2200      	movs	r2, #0
 80036d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036d6:	7afb      	ldrb	r3, [r7, #11]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	799b      	ldrb	r3, [r3, #6]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d102      	bne.n	80036f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	799b      	ldrb	r3, [r3, #6]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6979      	ldr	r1, [r7, #20]
 80036fc:	f002 fb06 	bl	8005d0c <USB_EPStartXfer>

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	460b      	mov	r3, r1
 8003714:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	f003 020f 	and.w	r2, r3, #15
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800372c:	681b      	ldr	r3, [r3, #0]
}
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	460b      	mov	r3, r1
 8003748:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800374a:	7afb      	ldrb	r3, [r7, #11]
 800374c:	f003 020f 	and.w	r2, r3, #15
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	3310      	adds	r3, #16
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4413      	add	r3, r2
 800375e:	3304      	adds	r3, #4
 8003760:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2200      	movs	r2, #0
 8003772:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2201      	movs	r2, #1
 8003778:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800377a:	7afb      	ldrb	r3, [r7, #11]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	b2da      	uxtb	r2, r3
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	799b      	ldrb	r3, [r3, #6]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d102      	bne.n	8003794 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	799b      	ldrb	r3, [r3, #6]
 800379c:	461a      	mov	r2, r3
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	f002 fab4 	bl	8005d0c <USB_EPStartXfer>

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	7912      	ldrb	r2, [r2, #4]
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e04f      	b.n	800386c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	da0f      	bge.n	80037f4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	f003 020f 	and.w	r2, r3, #15
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	3310      	adds	r3, #16
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4413      	add	r3, r2
 80037e8:	3304      	adds	r3, #4
 80037ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	705a      	strb	r2, [r3, #1]
 80037f2:	e00d      	b.n	8003810 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	3304      	adds	r3, #4
 8003808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_PCD_EP_SetStall+0x82>
 800382c:	2302      	movs	r3, #2
 800382e:	e01d      	b.n	800386c <HAL_PCD_EP_SetStall+0xbe>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68f9      	ldr	r1, [r7, #12]
 800383e:	4618      	mov	r0, r3
 8003840:	f002 fe42 	bl	80064c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	7999      	ldrb	r1, [r3, #6]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800385c:	461a      	mov	r2, r3
 800385e:	f003 f833 	bl	80068c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	7912      	ldrb	r2, [r2, #4]
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e042      	b.n	8003918 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003892:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003896:	2b00      	cmp	r3, #0
 8003898:	da0f      	bge.n	80038ba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	f003 020f 	and.w	r2, r3, #15
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	3310      	adds	r3, #16
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	3304      	adds	r3, #4
 80038b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	705a      	strb	r2, [r3, #1]
 80038b8:	e00f      	b.n	80038da <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	f003 020f 	and.w	r2, r3, #15
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	4413      	add	r3, r2
 80038d0:	3304      	adds	r3, #4
 80038d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_PCD_EP_ClrStall+0x86>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e00e      	b.n	8003918 <HAL_PCD_EP_ClrStall+0xa4>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68f9      	ldr	r1, [r7, #12]
 8003908:	4618      	mov	r0, r3
 800390a:	f002 fe4b 	bl	80065a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800392c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003930:	2b00      	cmp	r3, #0
 8003932:	da0c      	bge.n	800394e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	f003 020f 	and.w	r2, r3, #15
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	3310      	adds	r3, #16
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	3304      	adds	r3, #4
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e00c      	b.n	8003968 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68f9      	ldr	r1, [r7, #12]
 800396e:	4618      	mov	r0, r3
 8003970:	f002 fc6a 	bl	8006248 <USB_EPStopXfer>
 8003974:	4603      	mov	r3, r0
 8003976:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003978:	7afb      	ldrb	r3, [r7, #11]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b08a      	sub	sp, #40	@ 0x28
 8003986:	af02      	add	r7, sp, #8
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	3310      	adds	r3, #16
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	3304      	adds	r3, #4
 80039a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d901      	bls.n	80039ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e06b      	b.n	8003a92 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d902      	bls.n	80039d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3303      	adds	r3, #3
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039de:	e02a      	b.n	8003a36 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d902      	bls.n	80039fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	3303      	adds	r3, #3
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68d9      	ldr	r1, [r3, #12]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	4603      	mov	r3, r0
 8003a18:	6978      	ldr	r0, [r7, #20]
 8003a1a:	f002 fcbf 	bl	800639c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	441a      	add	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	441a      	add	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d809      	bhi.n	8003a60 <PCD_WriteEmptyTxFifo+0xde>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d203      	bcs.n	8003a60 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1bf      	bne.n	80039e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d811      	bhi.n	8003a90 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	2201      	movs	r2, #1
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	6939      	ldr	r1, [r7, #16]
 8003a88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	333c      	adds	r3, #60	@ 0x3c
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	799b      	ldrb	r3, [r3, #6]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d17b      	bne.n	8003bca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	4a61      	ldr	r2, [pc, #388]	@ (8003c64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	f240 80b9 	bls.w	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80b3 	beq.w	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003afe:	461a      	mov	r2, r3
 8003b00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b04:	6093      	str	r3, [r2, #8]
 8003b06:	e0a7      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2320      	movs	r3, #32
 8003b22:	6093      	str	r3, [r2, #8]
 8003b24:	e098      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f040 8093 	bne.w	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	4a4b      	ldr	r2, [pc, #300]	@ (8003c64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d90f      	bls.n	8003b5a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b56:	6093      	str	r3, [r2, #8]
 8003b58:	e07e      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	0159      	lsls	r1, r3, #5
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d114      	bne.n	8003bbc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	f002 fe8e 	bl	80068c8 <USB_EP0_OutStart>
 8003bac:	e006      	b.n	8003bbc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	441a      	add	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f005 f8e8 	bl	8008d98 <HAL_PCD_DataOutStageCallback>
 8003bc8:	e046      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	4a26      	ldr	r2, [pc, #152]	@ (8003c68 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d124      	bne.n	8003c1c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be8:	461a      	mov	r2, r3
 8003bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bee:	6093      	str	r3, [r2, #8]
 8003bf0:	e032      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2320      	movs	r3, #32
 8003c0c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	4619      	mov	r1, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f005 f8bf 	bl	8008d98 <HAL_PCD_DataOutStageCallback>
 8003c1a:	e01d      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d114      	bne.n	8003c4c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d108      	bne.n	8003c4c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c44:	461a      	mov	r2, r3
 8003c46:	2100      	movs	r1, #0
 8003c48:	f002 fe3e 	bl	80068c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	4619      	mov	r1, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f005 f8a0 	bl	8008d98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	4f54300a 	.word	0x4f54300a
 8003c68:	4f54310a 	.word	0x4f54310a

08003c6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	333c      	adds	r3, #60	@ 0x3c
 8003c84:	3304      	adds	r3, #4
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a15      	ldr	r2, [pc, #84]	@ (8003cf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d90e      	bls.n	8003cc0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d009      	beq.n	8003cc0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cbe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f005 f857 	bl	8008d74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d90c      	bls.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	799b      	ldrb	r3, [r3, #6]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d108      	bne.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	f002 fdf0 	bl	80068c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	4f54300a 	.word	0x4f54300a

08003cf8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	70fb      	strb	r3, [r7, #3]
 8003d04:	4613      	mov	r3, r2
 8003d06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d16:	883b      	ldrh	r3, [r7, #0]
 8003d18:	0419      	lsls	r1, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d24:	e028      	b.n	8003d78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	4413      	add	r3, r2
 8003d32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d34:	2300      	movs	r3, #0
 8003d36:	73fb      	strb	r3, [r7, #15]
 8003d38:	e00d      	b.n	8003d56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	3340      	adds	r3, #64	@ 0x40
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	3301      	adds	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d3ec      	bcc.n	8003d3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d60:	883b      	ldrh	r3, [r7, #0]
 8003d62:	0418      	lsls	r0, r3, #16
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	4302      	orrs	r2, r0
 8003d70:	3340      	adds	r3, #64	@ 0x40
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	887a      	ldrh	r2, [r7, #2]
 8003d98:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e267      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d075      	beq.n	8003eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dde:	4b88      	ldr	r3, [pc, #544]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d00c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dea:	4b85      	ldr	r3, [pc, #532]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d112      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df6:	4b82      	ldr	r3, [pc, #520]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	4b7e      	ldr	r3, [pc, #504]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d05b      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x108>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d157      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e242      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e24:	d106      	bne.n	8003e34 <HAL_RCC_OscConfig+0x74>
 8003e26:	4b76      	ldr	r3, [pc, #472]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a75      	ldr	r2, [pc, #468]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e01d      	b.n	8003e70 <HAL_RCC_OscConfig+0xb0>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x98>
 8003e3e:	4b70      	ldr	r3, [pc, #448]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6f      	ldr	r2, [pc, #444]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6c      	ldr	r2, [pc, #432]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0xb0>
 8003e58:	4b69      	ldr	r3, [pc, #420]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a68      	ldr	r2, [pc, #416]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b66      	ldr	r3, [pc, #408]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a65      	ldr	r2, [pc, #404]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fd ff00 	bl	8001c7c <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fd fefc 	bl	8001c7c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	@ 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e207      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b5b      	ldr	r3, [pc, #364]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0xc0>
 8003e9e:	e014      	b.n	8003eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fd feec 	bl	8001c7c <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fd fee8 	bl	8001c7c <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	@ 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e1f3      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	4b51      	ldr	r3, [pc, #324]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0xe8>
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d063      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee2:	4b47      	ldr	r3, [pc, #284]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d11c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eee:	4b44      	ldr	r3, [pc, #272]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d116      	bne.n	8003f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	4b41      	ldr	r3, [pc, #260]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_RCC_OscConfig+0x152>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e1c7      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f12:	4b3b      	ldr	r3, [pc, #236]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4937      	ldr	r1, [pc, #220]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	e03a      	b.n	8003f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d020      	beq.n	8003f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f30:	4b34      	ldr	r3, [pc, #208]	@ (8004004 <HAL_RCC_OscConfig+0x244>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fd fea1 	bl	8001c7c <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3e:	f7fd fe9d 	bl	8001c7c <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e1a8      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f50:	4b2b      	ldr	r3, [pc, #172]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5c:	4b28      	ldr	r3, [pc, #160]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4925      	ldr	r1, [pc, #148]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
 8003f70:	e015      	b.n	8003f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f72:	4b24      	ldr	r3, [pc, #144]	@ (8004004 <HAL_RCC_OscConfig+0x244>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd fe80 	bl	8001c7c <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f80:	f7fd fe7c 	bl	8001c7c <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e187      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f92:	4b1b      	ldr	r3, [pc, #108]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d036      	beq.n	8004018 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb2:	4b15      	ldr	r3, [pc, #84]	@ (8004008 <HAL_RCC_OscConfig+0x248>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb8:	f7fd fe60 	bl	8001c7c <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc0:	f7fd fe5c 	bl	8001c7c <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e167      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x200>
 8003fde:	e01b      	b.n	8004018 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe0:	4b09      	ldr	r3, [pc, #36]	@ (8004008 <HAL_RCC_OscConfig+0x248>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe6:	f7fd fe49 	bl	8001c7c <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fec:	e00e      	b.n	800400c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fee:	f7fd fe45 	bl	8001c7c <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d907      	bls.n	800400c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e150      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
 8004000:	40023800 	.word	0x40023800
 8004004:	42470000 	.word	0x42470000
 8004008:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400c:	4b88      	ldr	r3, [pc, #544]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 800400e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1ea      	bne.n	8003fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8097 	beq.w	8004154 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004026:	2300      	movs	r3, #0
 8004028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402a:	4b81      	ldr	r3, [pc, #516]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	4b7d      	ldr	r3, [pc, #500]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	4a7c      	ldr	r2, [pc, #496]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004044:	6413      	str	r3, [r2, #64]	@ 0x40
 8004046:	4b7a      	ldr	r3, [pc, #488]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004052:	2301      	movs	r3, #1
 8004054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004056:	4b77      	ldr	r3, [pc, #476]	@ (8004234 <HAL_RCC_OscConfig+0x474>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d118      	bne.n	8004094 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004062:	4b74      	ldr	r3, [pc, #464]	@ (8004234 <HAL_RCC_OscConfig+0x474>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a73      	ldr	r2, [pc, #460]	@ (8004234 <HAL_RCC_OscConfig+0x474>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800406c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800406e:	f7fd fe05 	bl	8001c7c <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004076:	f7fd fe01 	bl	8001c7c <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e10c      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004088:	4b6a      	ldr	r3, [pc, #424]	@ (8004234 <HAL_RCC_OscConfig+0x474>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d106      	bne.n	80040aa <HAL_RCC_OscConfig+0x2ea>
 800409c:	4b64      	ldr	r3, [pc, #400]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a0:	4a63      	ldr	r2, [pc, #396]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a8:	e01c      	b.n	80040e4 <HAL_RCC_OscConfig+0x324>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b05      	cmp	r3, #5
 80040b0:	d10c      	bne.n	80040cc <HAL_RCC_OscConfig+0x30c>
 80040b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	4a5e      	ldr	r2, [pc, #376]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040b8:	f043 0304 	orr.w	r3, r3, #4
 80040bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040be:	4b5c      	ldr	r3, [pc, #368]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ca:	e00b      	b.n	80040e4 <HAL_RCC_OscConfig+0x324>
 80040cc:	4b58      	ldr	r3, [pc, #352]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d0:	4a57      	ldr	r2, [pc, #348]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d8:	4b55      	ldr	r3, [pc, #340]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040dc:	4a54      	ldr	r2, [pc, #336]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040de:	f023 0304 	bic.w	r3, r3, #4
 80040e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d015      	beq.n	8004118 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fd fdc6 	bl	8001c7c <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f2:	e00a      	b.n	800410a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fd fdc2 	bl	8001c7c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e0cb      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410a:	4b49      	ldr	r3, [pc, #292]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0ee      	beq.n	80040f4 <HAL_RCC_OscConfig+0x334>
 8004116:	e014      	b.n	8004142 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004118:	f7fd fdb0 	bl	8001c7c <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800411e:	e00a      	b.n	8004136 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004120:	f7fd fdac 	bl	8001c7c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e0b5      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004136:	4b3e      	ldr	r3, [pc, #248]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1ee      	bne.n	8004120 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004142:	7dfb      	ldrb	r3, [r7, #23]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d105      	bne.n	8004154 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004148:	4b39      	ldr	r3, [pc, #228]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 800414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414c:	4a38      	ldr	r2, [pc, #224]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 800414e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004152:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80a1 	beq.w	80042a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800415e:	4b34      	ldr	r3, [pc, #208]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b08      	cmp	r3, #8
 8004168:	d05c      	beq.n	8004224 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d141      	bne.n	80041f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	4b31      	ldr	r3, [pc, #196]	@ (8004238 <HAL_RCC_OscConfig+0x478>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fd fd80 	bl	8001c7c <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004180:	f7fd fd7c 	bl	8001c7c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e087      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004192:	4b27      	ldr	r3, [pc, #156]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69da      	ldr	r2, [r3, #28]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	019b      	lsls	r3, r3, #6
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	3b01      	subs	r3, #1
 80041b8:	041b      	lsls	r3, r3, #16
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c0:	061b      	lsls	r3, r3, #24
 80041c2:	491b      	ldr	r1, [pc, #108]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004238 <HAL_RCC_OscConfig+0x478>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ce:	f7fd fd55 	bl	8001c7c <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d6:	f7fd fd51 	bl	8001c7c <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e05c      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e8:	4b11      	ldr	r3, [pc, #68]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0x416>
 80041f4:	e054      	b.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f6:	4b10      	ldr	r3, [pc, #64]	@ (8004238 <HAL_RCC_OscConfig+0x478>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fd fd3e 	bl	8001c7c <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004204:	f7fd fd3a 	bl	8001c7c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e045      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004216:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x444>
 8004222:	e03d      	b.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d107      	bne.n	800423c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e038      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
 8004230:	40023800 	.word	0x40023800
 8004234:	40007000 	.word	0x40007000
 8004238:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800423c:	4b1b      	ldr	r3, [pc, #108]	@ (80042ac <HAL_RCC_OscConfig+0x4ec>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d028      	beq.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d121      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d11a      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800426c:	4013      	ands	r3, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004272:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004274:	4293      	cmp	r3, r2
 8004276:	d111      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004282:	085b      	lsrs	r3, r3, #1
 8004284:	3b01      	subs	r3, #1
 8004286:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d107      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004296:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d001      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800

080042b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0cc      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b68      	ldr	r3, [pc, #416]	@ (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d90c      	bls.n	80042ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b65      	ldr	r3, [pc, #404]	@ (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b63      	ldr	r3, [pc, #396]	@ (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0b8      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004304:	4b59      	ldr	r3, [pc, #356]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a58      	ldr	r2, [pc, #352]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800430e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800431c:	4b53      	ldr	r3, [pc, #332]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a52      	ldr	r2, [pc, #328]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b50      	ldr	r3, [pc, #320]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	494d      	ldr	r1, [pc, #308]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d044      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b47      	ldr	r3, [pc, #284]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d119      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d003      	beq.n	800436e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436a:	2b03      	cmp	r3, #3
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b3f      	ldr	r3, [pc, #252]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e06f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3b      	ldr	r3, [pc, #236]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e067      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b37      	ldr	r3, [pc, #220]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4934      	ldr	r1, [pc, #208]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fd fc6c 	bl	8001c7c <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fd fc68 	bl	8001c7c <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e04f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2b      	ldr	r3, [pc, #172]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b25      	ldr	r3, [pc, #148]	@ (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d20c      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b22      	ldr	r3, [pc, #136]	@ (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b20      	ldr	r3, [pc, #128]	@ (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e032      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004404:	4b19      	ldr	r3, [pc, #100]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4916      	ldr	r1, [pc, #88]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004422:	4b12      	ldr	r3, [pc, #72]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	490e      	ldr	r1, [pc, #56]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004436:	f000 f821 	bl	800447c <HAL_RCC_GetSysClockFreq>
 800443a:	4602      	mov	r2, r0
 800443c:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	490a      	ldr	r1, [pc, #40]	@ (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 8004448:	5ccb      	ldrb	r3, [r1, r3]
 800444a:	fa22 f303 	lsr.w	r3, r2, r3
 800444e:	4a09      	ldr	r2, [pc, #36]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004452:	4b09      	ldr	r3, [pc, #36]	@ (8004478 <HAL_RCC_ClockConfig+0x1c8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd fbcc 	bl	8001bf4 <HAL_InitTick>

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023c00 	.word	0x40023c00
 800446c:	40023800 	.word	0x40023800
 8004470:	0800aa64 	.word	0x0800aa64
 8004474:	20000000 	.word	0x20000000
 8004478:	20000040 	.word	0x20000040

0800447c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800447c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004480:	b090      	sub	sp, #64	@ 0x40
 8004482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004494:	4b59      	ldr	r3, [pc, #356]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b08      	cmp	r3, #8
 800449e:	d00d      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0x40>
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	f200 80a1 	bhi.w	80045e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x34>
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ae:	e09b      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b0:	4b53      	ldr	r3, [pc, #332]	@ (8004600 <HAL_RCC_GetSysClockFreq+0x184>)
 80044b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044b4:	e09b      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044b6:	4b53      	ldr	r3, [pc, #332]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x188>)
 80044b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044ba:	e098      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044bc:	4b4f      	ldr	r3, [pc, #316]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x180>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044c6:	4b4d      	ldr	r3, [pc, #308]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x180>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d028      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d2:	4b4a      	ldr	r3, [pc, #296]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x180>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	2200      	movs	r2, #0
 80044da:	623b      	str	r3, [r7, #32]
 80044dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044e4:	2100      	movs	r1, #0
 80044e6:	4b47      	ldr	r3, [pc, #284]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x188>)
 80044e8:	fb03 f201 	mul.w	r2, r3, r1
 80044ec:	2300      	movs	r3, #0
 80044ee:	fb00 f303 	mul.w	r3, r0, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	4a43      	ldr	r2, [pc, #268]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x188>)
 80044f6:	fba0 1202 	umull	r1, r2, r0, r2
 80044fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044fc:	460a      	mov	r2, r1
 80044fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004502:	4413      	add	r3, r2
 8004504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004508:	2200      	movs	r2, #0
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	61fa      	str	r2, [r7, #28]
 800450e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004512:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004516:	f7fb fe5d 	bl	80001d4 <__aeabi_uldivmod>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4613      	mov	r3, r2
 8004520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004522:	e053      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004524:	4b35      	ldr	r3, [pc, #212]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	099b      	lsrs	r3, r3, #6
 800452a:	2200      	movs	r2, #0
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	617a      	str	r2, [r7, #20]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004536:	f04f 0b00 	mov.w	fp, #0
 800453a:	4652      	mov	r2, sl
 800453c:	465b      	mov	r3, fp
 800453e:	f04f 0000 	mov.w	r0, #0
 8004542:	f04f 0100 	mov.w	r1, #0
 8004546:	0159      	lsls	r1, r3, #5
 8004548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800454c:	0150      	lsls	r0, r2, #5
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	ebb2 080a 	subs.w	r8, r2, sl
 8004556:	eb63 090b 	sbc.w	r9, r3, fp
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004566:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800456a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800456e:	ebb2 0408 	subs.w	r4, r2, r8
 8004572:	eb63 0509 	sbc.w	r5, r3, r9
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	00eb      	lsls	r3, r5, #3
 8004580:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004584:	00e2      	lsls	r2, r4, #3
 8004586:	4614      	mov	r4, r2
 8004588:	461d      	mov	r5, r3
 800458a:	eb14 030a 	adds.w	r3, r4, sl
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	eb45 030b 	adc.w	r3, r5, fp
 8004594:	607b      	str	r3, [r7, #4]
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045a2:	4629      	mov	r1, r5
 80045a4:	028b      	lsls	r3, r1, #10
 80045a6:	4621      	mov	r1, r4
 80045a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045ac:	4621      	mov	r1, r4
 80045ae:	028a      	lsls	r2, r1, #10
 80045b0:	4610      	mov	r0, r2
 80045b2:	4619      	mov	r1, r3
 80045b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b6:	2200      	movs	r2, #0
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	60fa      	str	r2, [r7, #12]
 80045bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045c0:	f7fb fe08 	bl	80001d4 <__aeabi_uldivmod>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4613      	mov	r3, r2
 80045ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045cc:	4b0b      	ldr	r3, [pc, #44]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x180>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	3301      	adds	r3, #1
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80045dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045e6:	e002      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045e8:	4b05      	ldr	r3, [pc, #20]	@ (8004600 <HAL_RCC_GetSysClockFreq+0x184>)
 80045ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3740      	adds	r7, #64	@ 0x40
 80045f4:	46bd      	mov	sp, r7
 80045f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045fa:	bf00      	nop
 80045fc:	40023800 	.word	0x40023800
 8004600:	00f42400 	.word	0x00f42400
 8004604:	017d7840 	.word	0x017d7840

08004608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800460c:	4b03      	ldr	r3, [pc, #12]	@ (800461c <HAL_RCC_GetHCLKFreq+0x14>)
 800460e:	681b      	ldr	r3, [r3, #0]
}
 8004610:	4618      	mov	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	20000000 	.word	0x20000000

08004620 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e07b      	b.n	800472a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	2b00      	cmp	r3, #0
 8004638:	d108      	bne.n	800464c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004642:	d009      	beq.n	8004658 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	61da      	str	r2, [r3, #28]
 800464a:	e005      	b.n	8004658 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fc f8e4 	bl	8000840 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800468e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046dc:	ea42 0103 	orr.w	r1, r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	f003 0104 	and.w	r1, r3, #4
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	f003 0210 	and.w	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004718:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b088      	sub	sp, #32
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	4613      	mov	r3, r2
 8004740:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004742:	f7fd fa9b 	bl	8001c7c <HAL_GetTick>
 8004746:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004748:	88fb      	ldrh	r3, [r7, #6]
 800474a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	d001      	beq.n	800475c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004758:	2302      	movs	r3, #2
 800475a:	e12a      	b.n	80049b2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_SPI_Transmit+0x36>
 8004762:	88fb      	ldrh	r3, [r7, #6]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e122      	b.n	80049b2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_SPI_Transmit+0x48>
 8004776:	2302      	movs	r3, #2
 8004778:	e11b      	b.n	80049b2 <HAL_SPI_Transmit+0x280>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2203      	movs	r2, #3
 8004786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	88fa      	ldrh	r2, [r7, #6]
 800479a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	88fa      	ldrh	r2, [r7, #6]
 80047a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047c8:	d10f      	bne.n	80047ea <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f4:	2b40      	cmp	r3, #64	@ 0x40
 80047f6:	d007      	beq.n	8004808 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004806:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004810:	d152      	bne.n	80048b8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HAL_SPI_Transmit+0xee>
 800481a:	8b7b      	ldrh	r3, [r7, #26]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d145      	bne.n	80048ac <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004824:	881a      	ldrh	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004830:	1c9a      	adds	r2, r3, #2
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004844:	e032      	b.n	80048ac <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b02      	cmp	r3, #2
 8004852:	d112      	bne.n	800487a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004858:	881a      	ldrh	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004864:	1c9a      	adds	r2, r3, #2
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004878:	e018      	b.n	80048ac <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800487a:	f7fd f9ff 	bl	8001c7c <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d803      	bhi.n	8004892 <HAL_SPI_Transmit+0x160>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004890:	d102      	bne.n	8004898 <HAL_SPI_Transmit+0x166>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e082      	b.n	80049b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1c7      	bne.n	8004846 <HAL_SPI_Transmit+0x114>
 80048b6:	e053      	b.n	8004960 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_SPI_Transmit+0x194>
 80048c0:	8b7b      	ldrh	r3, [r7, #26]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d147      	bne.n	8004956 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	330c      	adds	r3, #12
 80048d0:	7812      	ldrb	r2, [r2, #0]
 80048d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048ec:	e033      	b.n	8004956 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d113      	bne.n	8004924 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	330c      	adds	r3, #12
 8004906:	7812      	ldrb	r2, [r2, #0]
 8004908:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004922:	e018      	b.n	8004956 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004924:	f7fd f9aa 	bl	8001c7c <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d803      	bhi.n	800493c <HAL_SPI_Transmit+0x20a>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800493a:	d102      	bne.n	8004942 <HAL_SPI_Transmit+0x210>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e02d      	b.n	80049b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1c6      	bne.n	80048ee <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	6839      	ldr	r1, [r7, #0]
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f9f9 	bl	8004d5c <SPI_EndRxTxTransaction>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10a      	bne.n	8004994 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80049b0:	2300      	movs	r3, #0
  }
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3720      	adds	r7, #32
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d001      	beq.n	80049da <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80049d6:	2302      	movs	r3, #2
 80049d8:	e097      	b.n	8004b0a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_SPI_Transmit_DMA+0x2a>
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e08f      	b.n	8004b0a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_SPI_Transmit_DMA+0x3c>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e088      	b.n	8004b0a <HAL_SPI_Transmit_DMA+0x14e>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2203      	movs	r2, #3
 8004a04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	88fa      	ldrh	r2, [r7, #6]
 8004a18:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	88fa      	ldrh	r2, [r7, #6]
 8004a1e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a46:	d10f      	bne.n	8004a68 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a6c:	4a29      	ldr	r2, [pc, #164]	@ (8004b14 <HAL_SPI_Transmit_DMA+0x158>)
 8004a6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a74:	4a28      	ldr	r2, [pc, #160]	@ (8004b18 <HAL_SPI_Transmit_DMA+0x15c>)
 8004a76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a7c:	4a27      	ldr	r2, [pc, #156]	@ (8004b1c <HAL_SPI_Transmit_DMA+0x160>)
 8004a7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a84:	2200      	movs	r2, #0
 8004a86:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a90:	4619      	mov	r1, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	330c      	adds	r3, #12
 8004a98:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a9e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004aa0:	f7fd fadc 	bl	800205c <HAL_DMA_Start_IT>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aae:	f043 0210 	orr.w	r2, r3, #16
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e023      	b.n	8004b0a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b40      	cmp	r3, #64	@ 0x40
 8004ace:	d007      	beq.n	8004ae0 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ade:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0220 	orr.w	r2, r2, #32
 8004af6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0202 	orr.w	r2, r2, #2
 8004b06:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	08004bf1 	.word	0x08004bf1
 8004b18:	08004b49 	.word	0x08004b49
 8004b1c:	08004c0d 	.word	0x08004c0d

08004b20 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b54:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b56:	f7fd f891 	bl	8001c7c <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b6a:	d03b      	beq.n	8004be4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0220 	bic.w	r2, r2, #32
 8004b7a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0202 	bic.w	r2, r2, #2
 8004b8a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	2164      	movs	r1, #100	@ 0x64
 8004b90:	6978      	ldr	r0, [r7, #20]
 8004b92:	f000 f8e3 	bl	8004d5c <SPI_EndRxTxTransaction>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba0:	f043 0220 	orr.w	r2, r3, #32
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004bdc:	6978      	ldr	r0, [r7, #20]
 8004bde:	f7ff ffa9 	bl	8004b34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004be2:	e002      	b.n	8004bea <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004be4:	6978      	ldr	r0, [r7, #20]
 8004be6:	f7fc f803 	bl	8000bf0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7ff ff8e 	bl	8004b20 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0203 	bic.w	r2, r2, #3
 8004c28:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2e:	f043 0210 	orr.w	r2, r3, #16
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f7ff ff78 	bl	8004b34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c44:	bf00      	nop
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c5c:	f7fd f80e 	bl	8001c7c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	4413      	add	r3, r2
 8004c6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c6c:	f7fd f806 	bl	8001c7c <HAL_GetTick>
 8004c70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c72:	4b39      	ldr	r3, [pc, #228]	@ (8004d58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	015b      	lsls	r3, r3, #5
 8004c78:	0d1b      	lsrs	r3, r3, #20
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	fb02 f303 	mul.w	r3, r2, r3
 8004c80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c82:	e054      	b.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c8a:	d050      	beq.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c8c:	f7fc fff6 	bl	8001c7c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d902      	bls.n	8004ca2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d13d      	bne.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cba:	d111      	bne.n	8004ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cc4:	d004      	beq.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cce:	d107      	bne.n	8004ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce8:	d10f      	bne.n	8004d0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e017      	b.n	8004d4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4013      	ands	r3, r2
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	bf0c      	ite	eq
 8004d3e:	2301      	moveq	r3, #1
 8004d40:	2300      	movne	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d19b      	bne.n	8004c84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000000 	.word	0x20000000

08004d5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	2102      	movs	r1, #2
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7ff ff6a 	bl	8004c4c <SPI_WaitFlagStateUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d82:	f043 0220 	orr.w	r2, r3, #32
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e032      	b.n	8004df4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dfc <SPI_EndRxTxTransaction+0xa0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1b      	ldr	r2, [pc, #108]	@ (8004e00 <SPI_EndRxTxTransaction+0xa4>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	0d5b      	lsrs	r3, r3, #21
 8004d9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dac:	d112      	bne.n	8004dd4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2180      	movs	r1, #128	@ 0x80
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f7ff ff47 	bl	8004c4c <SPI_WaitFlagStateUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d016      	beq.n	8004df2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc8:	f043 0220 	orr.w	r2, r3, #32
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e00f      	b.n	8004df4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dea:	2b80      	cmp	r3, #128	@ 0x80
 8004dec:	d0f2      	beq.n	8004dd4 <SPI_EndRxTxTransaction+0x78>
 8004dee:	e000      	b.n	8004df2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004df0:	bf00      	nop
  }

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	20000000 	.word	0x20000000
 8004e00:	165e9f81 	.word	0x165e9f81

08004e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e041      	b.n	8004e9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fb fea8 	bl	8000b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f000 f8f4 	bl	8005030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_TIM_ConfigClockSource+0x1c>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e0b4      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x186>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004edc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ee4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ef6:	d03e      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0xd4>
 8004ef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004efc:	f200 8087 	bhi.w	800500e <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f04:	f000 8086 	beq.w	8005014 <HAL_TIM_ConfigClockSource+0x172>
 8004f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f0c:	d87f      	bhi.n	800500e <HAL_TIM_ConfigClockSource+0x16c>
 8004f0e:	2b70      	cmp	r3, #112	@ 0x70
 8004f10:	d01a      	beq.n	8004f48 <HAL_TIM_ConfigClockSource+0xa6>
 8004f12:	2b70      	cmp	r3, #112	@ 0x70
 8004f14:	d87b      	bhi.n	800500e <HAL_TIM_ConfigClockSource+0x16c>
 8004f16:	2b60      	cmp	r3, #96	@ 0x60
 8004f18:	d050      	beq.n	8004fbc <HAL_TIM_ConfigClockSource+0x11a>
 8004f1a:	2b60      	cmp	r3, #96	@ 0x60
 8004f1c:	d877      	bhi.n	800500e <HAL_TIM_ConfigClockSource+0x16c>
 8004f1e:	2b50      	cmp	r3, #80	@ 0x50
 8004f20:	d03c      	beq.n	8004f9c <HAL_TIM_ConfigClockSource+0xfa>
 8004f22:	2b50      	cmp	r3, #80	@ 0x50
 8004f24:	d873      	bhi.n	800500e <HAL_TIM_ConfigClockSource+0x16c>
 8004f26:	2b40      	cmp	r3, #64	@ 0x40
 8004f28:	d058      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0x13a>
 8004f2a:	2b40      	cmp	r3, #64	@ 0x40
 8004f2c:	d86f      	bhi.n	800500e <HAL_TIM_ConfigClockSource+0x16c>
 8004f2e:	2b30      	cmp	r3, #48	@ 0x30
 8004f30:	d064      	beq.n	8004ffc <HAL_TIM_ConfigClockSource+0x15a>
 8004f32:	2b30      	cmp	r3, #48	@ 0x30
 8004f34:	d86b      	bhi.n	800500e <HAL_TIM_ConfigClockSource+0x16c>
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d060      	beq.n	8004ffc <HAL_TIM_ConfigClockSource+0x15a>
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d867      	bhi.n	800500e <HAL_TIM_ConfigClockSource+0x16c>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d05c      	beq.n	8004ffc <HAL_TIM_ConfigClockSource+0x15a>
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d05a      	beq.n	8004ffc <HAL_TIM_ConfigClockSource+0x15a>
 8004f46:	e062      	b.n	800500e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f58:	f000 f970 	bl	800523c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	609a      	str	r2, [r3, #8]
      break;
 8004f74:	e04f      	b.n	8005016 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f86:	f000 f959 	bl	800523c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f98:	609a      	str	r2, [r3, #8]
      break;
 8004f9a:	e03c      	b.n	8005016 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa8:	461a      	mov	r2, r3
 8004faa:	f000 f8cd 	bl	8005148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2150      	movs	r1, #80	@ 0x50
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 f926 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 8004fba:	e02c      	b.n	8005016 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f000 f8ec 	bl	80051a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2160      	movs	r1, #96	@ 0x60
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f916 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 8004fda:	e01c      	b.n	8005016 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f000 f8ad 	bl	8005148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2140      	movs	r1, #64	@ 0x40
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 f906 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 8004ffa:	e00c      	b.n	8005016 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f000 f8fd 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 800500c:	e003      	b.n	8005016 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	73fb      	strb	r3, [r7, #15]
      break;
 8005012:	e000      	b.n	8005016 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005014:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005026:	7bfb      	ldrb	r3, [r7, #15]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a3a      	ldr	r2, [pc, #232]	@ (800512c <TIM_Base_SetConfig+0xfc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00f      	beq.n	8005068 <TIM_Base_SetConfig+0x38>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800504e:	d00b      	beq.n	8005068 <TIM_Base_SetConfig+0x38>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a37      	ldr	r2, [pc, #220]	@ (8005130 <TIM_Base_SetConfig+0x100>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <TIM_Base_SetConfig+0x38>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a36      	ldr	r2, [pc, #216]	@ (8005134 <TIM_Base_SetConfig+0x104>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_Base_SetConfig+0x38>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a35      	ldr	r2, [pc, #212]	@ (8005138 <TIM_Base_SetConfig+0x108>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d108      	bne.n	800507a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800506e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a2b      	ldr	r2, [pc, #172]	@ (800512c <TIM_Base_SetConfig+0xfc>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01b      	beq.n	80050ba <TIM_Base_SetConfig+0x8a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005088:	d017      	beq.n	80050ba <TIM_Base_SetConfig+0x8a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a28      	ldr	r2, [pc, #160]	@ (8005130 <TIM_Base_SetConfig+0x100>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <TIM_Base_SetConfig+0x8a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a27      	ldr	r2, [pc, #156]	@ (8005134 <TIM_Base_SetConfig+0x104>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00f      	beq.n	80050ba <TIM_Base_SetConfig+0x8a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a26      	ldr	r2, [pc, #152]	@ (8005138 <TIM_Base_SetConfig+0x108>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00b      	beq.n	80050ba <TIM_Base_SetConfig+0x8a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a25      	ldr	r2, [pc, #148]	@ (800513c <TIM_Base_SetConfig+0x10c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d007      	beq.n	80050ba <TIM_Base_SetConfig+0x8a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a24      	ldr	r2, [pc, #144]	@ (8005140 <TIM_Base_SetConfig+0x110>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d003      	beq.n	80050ba <TIM_Base_SetConfig+0x8a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a23      	ldr	r2, [pc, #140]	@ (8005144 <TIM_Base_SetConfig+0x114>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d108      	bne.n	80050cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a0e      	ldr	r2, [pc, #56]	@ (800512c <TIM_Base_SetConfig+0xfc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d103      	bne.n	8005100 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b01      	cmp	r3, #1
 8005110:	d105      	bne.n	800511e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f023 0201 	bic.w	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	611a      	str	r2, [r3, #16]
  }
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40014000 	.word	0x40014000
 8005140:	40014400 	.word	0x40014400
 8005144:	40014800 	.word	0x40014800

08005148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f023 0201 	bic.w	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f023 030a 	bic.w	r3, r3, #10
 8005184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	621a      	str	r2, [r3, #32]
}
 800519a:	bf00      	nop
 800519c:	371c      	adds	r7, #28
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b087      	sub	sp, #28
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f023 0210 	bic.w	r2, r3, #16
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	031b      	lsls	r3, r3, #12
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	621a      	str	r2, [r3, #32]
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005206:	b480      	push	{r7}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	f043 0307 	orr.w	r3, r3, #7
 8005228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	609a      	str	r2, [r3, #8]
}
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	021a      	lsls	r2, r3, #8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	431a      	orrs	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4313      	orrs	r3, r2
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	609a      	str	r2, [r3, #8]
}
 8005270:	bf00      	nop
 8005272:	371c      	adds	r7, #28
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005290:	2302      	movs	r3, #2
 8005292:	e050      	b.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005344 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d018      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052e0:	d013      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a18      	ldr	r2, [pc, #96]	@ (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a16      	ldr	r2, [pc, #88]	@ (800534c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a15      	ldr	r2, [pc, #84]	@ (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a13      	ldr	r2, [pc, #76]	@ (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d10c      	bne.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	4313      	orrs	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40010000 	.word	0x40010000
 8005348:	40000400 	.word	0x40000400
 800534c:	40000800 	.word	0x40000800
 8005350:	40000c00 	.word	0x40000c00
 8005354:	40014000 	.word	0x40014000

08005358 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005358:	b084      	sub	sp, #16
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	f107 001c 	add.w	r0, r7, #28
 8005366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800536a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800536e:	2b01      	cmp	r3, #1
 8005370:	d123      	bne.n	80053ba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005376:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800539a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d105      	bne.n	80053ae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f001 fae8 	bl	8006984 <USB_CoreReset>
 80053b4:	4603      	mov	r3, r0
 80053b6:	73fb      	strb	r3, [r7, #15]
 80053b8:	e01b      	b.n	80053f2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f001 fadc 	bl	8006984 <USB_CoreReset>
 80053cc:	4603      	mov	r3, r0
 80053ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d106      	bne.n	80053e6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80053e4:	e005      	b.n	80053f2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053f2:	7fbb      	ldrb	r3, [r7, #30]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d10b      	bne.n	8005410 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f043 0206 	orr.w	r2, r3, #6
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f043 0220 	orr.w	r2, r3, #32
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005410:	7bfb      	ldrb	r3, [r7, #15]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800541c:	b004      	add	sp, #16
 800541e:	4770      	bx	lr

08005420 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	4613      	mov	r3, r2
 800542c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	2b02      	cmp	r3, #2
 8005432:	d165      	bne.n	8005500 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4a41      	ldr	r2, [pc, #260]	@ (800553c <USB_SetTurnaroundTime+0x11c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d906      	bls.n	800544a <USB_SetTurnaroundTime+0x2a>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4a40      	ldr	r2, [pc, #256]	@ (8005540 <USB_SetTurnaroundTime+0x120>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d202      	bcs.n	800544a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005444:	230f      	movs	r3, #15
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	e062      	b.n	8005510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4a3c      	ldr	r2, [pc, #240]	@ (8005540 <USB_SetTurnaroundTime+0x120>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d306      	bcc.n	8005460 <USB_SetTurnaroundTime+0x40>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4a3b      	ldr	r2, [pc, #236]	@ (8005544 <USB_SetTurnaroundTime+0x124>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d202      	bcs.n	8005460 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800545a:	230e      	movs	r3, #14
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	e057      	b.n	8005510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4a38      	ldr	r2, [pc, #224]	@ (8005544 <USB_SetTurnaroundTime+0x124>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d306      	bcc.n	8005476 <USB_SetTurnaroundTime+0x56>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4a37      	ldr	r2, [pc, #220]	@ (8005548 <USB_SetTurnaroundTime+0x128>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d202      	bcs.n	8005476 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005470:	230d      	movs	r3, #13
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	e04c      	b.n	8005510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4a33      	ldr	r2, [pc, #204]	@ (8005548 <USB_SetTurnaroundTime+0x128>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d306      	bcc.n	800548c <USB_SetTurnaroundTime+0x6c>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4a32      	ldr	r2, [pc, #200]	@ (800554c <USB_SetTurnaroundTime+0x12c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d802      	bhi.n	800548c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005486:	230c      	movs	r3, #12
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	e041      	b.n	8005510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4a2f      	ldr	r2, [pc, #188]	@ (800554c <USB_SetTurnaroundTime+0x12c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d906      	bls.n	80054a2 <USB_SetTurnaroundTime+0x82>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4a2e      	ldr	r2, [pc, #184]	@ (8005550 <USB_SetTurnaroundTime+0x130>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d802      	bhi.n	80054a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800549c:	230b      	movs	r3, #11
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e036      	b.n	8005510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005550 <USB_SetTurnaroundTime+0x130>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d906      	bls.n	80054b8 <USB_SetTurnaroundTime+0x98>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4a29      	ldr	r2, [pc, #164]	@ (8005554 <USB_SetTurnaroundTime+0x134>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d802      	bhi.n	80054b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054b2:	230a      	movs	r3, #10
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	e02b      	b.n	8005510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4a26      	ldr	r2, [pc, #152]	@ (8005554 <USB_SetTurnaroundTime+0x134>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d906      	bls.n	80054ce <USB_SetTurnaroundTime+0xae>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4a25      	ldr	r2, [pc, #148]	@ (8005558 <USB_SetTurnaroundTime+0x138>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d202      	bcs.n	80054ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054c8:	2309      	movs	r3, #9
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e020      	b.n	8005510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	4a21      	ldr	r2, [pc, #132]	@ (8005558 <USB_SetTurnaroundTime+0x138>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d306      	bcc.n	80054e4 <USB_SetTurnaroundTime+0xc4>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4a20      	ldr	r2, [pc, #128]	@ (800555c <USB_SetTurnaroundTime+0x13c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d802      	bhi.n	80054e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054de:	2308      	movs	r3, #8
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	e015      	b.n	8005510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4a1d      	ldr	r2, [pc, #116]	@ (800555c <USB_SetTurnaroundTime+0x13c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d906      	bls.n	80054fa <USB_SetTurnaroundTime+0xda>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005560 <USB_SetTurnaroundTime+0x140>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d202      	bcs.n	80054fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054f4:	2307      	movs	r3, #7
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	e00a      	b.n	8005510 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054fa:	2306      	movs	r3, #6
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	e007      	b.n	8005510 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005506:	2309      	movs	r3, #9
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	e001      	b.n	8005510 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800550c:	2309      	movs	r3, #9
 800550e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	029b      	lsls	r3, r3, #10
 8005524:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005528:	431a      	orrs	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	00d8acbf 	.word	0x00d8acbf
 8005540:	00e4e1c0 	.word	0x00e4e1c0
 8005544:	00f42400 	.word	0x00f42400
 8005548:	01067380 	.word	0x01067380
 800554c:	011a499f 	.word	0x011a499f
 8005550:	01312cff 	.word	0x01312cff
 8005554:	014ca43f 	.word	0x014ca43f
 8005558:	016e3600 	.word	0x016e3600
 800555c:	01a6ab1f 	.word	0x01a6ab1f
 8005560:	01e84800 	.word	0x01e84800

08005564 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f043 0201 	orr.w	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f023 0201 	bic.w	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d115      	bne.n	80055f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055d6:	200a      	movs	r0, #10
 80055d8:	f7fc fb5c 	bl	8001c94 <HAL_Delay>
      ms += 10U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	330a      	adds	r3, #10
 80055e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f001 f93f 	bl	8006866 <USB_GetMode>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d01e      	beq.n	800562c <USB_SetCurrentMode+0x84>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80055f2:	d9f0      	bls.n	80055d6 <USB_SetCurrentMode+0x2e>
 80055f4:	e01a      	b.n	800562c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d115      	bne.n	8005628 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005608:	200a      	movs	r0, #10
 800560a:	f7fc fb43 	bl	8001c94 <HAL_Delay>
      ms += 10U;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	330a      	adds	r3, #10
 8005612:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f001 f926 	bl	8006866 <USB_GetMode>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <USB_SetCurrentMode+0x84>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2bc7      	cmp	r3, #199	@ 0xc7
 8005624:	d9f0      	bls.n	8005608 <USB_SetCurrentMode+0x60>
 8005626:	e001      	b.n	800562c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e005      	b.n	8005638 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005630:	d101      	bne.n	8005636 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005640:	b084      	sub	sp, #16
 8005642:	b580      	push	{r7, lr}
 8005644:	b086      	sub	sp, #24
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800564e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800565a:	2300      	movs	r3, #0
 800565c:	613b      	str	r3, [r7, #16]
 800565e:	e009      	b.n	8005674 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	3340      	adds	r3, #64	@ 0x40
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	2200      	movs	r2, #0
 800566c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	3301      	adds	r3, #1
 8005672:	613b      	str	r3, [r7, #16]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2b0e      	cmp	r3, #14
 8005678:	d9f2      	bls.n	8005660 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800567a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800567e:	2b00      	cmp	r3, #0
 8005680:	d11c      	bne.n	80056bc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005690:	f043 0302 	orr.w	r3, r3, #2
 8005694:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80056ba:	e00b      	b.n	80056d4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056cc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056da:	461a      	mov	r2, r3
 80056dc:	2300      	movs	r3, #0
 80056de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d10d      	bne.n	8005704 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056f0:	2100      	movs	r1, #0
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f968 	bl	80059c8 <USB_SetDevSpeed>
 80056f8:	e008      	b.n	800570c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056fa:	2101      	movs	r1, #1
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f963 	bl	80059c8 <USB_SetDevSpeed>
 8005702:	e003      	b.n	800570c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005704:	2103      	movs	r1, #3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f95e 	bl	80059c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800570c:	2110      	movs	r1, #16
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f8fa 	bl	8005908 <USB_FlushTxFifo>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f924 	bl	800596c <USB_FlushRxFifo>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005734:	461a      	mov	r2, r3
 8005736:	2300      	movs	r3, #0
 8005738:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005740:	461a      	mov	r2, r3
 8005742:	2300      	movs	r3, #0
 8005744:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800574c:	461a      	mov	r2, r3
 800574e:	2300      	movs	r3, #0
 8005750:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	e043      	b.n	80057e0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800576a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800576e:	d118      	bne.n	80057a2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005782:	461a      	mov	r2, r3
 8005784:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	e013      	b.n	80057b4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005798:	461a      	mov	r2, r3
 800579a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	e008      	b.n	80057b4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ae:	461a      	mov	r2, r3
 80057b0:	2300      	movs	r3, #0
 80057b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c0:	461a      	mov	r2, r3
 80057c2:	2300      	movs	r3, #0
 80057c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d2:	461a      	mov	r2, r3
 80057d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	3301      	adds	r3, #1
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057e4:	461a      	mov	r2, r3
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d3b5      	bcc.n	8005758 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ec:	2300      	movs	r3, #0
 80057ee:	613b      	str	r3, [r7, #16]
 80057f0:	e043      	b.n	800587a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005804:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005808:	d118      	bne.n	800583c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800581c:	461a      	mov	r2, r3
 800581e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	e013      	b.n	800584e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005832:	461a      	mov	r2, r3
 8005834:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e008      	b.n	800584e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005848:	461a      	mov	r2, r3
 800584a:	2300      	movs	r3, #0
 800584c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585a:	461a      	mov	r2, r3
 800585c:	2300      	movs	r3, #0
 800585e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586c:	461a      	mov	r2, r3
 800586e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005872:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	3301      	adds	r3, #1
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800587e:	461a      	mov	r2, r3
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4293      	cmp	r3, r2
 8005884:	d3b5      	bcc.n	80057f2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005898:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80058a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d105      	bne.n	80058bc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	f043 0210 	orr.w	r2, r3, #16
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699a      	ldr	r2, [r3, #24]
 80058c0:	4b10      	ldr	r3, [pc, #64]	@ (8005904 <USB_DevInit+0x2c4>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	f043 0208 	orr.w	r2, r3, #8
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d107      	bne.n	80058f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058ec:	f043 0304 	orr.w	r3, r3, #4
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005900:	b004      	add	sp, #16
 8005902:	4770      	bx	lr
 8005904:	803c3800 	.word	0x803c3800

08005908 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3301      	adds	r3, #1
 800591a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005922:	d901      	bls.n	8005928 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e01b      	b.n	8005960 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	daf2      	bge.n	8005916 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	019b      	lsls	r3, r3, #6
 8005938:	f043 0220 	orr.w	r2, r3, #32
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3301      	adds	r3, #1
 8005944:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800594c:	d901      	bls.n	8005952 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e006      	b.n	8005960 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b20      	cmp	r3, #32
 800595c:	d0f0      	beq.n	8005940 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3301      	adds	r3, #1
 800597c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005984:	d901      	bls.n	800598a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e018      	b.n	80059bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	daf2      	bge.n	8005978 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2210      	movs	r2, #16
 800599a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3301      	adds	r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059a8:	d901      	bls.n	80059ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e006      	b.n	80059bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0310 	and.w	r3, r3, #16
 80059b6:	2b10      	cmp	r3, #16
 80059b8:	d0f0      	beq.n	800599c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	68f9      	ldr	r1, [r7, #12]
 80059e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059e8:	4313      	orrs	r3, r2
 80059ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b087      	sub	sp, #28
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 0306 	and.w	r3, r3, #6
 8005a12:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d102      	bne.n	8005a20 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	75fb      	strb	r3, [r7, #23]
 8005a1e:	e00a      	b.n	8005a36 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d002      	beq.n	8005a2c <USB_GetDevSpeed+0x32>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b06      	cmp	r3, #6
 8005a2a:	d102      	bne.n	8005a32 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	75fb      	strb	r3, [r7, #23]
 8005a30:	e001      	b.n	8005a36 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a32:	230f      	movs	r3, #15
 8005a34:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d13a      	bne.n	8005ad6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	2101      	movs	r1, #1
 8005a72:	fa01 f303 	lsl.w	r3, r1, r3
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	68f9      	ldr	r1, [r7, #12]
 8005a7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d155      	bne.n	8005b44 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	791b      	ldrb	r3, [r3, #4]
 8005ab2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ab4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	059b      	lsls	r3, r3, #22
 8005aba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005abc:	4313      	orrs	r3, r2
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	e036      	b.n	8005b44 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005adc:	69da      	ldr	r2, [r3, #28]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aec:	041b      	lsls	r3, r3, #16
 8005aee:	68f9      	ldr	r1, [r7, #12]
 8005af0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005af4:	4313      	orrs	r3, r2
 8005af6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d11a      	bne.n	8005b44 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	791b      	ldrb	r3, [r3, #4]
 8005b28:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b2a:	430b      	orrs	r3, r1
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	0151      	lsls	r1, r2, #5
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	440a      	add	r2, r1
 8005b36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b42:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d161      	bne.n	8005c34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b86:	d11f      	bne.n	8005bc8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ba2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ba6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bc2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	2101      	movs	r1, #1
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	43db      	mvns	r3, r3
 8005be2:	68f9      	ldr	r1, [r7, #12]
 8005be4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005be8:	4013      	ands	r3, r2
 8005bea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	43db      	mvns	r3, r3
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	0159      	lsls	r1, r3, #5
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	440b      	add	r3, r1
 8005c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4b35      	ldr	r3, [pc, #212]	@ (8005d04 <USB_DeactivateEndpoint+0x1b0>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	600b      	str	r3, [r1, #0]
 8005c32:	e060      	b.n	8005cf6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c4a:	d11f      	bne.n	8005c8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	0151      	lsls	r1, r2, #5
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	440a      	add	r2, r1
 8005c82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca2:	041b      	lsls	r3, r3, #16
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	68f9      	ldr	r1, [r7, #12]
 8005ca8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cac:	4013      	ands	r3, r2
 8005cae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	f003 030f 	and.w	r3, r3, #15
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc6:	041b      	lsls	r3, r3, #16
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	0159      	lsls	r1, r3, #5
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	440b      	add	r3, r1
 8005cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4b05      	ldr	r3, [pc, #20]	@ (8005d08 <USB_DeactivateEndpoint+0x1b4>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	ec337800 	.word	0xec337800
 8005d08:	eff37800 	.word	0xeff37800

08005d0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08a      	sub	sp, #40	@ 0x28
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	4613      	mov	r3, r2
 8005d18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	f040 817f 	bne.w	800602c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d132      	bne.n	8005d9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d50:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d54:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	69fa      	ldr	r2, [r7, #28]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d94:	0cdb      	lsrs	r3, r3, #19
 8005d96:	04db      	lsls	r3, r3, #19
 8005d98:	6113      	str	r3, [r2, #16]
 8005d9a:	e097      	b.n	8005ecc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005db6:	0cdb      	lsrs	r3, r3, #19
 8005db8:	04db      	lsls	r3, r3, #19
 8005dba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	0151      	lsls	r1, r2, #5
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	440a      	add	r2, r1
 8005dd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dd6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005dda:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005dde:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d11a      	bne.n	8005e1c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d903      	bls.n	8005dfa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e18:	6113      	str	r3, [r2, #16]
 8005e1a:	e044      	b.n	8005ea6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	691a      	ldr	r2, [r3, #16]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	4413      	add	r3, r2
 8005e26:	1e5a      	subs	r2, r3, #1
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e30:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	8afb      	ldrh	r3, [r7, #22]
 8005e42:	04d9      	lsls	r1, r3, #19
 8005e44:	4ba4      	ldr	r3, [pc, #656]	@ (80060d8 <USB_EPStartXfer+0x3cc>)
 8005e46:	400b      	ands	r3, r1
 8005e48:	69b9      	ldr	r1, [r7, #24]
 8005e4a:	0148      	lsls	r0, r1, #5
 8005e4c:	69f9      	ldr	r1, [r7, #28]
 8005e4e:	4401      	add	r1, r0
 8005e50:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005e54:	4313      	orrs	r3, r2
 8005e56:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	791b      	ldrb	r3, [r3, #4]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d122      	bne.n	8005ea6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e7a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005e7e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	8afb      	ldrh	r3, [r7, #22]
 8005e90:	075b      	lsls	r3, r3, #29
 8005e92:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005e96:	69b9      	ldr	r1, [r7, #24]
 8005e98:	0148      	lsls	r0, r1, #5
 8005e9a:	69f9      	ldr	r1, [r7, #28]
 8005e9c:	4401      	add	r1, r0
 8005e9e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ebc:	69b9      	ldr	r1, [r7, #24]
 8005ebe:	0148      	lsls	r0, r1, #5
 8005ec0:	69f9      	ldr	r1, [r7, #28]
 8005ec2:	4401      	add	r1, r0
 8005ec4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d14b      	bne.n	8005f6a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	791b      	ldrb	r3, [r3, #4]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d128      	bne.n	8005f48 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d110      	bne.n	8005f28 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	e00f      	b.n	8005f48 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	0151      	lsls	r1, r2, #5
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	440a      	add	r2, r1
 8005f3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f46:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	e166      	b.n	8006238 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f84:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f88:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	791b      	ldrb	r3, [r3, #4]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d015      	beq.n	8005fbe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 814e 	beq.w	8006238 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	2101      	movs	r1, #1
 8005fae:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb2:	69f9      	ldr	r1, [r7, #28]
 8005fb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	634b      	str	r3, [r1, #52]	@ 0x34
 8005fbc:	e13c      	b.n	8006238 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d110      	bne.n	8005ff0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	0151      	lsls	r1, r2, #5
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	440a      	add	r2, r1
 8005fe4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fe8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	e00f      	b.n	8006010 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800600a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800600e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	68d9      	ldr	r1, [r3, #12]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	781a      	ldrb	r2, [r3, #0]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	b298      	uxth	r0, r3
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	4603      	mov	r3, r0
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f9b9 	bl	800639c <USB_WritePacket>
 800602a:	e105      	b.n	8006238 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006046:	0cdb      	lsrs	r3, r3, #19
 8006048:	04db      	lsls	r3, r3, #19
 800604a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	69fa      	ldr	r2, [r7, #28]
 8006060:	440a      	add	r2, r1
 8006062:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006066:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800606a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800606e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d132      	bne.n	80060dc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060a4:	69b9      	ldr	r1, [r7, #24]
 80060a6:	0148      	lsls	r0, r1, #5
 80060a8:	69f9      	ldr	r1, [r7, #28]
 80060aa:	4401      	add	r1, r0
 80060ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060b0:	4313      	orrs	r3, r2
 80060b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060d2:	6113      	str	r3, [r2, #16]
 80060d4:	e062      	b.n	800619c <USB_EPStartXfer+0x490>
 80060d6:	bf00      	nop
 80060d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d123      	bne.n	800612c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060fa:	69b9      	ldr	r1, [r7, #24]
 80060fc:	0148      	lsls	r0, r1, #5
 80060fe:	69f9      	ldr	r1, [r7, #28]
 8006100:	4401      	add	r1, r0
 8006102:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006106:	4313      	orrs	r3, r2
 8006108:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	0151      	lsls	r1, r2, #5
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	440a      	add	r2, r1
 8006120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006124:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006128:	6113      	str	r3, [r2, #16]
 800612a:	e037      	b.n	800619c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	4413      	add	r3, r2
 8006136:	1e5a      	subs	r2, r3, #1
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006140:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	8afa      	ldrh	r2, [r7, #22]
 8006148:	fb03 f202 	mul.w	r2, r3, r2
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	8afb      	ldrh	r3, [r7, #22]
 8006160:	04d9      	lsls	r1, r3, #19
 8006162:	4b38      	ldr	r3, [pc, #224]	@ (8006244 <USB_EPStartXfer+0x538>)
 8006164:	400b      	ands	r3, r1
 8006166:	69b9      	ldr	r1, [r7, #24]
 8006168:	0148      	lsls	r0, r1, #5
 800616a:	69f9      	ldr	r1, [r7, #28]
 800616c:	4401      	add	r1, r0
 800616e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006172:	4313      	orrs	r3, r2
 8006174:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800618c:	69b9      	ldr	r1, [r7, #24]
 800618e:	0148      	lsls	r0, r1, #5
 8006190:	69f9      	ldr	r1, [r7, #28]
 8006192:	4401      	add	r1, r0
 8006194:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006198:	4313      	orrs	r3, r2
 800619a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d10d      	bne.n	80061be <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d009      	beq.n	80061be <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	68d9      	ldr	r1, [r3, #12]
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ba:	460a      	mov	r2, r1
 80061bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	791b      	ldrb	r3, [r3, #4]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d128      	bne.n	8006218 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d110      	bne.n	80061f8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	e00f      	b.n	8006218 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006216:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006232:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006236:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	1ff80000 	.word	0x1ff80000

08006248 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	785b      	ldrb	r3, [r3, #1]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d14a      	bne.n	80062fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800627a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800627e:	f040 8086 	bne.w	800638e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	7812      	ldrb	r2, [r2, #0]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	440a      	add	r2, r1
 800629c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	7812      	ldrb	r2, [r2, #0]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3301      	adds	r3, #1
 80062ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d902      	bls.n	80062e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	75fb      	strb	r3, [r7, #23]
          break;
 80062de:	e056      	b.n	800638e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062f8:	d0e7      	beq.n	80062ca <USB_EPStopXfer+0x82>
 80062fa:	e048      	b.n	800638e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006310:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006314:	d13b      	bne.n	800638e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	7812      	ldrb	r2, [r2, #0]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	440a      	add	r2, r1
 8006330:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006334:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006338:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	7812      	ldrb	r2, [r2, #0]
 800634e:	0151      	lsls	r1, r2, #5
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	440a      	add	r2, r1
 8006354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006358:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800635c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3301      	adds	r3, #1
 8006362:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f242 7210 	movw	r2, #10000	@ 0x2710
 800636a:	4293      	cmp	r3, r2
 800636c:	d902      	bls.n	8006374 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	75fb      	strb	r3, [r7, #23]
          break;
 8006372:	e00c      	b.n	800638e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800638c:	d0e7      	beq.n	800635e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800638e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006390:	4618      	mov	r0, r3
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800639c:	b480      	push	{r7}
 800639e:	b089      	sub	sp, #36	@ 0x24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	4611      	mov	r1, r2
 80063a8:	461a      	mov	r2, r3
 80063aa:	460b      	mov	r3, r1
 80063ac:	71fb      	strb	r3, [r7, #7]
 80063ae:	4613      	mov	r3, r2
 80063b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d123      	bne.n	800640a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063c2:	88bb      	ldrh	r3, [r7, #4]
 80063c4:	3303      	adds	r3, #3
 80063c6:	089b      	lsrs	r3, r3, #2
 80063c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063ca:	2300      	movs	r3, #0
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	e018      	b.n	8006402 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063d0:	79fb      	ldrb	r3, [r7, #7]
 80063d2:	031a      	lsls	r2, r3, #12
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063dc:	461a      	mov	r2, r3
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	3301      	adds	r3, #1
 80063e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	3301      	adds	r3, #1
 80063ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	3301      	adds	r3, #1
 80063f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	3301      	adds	r3, #1
 80063fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	3301      	adds	r3, #1
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	429a      	cmp	r2, r3
 8006408:	d3e2      	bcc.n	80063d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3724      	adds	r7, #36	@ 0x24
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006418:	b480      	push	{r7}
 800641a:	b08b      	sub	sp, #44	@ 0x2c
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	4613      	mov	r3, r2
 8006424:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800642e:	88fb      	ldrh	r3, [r7, #6]
 8006430:	089b      	lsrs	r3, r3, #2
 8006432:	b29b      	uxth	r3, r3
 8006434:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006436:	88fb      	ldrh	r3, [r7, #6]
 8006438:	f003 0303 	and.w	r3, r3, #3
 800643c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800643e:	2300      	movs	r3, #0
 8006440:	623b      	str	r3, [r7, #32]
 8006442:	e014      	b.n	800646e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006452:	3301      	adds	r3, #1
 8006454:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	3301      	adds	r3, #1
 800645a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645e:	3301      	adds	r3, #1
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	3301      	adds	r3, #1
 8006466:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	3301      	adds	r3, #1
 800646c:	623b      	str	r3, [r7, #32]
 800646e:	6a3a      	ldr	r2, [r7, #32]
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	429a      	cmp	r2, r3
 8006474:	d3e6      	bcc.n	8006444 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006476:	8bfb      	ldrh	r3, [r7, #30]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d01e      	beq.n	80064ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006486:	461a      	mov	r2, r3
 8006488:	f107 0310 	add.w	r3, r7, #16
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	fa22 f303 	lsr.w	r3, r2, r3
 800649c:	b2da      	uxtb	r2, r3
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	701a      	strb	r2, [r3, #0]
      i++;
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	3301      	adds	r3, #1
 80064a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	3301      	adds	r3, #1
 80064ac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80064ae:	8bfb      	ldrh	r3, [r7, #30]
 80064b0:	3b01      	subs	r3, #1
 80064b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064b4:	8bfb      	ldrh	r3, [r7, #30]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1ea      	bne.n	8006490 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80064bc:	4618      	mov	r0, r3
 80064be:	372c      	adds	r7, #44	@ 0x2c
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	785b      	ldrb	r3, [r3, #1]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d12c      	bne.n	800653e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	db12      	blt.n	800651c <USB_EPSetStall+0x54>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00f      	beq.n	800651c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	440a      	add	r2, r1
 8006512:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006516:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800651a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	440a      	add	r2, r1
 8006532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006536:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	e02b      	b.n	8006596 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	db12      	blt.n	8006576 <USB_EPSetStall+0xae>
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00f      	beq.n	8006576 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	440a      	add	r2, r1
 800656c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006570:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006574:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	0151      	lsls	r1, r2, #5
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	440a      	add	r2, r1
 800658c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006590:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006594:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d128      	bne.n	8006612 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	0151      	lsls	r1, r2, #5
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	440a      	add	r2, r1
 80065d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	791b      	ldrb	r3, [r3, #4]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d003      	beq.n	80065f0 <USB_EPClearStall+0x4c>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	791b      	ldrb	r3, [r3, #4]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d138      	bne.n	8006662 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	440a      	add	r2, r1
 8006606:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800660a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	e027      	b.n	8006662 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4413      	add	r3, r2
 800661a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	0151      	lsls	r1, r2, #5
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	440a      	add	r2, r1
 8006628:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800662c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006630:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	791b      	ldrb	r3, [r3, #4]
 8006636:	2b03      	cmp	r3, #3
 8006638:	d003      	beq.n	8006642 <USB_EPClearStall+0x9e>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	791b      	ldrb	r3, [r3, #4]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d10f      	bne.n	8006662 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	440a      	add	r2, r1
 8006658:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800665c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006660:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800668e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006692:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80066a4:	68f9      	ldr	r1, [r7, #12]
 80066a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066aa:	4313      	orrs	r3, r2
 80066ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80066d6:	f023 0303 	bic.w	r3, r3, #3
 80066da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066ea:	f023 0302 	bic.w	r3, r3, #2
 80066ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006718:	f023 0303 	bic.w	r3, r3, #3
 800671c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800672c:	f043 0302 	orr.w	r3, r3, #2
 8006730:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4013      	ands	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006758:	68fb      	ldr	r3, [r7, #12]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006766:	b480      	push	{r7}
 8006768:	b085      	sub	sp, #20
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	4013      	ands	r3, r2
 8006788:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	0c1b      	lsrs	r3, r3, #16
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800679a:	b480      	push	{r7}
 800679c:	b085      	sub	sp, #20
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	4013      	ands	r3, r2
 80067bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	b29b      	uxth	r3, r3
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	460b      	mov	r3, r1
 80067d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067de:	78fb      	ldrb	r3, [r7, #3]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	4013      	ands	r3, r2
 80067fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067fc:	68bb      	ldr	r3, [r7, #8]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800680a:	b480      	push	{r7}
 800680c:	b087      	sub	sp, #28
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	460b      	mov	r3, r1
 8006814:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800682a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800682c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	f003 030f 	and.w	r3, r3, #15
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	fa22 f303 	lsr.w	r3, r2, r3
 800683a:	01db      	lsls	r3, r3, #7
 800683c:	b2db      	uxtb	r3, r3
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006844:	78fb      	ldrb	r3, [r7, #3]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4013      	ands	r3, r2
 8006856:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006858:	68bb      	ldr	r3, [r7, #8]
}
 800685a:	4618      	mov	r0, r3
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	f003 0301 	and.w	r3, r3, #1
}
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006882:	b480      	push	{r7}
 8006884:	b085      	sub	sp, #20
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800689c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80068a0:	f023 0307 	bic.w	r3, r3, #7
 80068a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	460b      	mov	r3, r1
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	333c      	adds	r3, #60	@ 0x3c
 80068de:	3304      	adds	r3, #4
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4a26      	ldr	r2, [pc, #152]	@ (8006980 <USB_EP0_OutStart+0xb8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d90a      	bls.n	8006902 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068fc:	d101      	bne.n	8006902 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	e037      	b.n	8006972 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006908:	461a      	mov	r2, r3
 800690a:	2300      	movs	r3, #0
 800690c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800691c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006930:	f043 0318 	orr.w	r3, r3, #24
 8006934:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006944:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006948:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800694a:	7afb      	ldrb	r3, [r7, #11]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d10f      	bne.n	8006970 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006956:	461a      	mov	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800696a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800696e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	4f54300a 	.word	0x4f54300a

08006984 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3301      	adds	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800699c:	d901      	bls.n	80069a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e01b      	b.n	80069da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	daf2      	bge.n	8006990 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f043 0201 	orr.w	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3301      	adds	r3, #1
 80069be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069c6:	d901      	bls.n	80069cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e006      	b.n	80069da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d0f0      	beq.n	80069ba <USB_CoreReset+0x36>

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
	...

080069e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80069f4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80069f8:	f002 fc2e 	bl	8009258 <USBD_static_malloc>
 80069fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d109      	bne.n	8006a18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	32b0      	adds	r2, #176	@ 0xb0
 8006a0e:	2100      	movs	r1, #0
 8006a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a14:	2302      	movs	r3, #2
 8006a16:	e0d4      	b.n	8006bc2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a18:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f002 fd42 	bl	80094a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	32b0      	adds	r2, #176	@ 0xb0
 8006a2e:	68f9      	ldr	r1, [r7, #12]
 8006a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	32b0      	adds	r2, #176	@ 0xb0
 8006a3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	7c1b      	ldrb	r3, [r3, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d138      	bne.n	8006ac2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a50:	4b5e      	ldr	r3, [pc, #376]	@ (8006bcc <USBD_CDC_Init+0x1e4>)
 8006a52:	7819      	ldrb	r1, [r3, #0]
 8006a54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a58:	2202      	movs	r2, #2
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f002 fad9 	bl	8009012 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a60:	4b5a      	ldr	r3, [pc, #360]	@ (8006bcc <USBD_CDC_Init+0x1e4>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f003 020f 	and.w	r2, r3, #15
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	440b      	add	r3, r1
 8006a74:	3324      	adds	r3, #36	@ 0x24
 8006a76:	2201      	movs	r2, #1
 8006a78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a7a:	4b55      	ldr	r3, [pc, #340]	@ (8006bd0 <USBD_CDC_Init+0x1e8>)
 8006a7c:	7819      	ldrb	r1, [r3, #0]
 8006a7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a82:	2202      	movs	r2, #2
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f002 fac4 	bl	8009012 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a8a:	4b51      	ldr	r3, [pc, #324]	@ (8006bd0 <USBD_CDC_Init+0x1e8>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	f003 020f 	and.w	r2, r3, #15
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	4613      	mov	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	440b      	add	r3, r1
 8006a9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8006bd4 <USBD_CDC_Init+0x1ec>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	f003 020f 	and.w	r2, r3, #15
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	3326      	adds	r3, #38	@ 0x26
 8006abc:	2210      	movs	r2, #16
 8006abe:	801a      	strh	r2, [r3, #0]
 8006ac0:	e035      	b.n	8006b2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ac2:	4b42      	ldr	r3, [pc, #264]	@ (8006bcc <USBD_CDC_Init+0x1e4>)
 8006ac4:	7819      	ldrb	r1, [r3, #0]
 8006ac6:	2340      	movs	r3, #64	@ 0x40
 8006ac8:	2202      	movs	r2, #2
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f002 faa1 	bl	8009012 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ad0:	4b3e      	ldr	r3, [pc, #248]	@ (8006bcc <USBD_CDC_Init+0x1e4>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	f003 020f 	and.w	r2, r3, #15
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	440b      	add	r3, r1
 8006ae4:	3324      	adds	r3, #36	@ 0x24
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006aea:	4b39      	ldr	r3, [pc, #228]	@ (8006bd0 <USBD_CDC_Init+0x1e8>)
 8006aec:	7819      	ldrb	r1, [r3, #0]
 8006aee:	2340      	movs	r3, #64	@ 0x40
 8006af0:	2202      	movs	r2, #2
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f002 fa8d 	bl	8009012 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006af8:	4b35      	ldr	r3, [pc, #212]	@ (8006bd0 <USBD_CDC_Init+0x1e8>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	f003 020f 	and.w	r2, r3, #15
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	440b      	add	r3, r1
 8006b0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006b10:	2201      	movs	r2, #1
 8006b12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b14:	4b2f      	ldr	r3, [pc, #188]	@ (8006bd4 <USBD_CDC_Init+0x1ec>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f003 020f 	and.w	r2, r3, #15
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	3326      	adds	r3, #38	@ 0x26
 8006b2a:	2210      	movs	r2, #16
 8006b2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b2e:	4b29      	ldr	r3, [pc, #164]	@ (8006bd4 <USBD_CDC_Init+0x1ec>)
 8006b30:	7819      	ldrb	r1, [r3, #0]
 8006b32:	2308      	movs	r3, #8
 8006b34:	2203      	movs	r2, #3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f002 fa6b 	bl	8009012 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b3c:	4b25      	ldr	r3, [pc, #148]	@ (8006bd4 <USBD_CDC_Init+0x1ec>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	f003 020f 	and.w	r2, r3, #15
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	440b      	add	r3, r1
 8006b50:	3324      	adds	r3, #36	@ 0x24
 8006b52:	2201      	movs	r2, #1
 8006b54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	33b0      	adds	r3, #176	@ 0xb0
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e018      	b.n	8006bc2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	7c1b      	ldrb	r3, [r3, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b98:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd0 <USBD_CDC_Init+0x1e8>)
 8006b9a:	7819      	ldrb	r1, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ba2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f002 fb22 	bl	80091f0 <USBD_LL_PrepareReceive>
 8006bac:	e008      	b.n	8006bc0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bae:	4b08      	ldr	r3, [pc, #32]	@ (8006bd0 <USBD_CDC_Init+0x1e8>)
 8006bb0:	7819      	ldrb	r1, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006bb8:	2340      	movs	r3, #64	@ 0x40
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f002 fb18 	bl	80091f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	200000cf 	.word	0x200000cf
 8006bd0:	200000d0 	.word	0x200000d0
 8006bd4:	200000d1 	.word	0x200000d1

08006bd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006be4:	4b3a      	ldr	r3, [pc, #232]	@ (8006cd0 <USBD_CDC_DeInit+0xf8>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f002 fa37 	bl	800905e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006bf0:	4b37      	ldr	r3, [pc, #220]	@ (8006cd0 <USBD_CDC_DeInit+0xf8>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	f003 020f 	and.w	r2, r3, #15
 8006bf8:	6879      	ldr	r1, [r7, #4]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	440b      	add	r3, r1
 8006c04:	3324      	adds	r3, #36	@ 0x24
 8006c06:	2200      	movs	r2, #0
 8006c08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c0a:	4b32      	ldr	r3, [pc, #200]	@ (8006cd4 <USBD_CDC_DeInit+0xfc>)
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f002 fa24 	bl	800905e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c16:	4b2f      	ldr	r3, [pc, #188]	@ (8006cd4 <USBD_CDC_DeInit+0xfc>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	f003 020f 	and.w	r2, r3, #15
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	440b      	add	r3, r1
 8006c2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c2e:	2200      	movs	r2, #0
 8006c30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006c32:	4b29      	ldr	r3, [pc, #164]	@ (8006cd8 <USBD_CDC_DeInit+0x100>)
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f002 fa10 	bl	800905e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006c3e:	4b26      	ldr	r3, [pc, #152]	@ (8006cd8 <USBD_CDC_DeInit+0x100>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	f003 020f 	and.w	r2, r3, #15
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	440b      	add	r3, r1
 8006c52:	3324      	adds	r3, #36	@ 0x24
 8006c54:	2200      	movs	r2, #0
 8006c56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006c58:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd8 <USBD_CDC_DeInit+0x100>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	f003 020f 	and.w	r2, r3, #15
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3326      	adds	r3, #38	@ 0x26
 8006c6e:	2200      	movs	r2, #0
 8006c70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	32b0      	adds	r2, #176	@ 0xb0
 8006c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d01f      	beq.n	8006cc4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	33b0      	adds	r3, #176	@ 0xb0
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	32b0      	adds	r2, #176	@ 0xb0
 8006ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f002 fae4 	bl	8009274 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	32b0      	adds	r2, #176	@ 0xb0
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	200000cf 	.word	0x200000cf
 8006cd4:	200000d0 	.word	0x200000d0
 8006cd8:	200000d1 	.word	0x200000d1

08006cdc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	32b0      	adds	r2, #176	@ 0xb0
 8006cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e0bf      	b.n	8006e8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d050      	beq.n	8006dba <USBD_CDC_Setup+0xde>
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	f040 80af 	bne.w	8006e7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	88db      	ldrh	r3, [r3, #6]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d03a      	beq.n	8006d9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	b25b      	sxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	da1b      	bge.n	8006d68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	33b0      	adds	r3, #176	@ 0xb0
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006d46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	88d2      	ldrh	r2, [r2, #6]
 8006d4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	88db      	ldrh	r3, [r3, #6]
 8006d52:	2b07      	cmp	r3, #7
 8006d54:	bf28      	it	cs
 8006d56:	2307      	movcs	r3, #7
 8006d58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	89fa      	ldrh	r2, [r7, #14]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 fd53 	bl	800880c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006d66:	e090      	b.n	8006e8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	785a      	ldrb	r2, [r3, #1]
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	88db      	ldrh	r3, [r3, #6]
 8006d76:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d78:	d803      	bhi.n	8006d82 <USBD_CDC_Setup+0xa6>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	88db      	ldrh	r3, [r3, #6]
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	e000      	b.n	8006d84 <USBD_CDC_Setup+0xa8>
 8006d82:	2240      	movs	r2, #64	@ 0x40
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006d8a:	6939      	ldr	r1, [r7, #16]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006d92:	461a      	mov	r2, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 fd65 	bl	8008864 <USBD_CtlPrepareRx>
      break;
 8006d9a:	e076      	b.n	8006e8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	33b0      	adds	r3, #176	@ 0xb0
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	7850      	ldrb	r0, [r2, #1]
 8006db2:	2200      	movs	r2, #0
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	4798      	blx	r3
      break;
 8006db8:	e067      	b.n	8006e8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	785b      	ldrb	r3, [r3, #1]
 8006dbe:	2b0b      	cmp	r3, #11
 8006dc0:	d851      	bhi.n	8006e66 <USBD_CDC_Setup+0x18a>
 8006dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <USBD_CDC_Setup+0xec>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006df9 	.word	0x08006df9
 8006dcc:	08006e75 	.word	0x08006e75
 8006dd0:	08006e67 	.word	0x08006e67
 8006dd4:	08006e67 	.word	0x08006e67
 8006dd8:	08006e67 	.word	0x08006e67
 8006ddc:	08006e67 	.word	0x08006e67
 8006de0:	08006e67 	.word	0x08006e67
 8006de4:	08006e67 	.word	0x08006e67
 8006de8:	08006e67 	.word	0x08006e67
 8006dec:	08006e67 	.word	0x08006e67
 8006df0:	08006e23 	.word	0x08006e23
 8006df4:	08006e4d 	.word	0x08006e4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d107      	bne.n	8006e14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e04:	f107 030a 	add.w	r3, r7, #10
 8006e08:	2202      	movs	r2, #2
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 fcfd 	bl	800880c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e12:	e032      	b.n	8006e7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 fc7b 	bl	8008712 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	75fb      	strb	r3, [r7, #23]
          break;
 8006e20:	e02b      	b.n	8006e7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d107      	bne.n	8006e3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e2e:	f107 030d 	add.w	r3, r7, #13
 8006e32:	2201      	movs	r2, #1
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 fce8 	bl	800880c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e3c:	e01d      	b.n	8006e7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 fc66 	bl	8008712 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e46:	2303      	movs	r3, #3
 8006e48:	75fb      	strb	r3, [r7, #23]
          break;
 8006e4a:	e016      	b.n	8006e7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d00f      	beq.n	8006e78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fc59 	bl	8008712 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e60:	2303      	movs	r3, #3
 8006e62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e64:	e008      	b.n	8006e78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 fc52 	bl	8008712 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	75fb      	strb	r3, [r7, #23]
          break;
 8006e72:	e002      	b.n	8006e7a <USBD_CDC_Setup+0x19e>
          break;
 8006e74:	bf00      	nop
 8006e76:	e008      	b.n	8006e8a <USBD_CDC_Setup+0x1ae>
          break;
 8006e78:	bf00      	nop
      }
      break;
 8006e7a:	e006      	b.n	8006e8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 fc47 	bl	8008712 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e84:	2303      	movs	r3, #3
 8006e86:	75fb      	strb	r3, [r7, #23]
      break;
 8006e88:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006ea6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	32b0      	adds	r2, #176	@ 0xb0
 8006eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e065      	b.n	8006f8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	32b0      	adds	r2, #176	@ 0xb0
 8006ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ecc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ece:	78fb      	ldrb	r3, [r7, #3]
 8006ed0:	f003 020f 	and.w	r2, r3, #15
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	3318      	adds	r3, #24
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d02f      	beq.n	8006f48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006ee8:	78fb      	ldrb	r3, [r7, #3]
 8006eea:	f003 020f 	and.w	r2, r3, #15
 8006eee:	6879      	ldr	r1, [r7, #4]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	3318      	adds	r3, #24
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	78fb      	ldrb	r3, [r7, #3]
 8006f00:	f003 010f 	and.w	r1, r3, #15
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	460b      	mov	r3, r1
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	440b      	add	r3, r1
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4403      	add	r3, r0
 8006f10:	331c      	adds	r3, #28
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f18:	fb01 f303 	mul.w	r3, r1, r3
 8006f1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d112      	bne.n	8006f48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006f22:	78fb      	ldrb	r3, [r7, #3]
 8006f24:	f003 020f 	and.w	r2, r3, #15
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	3318      	adds	r3, #24
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f3a:	78f9      	ldrb	r1, [r7, #3]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2200      	movs	r2, #0
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f002 f934 	bl	80091ae <USBD_LL_Transmit>
 8006f46:	e01f      	b.n	8006f88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	33b0      	adds	r3, #176	@ 0xb0
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d010      	beq.n	8006f88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	33b0      	adds	r3, #176	@ 0xb0
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006f84:	78fa      	ldrb	r2, [r7, #3]
 8006f86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	32b0      	adds	r2, #176	@ 0xb0
 8006fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	32b0      	adds	r2, #176	@ 0xb0
 8006fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e01a      	b.n	8006ffa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fc4:	78fb      	ldrb	r3, [r7, #3]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f002 f932 	bl	8009232 <USBD_LL_GetRxDataSize>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	33b0      	adds	r3, #176	@ 0xb0
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	32b0      	adds	r2, #176	@ 0xb0
 8007014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007018:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007020:	2303      	movs	r3, #3
 8007022:	e024      	b.n	800706e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	33b0      	adds	r3, #176	@ 0xb0
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d019      	beq.n	800706c <USBD_CDC_EP0_RxReady+0x6a>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800703e:	2bff      	cmp	r3, #255	@ 0xff
 8007040:	d014      	beq.n	800706c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	33b0      	adds	r3, #176	@ 0xb0
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800705a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007062:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	22ff      	movs	r2, #255	@ 0xff
 8007068:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007080:	2182      	movs	r1, #130	@ 0x82
 8007082:	4818      	ldr	r0, [pc, #96]	@ (80070e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007084:	f000 fd0f 	bl	8007aa6 <USBD_GetEpDesc>
 8007088:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800708a:	2101      	movs	r1, #1
 800708c:	4815      	ldr	r0, [pc, #84]	@ (80070e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800708e:	f000 fd0a 	bl	8007aa6 <USBD_GetEpDesc>
 8007092:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007094:	2181      	movs	r1, #129	@ 0x81
 8007096:	4813      	ldr	r0, [pc, #76]	@ (80070e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007098:	f000 fd05 	bl	8007aa6 <USBD_GetEpDesc>
 800709c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2210      	movs	r2, #16
 80070a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d006      	beq.n	80070be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070b8:	711a      	strb	r2, [r3, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d006      	beq.n	80070d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070cc:	711a      	strb	r2, [r3, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2243      	movs	r2, #67	@ 0x43
 80070d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070d8:	4b02      	ldr	r3, [pc, #8]	@ (80070e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	2000008c 	.word	0x2000008c

080070e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070f0:	2182      	movs	r1, #130	@ 0x82
 80070f2:	4818      	ldr	r0, [pc, #96]	@ (8007154 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80070f4:	f000 fcd7 	bl	8007aa6 <USBD_GetEpDesc>
 80070f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070fa:	2101      	movs	r1, #1
 80070fc:	4815      	ldr	r0, [pc, #84]	@ (8007154 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80070fe:	f000 fcd2 	bl	8007aa6 <USBD_GetEpDesc>
 8007102:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007104:	2181      	movs	r1, #129	@ 0x81
 8007106:	4813      	ldr	r0, [pc, #76]	@ (8007154 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007108:	f000 fccd 	bl	8007aa6 <USBD_GetEpDesc>
 800710c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	2210      	movs	r2, #16
 8007118:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d006      	beq.n	800712e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	2200      	movs	r2, #0
 8007124:	711a      	strb	r2, [r3, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f042 0202 	orr.w	r2, r2, #2
 800712c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d006      	beq.n	8007142 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	711a      	strb	r2, [r3, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f042 0202 	orr.w	r2, r2, #2
 8007140:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2243      	movs	r2, #67	@ 0x43
 8007146:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007148:	4b02      	ldr	r3, [pc, #8]	@ (8007154 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	2000008c 	.word	0x2000008c

08007158 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007160:	2182      	movs	r1, #130	@ 0x82
 8007162:	4818      	ldr	r0, [pc, #96]	@ (80071c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007164:	f000 fc9f 	bl	8007aa6 <USBD_GetEpDesc>
 8007168:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800716a:	2101      	movs	r1, #1
 800716c:	4815      	ldr	r0, [pc, #84]	@ (80071c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800716e:	f000 fc9a 	bl	8007aa6 <USBD_GetEpDesc>
 8007172:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007174:	2181      	movs	r1, #129	@ 0x81
 8007176:	4813      	ldr	r0, [pc, #76]	@ (80071c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007178:	f000 fc95 	bl	8007aa6 <USBD_GetEpDesc>
 800717c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2210      	movs	r2, #16
 8007188:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d006      	beq.n	800719e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	2200      	movs	r2, #0
 8007194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007198:	711a      	strb	r2, [r3, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d006      	beq.n	80071b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071ac:	711a      	strb	r2, [r3, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2243      	movs	r2, #67	@ 0x43
 80071b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071b8:	4b02      	ldr	r3, [pc, #8]	@ (80071c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	2000008c 	.word	0x2000008c

080071c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	220a      	movs	r2, #10
 80071d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80071d6:	4b03      	ldr	r3, [pc, #12]	@ (80071e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80071d8:	4618      	mov	r0, r3
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	20000048 	.word	0x20000048

080071e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e009      	b.n	8007210 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	33b0      	adds	r3, #176	@ 0xb0
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	32b0      	adds	r2, #176	@ 0xb0
 8007232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007236:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800723e:	2303      	movs	r3, #3
 8007240:	e008      	b.n	8007254 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	32b0      	adds	r2, #176	@ 0xb0
 8007274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007278:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007280:	2303      	movs	r3, #3
 8007282:	e004      	b.n	800728e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
	...

0800729c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	32b0      	adds	r2, #176	@ 0xb0
 80072ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	32b0      	adds	r2, #176	@ 0xb0
 80072be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e018      	b.n	80072fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	7c1b      	ldrb	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007304 <USBD_CDC_ReceivePacket+0x68>)
 80072d4:	7819      	ldrb	r1, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 ff85 	bl	80091f0 <USBD_LL_PrepareReceive>
 80072e6:	e008      	b.n	80072fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072e8:	4b06      	ldr	r3, [pc, #24]	@ (8007304 <USBD_CDC_ReceivePacket+0x68>)
 80072ea:	7819      	ldrb	r1, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072f2:	2340      	movs	r3, #64	@ 0x40
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 ff7b 	bl	80091f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	200000d0 	.word	0x200000d0

08007308 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800731c:	2303      	movs	r3, #3
 800731e:	e01f      	b.n	8007360 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	79fa      	ldrb	r2, [r7, #7]
 8007352:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f001 fdf5 	bl	8008f44 <USBD_LL_Init>
 800735a:	4603      	mov	r3, r0
 800735c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800737c:	2303      	movs	r3, #3
 800737e:	e025      	b.n	80073cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	32ae      	adds	r2, #174	@ 0xae
 8007392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00f      	beq.n	80073bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	32ae      	adds	r2, #174	@ 0xae
 80073a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ac:	f107 020e 	add.w	r2, r7, #14
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
 80073b4:	4602      	mov	r2, r0
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 fdfd 	bl	8008fdc <USBD_LL_Start>
 80073e2:	4603      	mov	r3, r0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	460b      	mov	r3, r1
 800740c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007418:	2b00      	cmp	r3, #0
 800741a:	d009      	beq.n	8007430 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	78fa      	ldrb	r2, [r7, #3]
 8007426:	4611      	mov	r1, r2
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	4798      	blx	r3
 800742c:	4603      	mov	r3, r0
 800742e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007430:	7bfb      	ldrb	r3, [r7, #15]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	460b      	mov	r3, r1
 8007444:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	78fa      	ldrb	r2, [r7, #3]
 8007454:	4611      	mov	r1, r2
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007460:	2303      	movs	r3, #3
 8007462:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007464:	7bfb      	ldrb	r3, [r7, #15]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	f001 f90c 	bl	800869e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007494:	461a      	mov	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074a2:	f003 031f 	and.w	r3, r3, #31
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d01a      	beq.n	80074e0 <USBD_LL_SetupStage+0x72>
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d822      	bhi.n	80074f4 <USBD_LL_SetupStage+0x86>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <USBD_LL_SetupStage+0x4a>
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d00a      	beq.n	80074cc <USBD_LL_SetupStage+0x5e>
 80074b6:	e01d      	b.n	80074f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fb63 	bl	8007b8c <USBD_StdDevReq>
 80074c6:	4603      	mov	r3, r0
 80074c8:	73fb      	strb	r3, [r7, #15]
      break;
 80074ca:	e020      	b.n	800750e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fbcb 	bl	8007c70 <USBD_StdItfReq>
 80074da:	4603      	mov	r3, r0
 80074dc:	73fb      	strb	r3, [r7, #15]
      break;
 80074de:	e016      	b.n	800750e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fc2d 	bl	8007d48 <USBD_StdEPReq>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73fb      	strb	r3, [r7, #15]
      break;
 80074f2:	e00c      	b.n	800750e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 fdca 	bl	800909c <USBD_LL_StallEP>
 8007508:	4603      	mov	r3, r0
 800750a:	73fb      	strb	r3, [r7, #15]
      break;
 800750c:	bf00      	nop
  }

  return ret;
 800750e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	460b      	mov	r3, r1
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800752a:	7afb      	ldrb	r3, [r7, #11]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d16e      	bne.n	800760e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007536:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800753e:	2b03      	cmp	r3, #3
 8007540:	f040 8098 	bne.w	8007674 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	429a      	cmp	r2, r3
 800754e:	d913      	bls.n	8007578 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	1ad2      	subs	r2, r2, r3
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	4293      	cmp	r3, r2
 8007568:	bf28      	it	cs
 800756a:	4613      	movcs	r3, r2
 800756c:	461a      	mov	r2, r3
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f001 f994 	bl	800889e <USBD_CtlContinueRx>
 8007576:	e07d      	b.n	8007674 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800757e:	f003 031f 	and.w	r3, r3, #31
 8007582:	2b02      	cmp	r3, #2
 8007584:	d014      	beq.n	80075b0 <USBD_LL_DataOutStage+0x98>
 8007586:	2b02      	cmp	r3, #2
 8007588:	d81d      	bhi.n	80075c6 <USBD_LL_DataOutStage+0xae>
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <USBD_LL_DataOutStage+0x7c>
 800758e:	2b01      	cmp	r3, #1
 8007590:	d003      	beq.n	800759a <USBD_LL_DataOutStage+0x82>
 8007592:	e018      	b.n	80075c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	75bb      	strb	r3, [r7, #22]
            break;
 8007598:	e018      	b.n	80075cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	4619      	mov	r1, r3
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 fa64 	bl	8007a72 <USBD_CoreFindIF>
 80075aa:	4603      	mov	r3, r0
 80075ac:	75bb      	strb	r3, [r7, #22]
            break;
 80075ae:	e00d      	b.n	80075cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	4619      	mov	r1, r3
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 fa66 	bl	8007a8c <USBD_CoreFindEP>
 80075c0:	4603      	mov	r3, r0
 80075c2:	75bb      	strb	r3, [r7, #22]
            break;
 80075c4:	e002      	b.n	80075cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	75bb      	strb	r3, [r7, #22]
            break;
 80075ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80075cc:	7dbb      	ldrb	r3, [r7, #22]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d119      	bne.n	8007606 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d113      	bne.n	8007606 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80075de:	7dba      	ldrb	r2, [r7, #22]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	32ae      	adds	r2, #174	@ 0xae
 80075e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00b      	beq.n	8007606 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80075ee:	7dba      	ldrb	r2, [r7, #22]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80075f6:	7dba      	ldrb	r2, [r7, #22]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	32ae      	adds	r2, #174	@ 0xae
 80075fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f001 f95a 	bl	80088c0 <USBD_CtlSendStatus>
 800760c:	e032      	b.n	8007674 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800760e:	7afb      	ldrb	r3, [r7, #11]
 8007610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007614:	b2db      	uxtb	r3, r3
 8007616:	4619      	mov	r1, r3
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 fa37 	bl	8007a8c <USBD_CoreFindEP>
 800761e:	4603      	mov	r3, r0
 8007620:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007622:	7dbb      	ldrb	r3, [r7, #22]
 8007624:	2bff      	cmp	r3, #255	@ 0xff
 8007626:	d025      	beq.n	8007674 <USBD_LL_DataOutStage+0x15c>
 8007628:	7dbb      	ldrb	r3, [r7, #22]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d122      	bne.n	8007674 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b03      	cmp	r3, #3
 8007638:	d117      	bne.n	800766a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800763a:	7dba      	ldrb	r2, [r7, #22]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	32ae      	adds	r2, #174	@ 0xae
 8007640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00f      	beq.n	800766a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800764a:	7dba      	ldrb	r2, [r7, #22]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007652:	7dba      	ldrb	r2, [r7, #22]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	32ae      	adds	r2, #174	@ 0xae
 8007658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	7afa      	ldrb	r2, [r7, #11]
 8007660:	4611      	mov	r1, r2
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	4798      	blx	r3
 8007666:	4603      	mov	r3, r0
 8007668:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800766a:	7dfb      	ldrb	r3, [r7, #23]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	e000      	b.n	8007676 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b086      	sub	sp, #24
 8007682:	af00      	add	r7, sp, #0
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	460b      	mov	r3, r1
 8007688:	607a      	str	r2, [r7, #4]
 800768a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d16f      	bne.n	8007772 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3314      	adds	r3, #20
 8007696:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d15a      	bne.n	8007758 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	689a      	ldr	r2, [r3, #8]
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d914      	bls.n	80076d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	689a      	ldr	r2, [r3, #8]
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	1ad2      	subs	r2, r2, r3
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	461a      	mov	r2, r3
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f001 f8bc 	bl	8008842 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076ca:	2300      	movs	r3, #0
 80076cc:	2200      	movs	r2, #0
 80076ce:	2100      	movs	r1, #0
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f001 fd8d 	bl	80091f0 <USBD_LL_PrepareReceive>
 80076d6:	e03f      	b.n	8007758 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d11c      	bne.n	800771e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d316      	bcc.n	800771e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d20f      	bcs.n	800771e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076fe:	2200      	movs	r2, #0
 8007700:	2100      	movs	r1, #0
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f001 f89d 	bl	8008842 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007710:	2300      	movs	r3, #0
 8007712:	2200      	movs	r2, #0
 8007714:	2100      	movs	r1, #0
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f001 fd6a 	bl	80091f0 <USBD_LL_PrepareReceive>
 800771c:	e01c      	b.n	8007758 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b03      	cmp	r3, #3
 8007728:	d10f      	bne.n	800774a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d009      	beq.n	800774a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800774a:	2180      	movs	r1, #128	@ 0x80
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f001 fca5 	bl	800909c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f001 f8c7 	bl	80088e6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d03a      	beq.n	80077d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f7ff fe42 	bl	80073ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007770:	e032      	b.n	80077d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007772:	7afb      	ldrb	r3, [r7, #11]
 8007774:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007778:	b2db      	uxtb	r3, r3
 800777a:	4619      	mov	r1, r3
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 f985 	bl	8007a8c <USBD_CoreFindEP>
 8007782:	4603      	mov	r3, r0
 8007784:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007786:	7dfb      	ldrb	r3, [r7, #23]
 8007788:	2bff      	cmp	r3, #255	@ 0xff
 800778a:	d025      	beq.n	80077d8 <USBD_LL_DataInStage+0x15a>
 800778c:	7dfb      	ldrb	r3, [r7, #23]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d122      	bne.n	80077d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b03      	cmp	r3, #3
 800779c:	d11c      	bne.n	80077d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800779e:	7dfa      	ldrb	r2, [r7, #23]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	32ae      	adds	r2, #174	@ 0xae
 80077a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d014      	beq.n	80077d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80077ae:	7dfa      	ldrb	r2, [r7, #23]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80077b6:	7dfa      	ldrb	r2, [r7, #23]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	32ae      	adds	r2, #174	@ 0xae
 80077bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	7afa      	ldrb	r2, [r7, #11]
 80077c4:	4611      	mov	r1, r2
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	4798      	blx	r3
 80077ca:	4603      	mov	r3, r0
 80077cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80077ce:	7dbb      	ldrb	r3, [r7, #22]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80077d4:	7dbb      	ldrb	r3, [r7, #22]
 80077d6:	e000      	b.n	80077da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b084      	sub	sp, #16
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d014      	beq.n	8007848 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00e      	beq.n	8007848 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6852      	ldr	r2, [r2, #4]
 8007836:	b2d2      	uxtb	r2, r2
 8007838:	4611      	mov	r1, r2
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	4798      	blx	r3
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007844:	2303      	movs	r3, #3
 8007846:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007848:	2340      	movs	r3, #64	@ 0x40
 800784a:	2200      	movs	r2, #0
 800784c:	2100      	movs	r1, #0
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 fbdf 	bl	8009012 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2240      	movs	r2, #64	@ 0x40
 8007860:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007864:	2340      	movs	r3, #64	@ 0x40
 8007866:	2200      	movs	r2, #0
 8007868:	2180      	movs	r1, #128	@ 0x80
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 fbd1 	bl	8009012 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2240      	movs	r2, #64	@ 0x40
 800787a:	621a      	str	r2, [r3, #32]

  return ret;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	460b      	mov	r3, r1
 8007890:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	78fa      	ldrb	r2, [r7, #3]
 8007896:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	d006      	beq.n	80078c8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2204      	movs	r2, #4
 80078cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d106      	bne.n	8007900 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b03      	cmp	r3, #3
 8007920:	d110      	bne.n	8007944 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	32ae      	adds	r2, #174	@ 0xae
 8007964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800796c:	2303      	movs	r3, #3
 800796e:	e01c      	b.n	80079aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b03      	cmp	r3, #3
 800797a:	d115      	bne.n	80079a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	32ae      	adds	r2, #174	@ 0xae
 8007986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00b      	beq.n	80079a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	32ae      	adds	r2, #174	@ 0xae
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	78fa      	ldrb	r2, [r7, #3]
 80079a2:	4611      	mov	r1, r2
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	460b      	mov	r3, r1
 80079bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	32ae      	adds	r2, #174	@ 0xae
 80079c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e01c      	b.n	8007a0e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d115      	bne.n	8007a0c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	32ae      	adds	r2, #174	@ 0xae
 80079ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00b      	beq.n	8007a0c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	32ae      	adds	r2, #174	@ 0xae
 80079fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a04:	78fa      	ldrb	r2, [r7, #3]
 8007a06:	4611      	mov	r1, r2
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00e      	beq.n	8007a68 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	6852      	ldr	r2, [r2, #4]
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	4611      	mov	r1, r2
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	4798      	blx	r3
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a64:	2303      	movs	r3, #3
 8007a66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a7e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a98:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b086      	sub	sp, #24
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	885b      	ldrh	r3, [r3, #2]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	7812      	ldrb	r2, [r2, #0]
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d91f      	bls.n	8007b0c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007ad2:	e013      	b.n	8007afc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007ad4:	f107 030a 	add.w	r3, r7, #10
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6978      	ldr	r0, [r7, #20]
 8007adc:	f000 f81b 	bl	8007b16 <USBD_GetNextDesc>
 8007ae0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	785b      	ldrb	r3, [r3, #1]
 8007ae6:	2b05      	cmp	r3, #5
 8007ae8:	d108      	bne.n	8007afc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	789b      	ldrb	r3, [r3, #2]
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d008      	beq.n	8007b0a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007af8:	2300      	movs	r3, #0
 8007afa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	885b      	ldrh	r3, [r3, #2]
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	897b      	ldrh	r3, [r7, #10]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d8e5      	bhi.n	8007ad4 <USBD_GetEpDesc+0x2e>
 8007b08:	e000      	b.n	8007b0c <USBD_GetEpDesc+0x66>
          break;
 8007b0a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007b0c:	693b      	ldr	r3, [r7, #16]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	7812      	ldrb	r2, [r2, #0]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b40:	68fb      	ldr	r3, [r7, #12]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b087      	sub	sp, #28
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	3301      	adds	r3, #1
 8007b64:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b6c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	b21a      	sxth	r2, r3
 8007b74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	b21b      	sxth	r3, r3
 8007b7c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b7e:	89fb      	ldrh	r3, [r7, #14]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	371c      	adds	r7, #28
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ba2:	2b40      	cmp	r3, #64	@ 0x40
 8007ba4:	d005      	beq.n	8007bb2 <USBD_StdDevReq+0x26>
 8007ba6:	2b40      	cmp	r3, #64	@ 0x40
 8007ba8:	d857      	bhi.n	8007c5a <USBD_StdDevReq+0xce>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00f      	beq.n	8007bce <USBD_StdDevReq+0x42>
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d153      	bne.n	8007c5a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	32ae      	adds	r2, #174	@ 0xae
 8007bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73fb      	strb	r3, [r7, #15]
      break;
 8007bcc:	e04a      	b.n	8007c64 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	785b      	ldrb	r3, [r3, #1]
 8007bd2:	2b09      	cmp	r3, #9
 8007bd4:	d83b      	bhi.n	8007c4e <USBD_StdDevReq+0xc2>
 8007bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bdc <USBD_StdDevReq+0x50>)
 8007bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bdc:	08007c31 	.word	0x08007c31
 8007be0:	08007c45 	.word	0x08007c45
 8007be4:	08007c4f 	.word	0x08007c4f
 8007be8:	08007c3b 	.word	0x08007c3b
 8007bec:	08007c4f 	.word	0x08007c4f
 8007bf0:	08007c0f 	.word	0x08007c0f
 8007bf4:	08007c05 	.word	0x08007c05
 8007bf8:	08007c4f 	.word	0x08007c4f
 8007bfc:	08007c27 	.word	0x08007c27
 8007c00:	08007c19 	.word	0x08007c19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa3c 	bl	8008084 <USBD_GetDescriptor>
          break;
 8007c0c:	e024      	b.n	8007c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fba1 	bl	8008358 <USBD_SetAddress>
          break;
 8007c16:	e01f      	b.n	8007c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fbe0 	bl	80083e0 <USBD_SetConfig>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73fb      	strb	r3, [r7, #15]
          break;
 8007c24:	e018      	b.n	8007c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fc83 	bl	8008534 <USBD_GetConfig>
          break;
 8007c2e:	e013      	b.n	8007c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fcb4 	bl	80085a0 <USBD_GetStatus>
          break;
 8007c38:	e00e      	b.n	8007c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fce3 	bl	8008608 <USBD_SetFeature>
          break;
 8007c42:	e009      	b.n	8007c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fd07 	bl	800865a <USBD_ClrFeature>
          break;
 8007c4c:	e004      	b.n	8007c58 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fd5e 	bl	8008712 <USBD_CtlError>
          break;
 8007c56:	bf00      	nop
      }
      break;
 8007c58:	e004      	b.n	8007c64 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fd58 	bl	8008712 <USBD_CtlError>
      break;
 8007c62:	bf00      	nop
  }

  return ret;
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop

08007c70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c86:	2b40      	cmp	r3, #64	@ 0x40
 8007c88:	d005      	beq.n	8007c96 <USBD_StdItfReq+0x26>
 8007c8a:	2b40      	cmp	r3, #64	@ 0x40
 8007c8c:	d852      	bhi.n	8007d34 <USBD_StdItfReq+0xc4>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <USBD_StdItfReq+0x26>
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d14e      	bne.n	8007d34 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d840      	bhi.n	8007d26 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	889b      	ldrh	r3, [r3, #4]
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d836      	bhi.n	8007d1c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	889b      	ldrh	r3, [r3, #4]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff fedb 	bl	8007a72 <USBD_CoreFindIF>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	2bff      	cmp	r3, #255	@ 0xff
 8007cc4:	d01d      	beq.n	8007d02 <USBD_StdItfReq+0x92>
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d11a      	bne.n	8007d02 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007ccc:	7bba      	ldrb	r2, [r7, #14]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	32ae      	adds	r2, #174	@ 0xae
 8007cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00f      	beq.n	8007cfc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007cdc:	7bba      	ldrb	r2, [r7, #14]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ce4:	7bba      	ldrb	r2, [r7, #14]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	32ae      	adds	r2, #174	@ 0xae
 8007cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	4798      	blx	r3
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cfa:	e004      	b.n	8007d06 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d00:	e001      	b.n	8007d06 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007d02:	2303      	movs	r3, #3
 8007d04:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	88db      	ldrh	r3, [r3, #6]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d110      	bne.n	8007d30 <USBD_StdItfReq+0xc0>
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10d      	bne.n	8007d30 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fdd3 	bl	80088c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d1a:	e009      	b.n	8007d30 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fcf7 	bl	8008712 <USBD_CtlError>
          break;
 8007d24:	e004      	b.n	8007d30 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fcf2 	bl	8008712 <USBD_CtlError>
          break;
 8007d2e:	e000      	b.n	8007d32 <USBD_StdItfReq+0xc2>
          break;
 8007d30:	bf00      	nop
      }
      break;
 8007d32:	e004      	b.n	8007d3e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fceb 	bl	8008712 <USBD_CtlError>
      break;
 8007d3c:	bf00      	nop
  }

  return ret;
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	889b      	ldrh	r3, [r3, #4]
 8007d5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d64:	2b40      	cmp	r3, #64	@ 0x40
 8007d66:	d007      	beq.n	8007d78 <USBD_StdEPReq+0x30>
 8007d68:	2b40      	cmp	r3, #64	@ 0x40
 8007d6a:	f200 817f 	bhi.w	800806c <USBD_StdEPReq+0x324>
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d02a      	beq.n	8007dc8 <USBD_StdEPReq+0x80>
 8007d72:	2b20      	cmp	r3, #32
 8007d74:	f040 817a 	bne.w	800806c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff fe85 	bl	8007a8c <USBD_CoreFindEP>
 8007d82:	4603      	mov	r3, r0
 8007d84:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d86:	7b7b      	ldrb	r3, [r7, #13]
 8007d88:	2bff      	cmp	r3, #255	@ 0xff
 8007d8a:	f000 8174 	beq.w	8008076 <USBD_StdEPReq+0x32e>
 8007d8e:	7b7b      	ldrb	r3, [r7, #13]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f040 8170 	bne.w	8008076 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d96:	7b7a      	ldrb	r2, [r7, #13]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d9e:	7b7a      	ldrb	r2, [r7, #13]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	32ae      	adds	r2, #174	@ 0xae
 8007da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 8163 	beq.w	8008076 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007db0:	7b7a      	ldrb	r2, [r7, #13]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	32ae      	adds	r2, #174	@ 0xae
 8007db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	4798      	blx	r3
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007dc6:	e156      	b.n	8008076 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	785b      	ldrb	r3, [r3, #1]
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d008      	beq.n	8007de2 <USBD_StdEPReq+0x9a>
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	f300 8145 	bgt.w	8008060 <USBD_StdEPReq+0x318>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 809b 	beq.w	8007f12 <USBD_StdEPReq+0x1ca>
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d03c      	beq.n	8007e5a <USBD_StdEPReq+0x112>
 8007de0:	e13e      	b.n	8008060 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d002      	beq.n	8007df4 <USBD_StdEPReq+0xac>
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d016      	beq.n	8007e20 <USBD_StdEPReq+0xd8>
 8007df2:	e02c      	b.n	8007e4e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00d      	beq.n	8007e16 <USBD_StdEPReq+0xce>
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	2b80      	cmp	r3, #128	@ 0x80
 8007dfe:	d00a      	beq.n	8007e16 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 f949 	bl	800909c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e0a:	2180      	movs	r1, #128	@ 0x80
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 f945 	bl	800909c <USBD_LL_StallEP>
 8007e12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e14:	e020      	b.n	8007e58 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fc7a 	bl	8008712 <USBD_CtlError>
              break;
 8007e1e:	e01b      	b.n	8007e58 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	885b      	ldrh	r3, [r3, #2]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10e      	bne.n	8007e46 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00b      	beq.n	8007e46 <USBD_StdEPReq+0xfe>
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	2b80      	cmp	r3, #128	@ 0x80
 8007e32:	d008      	beq.n	8007e46 <USBD_StdEPReq+0xfe>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	88db      	ldrh	r3, [r3, #6]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d104      	bne.n	8007e46 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 f92b 	bl	800909c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fd3a 	bl	80088c0 <USBD_CtlSendStatus>

              break;
 8007e4c:	e004      	b.n	8007e58 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fc5e 	bl	8008712 <USBD_CtlError>
              break;
 8007e56:	bf00      	nop
          }
          break;
 8007e58:	e107      	b.n	800806a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d002      	beq.n	8007e6c <USBD_StdEPReq+0x124>
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d016      	beq.n	8007e98 <USBD_StdEPReq+0x150>
 8007e6a:	e04b      	b.n	8007f04 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00d      	beq.n	8007e8e <USBD_StdEPReq+0x146>
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	2b80      	cmp	r3, #128	@ 0x80
 8007e76:	d00a      	beq.n	8007e8e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 f90d 	bl	800909c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e82:	2180      	movs	r1, #128	@ 0x80
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 f909 	bl	800909c <USBD_LL_StallEP>
 8007e8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e8c:	e040      	b.n	8007f10 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fc3e 	bl	8008712 <USBD_CtlError>
              break;
 8007e96:	e03b      	b.n	8007f10 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	885b      	ldrh	r3, [r3, #2]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d136      	bne.n	8007f0e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d004      	beq.n	8007eb4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 f913 	bl	80090da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fd03 	bl	80088c0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff fde4 	bl	8007a8c <USBD_CoreFindEP>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ec8:	7b7b      	ldrb	r3, [r7, #13]
 8007eca:	2bff      	cmp	r3, #255	@ 0xff
 8007ecc:	d01f      	beq.n	8007f0e <USBD_StdEPReq+0x1c6>
 8007ece:	7b7b      	ldrb	r3, [r7, #13]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d11c      	bne.n	8007f0e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ed4:	7b7a      	ldrb	r2, [r7, #13]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007edc:	7b7a      	ldrb	r2, [r7, #13]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	32ae      	adds	r2, #174	@ 0xae
 8007ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d010      	beq.n	8007f0e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007eec:	7b7a      	ldrb	r2, [r7, #13]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	32ae      	adds	r2, #174	@ 0xae
 8007ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007f02:	e004      	b.n	8007f0e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fc03 	bl	8008712 <USBD_CtlError>
              break;
 8007f0c:	e000      	b.n	8007f10 <USBD_StdEPReq+0x1c8>
              break;
 8007f0e:	bf00      	nop
          }
          break;
 8007f10:	e0ab      	b.n	800806a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d002      	beq.n	8007f24 <USBD_StdEPReq+0x1dc>
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d032      	beq.n	8007f88 <USBD_StdEPReq+0x240>
 8007f22:	e097      	b.n	8008054 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <USBD_StdEPReq+0x1f2>
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b80      	cmp	r3, #128	@ 0x80
 8007f2e:	d004      	beq.n	8007f3a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fbed 	bl	8008712 <USBD_CtlError>
                break;
 8007f38:	e091      	b.n	800805e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	da0b      	bge.n	8007f5a <USBD_StdEPReq+0x212>
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f48:	4613      	mov	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	3310      	adds	r3, #16
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	4413      	add	r3, r2
 8007f56:	3304      	adds	r3, #4
 8007f58:	e00b      	b.n	8007f72 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f60:	4613      	mov	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	4413      	add	r3, r2
 8007f70:	3304      	adds	r3, #4
 8007f72:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2200      	movs	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fc43 	bl	800880c <USBD_CtlSendData>
              break;
 8007f86:	e06a      	b.n	800805e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	da11      	bge.n	8007fb4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	f003 020f 	and.w	r2, r3, #15
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	440b      	add	r3, r1
 8007fa2:	3324      	adds	r3, #36	@ 0x24
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d117      	bne.n	8007fda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fbb0 	bl	8008712 <USBD_CtlError>
                  break;
 8007fb2:	e054      	b.n	800805e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	f003 020f 	and.w	r2, r3, #15
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d104      	bne.n	8007fda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fb9d 	bl	8008712 <USBD_CtlError>
                  break;
 8007fd8:	e041      	b.n	800805e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	da0b      	bge.n	8007ffa <USBD_StdEPReq+0x2b2>
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fe8:	4613      	mov	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	3310      	adds	r3, #16
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	e00b      	b.n	8008012 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008000:	4613      	mov	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	4413      	add	r3, r2
 8008010:	3304      	adds	r3, #4
 8008012:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <USBD_StdEPReq+0x2d8>
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	2b80      	cmp	r3, #128	@ 0x80
 800801e:	d103      	bne.n	8008028 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	e00e      	b.n	8008046 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 f873 	bl	8009118 <USBD_LL_IsStallEP>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2201      	movs	r2, #1
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	e002      	b.n	8008046 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2202      	movs	r2, #2
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fbdd 	bl	800880c <USBD_CtlSendData>
              break;
 8008052:	e004      	b.n	800805e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fb5b 	bl	8008712 <USBD_CtlError>
              break;
 800805c:	bf00      	nop
          }
          break;
 800805e:	e004      	b.n	800806a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fb55 	bl	8008712 <USBD_CtlError>
          break;
 8008068:	bf00      	nop
      }
      break;
 800806a:	e005      	b.n	8008078 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fb4f 	bl	8008712 <USBD_CtlError>
      break;
 8008074:	e000      	b.n	8008078 <USBD_StdEPReq+0x330>
      break;
 8008076:	bf00      	nop
  }

  return ret;
 8008078:	7bfb      	ldrb	r3, [r7, #15]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008092:	2300      	movs	r3, #0
 8008094:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	885b      	ldrh	r3, [r3, #2]
 800809e:	0a1b      	lsrs	r3, r3, #8
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	3b01      	subs	r3, #1
 80080a4:	2b06      	cmp	r3, #6
 80080a6:	f200 8128 	bhi.w	80082fa <USBD_GetDescriptor+0x276>
 80080aa:	a201      	add	r2, pc, #4	@ (adr r2, 80080b0 <USBD_GetDescriptor+0x2c>)
 80080ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b0:	080080cd 	.word	0x080080cd
 80080b4:	080080e5 	.word	0x080080e5
 80080b8:	08008125 	.word	0x08008125
 80080bc:	080082fb 	.word	0x080082fb
 80080c0:	080082fb 	.word	0x080082fb
 80080c4:	0800829b 	.word	0x0800829b
 80080c8:	080082c7 	.word	0x080082c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	7c12      	ldrb	r2, [r2, #16]
 80080d8:	f107 0108 	add.w	r1, r7, #8
 80080dc:	4610      	mov	r0, r2
 80080de:	4798      	blx	r3
 80080e0:	60f8      	str	r0, [r7, #12]
      break;
 80080e2:	e112      	b.n	800830a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	7c1b      	ldrb	r3, [r3, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10d      	bne.n	8008108 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f4:	f107 0208 	add.w	r2, r7, #8
 80080f8:	4610      	mov	r0, r2
 80080fa:	4798      	blx	r3
 80080fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	2202      	movs	r2, #2
 8008104:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008106:	e100      	b.n	800830a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008110:	f107 0208 	add.w	r2, r7, #8
 8008114:	4610      	mov	r0, r2
 8008116:	4798      	blx	r3
 8008118:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3301      	adds	r3, #1
 800811e:	2202      	movs	r2, #2
 8008120:	701a      	strb	r2, [r3, #0]
      break;
 8008122:	e0f2      	b.n	800830a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	885b      	ldrh	r3, [r3, #2]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b05      	cmp	r3, #5
 800812c:	f200 80ac 	bhi.w	8008288 <USBD_GetDescriptor+0x204>
 8008130:	a201      	add	r2, pc, #4	@ (adr r2, 8008138 <USBD_GetDescriptor+0xb4>)
 8008132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008136:	bf00      	nop
 8008138:	08008151 	.word	0x08008151
 800813c:	08008185 	.word	0x08008185
 8008140:	080081b9 	.word	0x080081b9
 8008144:	080081ed 	.word	0x080081ed
 8008148:	08008221 	.word	0x08008221
 800814c:	08008255 	.word	0x08008255
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00b      	beq.n	8008174 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	7c12      	ldrb	r2, [r2, #16]
 8008168:	f107 0108 	add.w	r1, r7, #8
 800816c:	4610      	mov	r0, r2
 800816e:	4798      	blx	r3
 8008170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008172:	e091      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 facb 	bl	8008712 <USBD_CtlError>
            err++;
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	3301      	adds	r3, #1
 8008180:	72fb      	strb	r3, [r7, #11]
          break;
 8008182:	e089      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	7c12      	ldrb	r2, [r2, #16]
 800819c:	f107 0108 	add.w	r1, r7, #8
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081a6:	e077      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fab1 	bl	8008712 <USBD_CtlError>
            err++;
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	3301      	adds	r3, #1
 80081b4:	72fb      	strb	r3, [r7, #11]
          break;
 80081b6:	e06f      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	7c12      	ldrb	r2, [r2, #16]
 80081d0:	f107 0108 	add.w	r1, r7, #8
 80081d4:	4610      	mov	r0, r2
 80081d6:	4798      	blx	r3
 80081d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081da:	e05d      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fa97 	bl	8008712 <USBD_CtlError>
            err++;
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	3301      	adds	r3, #1
 80081e8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ea:	e055      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	7c12      	ldrb	r2, [r2, #16]
 8008204:	f107 0108 	add.w	r1, r7, #8
 8008208:	4610      	mov	r0, r2
 800820a:	4798      	blx	r3
 800820c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800820e:	e043      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fa7d 	bl	8008712 <USBD_CtlError>
            err++;
 8008218:	7afb      	ldrb	r3, [r7, #11]
 800821a:	3301      	adds	r3, #1
 800821c:	72fb      	strb	r3, [r7, #11]
          break;
 800821e:	e03b      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	7c12      	ldrb	r2, [r2, #16]
 8008238:	f107 0108 	add.w	r1, r7, #8
 800823c:	4610      	mov	r0, r2
 800823e:	4798      	blx	r3
 8008240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008242:	e029      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa63 	bl	8008712 <USBD_CtlError>
            err++;
 800824c:	7afb      	ldrb	r3, [r7, #11]
 800824e:	3301      	adds	r3, #1
 8008250:	72fb      	strb	r3, [r7, #11]
          break;
 8008252:	e021      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00b      	beq.n	8008278 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	7c12      	ldrb	r2, [r2, #16]
 800826c:	f107 0108 	add.w	r1, r7, #8
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
 8008274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008276:	e00f      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa49 	bl	8008712 <USBD_CtlError>
            err++;
 8008280:	7afb      	ldrb	r3, [r7, #11]
 8008282:	3301      	adds	r3, #1
 8008284:	72fb      	strb	r3, [r7, #11]
          break;
 8008286:	e007      	b.n	8008298 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fa41 	bl	8008712 <USBD_CtlError>
          err++;
 8008290:	7afb      	ldrb	r3, [r7, #11]
 8008292:	3301      	adds	r3, #1
 8008294:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008296:	bf00      	nop
      }
      break;
 8008298:	e037      	b.n	800830a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	7c1b      	ldrb	r3, [r3, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082aa:	f107 0208 	add.w	r2, r7, #8
 80082ae:	4610      	mov	r0, r2
 80082b0:	4798      	blx	r3
 80082b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082b4:	e029      	b.n	800830a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fa2a 	bl	8008712 <USBD_CtlError>
        err++;
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	3301      	adds	r3, #1
 80082c2:	72fb      	strb	r3, [r7, #11]
      break;
 80082c4:	e021      	b.n	800830a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	7c1b      	ldrb	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10d      	bne.n	80082ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d6:	f107 0208 	add.w	r2, r7, #8
 80082da:	4610      	mov	r0, r2
 80082dc:	4798      	blx	r3
 80082de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3301      	adds	r3, #1
 80082e4:	2207      	movs	r2, #7
 80082e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082e8:	e00f      	b.n	800830a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fa10 	bl	8008712 <USBD_CtlError>
        err++;
 80082f2:	7afb      	ldrb	r3, [r7, #11]
 80082f4:	3301      	adds	r3, #1
 80082f6:	72fb      	strb	r3, [r7, #11]
      break;
 80082f8:	e007      	b.n	800830a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fa08 	bl	8008712 <USBD_CtlError>
      err++;
 8008302:	7afb      	ldrb	r3, [r7, #11]
 8008304:	3301      	adds	r3, #1
 8008306:	72fb      	strb	r3, [r7, #11]
      break;
 8008308:	bf00      	nop
  }

  if (err != 0U)
 800830a:	7afb      	ldrb	r3, [r7, #11]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d11e      	bne.n	800834e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	88db      	ldrh	r3, [r3, #6]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d016      	beq.n	8008346 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008318:	893b      	ldrh	r3, [r7, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00e      	beq.n	800833c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	88da      	ldrh	r2, [r3, #6]
 8008322:	893b      	ldrh	r3, [r7, #8]
 8008324:	4293      	cmp	r3, r2
 8008326:	bf28      	it	cs
 8008328:	4613      	movcs	r3, r2
 800832a:	b29b      	uxth	r3, r3
 800832c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800832e:	893b      	ldrh	r3, [r7, #8]
 8008330:	461a      	mov	r2, r3
 8008332:	68f9      	ldr	r1, [r7, #12]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fa69 	bl	800880c <USBD_CtlSendData>
 800833a:	e009      	b.n	8008350 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f9e7 	bl	8008712 <USBD_CtlError>
 8008344:	e004      	b.n	8008350 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 faba 	bl	80088c0 <USBD_CtlSendStatus>
 800834c:	e000      	b.n	8008350 <USBD_GetDescriptor+0x2cc>
    return;
 800834e:	bf00      	nop
  }
}
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop

08008358 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	889b      	ldrh	r3, [r3, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d131      	bne.n	80083ce <USBD_SetAddress+0x76>
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	88db      	ldrh	r3, [r3, #6]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d12d      	bne.n	80083ce <USBD_SetAddress+0x76>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	885b      	ldrh	r3, [r3, #2]
 8008376:	2b7f      	cmp	r3, #127	@ 0x7f
 8008378:	d829      	bhi.n	80083ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	885b      	ldrh	r3, [r3, #2]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008384:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b03      	cmp	r3, #3
 8008390:	d104      	bne.n	800839c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f9bc 	bl	8008712 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800839a:	e01d      	b.n	80083d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	7bfa      	ldrb	r2, [r7, #15]
 80083a0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fee1 	bl	8009170 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa86 	bl	80088c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d004      	beq.n	80083c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2202      	movs	r2, #2
 80083be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c2:	e009      	b.n	80083d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083cc:	e004      	b.n	80083d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f99e 	bl	8008712 <USBD_CtlError>
  }
}
 80083d6:	bf00      	nop
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	885b      	ldrh	r3, [r3, #2]
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	4b4e      	ldr	r3, [pc, #312]	@ (8008530 <USBD_SetConfig+0x150>)
 80083f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083f8:	4b4d      	ldr	r3, [pc, #308]	@ (8008530 <USBD_SetConfig+0x150>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d905      	bls.n	800840c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f985 	bl	8008712 <USBD_CtlError>
    return USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	e08c      	b.n	8008526 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d002      	beq.n	800841e <USBD_SetConfig+0x3e>
 8008418:	2b03      	cmp	r3, #3
 800841a:	d029      	beq.n	8008470 <USBD_SetConfig+0x90>
 800841c:	e075      	b.n	800850a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800841e:	4b44      	ldr	r3, [pc, #272]	@ (8008530 <USBD_SetConfig+0x150>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d020      	beq.n	8008468 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008426:	4b42      	ldr	r3, [pc, #264]	@ (8008530 <USBD_SetConfig+0x150>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008430:	4b3f      	ldr	r3, [pc, #252]	@ (8008530 <USBD_SetConfig+0x150>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7fe ffe3 	bl	8007402 <USBD_SetClassConfig>
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d008      	beq.n	8008458 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f962 	bl	8008712 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2202      	movs	r2, #2
 8008452:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008456:	e065      	b.n	8008524 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fa31 	bl	80088c0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2203      	movs	r2, #3
 8008462:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008466:	e05d      	b.n	8008524 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fa29 	bl	80088c0 <USBD_CtlSendStatus>
      break;
 800846e:	e059      	b.n	8008524 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008470:	4b2f      	ldr	r3, [pc, #188]	@ (8008530 <USBD_SetConfig+0x150>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d112      	bne.n	800849e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008480:	4b2b      	ldr	r3, [pc, #172]	@ (8008530 <USBD_SetConfig+0x150>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800848a:	4b29      	ldr	r3, [pc, #164]	@ (8008530 <USBD_SetConfig+0x150>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7fe ffd2 	bl	800743a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fa12 	bl	80088c0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800849c:	e042      	b.n	8008524 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800849e:	4b24      	ldr	r3, [pc, #144]	@ (8008530 <USBD_SetConfig+0x150>)
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d02a      	beq.n	8008502 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7fe ffc0 	bl	800743a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80084ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008530 <USBD_SetConfig+0x150>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008530 <USBD_SetConfig+0x150>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7fe ff99 	bl	8007402 <USBD_SetClassConfig>
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00f      	beq.n	80084fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f918 	bl	8008712 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7fe ffa5 	bl	800743a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2202      	movs	r2, #2
 80084f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80084f8:	e014      	b.n	8008524 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f9e0 	bl	80088c0 <USBD_CtlSendStatus>
      break;
 8008500:	e010      	b.n	8008524 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f9dc 	bl	80088c0 <USBD_CtlSendStatus>
      break;
 8008508:	e00c      	b.n	8008524 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f900 	bl	8008712 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008512:	4b07      	ldr	r3, [pc, #28]	@ (8008530 <USBD_SetConfig+0x150>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7fe ff8e 	bl	800743a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800851e:	2303      	movs	r3, #3
 8008520:	73fb      	strb	r3, [r7, #15]
      break;
 8008522:	bf00      	nop
  }

  return ret;
 8008524:	7bfb      	ldrb	r3, [r7, #15]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	200002c0 	.word	0x200002c0

08008534 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	88db      	ldrh	r3, [r3, #6]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d004      	beq.n	8008550 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f8e2 	bl	8008712 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800854e:	e023      	b.n	8008598 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b02      	cmp	r3, #2
 800855a:	dc02      	bgt.n	8008562 <USBD_GetConfig+0x2e>
 800855c:	2b00      	cmp	r3, #0
 800855e:	dc03      	bgt.n	8008568 <USBD_GetConfig+0x34>
 8008560:	e015      	b.n	800858e <USBD_GetConfig+0x5a>
 8008562:	2b03      	cmp	r3, #3
 8008564:	d00b      	beq.n	800857e <USBD_GetConfig+0x4a>
 8008566:	e012      	b.n	800858e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3308      	adds	r3, #8
 8008572:	2201      	movs	r2, #1
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f948 	bl	800880c <USBD_CtlSendData>
        break;
 800857c:	e00c      	b.n	8008598 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	3304      	adds	r3, #4
 8008582:	2201      	movs	r2, #1
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f940 	bl	800880c <USBD_CtlSendData>
        break;
 800858c:	e004      	b.n	8008598 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f8be 	bl	8008712 <USBD_CtlError>
        break;
 8008596:	bf00      	nop
}
 8008598:	bf00      	nop
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	3b01      	subs	r3, #1
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d81e      	bhi.n	80085f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	88db      	ldrh	r3, [r3, #6]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d004      	beq.n	80085ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f8a5 	bl	8008712 <USBD_CtlError>
        break;
 80085c8:	e01a      	b.n	8008600 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f043 0202 	orr.w	r2, r3, #2
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	330c      	adds	r3, #12
 80085ea:	2202      	movs	r2, #2
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f90c 	bl	800880c <USBD_CtlSendData>
      break;
 80085f4:	e004      	b.n	8008600 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f88a 	bl	8008712 <USBD_CtlError>
      break;
 80085fe:	bf00      	nop
  }
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	885b      	ldrh	r3, [r3, #2]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d107      	bne.n	800862a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f94c 	bl	80088c0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008628:	e013      	b.n	8008652 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	885b      	ldrh	r3, [r3, #2]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d10b      	bne.n	800864a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	889b      	ldrh	r3, [r3, #4]
 8008636:	0a1b      	lsrs	r3, r3, #8
 8008638:	b29b      	uxth	r3, r3
 800863a:	b2da      	uxtb	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f93c 	bl	80088c0 <USBD_CtlSendStatus>
}
 8008648:	e003      	b.n	8008652 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f860 	bl	8008712 <USBD_CtlError>
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800866a:	b2db      	uxtb	r3, r3
 800866c:	3b01      	subs	r3, #1
 800866e:	2b02      	cmp	r3, #2
 8008670:	d80b      	bhi.n	800868a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	885b      	ldrh	r3, [r3, #2]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d10c      	bne.n	8008694 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f91c 	bl	80088c0 <USBD_CtlSendStatus>
      }
      break;
 8008688:	e004      	b.n	8008694 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f840 	bl	8008712 <USBD_CtlError>
      break;
 8008692:	e000      	b.n	8008696 <USBD_ClrFeature+0x3c>
      break;
 8008694:	bf00      	nop
  }
}
 8008696:	bf00      	nop
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	781a      	ldrb	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	3301      	adds	r3, #1
 80086b8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	781a      	ldrb	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3301      	adds	r3, #1
 80086c6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f7ff fa40 	bl	8007b4e <SWAPBYTE>
 80086ce:	4603      	mov	r3, r0
 80086d0:	461a      	mov	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3301      	adds	r3, #1
 80086da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3301      	adds	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f7ff fa33 	bl	8007b4e <SWAPBYTE>
 80086e8:	4603      	mov	r3, r0
 80086ea:	461a      	mov	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	3301      	adds	r3, #1
 80086f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3301      	adds	r3, #1
 80086fa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7ff fa26 	bl	8007b4e <SWAPBYTE>
 8008702:	4603      	mov	r3, r0
 8008704:	461a      	mov	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	80da      	strh	r2, [r3, #6]
}
 800870a:	bf00      	nop
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b082      	sub	sp, #8
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800871c:	2180      	movs	r1, #128	@ 0x80
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fcbc 	bl	800909c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008724:	2100      	movs	r1, #0
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fcb8 	bl	800909c <USBD_LL_StallEP>
}
 800872c:	bf00      	nop
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d042      	beq.n	80087d0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800874e:	6938      	ldr	r0, [r7, #16]
 8008750:	f000 f842 	bl	80087d8 <USBD_GetLen>
 8008754:	4603      	mov	r3, r0
 8008756:	3301      	adds	r3, #1
 8008758:	005b      	lsls	r3, r3, #1
 800875a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800875e:	d808      	bhi.n	8008772 <USBD_GetString+0x3e>
 8008760:	6938      	ldr	r0, [r7, #16]
 8008762:	f000 f839 	bl	80087d8 <USBD_GetLen>
 8008766:	4603      	mov	r3, r0
 8008768:	3301      	adds	r3, #1
 800876a:	b29b      	uxth	r3, r3
 800876c:	005b      	lsls	r3, r3, #1
 800876e:	b29a      	uxth	r2, r3
 8008770:	e001      	b.n	8008776 <USBD_GetString+0x42>
 8008772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800877a:	7dfb      	ldrb	r3, [r7, #23]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	4413      	add	r3, r2
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	7812      	ldrb	r2, [r2, #0]
 8008784:	701a      	strb	r2, [r3, #0]
  idx++;
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	3301      	adds	r3, #1
 800878a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	4413      	add	r3, r2
 8008792:	2203      	movs	r2, #3
 8008794:	701a      	strb	r2, [r3, #0]
  idx++;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	3301      	adds	r3, #1
 800879a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800879c:	e013      	b.n	80087c6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	4413      	add	r3, r2
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	7812      	ldrb	r2, [r2, #0]
 80087a8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	3301      	adds	r3, #1
 80087ae:	613b      	str	r3, [r7, #16]
    idx++;
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	3301      	adds	r3, #1
 80087b4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	4413      	add	r3, r2
 80087bc:	2200      	movs	r2, #0
 80087be:	701a      	strb	r2, [r3, #0]
    idx++;
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	3301      	adds	r3, #1
 80087c4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1e7      	bne.n	800879e <USBD_GetString+0x6a>
 80087ce:	e000      	b.n	80087d2 <USBD_GetString+0x9e>
    return;
 80087d0:	bf00      	nop
  }
}
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80087e8:	e005      	b.n	80087f6 <USBD_GetLen+0x1e>
  {
    len++;
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	3301      	adds	r3, #1
 80087ee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	3301      	adds	r3, #1
 80087f4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1f5      	bne.n	80087ea <USBD_GetLen+0x12>
  }

  return len;
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2202      	movs	r2, #2
 800881c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	2100      	movs	r1, #0
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f000 fcbb 	bl	80091ae <USBD_LL_Transmit>

  return USBD_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	60f8      	str	r0, [r7, #12]
 800884a:	60b9      	str	r1, [r7, #8]
 800884c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	2100      	movs	r1, #0
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f000 fcaa 	bl	80091ae <USBD_LL_Transmit>

  return USBD_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2203      	movs	r2, #3
 8008874:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	2100      	movs	r1, #0
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 fcae 	bl	80091f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	60f8      	str	r0, [r7, #12]
 80088a6:	60b9      	str	r1, [r7, #8]
 80088a8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	2100      	movs	r1, #0
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 fc9d 	bl	80091f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2204      	movs	r2, #4
 80088cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088d0:	2300      	movs	r3, #0
 80088d2:	2200      	movs	r2, #0
 80088d4:	2100      	movs	r1, #0
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fc69 	bl	80091ae <USBD_LL_Transmit>

  return USBD_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b082      	sub	sp, #8
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2205      	movs	r2, #5
 80088f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088f6:	2300      	movs	r3, #0
 80088f8:	2200      	movs	r2, #0
 80088fa:	2100      	movs	r1, #0
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fc77 	bl	80091f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008910:	2200      	movs	r2, #0
 8008912:	4912      	ldr	r1, [pc, #72]	@ (800895c <MX_USB_DEVICE_Init+0x50>)
 8008914:	4812      	ldr	r0, [pc, #72]	@ (8008960 <MX_USB_DEVICE_Init+0x54>)
 8008916:	f7fe fcf7 	bl	8007308 <USBD_Init>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008920:	f7f7 ff50 	bl	80007c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008924:	490f      	ldr	r1, [pc, #60]	@ (8008964 <MX_USB_DEVICE_Init+0x58>)
 8008926:	480e      	ldr	r0, [pc, #56]	@ (8008960 <MX_USB_DEVICE_Init+0x54>)
 8008928:	f7fe fd1e 	bl	8007368 <USBD_RegisterClass>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008932:	f7f7 ff47 	bl	80007c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008936:	490c      	ldr	r1, [pc, #48]	@ (8008968 <MX_USB_DEVICE_Init+0x5c>)
 8008938:	4809      	ldr	r0, [pc, #36]	@ (8008960 <MX_USB_DEVICE_Init+0x54>)
 800893a:	f7fe fc55 	bl	80071e8 <USBD_CDC_RegisterInterface>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008944:	f7f7 ff3e 	bl	80007c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008948:	4805      	ldr	r0, [pc, #20]	@ (8008960 <MX_USB_DEVICE_Init+0x54>)
 800894a:	f7fe fd43 	bl	80073d4 <USBD_Start>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008954:	f7f7 ff36 	bl	80007c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008958:	bf00      	nop
 800895a:	bd80      	pop	{r7, pc}
 800895c:	200000e8 	.word	0x200000e8
 8008960:	200002c4 	.word	0x200002c4
 8008964:	20000054 	.word	0x20000054
 8008968:	200000d4 	.word	0x200000d4

0800896c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008970:	2200      	movs	r2, #0
 8008972:	4905      	ldr	r1, [pc, #20]	@ (8008988 <CDC_Init_FS+0x1c>)
 8008974:	4805      	ldr	r0, [pc, #20]	@ (800898c <CDC_Init_FS+0x20>)
 8008976:	f7fe fc51 	bl	800721c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800897a:	4905      	ldr	r1, [pc, #20]	@ (8008990 <CDC_Init_FS+0x24>)
 800897c:	4803      	ldr	r0, [pc, #12]	@ (800898c <CDC_Init_FS+0x20>)
 800897e:	f7fe fc6f 	bl	8007260 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008982:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008984:	4618      	mov	r0, r3
 8008986:	bd80      	pop	{r7, pc}
 8008988:	200009a0 	.word	0x200009a0
 800898c:	200002c4 	.word	0x200002c4
 8008990:	200005a0 	.word	0x200005a0

08008994 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008994:	b480      	push	{r7}
 8008996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008998:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800899a:	4618      	mov	r0, r3
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	4603      	mov	r3, r0
 80089ac:	6039      	str	r1, [r7, #0]
 80089ae:	71fb      	strb	r3, [r7, #7]
 80089b0:	4613      	mov	r3, r2
 80089b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80089b4:	79fb      	ldrb	r3, [r7, #7]
 80089b6:	2b23      	cmp	r3, #35	@ 0x23
 80089b8:	d84a      	bhi.n	8008a50 <CDC_Control_FS+0xac>
 80089ba:	a201      	add	r2, pc, #4	@ (adr r2, 80089c0 <CDC_Control_FS+0x1c>)
 80089bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c0:	08008a51 	.word	0x08008a51
 80089c4:	08008a51 	.word	0x08008a51
 80089c8:	08008a51 	.word	0x08008a51
 80089cc:	08008a51 	.word	0x08008a51
 80089d0:	08008a51 	.word	0x08008a51
 80089d4:	08008a51 	.word	0x08008a51
 80089d8:	08008a51 	.word	0x08008a51
 80089dc:	08008a51 	.word	0x08008a51
 80089e0:	08008a51 	.word	0x08008a51
 80089e4:	08008a51 	.word	0x08008a51
 80089e8:	08008a51 	.word	0x08008a51
 80089ec:	08008a51 	.word	0x08008a51
 80089f0:	08008a51 	.word	0x08008a51
 80089f4:	08008a51 	.word	0x08008a51
 80089f8:	08008a51 	.word	0x08008a51
 80089fc:	08008a51 	.word	0x08008a51
 8008a00:	08008a51 	.word	0x08008a51
 8008a04:	08008a51 	.word	0x08008a51
 8008a08:	08008a51 	.word	0x08008a51
 8008a0c:	08008a51 	.word	0x08008a51
 8008a10:	08008a51 	.word	0x08008a51
 8008a14:	08008a51 	.word	0x08008a51
 8008a18:	08008a51 	.word	0x08008a51
 8008a1c:	08008a51 	.word	0x08008a51
 8008a20:	08008a51 	.word	0x08008a51
 8008a24:	08008a51 	.word	0x08008a51
 8008a28:	08008a51 	.word	0x08008a51
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008a51 	.word	0x08008a51
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	08008a51 	.word	0x08008a51
 8008a3c:	08008a51 	.word	0x08008a51
 8008a40:	08008a51 	.word	0x08008a51
 8008a44:	08008a51 	.word	0x08008a51
 8008a48:	08008a51 	.word	0x08008a51
 8008a4c:	08008a51 	.word	0x08008a51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a50:	bf00      	nop
  }

  return (USBD_OK);
 8008a52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	4805      	ldr	r0, [pc, #20]	@ (8008a84 <CDC_Receive_FS+0x24>)
 8008a6e:	f7fe fbf7 	bl	8007260 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a72:	4804      	ldr	r0, [pc, #16]	@ (8008a84 <CDC_Receive_FS+0x24>)
 8008a74:	f7fe fc12 	bl	800729c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	200002c4 	.word	0x200002c4

08008a88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	4613      	mov	r3, r2
 8008a94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
	...

08008aac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	6039      	str	r1, [r7, #0]
 8008ab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2212      	movs	r2, #18
 8008abc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008abe:	4b03      	ldr	r3, [pc, #12]	@ (8008acc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	20000104 	.word	0x20000104

08008ad0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	6039      	str	r1, [r7, #0]
 8008ada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2204      	movs	r2, #4
 8008ae0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ae2:	4b03      	ldr	r3, [pc, #12]	@ (8008af0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	20000118 	.word	0x20000118

08008af4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	6039      	str	r1, [r7, #0]
 8008afe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d105      	bne.n	8008b12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	4907      	ldr	r1, [pc, #28]	@ (8008b28 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b0a:	4808      	ldr	r0, [pc, #32]	@ (8008b2c <USBD_FS_ProductStrDescriptor+0x38>)
 8008b0c:	f7ff fe12 	bl	8008734 <USBD_GetString>
 8008b10:	e004      	b.n	8008b1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	4904      	ldr	r1, [pc, #16]	@ (8008b28 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b16:	4805      	ldr	r0, [pc, #20]	@ (8008b2c <USBD_FS_ProductStrDescriptor+0x38>)
 8008b18:	f7ff fe0c 	bl	8008734 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b1c:	4b02      	ldr	r3, [pc, #8]	@ (8008b28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20000da0 	.word	0x20000da0
 8008b2c:	080096d4 	.word	0x080096d4

08008b30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	6039      	str	r1, [r7, #0]
 8008b3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	4904      	ldr	r1, [pc, #16]	@ (8008b50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b40:	4804      	ldr	r0, [pc, #16]	@ (8008b54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b42:	f7ff fdf7 	bl	8008734 <USBD_GetString>
  return USBD_StrDesc;
 8008b46:	4b02      	ldr	r3, [pc, #8]	@ (8008b50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20000da0 	.word	0x20000da0
 8008b54:	080096ec 	.word	0x080096ec

08008b58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	6039      	str	r1, [r7, #0]
 8008b62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	221a      	movs	r2, #26
 8008b68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b6a:	f000 f843 	bl	8008bf4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b6e:	4b02      	ldr	r3, [pc, #8]	@ (8008b78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	2000011c 	.word	0x2000011c

08008b7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	4603      	mov	r3, r0
 8008b84:	6039      	str	r1, [r7, #0]
 8008b86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d105      	bne.n	8008b9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	4907      	ldr	r1, [pc, #28]	@ (8008bb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b92:	4808      	ldr	r0, [pc, #32]	@ (8008bb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b94:	f7ff fdce 	bl	8008734 <USBD_GetString>
 8008b98:	e004      	b.n	8008ba4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	4904      	ldr	r1, [pc, #16]	@ (8008bb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b9e:	4805      	ldr	r0, [pc, #20]	@ (8008bb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ba0:	f7ff fdc8 	bl	8008734 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ba4:	4b02      	ldr	r3, [pc, #8]	@ (8008bb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000da0 	.word	0x20000da0
 8008bb4:	08009700 	.word	0x08009700

08008bb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	6039      	str	r1, [r7, #0]
 8008bc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d105      	bne.n	8008bd6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	4907      	ldr	r1, [pc, #28]	@ (8008bec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bce:	4808      	ldr	r0, [pc, #32]	@ (8008bf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bd0:	f7ff fdb0 	bl	8008734 <USBD_GetString>
 8008bd4:	e004      	b.n	8008be0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	4904      	ldr	r1, [pc, #16]	@ (8008bec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bda:	4805      	ldr	r0, [pc, #20]	@ (8008bf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bdc:	f7ff fdaa 	bl	8008734 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008be0:	4b02      	ldr	r3, [pc, #8]	@ (8008bec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	20000da0 	.word	0x20000da0
 8008bf0:	0800970c 	.word	0x0800970c

08008bf4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8008c38 <Get_SerialNum+0x44>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c00:	4b0e      	ldr	r3, [pc, #56]	@ (8008c3c <Get_SerialNum+0x48>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c06:	4b0e      	ldr	r3, [pc, #56]	@ (8008c40 <Get_SerialNum+0x4c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4413      	add	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d009      	beq.n	8008c2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c1a:	2208      	movs	r2, #8
 8008c1c:	4909      	ldr	r1, [pc, #36]	@ (8008c44 <Get_SerialNum+0x50>)
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 f814 	bl	8008c4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c24:	2204      	movs	r2, #4
 8008c26:	4908      	ldr	r1, [pc, #32]	@ (8008c48 <Get_SerialNum+0x54>)
 8008c28:	68b8      	ldr	r0, [r7, #8]
 8008c2a:	f000 f80f 	bl	8008c4c <IntToUnicode>
  }
}
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	1fff7a10 	.word	0x1fff7a10
 8008c3c:	1fff7a14 	.word	0x1fff7a14
 8008c40:	1fff7a18 	.word	0x1fff7a18
 8008c44:	2000011e 	.word	0x2000011e
 8008c48:	2000012e 	.word	0x2000012e

08008c4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	4613      	mov	r3, r2
 8008c58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c5e:	2300      	movs	r3, #0
 8008c60:	75fb      	strb	r3, [r7, #23]
 8008c62:	e027      	b.n	8008cb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	0f1b      	lsrs	r3, r3, #28
 8008c68:	2b09      	cmp	r3, #9
 8008c6a:	d80b      	bhi.n	8008c84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	0f1b      	lsrs	r3, r3, #28
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	4619      	mov	r1, r3
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	440b      	add	r3, r1
 8008c7c:	3230      	adds	r2, #48	@ 0x30
 8008c7e:	b2d2      	uxtb	r2, r2
 8008c80:	701a      	strb	r2, [r3, #0]
 8008c82:	e00a      	b.n	8008c9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	0f1b      	lsrs	r3, r3, #28
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	440b      	add	r3, r1
 8008c94:	3237      	adds	r2, #55	@ 0x37
 8008c96:	b2d2      	uxtb	r2, r2
 8008c98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	011b      	lsls	r3, r3, #4
 8008c9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	4413      	add	r3, r2
 8008caa:	2200      	movs	r2, #0
 8008cac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	75fb      	strb	r3, [r7, #23]
 8008cb4:	7dfa      	ldrb	r2, [r7, #23]
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d3d3      	bcc.n	8008c64 <IntToUnicode+0x18>
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
	...

08008ccc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08a      	sub	sp, #40	@ 0x28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cd4:	f107 0314 	add.w	r3, r7, #20
 8008cd8:	2200      	movs	r2, #0
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	605a      	str	r2, [r3, #4]
 8008cde:	609a      	str	r2, [r3, #8]
 8008ce0:	60da      	str	r2, [r3, #12]
 8008ce2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cec:	d13a      	bne.n	8008d64 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cee:	2300      	movs	r3, #0
 8008cf0:	613b      	str	r3, [r7, #16]
 8008cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8008d6c <HAL_PCD_MspInit+0xa0>)
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8008d6c <HAL_PCD_MspInit+0xa0>)
 8008cf8:	f043 0301 	orr.w	r3, r3, #1
 8008cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8008cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8008d6c <HAL_PCD_MspInit+0xa0>)
 8008d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	613b      	str	r3, [r7, #16]
 8008d08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d0a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d10:	2302      	movs	r3, #2
 8008d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d14:	2300      	movs	r3, #0
 8008d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d1c:	230a      	movs	r3, #10
 8008d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d20:	f107 0314 	add.w	r3, r7, #20
 8008d24:	4619      	mov	r1, r3
 8008d26:	4812      	ldr	r0, [pc, #72]	@ (8008d70 <HAL_PCD_MspInit+0xa4>)
 8008d28:	f7f9 fc5a 	bl	80025e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8008d6c <HAL_PCD_MspInit+0xa0>)
 8008d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d30:	4a0e      	ldr	r2, [pc, #56]	@ (8008d6c <HAL_PCD_MspInit+0xa0>)
 8008d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d36:	6353      	str	r3, [r2, #52]	@ 0x34
 8008d38:	2300      	movs	r3, #0
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d6c <HAL_PCD_MspInit+0xa0>)
 8008d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d40:	4a0a      	ldr	r2, [pc, #40]	@ (8008d6c <HAL_PCD_MspInit+0xa0>)
 8008d42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d46:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d48:	4b08      	ldr	r3, [pc, #32]	@ (8008d6c <HAL_PCD_MspInit+0xa0>)
 8008d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d54:	2200      	movs	r2, #0
 8008d56:	2100      	movs	r1, #0
 8008d58:	2043      	movs	r0, #67	@ 0x43
 8008d5a:	f7f9 f89a 	bl	8001e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d5e:	2043      	movs	r0, #67	@ 0x43
 8008d60:	f7f9 f8b3 	bl	8001eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d64:	bf00      	nop
 8008d66:	3728      	adds	r7, #40	@ 0x28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	40023800 	.word	0x40023800
 8008d70:	40020000 	.word	0x40020000

08008d74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	f7fe fb6f 	bl	800746e <USBD_LL_SetupStage>
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008daa:	78fa      	ldrb	r2, [r7, #3]
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	4613      	mov	r3, r2
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	4413      	add	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	440b      	add	r3, r1
 8008db8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	78fb      	ldrb	r3, [r7, #3]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f7fe fba9 	bl	8007518 <USBD_LL_DataOutStage>
}
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b082      	sub	sp, #8
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008de0:	78fa      	ldrb	r2, [r7, #3]
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	4613      	mov	r3, r2
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	440b      	add	r3, r1
 8008dee:	3320      	adds	r3, #32
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	4619      	mov	r1, r3
 8008df6:	f7fe fc42 	bl	800767e <USBD_LL_DataInStage>
}
 8008dfa:	bf00      	nop
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe fd7c 	bl	800790e <USBD_LL_SOF>
}
 8008e16:	bf00      	nop
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e26:	2301      	movs	r3, #1
 8008e28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	79db      	ldrb	r3, [r3, #7]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d001      	beq.n	8008e36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e32:	f7f7 fcc7 	bl	80007c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e3c:	7bfa      	ldrb	r2, [r7, #15]
 8008e3e:	4611      	mov	r1, r2
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fe fd20 	bl	8007886 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fe fcc8 	bl	80077e2 <USBD_LL_Reset>
}
 8008e52:	bf00      	nop
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
	...

08008e5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe fd1b 	bl	80078a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	6812      	ldr	r2, [r2, #0]
 8008e7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008e82:	f043 0301 	orr.w	r3, r3, #1
 8008e86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	7adb      	ldrb	r3, [r3, #11]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d005      	beq.n	8008e9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e90:	4b04      	ldr	r3, [pc, #16]	@ (8008ea4 <HAL_PCD_SuspendCallback+0x48>)
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	4a03      	ldr	r2, [pc, #12]	@ (8008ea4 <HAL_PCD_SuspendCallback+0x48>)
 8008e96:	f043 0306 	orr.w	r3, r3, #6
 8008e9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	e000ed00 	.word	0xe000ed00

08008ea8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe fd11 	bl	80078de <USBD_LL_Resume>
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ed6:	78fa      	ldrb	r2, [r7, #3]
 8008ed8:	4611      	mov	r1, r2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe fd69 	bl	80079b2 <USBD_LL_IsoOUTIncomplete>
}
 8008ee0:	bf00      	nop
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008efa:	78fa      	ldrb	r2, [r7, #3]
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe fd25 	bl	800794e <USBD_LL_IsoINIncomplete>
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe fd7b 	bl	8007a16 <USBD_LL_DevConnected>
}
 8008f20:	bf00      	nop
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe fd78 	bl	8007a2c <USBD_LL_DevDisconnected>
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d13c      	bne.n	8008fce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f54:	4a20      	ldr	r2, [pc, #128]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008f60:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f64:	4b1c      	ldr	r3, [pc, #112]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008f66:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008f6e:	2204      	movs	r2, #4
 8008f70:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f72:	4b19      	ldr	r3, [pc, #100]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008f74:	2202      	movs	r2, #2
 8008f76:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f78:	4b17      	ldr	r3, [pc, #92]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f7e:	4b16      	ldr	r3, [pc, #88]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008f80:	2202      	movs	r2, #2
 8008f82:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f84:	4b14      	ldr	r3, [pc, #80]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f8a:	4b13      	ldr	r3, [pc, #76]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f90:	4b11      	ldr	r3, [pc, #68]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008f96:	4b10      	ldr	r3, [pc, #64]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fa2:	480d      	ldr	r0, [pc, #52]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008fa4:	f7f9 fcb9 	bl	800291a <HAL_PCD_Init>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008fae:	f7f7 fc09 	bl	80007c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008fb2:	2180      	movs	r1, #128	@ 0x80
 8008fb4:	4808      	ldr	r0, [pc, #32]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008fb6:	f7fa fee6 	bl	8003d86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008fba:	2240      	movs	r2, #64	@ 0x40
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	4806      	ldr	r0, [pc, #24]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008fc0:	f7fa fe9a 	bl	8003cf8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008fc4:	2280      	movs	r2, #128	@ 0x80
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	4803      	ldr	r0, [pc, #12]	@ (8008fd8 <USBD_LL_Init+0x94>)
 8008fca:	f7fa fe95 	bl	8003cf8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	20000fa0 	.word	0x20000fa0

08008fdc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7f9 fda0 	bl	8002b38 <HAL_PCD_Start>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 f942 	bl	8009288 <USBD_Get_USB_Status>
 8009004:	4603      	mov	r3, r0
 8009006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009008:	7bbb      	ldrb	r3, [r7, #14]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	4608      	mov	r0, r1
 800901c:	4611      	mov	r1, r2
 800901e:	461a      	mov	r2, r3
 8009020:	4603      	mov	r3, r0
 8009022:	70fb      	strb	r3, [r7, #3]
 8009024:	460b      	mov	r3, r1
 8009026:	70bb      	strb	r3, [r7, #2]
 8009028:	4613      	mov	r3, r2
 800902a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800903a:	78bb      	ldrb	r3, [r7, #2]
 800903c:	883a      	ldrh	r2, [r7, #0]
 800903e:	78f9      	ldrb	r1, [r7, #3]
 8009040:	f7fa fa74 	bl	800352c <HAL_PCD_EP_Open>
 8009044:	4603      	mov	r3, r0
 8009046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	4618      	mov	r0, r3
 800904c:	f000 f91c 	bl	8009288 <USBD_Get_USB_Status>
 8009050:	4603      	mov	r3, r0
 8009052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009054:	7bbb      	ldrb	r3, [r7, #14]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	460b      	mov	r3, r1
 8009068:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009078:	78fa      	ldrb	r2, [r7, #3]
 800907a:	4611      	mov	r1, r2
 800907c:	4618      	mov	r0, r3
 800907e:	f7fa fabf 	bl	8003600 <HAL_PCD_EP_Close>
 8009082:	4603      	mov	r3, r0
 8009084:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	4618      	mov	r0, r3
 800908a:	f000 f8fd 	bl	8009288 <USBD_Get_USB_Status>
 800908e:	4603      	mov	r3, r0
 8009090:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009092:	7bbb      	ldrb	r3, [r7, #14]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090b6:	78fa      	ldrb	r2, [r7, #3]
 80090b8:	4611      	mov	r1, r2
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fa fb77 	bl	80037ae <HAL_PCD_EP_SetStall>
 80090c0:	4603      	mov	r3, r0
 80090c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 f8de 	bl	8009288 <USBD_Get_USB_Status>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	460b      	mov	r3, r1
 80090e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090f4:	78fa      	ldrb	r2, [r7, #3]
 80090f6:	4611      	mov	r1, r2
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fa fbbb 	bl	8003874 <HAL_PCD_EP_ClrStall>
 80090fe:	4603      	mov	r3, r0
 8009100:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	4618      	mov	r0, r3
 8009106:	f000 f8bf 	bl	8009288 <USBD_Get_USB_Status>
 800910a:	4603      	mov	r3, r0
 800910c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800910e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800912a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800912c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009130:	2b00      	cmp	r3, #0
 8009132:	da0b      	bge.n	800914c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800913a:	68f9      	ldr	r1, [r7, #12]
 800913c:	4613      	mov	r3, r2
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	440b      	add	r3, r1
 8009146:	3316      	adds	r3, #22
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	e00b      	b.n	8009164 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800914c:	78fb      	ldrb	r3, [r7, #3]
 800914e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009152:	68f9      	ldr	r1, [r7, #12]
 8009154:	4613      	mov	r3, r2
 8009156:	00db      	lsls	r3, r3, #3
 8009158:	4413      	add	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	440b      	add	r3, r1
 800915e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009162:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	460b      	mov	r3, r1
 800917a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800918a:	78fa      	ldrb	r2, [r7, #3]
 800918c:	4611      	mov	r1, r2
 800918e:	4618      	mov	r0, r3
 8009190:	f7fa f9a8 	bl	80034e4 <HAL_PCD_SetAddress>
 8009194:	4603      	mov	r3, r0
 8009196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009198:	7bfb      	ldrb	r3, [r7, #15]
 800919a:	4618      	mov	r0, r3
 800919c:	f000 f874 	bl	8009288 <USBD_Get_USB_Status>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b086      	sub	sp, #24
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	60f8      	str	r0, [r7, #12]
 80091b6:	607a      	str	r2, [r7, #4]
 80091b8:	603b      	str	r3, [r7, #0]
 80091ba:	460b      	mov	r3, r1
 80091bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80091cc:	7af9      	ldrb	r1, [r7, #11]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	f7fa fab2 	bl	800373a <HAL_PCD_EP_Transmit>
 80091d6:	4603      	mov	r3, r0
 80091d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 f853 	bl	8009288 <USBD_Get_USB_Status>
 80091e2:	4603      	mov	r3, r0
 80091e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	607a      	str	r2, [r7, #4]
 80091fa:	603b      	str	r3, [r7, #0]
 80091fc:	460b      	mov	r3, r1
 80091fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800920e:	7af9      	ldrb	r1, [r7, #11]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	f7fa fa3e 	bl	8003694 <HAL_PCD_EP_Receive>
 8009218:	4603      	mov	r3, r0
 800921a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	4618      	mov	r0, r3
 8009220:	f000 f832 	bl	8009288 <USBD_Get_USB_Status>
 8009224:	4603      	mov	r3, r0
 8009226:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009228:	7dbb      	ldrb	r3, [r7, #22]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b082      	sub	sp, #8
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009244:	78fa      	ldrb	r2, [r7, #3]
 8009246:	4611      	mov	r1, r2
 8009248:	4618      	mov	r0, r3
 800924a:	f7fa fa5e 	bl	800370a <HAL_PCD_EP_GetRxCount>
 800924e:	4603      	mov	r3, r0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009260:	4b03      	ldr	r3, [pc, #12]	@ (8009270 <USBD_static_malloc+0x18>)
}
 8009262:	4618      	mov	r0, r3
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	20001484 	.word	0x20001484

08009274 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]

}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	2b03      	cmp	r3, #3
 800929a:	d817      	bhi.n	80092cc <USBD_Get_USB_Status+0x44>
 800929c:	a201      	add	r2, pc, #4	@ (adr r2, 80092a4 <USBD_Get_USB_Status+0x1c>)
 800929e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a2:	bf00      	nop
 80092a4:	080092b5 	.word	0x080092b5
 80092a8:	080092bb 	.word	0x080092bb
 80092ac:	080092c1 	.word	0x080092c1
 80092b0:	080092c7 	.word	0x080092c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73fb      	strb	r3, [r7, #15]
    break;
 80092b8:	e00b      	b.n	80092d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092ba:	2303      	movs	r3, #3
 80092bc:	73fb      	strb	r3, [r7, #15]
    break;
 80092be:	e008      	b.n	80092d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092c0:	2301      	movs	r3, #1
 80092c2:	73fb      	strb	r3, [r7, #15]
    break;
 80092c4:	e005      	b.n	80092d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092c6:	2303      	movs	r3, #3
 80092c8:	73fb      	strb	r3, [r7, #15]
    break;
 80092ca:	e002      	b.n	80092d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092cc:	2303      	movs	r3, #3
 80092ce:	73fb      	strb	r3, [r7, #15]
    break;
 80092d0:	bf00      	nop
  }
  return usb_status;
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <_ZdlPvj>:
 80092e0:	f000 b811 	b.w	8009306 <_ZdlPv>

080092e4 <_Znwj>:
 80092e4:	2801      	cmp	r0, #1
 80092e6:	bf38      	it	cc
 80092e8:	2001      	movcc	r0, #1
 80092ea:	b510      	push	{r4, lr}
 80092ec:	4604      	mov	r4, r0
 80092ee:	4620      	mov	r0, r4
 80092f0:	f000 f81c 	bl	800932c <malloc>
 80092f4:	b100      	cbz	r0, 80092f8 <_Znwj+0x14>
 80092f6:	bd10      	pop	{r4, pc}
 80092f8:	f000 f808 	bl	800930c <_ZSt15get_new_handlerv>
 80092fc:	b908      	cbnz	r0, 8009302 <_Znwj+0x1e>
 80092fe:	f000 f80d 	bl	800931c <abort>
 8009302:	4780      	blx	r0
 8009304:	e7f3      	b.n	80092ee <_Znwj+0xa>

08009306 <_ZdlPv>:
 8009306:	f000 b819 	b.w	800933c <free>
	...

0800930c <_ZSt15get_new_handlerv>:
 800930c:	4b02      	ldr	r3, [pc, #8]	@ (8009318 <_ZSt15get_new_handlerv+0xc>)
 800930e:	6818      	ldr	r0, [r3, #0]
 8009310:	f3bf 8f5b 	dmb	ish
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	200016a4 	.word	0x200016a4

0800931c <abort>:
 800931c:	b508      	push	{r3, lr}
 800931e:	2006      	movs	r0, #6
 8009320:	f000 f8f2 	bl	8009508 <raise>
 8009324:	2001      	movs	r0, #1
 8009326:	f7f7 fb8b 	bl	8000a40 <_exit>
	...

0800932c <malloc>:
 800932c:	4b02      	ldr	r3, [pc, #8]	@ (8009338 <malloc+0xc>)
 800932e:	4601      	mov	r1, r0
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	f000 b82d 	b.w	8009390 <_malloc_r>
 8009336:	bf00      	nop
 8009338:	20000138 	.word	0x20000138

0800933c <free>:
 800933c:	4b02      	ldr	r3, [pc, #8]	@ (8009348 <free+0xc>)
 800933e:	4601      	mov	r1, r0
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	f000 b939 	b.w	80095b8 <_free_r>
 8009346:	bf00      	nop
 8009348:	20000138 	.word	0x20000138

0800934c <sbrk_aligned>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	4e0f      	ldr	r6, [pc, #60]	@ (800938c <sbrk_aligned+0x40>)
 8009350:	460c      	mov	r4, r1
 8009352:	6831      	ldr	r1, [r6, #0]
 8009354:	4605      	mov	r5, r0
 8009356:	b911      	cbnz	r1, 800935e <sbrk_aligned+0x12>
 8009358:	f000 f8f2 	bl	8009540 <_sbrk_r>
 800935c:	6030      	str	r0, [r6, #0]
 800935e:	4621      	mov	r1, r4
 8009360:	4628      	mov	r0, r5
 8009362:	f000 f8ed 	bl	8009540 <_sbrk_r>
 8009366:	1c43      	adds	r3, r0, #1
 8009368:	d103      	bne.n	8009372 <sbrk_aligned+0x26>
 800936a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800936e:	4620      	mov	r0, r4
 8009370:	bd70      	pop	{r4, r5, r6, pc}
 8009372:	1cc4      	adds	r4, r0, #3
 8009374:	f024 0403 	bic.w	r4, r4, #3
 8009378:	42a0      	cmp	r0, r4
 800937a:	d0f8      	beq.n	800936e <sbrk_aligned+0x22>
 800937c:	1a21      	subs	r1, r4, r0
 800937e:	4628      	mov	r0, r5
 8009380:	f000 f8de 	bl	8009540 <_sbrk_r>
 8009384:	3001      	adds	r0, #1
 8009386:	d1f2      	bne.n	800936e <sbrk_aligned+0x22>
 8009388:	e7ef      	b.n	800936a <sbrk_aligned+0x1e>
 800938a:	bf00      	nop
 800938c:	200016a8 	.word	0x200016a8

08009390 <_malloc_r>:
 8009390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009394:	1ccd      	adds	r5, r1, #3
 8009396:	f025 0503 	bic.w	r5, r5, #3
 800939a:	3508      	adds	r5, #8
 800939c:	2d0c      	cmp	r5, #12
 800939e:	bf38      	it	cc
 80093a0:	250c      	movcc	r5, #12
 80093a2:	2d00      	cmp	r5, #0
 80093a4:	4606      	mov	r6, r0
 80093a6:	db01      	blt.n	80093ac <_malloc_r+0x1c>
 80093a8:	42a9      	cmp	r1, r5
 80093aa:	d904      	bls.n	80093b6 <_malloc_r+0x26>
 80093ac:	230c      	movs	r3, #12
 80093ae:	6033      	str	r3, [r6, #0]
 80093b0:	2000      	movs	r0, #0
 80093b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800948c <_malloc_r+0xfc>
 80093ba:	f000 f869 	bl	8009490 <__malloc_lock>
 80093be:	f8d8 3000 	ldr.w	r3, [r8]
 80093c2:	461c      	mov	r4, r3
 80093c4:	bb44      	cbnz	r4, 8009418 <_malloc_r+0x88>
 80093c6:	4629      	mov	r1, r5
 80093c8:	4630      	mov	r0, r6
 80093ca:	f7ff ffbf 	bl	800934c <sbrk_aligned>
 80093ce:	1c43      	adds	r3, r0, #1
 80093d0:	4604      	mov	r4, r0
 80093d2:	d158      	bne.n	8009486 <_malloc_r+0xf6>
 80093d4:	f8d8 4000 	ldr.w	r4, [r8]
 80093d8:	4627      	mov	r7, r4
 80093da:	2f00      	cmp	r7, #0
 80093dc:	d143      	bne.n	8009466 <_malloc_r+0xd6>
 80093de:	2c00      	cmp	r4, #0
 80093e0:	d04b      	beq.n	800947a <_malloc_r+0xea>
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	4639      	mov	r1, r7
 80093e6:	4630      	mov	r0, r6
 80093e8:	eb04 0903 	add.w	r9, r4, r3
 80093ec:	f000 f8a8 	bl	8009540 <_sbrk_r>
 80093f0:	4581      	cmp	r9, r0
 80093f2:	d142      	bne.n	800947a <_malloc_r+0xea>
 80093f4:	6821      	ldr	r1, [r4, #0]
 80093f6:	1a6d      	subs	r5, r5, r1
 80093f8:	4629      	mov	r1, r5
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7ff ffa6 	bl	800934c <sbrk_aligned>
 8009400:	3001      	adds	r0, #1
 8009402:	d03a      	beq.n	800947a <_malloc_r+0xea>
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	442b      	add	r3, r5
 8009408:	6023      	str	r3, [r4, #0]
 800940a:	f8d8 3000 	ldr.w	r3, [r8]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	bb62      	cbnz	r2, 800946c <_malloc_r+0xdc>
 8009412:	f8c8 7000 	str.w	r7, [r8]
 8009416:	e00f      	b.n	8009438 <_malloc_r+0xa8>
 8009418:	6822      	ldr	r2, [r4, #0]
 800941a:	1b52      	subs	r2, r2, r5
 800941c:	d420      	bmi.n	8009460 <_malloc_r+0xd0>
 800941e:	2a0b      	cmp	r2, #11
 8009420:	d917      	bls.n	8009452 <_malloc_r+0xc2>
 8009422:	1961      	adds	r1, r4, r5
 8009424:	42a3      	cmp	r3, r4
 8009426:	6025      	str	r5, [r4, #0]
 8009428:	bf18      	it	ne
 800942a:	6059      	strne	r1, [r3, #4]
 800942c:	6863      	ldr	r3, [r4, #4]
 800942e:	bf08      	it	eq
 8009430:	f8c8 1000 	streq.w	r1, [r8]
 8009434:	5162      	str	r2, [r4, r5]
 8009436:	604b      	str	r3, [r1, #4]
 8009438:	4630      	mov	r0, r6
 800943a:	f000 f82f 	bl	800949c <__malloc_unlock>
 800943e:	f104 000b 	add.w	r0, r4, #11
 8009442:	1d23      	adds	r3, r4, #4
 8009444:	f020 0007 	bic.w	r0, r0, #7
 8009448:	1ac2      	subs	r2, r0, r3
 800944a:	bf1c      	itt	ne
 800944c:	1a1b      	subne	r3, r3, r0
 800944e:	50a3      	strne	r3, [r4, r2]
 8009450:	e7af      	b.n	80093b2 <_malloc_r+0x22>
 8009452:	6862      	ldr	r2, [r4, #4]
 8009454:	42a3      	cmp	r3, r4
 8009456:	bf0c      	ite	eq
 8009458:	f8c8 2000 	streq.w	r2, [r8]
 800945c:	605a      	strne	r2, [r3, #4]
 800945e:	e7eb      	b.n	8009438 <_malloc_r+0xa8>
 8009460:	4623      	mov	r3, r4
 8009462:	6864      	ldr	r4, [r4, #4]
 8009464:	e7ae      	b.n	80093c4 <_malloc_r+0x34>
 8009466:	463c      	mov	r4, r7
 8009468:	687f      	ldr	r7, [r7, #4]
 800946a:	e7b6      	b.n	80093da <_malloc_r+0x4a>
 800946c:	461a      	mov	r2, r3
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	42a3      	cmp	r3, r4
 8009472:	d1fb      	bne.n	800946c <_malloc_r+0xdc>
 8009474:	2300      	movs	r3, #0
 8009476:	6053      	str	r3, [r2, #4]
 8009478:	e7de      	b.n	8009438 <_malloc_r+0xa8>
 800947a:	230c      	movs	r3, #12
 800947c:	6033      	str	r3, [r6, #0]
 800947e:	4630      	mov	r0, r6
 8009480:	f000 f80c 	bl	800949c <__malloc_unlock>
 8009484:	e794      	b.n	80093b0 <_malloc_r+0x20>
 8009486:	6005      	str	r5, [r0, #0]
 8009488:	e7d6      	b.n	8009438 <_malloc_r+0xa8>
 800948a:	bf00      	nop
 800948c:	200016ac 	.word	0x200016ac

08009490 <__malloc_lock>:
 8009490:	4801      	ldr	r0, [pc, #4]	@ (8009498 <__malloc_lock+0x8>)
 8009492:	f000 b88f 	b.w	80095b4 <__retarget_lock_acquire_recursive>
 8009496:	bf00      	nop
 8009498:	200017ec 	.word	0x200017ec

0800949c <__malloc_unlock>:
 800949c:	4801      	ldr	r0, [pc, #4]	@ (80094a4 <__malloc_unlock+0x8>)
 800949e:	f000 b88a 	b.w	80095b6 <__retarget_lock_release_recursive>
 80094a2:	bf00      	nop
 80094a4:	200017ec 	.word	0x200017ec

080094a8 <memset>:
 80094a8:	4402      	add	r2, r0
 80094aa:	4603      	mov	r3, r0
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d100      	bne.n	80094b2 <memset+0xa>
 80094b0:	4770      	bx	lr
 80094b2:	f803 1b01 	strb.w	r1, [r3], #1
 80094b6:	e7f9      	b.n	80094ac <memset+0x4>

080094b8 <_raise_r>:
 80094b8:	291f      	cmp	r1, #31
 80094ba:	b538      	push	{r3, r4, r5, lr}
 80094bc:	4605      	mov	r5, r0
 80094be:	460c      	mov	r4, r1
 80094c0:	d904      	bls.n	80094cc <_raise_r+0x14>
 80094c2:	2316      	movs	r3, #22
 80094c4:	6003      	str	r3, [r0, #0]
 80094c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80094ce:	b112      	cbz	r2, 80094d6 <_raise_r+0x1e>
 80094d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094d4:	b94b      	cbnz	r3, 80094ea <_raise_r+0x32>
 80094d6:	4628      	mov	r0, r5
 80094d8:	f000 f830 	bl	800953c <_getpid_r>
 80094dc:	4622      	mov	r2, r4
 80094de:	4601      	mov	r1, r0
 80094e0:	4628      	mov	r0, r5
 80094e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094e6:	f000 b817 	b.w	8009518 <_kill_r>
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d00a      	beq.n	8009504 <_raise_r+0x4c>
 80094ee:	1c59      	adds	r1, r3, #1
 80094f0:	d103      	bne.n	80094fa <_raise_r+0x42>
 80094f2:	2316      	movs	r3, #22
 80094f4:	6003      	str	r3, [r0, #0]
 80094f6:	2001      	movs	r0, #1
 80094f8:	e7e7      	b.n	80094ca <_raise_r+0x12>
 80094fa:	2100      	movs	r1, #0
 80094fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009500:	4620      	mov	r0, r4
 8009502:	4798      	blx	r3
 8009504:	2000      	movs	r0, #0
 8009506:	e7e0      	b.n	80094ca <_raise_r+0x12>

08009508 <raise>:
 8009508:	4b02      	ldr	r3, [pc, #8]	@ (8009514 <raise+0xc>)
 800950a:	4601      	mov	r1, r0
 800950c:	6818      	ldr	r0, [r3, #0]
 800950e:	f7ff bfd3 	b.w	80094b8 <_raise_r>
 8009512:	bf00      	nop
 8009514:	20000138 	.word	0x20000138

08009518 <_kill_r>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	4d07      	ldr	r5, [pc, #28]	@ (8009538 <_kill_r+0x20>)
 800951c:	2300      	movs	r3, #0
 800951e:	4604      	mov	r4, r0
 8009520:	4608      	mov	r0, r1
 8009522:	4611      	mov	r1, r2
 8009524:	602b      	str	r3, [r5, #0]
 8009526:	f7f7 fa7b 	bl	8000a20 <_kill>
 800952a:	1c43      	adds	r3, r0, #1
 800952c:	d102      	bne.n	8009534 <_kill_r+0x1c>
 800952e:	682b      	ldr	r3, [r5, #0]
 8009530:	b103      	cbz	r3, 8009534 <_kill_r+0x1c>
 8009532:	6023      	str	r3, [r4, #0]
 8009534:	bd38      	pop	{r3, r4, r5, pc}
 8009536:	bf00      	nop
 8009538:	200017e8 	.word	0x200017e8

0800953c <_getpid_r>:
 800953c:	f7f7 ba68 	b.w	8000a10 <_getpid>

08009540 <_sbrk_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4d06      	ldr	r5, [pc, #24]	@ (800955c <_sbrk_r+0x1c>)
 8009544:	2300      	movs	r3, #0
 8009546:	4604      	mov	r4, r0
 8009548:	4608      	mov	r0, r1
 800954a:	602b      	str	r3, [r5, #0]
 800954c:	f7f7 fa84 	bl	8000a58 <_sbrk>
 8009550:	1c43      	adds	r3, r0, #1
 8009552:	d102      	bne.n	800955a <_sbrk_r+0x1a>
 8009554:	682b      	ldr	r3, [r5, #0]
 8009556:	b103      	cbz	r3, 800955a <_sbrk_r+0x1a>
 8009558:	6023      	str	r3, [r4, #0]
 800955a:	bd38      	pop	{r3, r4, r5, pc}
 800955c:	200017e8 	.word	0x200017e8

08009560 <__errno>:
 8009560:	4b01      	ldr	r3, [pc, #4]	@ (8009568 <__errno+0x8>)
 8009562:	6818      	ldr	r0, [r3, #0]
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	20000138 	.word	0x20000138

0800956c <__libc_init_array>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	4d0d      	ldr	r5, [pc, #52]	@ (80095a4 <__libc_init_array+0x38>)
 8009570:	4c0d      	ldr	r4, [pc, #52]	@ (80095a8 <__libc_init_array+0x3c>)
 8009572:	1b64      	subs	r4, r4, r5
 8009574:	10a4      	asrs	r4, r4, #2
 8009576:	2600      	movs	r6, #0
 8009578:	42a6      	cmp	r6, r4
 800957a:	d109      	bne.n	8009590 <__libc_init_array+0x24>
 800957c:	4d0b      	ldr	r5, [pc, #44]	@ (80095ac <__libc_init_array+0x40>)
 800957e:	4c0c      	ldr	r4, [pc, #48]	@ (80095b0 <__libc_init_array+0x44>)
 8009580:	f000 f864 	bl	800964c <_init>
 8009584:	1b64      	subs	r4, r4, r5
 8009586:	10a4      	asrs	r4, r4, #2
 8009588:	2600      	movs	r6, #0
 800958a:	42a6      	cmp	r6, r4
 800958c:	d105      	bne.n	800959a <__libc_init_array+0x2e>
 800958e:	bd70      	pop	{r4, r5, r6, pc}
 8009590:	f855 3b04 	ldr.w	r3, [r5], #4
 8009594:	4798      	blx	r3
 8009596:	3601      	adds	r6, #1
 8009598:	e7ee      	b.n	8009578 <__libc_init_array+0xc>
 800959a:	f855 3b04 	ldr.w	r3, [r5], #4
 800959e:	4798      	blx	r3
 80095a0:	3601      	adds	r6, #1
 80095a2:	e7f2      	b.n	800958a <__libc_init_array+0x1e>
 80095a4:	0800dba0 	.word	0x0800dba0
 80095a8:	0800dba0 	.word	0x0800dba0
 80095ac:	0800dba0 	.word	0x0800dba0
 80095b0:	0800dba8 	.word	0x0800dba8

080095b4 <__retarget_lock_acquire_recursive>:
 80095b4:	4770      	bx	lr

080095b6 <__retarget_lock_release_recursive>:
 80095b6:	4770      	bx	lr

080095b8 <_free_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4605      	mov	r5, r0
 80095bc:	2900      	cmp	r1, #0
 80095be:	d041      	beq.n	8009644 <_free_r+0x8c>
 80095c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c4:	1f0c      	subs	r4, r1, #4
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	bfb8      	it	lt
 80095ca:	18e4      	addlt	r4, r4, r3
 80095cc:	f7ff ff60 	bl	8009490 <__malloc_lock>
 80095d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009648 <_free_r+0x90>)
 80095d2:	6813      	ldr	r3, [r2, #0]
 80095d4:	b933      	cbnz	r3, 80095e4 <_free_r+0x2c>
 80095d6:	6063      	str	r3, [r4, #4]
 80095d8:	6014      	str	r4, [r2, #0]
 80095da:	4628      	mov	r0, r5
 80095dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095e0:	f7ff bf5c 	b.w	800949c <__malloc_unlock>
 80095e4:	42a3      	cmp	r3, r4
 80095e6:	d908      	bls.n	80095fa <_free_r+0x42>
 80095e8:	6820      	ldr	r0, [r4, #0]
 80095ea:	1821      	adds	r1, r4, r0
 80095ec:	428b      	cmp	r3, r1
 80095ee:	bf01      	itttt	eq
 80095f0:	6819      	ldreq	r1, [r3, #0]
 80095f2:	685b      	ldreq	r3, [r3, #4]
 80095f4:	1809      	addeq	r1, r1, r0
 80095f6:	6021      	streq	r1, [r4, #0]
 80095f8:	e7ed      	b.n	80095d6 <_free_r+0x1e>
 80095fa:	461a      	mov	r2, r3
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	b10b      	cbz	r3, 8009604 <_free_r+0x4c>
 8009600:	42a3      	cmp	r3, r4
 8009602:	d9fa      	bls.n	80095fa <_free_r+0x42>
 8009604:	6811      	ldr	r1, [r2, #0]
 8009606:	1850      	adds	r0, r2, r1
 8009608:	42a0      	cmp	r0, r4
 800960a:	d10b      	bne.n	8009624 <_free_r+0x6c>
 800960c:	6820      	ldr	r0, [r4, #0]
 800960e:	4401      	add	r1, r0
 8009610:	1850      	adds	r0, r2, r1
 8009612:	4283      	cmp	r3, r0
 8009614:	6011      	str	r1, [r2, #0]
 8009616:	d1e0      	bne.n	80095da <_free_r+0x22>
 8009618:	6818      	ldr	r0, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	6053      	str	r3, [r2, #4]
 800961e:	4408      	add	r0, r1
 8009620:	6010      	str	r0, [r2, #0]
 8009622:	e7da      	b.n	80095da <_free_r+0x22>
 8009624:	d902      	bls.n	800962c <_free_r+0x74>
 8009626:	230c      	movs	r3, #12
 8009628:	602b      	str	r3, [r5, #0]
 800962a:	e7d6      	b.n	80095da <_free_r+0x22>
 800962c:	6820      	ldr	r0, [r4, #0]
 800962e:	1821      	adds	r1, r4, r0
 8009630:	428b      	cmp	r3, r1
 8009632:	bf04      	itt	eq
 8009634:	6819      	ldreq	r1, [r3, #0]
 8009636:	685b      	ldreq	r3, [r3, #4]
 8009638:	6063      	str	r3, [r4, #4]
 800963a:	bf04      	itt	eq
 800963c:	1809      	addeq	r1, r1, r0
 800963e:	6021      	streq	r1, [r4, #0]
 8009640:	6054      	str	r4, [r2, #4]
 8009642:	e7ca      	b.n	80095da <_free_r+0x22>
 8009644:	bd38      	pop	{r3, r4, r5, pc}
 8009646:	bf00      	nop
 8009648:	200016ac 	.word	0x200016ac

0800964c <_init>:
 800964c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964e:	bf00      	nop
 8009650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009652:	bc08      	pop	{r3}
 8009654:	469e      	mov	lr, r3
 8009656:	4770      	bx	lr

08009658 <_fini>:
 8009658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965a:	bf00      	nop
 800965c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800965e:	bc08      	pop	{r3}
 8009660:	469e      	mov	lr, r3
 8009662:	4770      	bx	lr
