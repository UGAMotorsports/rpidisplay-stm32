
stm32-spidisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005808  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001440  0800599c  0800599c  0000699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ddc  08006ddc  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006ddc  08006ddc  00007ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006de4  08006de4  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006de4  08006de4  00007de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006dec  08006dec  00007dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006df0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000010  08006e00  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08006e00  000081fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010eb4  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d57  00000000  00000000  00018ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0001bc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8a  00000000  00000000  0001cb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fad  00000000  00000000  0001d6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ac2  00000000  00000000  0003768f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fafa  00000000  00000000  0004a151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9c4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dec  00000000  00000000  000d9c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000dda7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005984 	.word	0x08005984

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08005984 	.word	0x08005984

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	4b17      	ldr	r3, [pc, #92]	@ (800052c <MX_DMA_Init+0x68>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	4a16      	ldr	r2, [pc, #88]	@ (800052c <MX_DMA_Init+0x68>)
 80004d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004da:	4b14      	ldr	r3, [pc, #80]	@ (800052c <MX_DMA_Init+0x68>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	4b10      	ldr	r3, [pc, #64]	@ (800052c <MX_DMA_Init+0x68>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	4a0f      	ldr	r2, [pc, #60]	@ (800052c <MX_DMA_Init+0x68>)
 80004f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80004f6:	4b0d      	ldr	r3, [pc, #52]	@ (800052c <MX_DMA_Init+0x68>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	200b      	movs	r0, #11
 8000508:	f002 f985 	bl	8002816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800050c:	200b      	movs	r0, #11
 800050e:	f002 f99e 	bl	800284e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	203b      	movs	r0, #59	@ 0x3b
 8000518:	f002 f97d 	bl	8002816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800051c:	203b      	movs	r0, #59	@ 0x3b
 800051e:	f002 f996 	bl	800284e <HAL_NVIC_EnableIRQ>

}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800

08000530 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	@ 0x28
 8000534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	4b3d      	ldr	r3, [pc, #244]	@ (8000640 <MX_GPIO_Init+0x110>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	4a3c      	ldr	r2, [pc, #240]	@ (8000640 <MX_GPIO_Init+0x110>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6313      	str	r3, [r2, #48]	@ 0x30
 8000556:	4b3a      	ldr	r3, [pc, #232]	@ (8000640 <MX_GPIO_Init+0x110>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	4b36      	ldr	r3, [pc, #216]	@ (8000640 <MX_GPIO_Init+0x110>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	4a35      	ldr	r2, [pc, #212]	@ (8000640 <MX_GPIO_Init+0x110>)
 800056c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000570:	6313      	str	r3, [r2, #48]	@ 0x30
 8000572:	4b33      	ldr	r3, [pc, #204]	@ (8000640 <MX_GPIO_Init+0x110>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b2f      	ldr	r3, [pc, #188]	@ (8000640 <MX_GPIO_Init+0x110>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a2e      	ldr	r2, [pc, #184]	@ (8000640 <MX_GPIO_Init+0x110>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b2c      	ldr	r3, [pc, #176]	@ (8000640 <MX_GPIO_Init+0x110>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <MX_GPIO_Init+0x110>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a27      	ldr	r2, [pc, #156]	@ (8000640 <MX_GPIO_Init+0x110>)
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <MX_GPIO_Init+0x110>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005bc:	4821      	ldr	r0, [pc, #132]	@ (8000644 <MX_GPIO_Init+0x114>)
 80005be:	f002 fe77 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2110      	movs	r1, #16
 80005c6:	4820      	ldr	r0, [pc, #128]	@ (8000648 <MX_GPIO_Init+0x118>)
 80005c8:	f002 fe72 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(chip_select_GPIO_Port, chip_select_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2108      	movs	r1, #8
 80005d0:	481e      	ldr	r0, [pc, #120]	@ (800064c <MX_GPIO_Init+0x11c>)
 80005d2:	f002 fe6d 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, register_select_Pin|reset_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2130      	movs	r1, #48	@ 0x30
 80005da:	481c      	ldr	r0, [pc, #112]	@ (800064c <MX_GPIO_Init+0x11c>)
 80005dc:	f002 fe68 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	4812      	ldr	r0, [pc, #72]	@ (8000644 <MX_GPIO_Init+0x114>)
 80005fa:	f002 fcd5 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005fe:	2310      	movs	r3, #16
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	480c      	ldr	r0, [pc, #48]	@ (8000648 <MX_GPIO_Init+0x118>)
 8000616:	f002 fcc7 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : chip_select_Pin register_select_Pin reset_Pin */
  GPIO_InitStruct.Pin = chip_select_Pin|register_select_Pin|reset_Pin;
 800061a:	2338      	movs	r3, #56	@ 0x38
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	4806      	ldr	r0, [pc, #24]	@ (800064c <MX_GPIO_Init+0x11c>)
 8000632:	f002 fcb9 	bl	8002fa8 <HAL_GPIO_Init>

}
 8000636:	bf00      	nop
 8000638:	3728      	adds	r7, #40	@ 0x28
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40020800 	.word	0x40020800
 8000648:	40020000 	.word	0x40020000
 800064c:	40020400 	.word	0x40020400

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b5b0      	push	{r4, r5, r7, lr}
 8000652:	f5ad 6d9c 	sub.w	sp, sp, #1248	@ 0x4e0
 8000656:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f001 ff6c 	bl	8002534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f8f2 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f7ff ff66 	bl	8000530 <MX_GPIO_Init>
  MX_DMA_Init();
 8000664:	f7ff ff2e 	bl	80004c4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000668:	f000 fba0 	bl	8000dac <MX_SPI1_Init>
  MX_SPI2_Init();
 800066c:	f000 fbd6 	bl	8000e1c <MX_SPI2_Init>
  MX_TIM4_Init();
 8000670:	f000 fd44 	bl	80010fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < 5; i++) {
 8000674:	2300      	movs	r3, #0
 8000676:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 800067a:	e016      	b.n	80006aa <main+0x5a>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000682:	486a      	ldr	r0, [pc, #424]	@ (800082c <main+0x1dc>)
 8000684:	f002 fe14 	bl	80032b0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	@ 0x64
 800068a:	f001 ffc5 	bl	8002618 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000694:	4865      	ldr	r0, [pc, #404]	@ (800082c <main+0x1dc>)
 8000696:	f002 fe0b 	bl	80032b0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800069a:	2064      	movs	r0, #100	@ 0x64
 800069c:	f001 ffbc 	bl	8002618 <HAL_Delay>
  for (int i = 0; i < 5; i++) {
 80006a0:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 80006a4:	3301      	adds	r3, #1
 80006a6:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 80006aa:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	dde4      	ble.n	800067c <main+0x2c>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  resetScreen();
 80006b2:	f000 fed1 	bl	8001458 <resetScreen>
  initializeScreen();
 80006b6:	f000 feed 	bl	8001494 <initializeScreen>

  char *uga = "uga motorsports";
 80006ba:	4b5d      	ldr	r3, [pc, #372]	@ (8000830 <main+0x1e0>)
 80006bc:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
  drawString(uga, font_FreeSans18pt7b, 10, 100, no_flip_object);
 80006c0:	4b5c      	ldr	r3, [pc, #368]	@ (8000834 <main+0x1e4>)
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2364      	movs	r3, #100	@ 0x64
 80006ca:	220a      	movs	r2, #10
 80006cc:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	@ 0x4d0
 80006d0:	f001 f92f 	bl	8001932 <drawString>
  HAL_Delay(200);
 80006d4:	20c8      	movs	r0, #200	@ 0xc8
 80006d6:	f001 ff9f 	bl	8002618 <HAL_Delay>
  clearScreen(0x0000);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 ffb4 	bl	8001648 <clearScreen>
  initializeMCP2515();
 80006e0:	f000 f920 	bl	8000924 <initializeMCP2515>
  uint8_t ledcolors[3 * 16];
  uint16_t ledbytes[(16 * 24) + 150];
  int G1[12] = {834, 1668, 2502, 3336, 4170, 5004, 5838, 6672, 7506, 8340,
 80006e4:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80006e8:	f5a3 6394 	sub.w	r3, r3, #1184	@ 0x4a0
 80006ec:	4a52      	ldr	r2, [pc, #328]	@ (8000838 <main+0x1e8>)
 80006ee:	461c      	mov	r4, r3
 80006f0:	4615      	mov	r5, r2
 80006f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  9174, 10008};
  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8000702:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000706:	f207 4294 	addw	r2, r7, #1172	@ 0x494
 800070a:	2100      	movs	r1, #0
 800070c:	484b      	ldr	r0, [pc, #300]	@ (800083c <main+0x1ec>)
 800070e:	f000 f9cf 	bl	8000ab0 <shiftLightsInit>
  HAL_Delay(500);
 8000712:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000716:	f001 ff7f 	bl	8002618 <HAL_Delay>
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 800071a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800071e:	f207 4294 	addw	r2, r7, #1172	@ 0x494
 8000722:	2100      	movs	r1, #0
 8000724:	4845      	ldr	r0, [pc, #276]	@ (800083c <main+0x1ec>)
 8000726:	f000 fad9 	bl	8000cdc <startUp>

  struct can_frame frame;

  while (1)
  {
	  int canresult = readMessage(&frame);
 800072a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f90a 	bl	8000948 <readMessage>
 8000734:	f8c7 04cc 	str.w	r0, [r7, #1228]	@ 0x4cc
	  if (canresult == 0) {
 8000738:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800073c:	2b00      	cmp	r3, #0
 800073e:	d171      	bne.n	8000824 <main+0x1d4>
		  if (frame.can_id == 1512) {
 8000740:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000744:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 800074e:	d139      	bne.n	80007c4 <main+0x174>
			  uint16_t rpm = (((uint16_t)frame.data[2]) << 8) + frame.data[3];
 8000750:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000754:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8000758:	7a9b      	ldrb	r3, [r3, #10]
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	b29b      	uxth	r3, r3
 800075e:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8000762:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 8000766:	7ad2      	ldrb	r2, [r2, #11]
 8000768:	4413      	add	r3, r2
 800076a:	f8a7 34c8 	strh.w	r3, [r7, #1224]	@ 0x4c8
			  UpdateShiftLights(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes, rpm, G1);
 800076e:	f8b7 34c8 	ldrh.w	r3, [r7, #1224]	@ 0x4c8
 8000772:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8000776:	f207 4194 	addw	r1, r7, #1172	@ 0x494
 800077a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	4603      	mov	r3, r0
 8000784:	460a      	mov	r2, r1
 8000786:	2100      	movs	r1, #0
 8000788:	482c      	ldr	r0, [pc, #176]	@ (800083c <main+0x1ec>)
 800078a:	f000 fa21 	bl	8000bd0 <UpdateShiftLights>
			  char result[20];
			  itoa(rpm, (char*)(result), 10);
 800078e:	f8b7 34c8 	ldrh.w	r3, [r7, #1224]	@ 0x4c8
 8000792:	f107 0114 	add.w	r1, r7, #20
 8000796:	220a      	movs	r2, #10
 8000798:	4618      	mov	r0, r3
 800079a:	f005 f883 	bl	80058a4 <itoa>
			  drawRectangleFilled(180, 60, 140, 40, 0x0000);
 800079e:	2300      	movs	r3, #0
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2328      	movs	r3, #40	@ 0x28
 80007a4:	228c      	movs	r2, #140	@ 0x8c
 80007a6:	213c      	movs	r1, #60	@ 0x3c
 80007a8:	20b4      	movs	r0, #180	@ 0xb4
 80007aa:	f001 f80d 	bl	80017c8 <drawRectangleFilled>
			  drawString(result, font_FreeSans18pt7b, 30, 100, no_flip_object);
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <main+0x1e4>)
 80007b0:	6819      	ldr	r1, [r3, #0]
 80007b2:	2300      	movs	r3, #0
 80007b4:	f107 0014 	add.w	r0, r7, #20
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2364      	movs	r3, #100	@ 0x64
 80007bc:	221e      	movs	r2, #30
 80007be:	f001 f8b8 	bl	8001932 <drawString>
 80007c2:	e02f      	b.n	8000824 <main+0x1d4>
		  } else if (frame.can_id == 1513){
 80007c4:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80007c8:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f240 52e9 	movw	r2, #1513	@ 0x5e9
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d126      	bne.n	8000824 <main+0x1d4>
			  uint16_t temp = (((uint16_t)frame.data[4]) << 8) + frame.data[5];
 80007d6:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80007da:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80007de:	7b1b      	ldrb	r3, [r3, #12]
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80007e8:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 80007ec:	7b52      	ldrb	r2, [r2, #13]
 80007ee:	4413      	add	r3, r2
 80007f0:	f8a7 34ca 	strh.w	r3, [r7, #1226]	@ 0x4ca
			  char result[20];
			  itoa(temp, result, 10);
 80007f4:	f8b7 34ca 	ldrh.w	r3, [r7, #1226]	@ 0x4ca
 80007f8:	4639      	mov	r1, r7
 80007fa:	220a      	movs	r2, #10
 80007fc:	4618      	mov	r0, r3
 80007fe:	f005 f851 	bl	80058a4 <itoa>
			  drawRectangleFilled(180, 20, 140, 40, 0x0000);
 8000802:	2300      	movs	r3, #0
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2328      	movs	r3, #40	@ 0x28
 8000808:	228c      	movs	r2, #140	@ 0x8c
 800080a:	2114      	movs	r1, #20
 800080c:	20b4      	movs	r0, #180	@ 0xb4
 800080e:	f000 ffdb 	bl	80017c8 <drawRectangleFilled>
			  drawString(result, font_FreeSans18pt7b, 30, 50, no_flip_object);
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <main+0x1e4>)
 8000814:	6819      	ldr	r1, [r3, #0]
 8000816:	2300      	movs	r3, #0
 8000818:	4638      	mov	r0, r7
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2332      	movs	r3, #50	@ 0x32
 800081e:	221e      	movs	r2, #30
 8000820:	f001 f887 	bl	8001932 <drawString>
		  }
	  }
	  char *buffer = "0";
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <main+0x1f0>)
 8000826:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
  {
 800082a:	e77e      	b.n	800072a <main+0xda>
 800082c:	40020800 	.word	0x40020800
 8000830:	0800599c 	.word	0x0800599c
 8000834:	20000000 	.word	0x20000000
 8000838:	080059b0 	.word	0x080059b0
 800083c:	20000150 	.word	0x20000150
 8000840:	080059ac 	.word	0x080059ac

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b094      	sub	sp, #80	@ 0x50
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	2230      	movs	r2, #48	@ 0x30
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f005 f86a 	bl	800592c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4b28      	ldr	r3, [pc, #160]	@ (8000910 <SystemClock_Config+0xcc>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000870:	4a27      	ldr	r2, [pc, #156]	@ (8000910 <SystemClock_Config+0xcc>)
 8000872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000876:	6413      	str	r3, [r2, #64]	@ 0x40
 8000878:	4b25      	ldr	r3, [pc, #148]	@ (8000910 <SystemClock_Config+0xcc>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	4b22      	ldr	r3, [pc, #136]	@ (8000914 <SystemClock_Config+0xd0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000890:	4a20      	ldr	r2, [pc, #128]	@ (8000914 <SystemClock_Config+0xd0>)
 8000892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b1e      	ldr	r3, [pc, #120]	@ (8000914 <SystemClock_Config+0xd0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008b8:	2319      	movs	r3, #25
 80008ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008bc:	23a8      	movs	r3, #168	@ 0xa8
 80008be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008c4:	2307      	movs	r3, #7
 80008c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fd09 	bl	80032e4 <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008d8:	f000 f81e 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2302      	movs	r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2102      	movs	r1, #2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 ff6b 	bl	80037d4 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000904:	f000 f808 	bl	8000918 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3750      	adds	r7, #80	@ 0x50
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <initializeMCP2515>:
#include "spi.h"
#include "gpio.h"


MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	myMCP.reset();
 8000928:	4806      	ldr	r0, [pc, #24]	@ (8000944 <initializeMCP2515+0x20>)
 800092a:	f001 f8c5 	bl	8001ab8 <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 800092e:	2202      	movs	r2, #2
 8000930:	210e      	movs	r1, #14
 8000932:	4804      	ldr	r0, [pc, #16]	@ (8000944 <initializeMCP2515+0x20>)
 8000934:	f001 fa92 	bl	8001e5c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 8000938:	4802      	ldr	r0, [pc, #8]	@ (8000944 <initializeMCP2515+0x20>)
 800093a:	f001 fa43 	bl	8001dc4 <_ZN7MCP251513setNormalModeEv>
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000002c 	.word	0x2000002c

08000948 <readMessage>:

int sendMessage(struct can_frame *frame) {
	return myMCP.sendMessage(frame);
}

int readMessage(struct can_frame *frame) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	4804      	ldr	r0, [pc, #16]	@ (8000964 <readMessage+0x1c>)
 8000954:	f001 fd98 	bl	8002488 <_ZN7MCP251511readMessageEP9can_frame>
 8000958:	4603      	mov	r3, r0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000002c 	.word	0x2000002c

08000968 <_Z41__static_initialization_and_destruction_0ii>:
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af02      	add	r7, sp, #8
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d10c      	bne.n	8000992 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800097e:	4293      	cmp	r3, r2
 8000980:	d107      	bne.n	8000992 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 8000982:	2310      	movs	r3, #16
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	4b05      	ldr	r3, [pc, #20]	@ (800099c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000988:	220a      	movs	r2, #10
 800098a:	4905      	ldr	r1, [pc, #20]	@ (80009a0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800098c:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800098e:	f001 f834 	bl	80019fa <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40020000 	.word	0x40020000
 80009a0:	20000098 	.word	0x20000098
 80009a4:	2000002c 	.word	0x2000002c

080009a8 <_GLOBAL__sub_I_myMCP>:
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80009b0:	2001      	movs	r0, #1
 80009b2:	f7ff ffd9 	bl	8000968 <_Z41__static_initialization_and_destruction_0ii>
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <setColor>:
int datasentflag;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	4611      	mov	r1, r2
 80009c4:	461a      	mov	r2, r3
 80009c6:	460b      	mov	r3, r1
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	4613      	mov	r3, r2
 80009cc:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 80009ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009dc:	4413      	add	r3, r2
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	3301      	adds	r3, #1
 80009e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009e8:	4413      	add	r3, r2
 80009ea:	79ba      	ldrb	r2, [r7, #6]
 80009ec:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	3302      	adds	r3, #2
 80009f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009f4:	4413      	add	r3, r2
 80009f6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80009fa:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	e02a      	b.n	8000a58 <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	e021      	b.n	8000a4c <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a0c:	4413      	add	r3, r2
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d009      	beq.n	8000a34 <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	00da      	lsls	r2, r3, #3
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	4413      	add	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a2c:	4413      	add	r3, r2
 8000a2e:	2246      	movs	r2, #70	@ 0x46
 8000a30:	801a      	strh	r2, [r3, #0]
 8000a32:	e008      	b.n	8000a46 <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	00da      	lsls	r2, r3, #3
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a40:	4413      	add	r3, r2
 8000a42:	2223      	movs	r2, #35	@ 0x23
 8000a44:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	2b07      	cmp	r3, #7
 8000a50:	ddda      	ble.n	8000a08 <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3301      	adds	r3, #1
 8000a56:	61fb      	str	r3, [r7, #28]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	69fa      	ldr	r2, [r7, #28]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	ddcf      	ble.n	8000a02 <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000a62:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	e008      	b.n	8000a7c <setColor+0xc4>
    	ledbytes[i] = 0;
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a70:	4413      	add	r3, r2
 8000a72:	2200      	movs	r2, #0
 8000a74:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	f240 2215 	movw	r2, #533	@ 0x215
 8000a82:	4293      	cmp	r3, r2
 8000a84:	ddf1      	ble.n	8000a6a <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8000a86:	f240 2316 	movw	r3, #534	@ 0x216
 8000a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f003 fec6 	bl	8004820 <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 8000a94:	bf00      	nop
 8000a96:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <setColor+0xf4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0fb      	beq.n	8000a96 <setColor+0xde>
    datasentflag = 0;
 8000a9e:	4b03      	ldr	r3, [pc, #12]	@ (8000aac <setColor+0xf4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2000003c 	.word	0x2000003c

08000ab0 <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	e013      	b.n	8000aec <shiftLightsInit+0x3c>
		ledcolors[i] = 0;
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 0;
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 0;
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3302      	adds	r3, #2
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3303      	adds	r3, #3
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	2b2f      	cmp	r3, #47	@ 0x2f
 8000af0:	dde8      	ble.n	8000ac4 <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	e02a      	b.n	8000b4e <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e021      	b.n	8000b42 <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d009      	beq.n	8000b2a <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	00da      	lsls	r2, r3, #3
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	2246      	movs	r2, #70	@ 0x46
 8000b26:	801a      	strh	r2, [r3, #0]
 8000b28:	e008      	b.n	8000b3c <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	00da      	lsls	r2, r3, #3
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	4413      	add	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	2223      	movs	r2, #35	@ 0x23
 8000b3a:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	2b07      	cmp	r3, #7
 8000b46:	ddda      	ble.n	8000afe <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b52:	ddd1      	ble.n	8000af8 <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000b54:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	e008      	b.n	8000b6e <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	f240 2215 	movw	r2, #533	@ 0x215
 8000b74:	4293      	cmp	r3, r2
 8000b76:	ddf1      	ble.n	8000b5c <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8000b78:	f240 2316 	movw	r3, #534	@ 0x216
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	68b9      	ldr	r1, [r7, #8]
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f003 fe4d 	bl	8004820 <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 8000b86:	bf00      	nop
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <shiftLightsInit+0xf4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0fb      	beq.n	8000b88 <shiftLightsInit+0xd8>
	datasentflag = 0;
 8000b90:	4b04      	ldr	r3, [pc, #16]	@ (8000ba4 <shiftLightsInit+0xf4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000003c 	.word	0x2000003c

08000ba8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000bb4:	f003 ffe4 	bl	8004b80 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000bb8:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000150 	.word	0x20000150
 8000bcc:	2000003c 	.word	0x2000003c

08000bd0 <UpdateShiftLights>:


void UpdateShiftLights(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes, int current_rpm, int * RPM_thresholds) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af04      	add	r7, sp, #16
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	603b      	str	r3, [r7, #0]
  for (int i = 2; i < 14; i++) {
 8000bde:	2302      	movs	r3, #2
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	e024      	b.n	8000c2e <UpdateShiftLights+0x5e>
    if (current_rpm >= RPM_thresholds[i - 2]) {
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000bea:	3b02      	subs	r3, #2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bf0:	4413      	add	r3, r2
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6a3a      	ldr	r2, [r7, #32]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	db08      	blt.n	8000c0c <UpdateShiftLights+0x3c>
        // Turn on the shift light (use appropriate LED control function)
    	lightOn(htim, Channel,ledcolors, ledbytes, i);
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	68b9      	ldr	r1, [r7, #8]
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f000 f81b 	bl	8000c40 <lightOn>
 8000c0a:	e00d      	b.n	8000c28 <UpdateShiftLights+0x58>
    } else {
        // Turn off the shift light
    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	9303      	str	r3, [sp, #12]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	9302      	str	r3, [sp, #8]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	2200      	movs	r2, #0
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f7ff fec8 	bl	80009b8 <setColor>
  for (int i = 2; i < 14; i++) {
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	2b0d      	cmp	r3, #13
 8000c32:	ddd7      	ble.n	8000be4 <UpdateShiftLights+0x14>
    }
  }
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <lightOn>:

void lightOn(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes,int index) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af04      	add	r7, sp, #16
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	603b      	str	r3, [r7, #0]
	if (index == 13) {
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	2b0d      	cmp	r3, #13
 8000c52:	d108      	bne.n	8000c66 <lightOn+0x26>
		startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	481f      	ldr	r0, [pc, #124]	@ (8000cd8 <lightOn+0x98>)
 8000c5c:	f000 f83e 	bl	8000cdc <startUp>
		HAL_Delay(5);
 8000c60:	2005      	movs	r0, #5
 8000c62:	f001 fcd9 	bl	8002618 <HAL_Delay>
	}
	if (index < 6) {
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	2b05      	cmp	r3, #5
 8000c6a:	dc0e      	bgt.n	8000c8a <lightOn+0x4a>
		setColor(htim, Channel, 255, 255, 0, ledcolors, ledbytes, index);
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	9303      	str	r3, [sp, #12]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	9302      	str	r3, [sp, #8]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	23ff      	movs	r3, #255	@ 0xff
 8000c7e:	22ff      	movs	r2, #255	@ 0xff
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	f7ff fe98 	bl	80009b8 <setColor>
	} else if (index < 10) {
		setColor(htim, Channel, 100, 255, 0, ledcolors, ledbytes, index);
	} else if (index < 14){
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	}
}
 8000c88:	e022      	b.n	8000cd0 <lightOn+0x90>
	} else if (index < 10) {
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	2b09      	cmp	r3, #9
 8000c8e:	dc0e      	bgt.n	8000cae <lightOn+0x6e>
		setColor(htim, Channel, 100, 255, 0, ledcolors, ledbytes, index);
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	9303      	str	r3, [sp, #12]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	9302      	str	r3, [sp, #8]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	23ff      	movs	r3, #255	@ 0xff
 8000ca2:	2264      	movs	r2, #100	@ 0x64
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	f7ff fe86 	bl	80009b8 <setColor>
}
 8000cac:	e010      	b.n	8000cd0 <lightOn+0x90>
	} else if (index < 14){
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	2b0d      	cmp	r3, #13
 8000cb2:	dc0d      	bgt.n	8000cd0 <lightOn+0x90>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	9303      	str	r3, [sp, #12]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	9302      	str	r3, [sp, #8]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	9301      	str	r3, [sp, #4]
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	23ff      	movs	r3, #255	@ 0xff
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	f7ff fe74 	bl	80009b8 <setColor>
}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000150 	.word	0x20000150

08000cdc <startUp>:

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08c      	sub	sp, #48	@ 0x30
 8000ce0:	af04      	add	r7, sp, #16
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8000cea:	2307      	movs	r3, #7
 8000cec:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 6; i++) {
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
 8000cf2:	e026      	b.n	8000d42 <startUp+0x66>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle - i);
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	9303      	str	r3, [sp, #12]
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2300      	movs	r3, #0
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	23ff      	movs	r3, #255	@ 0xff
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f7ff fe52 	bl	80009b8 <setColor>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle + i + 1);
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	4413      	add	r3, r2
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	9303      	str	r3, [sp, #12]
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	9301      	str	r3, [sp, #4]
 8000d26:	2300      	movs	r3, #0
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	23ff      	movs	r3, #255	@ 0xff
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	68b9      	ldr	r1, [r7, #8]
 8000d30:	68f8      	ldr	r0, [r7, #12]
 8000d32:	f7ff fe41 	bl	80009b8 <setColor>
		HAL_Delay(20);
 8000d36:	2014      	movs	r0, #20
 8000d38:	f001 fc6e 	bl	8002618 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	2b05      	cmp	r3, #5
 8000d46:	ddd5      	ble.n	8000cf4 <startUp+0x18>
	}
	for (int i = 0; i < 6; i++) {
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
 8000d4c:	e026      	b.n	8000d9c <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	9303      	str	r3, [sp, #12]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	9302      	str	r3, [sp, #8]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2300      	movs	r3, #0
 8000d64:	2200      	movs	r2, #0
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f7ff fe25 	bl	80009b8 <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	4413      	add	r3, r2
 8000d74:	3301      	adds	r3, #1
 8000d76:	9303      	str	r3, [sp, #12]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	9302      	str	r3, [sp, #8]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	2300      	movs	r3, #0
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2300      	movs	r3, #0
 8000d86:	2200      	movs	r2, #0
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f7ff fe14 	bl	80009b8 <setColor>
		HAL_Delay(20);
 8000d90:	2014      	movs	r0, #20
 8000d92:	f001 fc41 	bl	8002618 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	2b05      	cmp	r3, #5
 8000da0:	ddd5      	ble.n	8000d4e <startUp+0x72>
	}
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000db0:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <MX_SPI1_Init+0x68>)
 8000db2:	4a19      	ldr	r2, [pc, #100]	@ (8000e18 <MX_SPI1_Init+0x6c>)
 8000db4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_SPI1_Init+0x68>)
 8000db8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <MX_SPI1_Init+0x68>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <MX_SPI1_Init+0x68>)
 8000dc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_SPI1_Init+0x68>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <MX_SPI1_Init+0x68>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <MX_SPI1_Init+0x68>)
 8000dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dde:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <MX_SPI1_Init+0x68>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <MX_SPI1_Init+0x68>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dec:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_SPI1_Init+0x68>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <MX_SPI1_Init+0x68>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_SPI1_Init+0x68>)
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_SPI1_Init+0x68>)
 8000e00:	f002 fe94 	bl	8003b2c <HAL_SPI_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000e0a:	f7ff fd85 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000040 	.word	0x20000040
 8000e18:	40013000 	.word	0x40013000

08000e1c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <MX_SPI2_Init+0x64>)
 8000e22:	4a18      	ldr	r2, [pc, #96]	@ (8000e84 <MX_SPI2_Init+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e26:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <MX_SPI2_Init+0x64>)
 8000e28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <MX_SPI2_Init+0x64>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <MX_SPI2_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <MX_SPI2_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <MX_SPI2_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <MX_SPI2_Init+0x64>)
 8000e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <MX_SPI2_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <MX_SPI2_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <MX_SPI2_Init+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <MX_SPI2_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <MX_SPI2_Init+0x64>)
 8000e68:	220a      	movs	r2, #10
 8000e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	@ (8000e80 <MX_SPI2_Init+0x64>)
 8000e6e:	f002 fe5d 	bl	8003b2c <HAL_SPI_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e78:	f7ff fd4e 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000098 	.word	0x20000098
 8000e84:	40003800 	.word	0x40003800

08000e88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	@ 0x30
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a4f      	ldr	r2, [pc, #316]	@ (8000fe4 <HAL_SPI_MspInit+0x15c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d165      	bne.n	8000f76 <HAL_SPI_MspInit+0xee>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	4b4e      	ldr	r3, [pc, #312]	@ (8000fe8 <HAL_SPI_MspInit+0x160>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	4a4d      	ldr	r2, [pc, #308]	@ (8000fe8 <HAL_SPI_MspInit+0x160>)
 8000eb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eba:	4b4b      	ldr	r3, [pc, #300]	@ (8000fe8 <HAL_SPI_MspInit+0x160>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	4b47      	ldr	r3, [pc, #284]	@ (8000fe8 <HAL_SPI_MspInit+0x160>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a46      	ldr	r2, [pc, #280]	@ (8000fe8 <HAL_SPI_MspInit+0x160>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b44      	ldr	r3, [pc, #272]	@ (8000fe8 <HAL_SPI_MspInit+0x160>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ee2:	23a0      	movs	r3, #160	@ 0xa0
 8000ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	483b      	ldr	r0, [pc, #236]	@ (8000fec <HAL_SPI_MspInit+0x164>)
 8000efe:	f002 f853 	bl	8002fa8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000f02:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f04:	4a3b      	ldr	r2, [pc, #236]	@ (8000ff4 <HAL_SPI_MspInit+0x16c>)
 8000f06:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000f08:	4b39      	ldr	r3, [pc, #228]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f0a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000f0e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f10:	4b37      	ldr	r3, [pc, #220]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f12:	2240      	movs	r2, #64	@ 0x40
 8000f14:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f16:	4b36      	ldr	r3, [pc, #216]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1c:	4b34      	ldr	r3, [pc, #208]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f22:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f24:	4b32      	ldr	r3, [pc, #200]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f2a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f2c:	4b30      	ldr	r3, [pc, #192]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f32:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f40:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f42:	2204      	movs	r2, #4
 8000f44:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f48:	2203      	movs	r2, #3
 8000f4a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f52:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f58:	4825      	ldr	r0, [pc, #148]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f5a:	f001 fc93 	bl	8002884 <HAL_DMA_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_SPI_MspInit+0xe0>
    {
      Error_Handler();
 8000f64:	f7ff fcd8 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a21      	ldr	r2, [pc, #132]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f6c:	649a      	str	r2, [r3, #72]	@ 0x48
 8000f6e:	4a20      	ldr	r2, [pc, #128]	@ (8000ff0 <HAL_SPI_MspInit+0x168>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f74:	e031      	b.n	8000fda <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff8 <HAL_SPI_MspInit+0x170>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d12c      	bne.n	8000fda <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <HAL_SPI_MspInit+0x160>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	4a17      	ldr	r2, [pc, #92]	@ (8000fe8 <HAL_SPI_MspInit+0x160>)
 8000f8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_SPI_MspInit+0x160>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <HAL_SPI_MspInit+0x160>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa4:	4a10      	ldr	r2, [pc, #64]	@ (8000fe8 <HAL_SPI_MspInit+0x160>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fac:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <HAL_SPI_MspInit+0x160>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000fb8:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fca:	2305      	movs	r3, #5
 8000fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <HAL_SPI_MspInit+0x174>)
 8000fd6:	f001 ffe7 	bl	8002fa8 <HAL_GPIO_Init>
}
 8000fda:	bf00      	nop
 8000fdc:	3730      	adds	r7, #48	@ 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40013000 	.word	0x40013000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	200000f0 	.word	0x200000f0
 8000ff4:	40026458 	.word	0x40026458
 8000ff8:	40003800 	.word	0x40003800
 8000ffc:	40020400 	.word	0x40020400

08001000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <HAL_MspInit+0x4c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100e:	4a0f      	ldr	r2, [pc, #60]	@ (800104c <HAL_MspInit+0x4c>)
 8001010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001014:	6453      	str	r3, [r2, #68]	@ 0x44
 8001016:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <HAL_MspInit+0x4c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <HAL_MspInit+0x4c>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	4a08      	ldr	r2, [pc, #32]	@ (800104c <HAL_MspInit+0x4c>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001030:	6413      	str	r3, [r2, #64]	@ 0x40
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_MspInit+0x4c>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <NMI_Handler+0x4>

08001058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <MemManage_Handler+0x4>

08001068 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <UsageFault_Handler+0x4>

08001078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a6:	f001 fa97 	bl	80025d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80010b4:	4802      	ldr	r0, [pc, #8]	@ (80010c0 <DMA1_Stream0_IRQHandler+0x10>)
 80010b6:	f001 fd0d 	bl	8002ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000198 	.word	0x20000198

080010c4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <DMA2_Stream3_IRQHandler+0x10>)
 80010ca:	f001 fd03 	bl	8002ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200000f0 	.word	0x200000f0

080010d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <SystemInit+0x20>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010e2:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <SystemInit+0x20>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	@ 0x38
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	615a      	str	r2, [r3, #20]
 800112a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800112c:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 800112e:	4a2d      	ldr	r2, [pc, #180]	@ (80011e4 <MX_TIM4_Init+0xe8>)
 8001130:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001132:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b29      	ldr	r3, [pc, #164]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 800113e:	4b28      	ldr	r3, [pc, #160]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 8001140:	2269      	movs	r2, #105	@ 0x69
 8001142:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001144:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114a:	4b25      	ldr	r3, [pc, #148]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001150:	4823      	ldr	r0, [pc, #140]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 8001152:	f003 fabd 	bl	80046d0 <HAL_TIM_Base_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800115c:	f7ff fbdc 	bl	8000918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001164:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001166:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800116a:	4619      	mov	r1, r3
 800116c:	481c      	ldr	r0, [pc, #112]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 800116e:	f003 fe8f 	bl	8004e90 <HAL_TIM_ConfigClockSource>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001178:	f7ff fbce 	bl	8000918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800117c:	4818      	ldr	r0, [pc, #96]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 800117e:	f003 faf6 	bl	800476e <HAL_TIM_PWM_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001188:	f7ff fbc6 	bl	8000918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	4619      	mov	r1, r3
 800119a:	4811      	ldr	r0, [pc, #68]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 800119c:	f004 fafc 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80011a6:	f7ff fbb7 	bl	8000918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011aa:	2360      	movs	r3, #96	@ 0x60
 80011ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	4619      	mov	r1, r3
 80011c0:	4807      	ldr	r0, [pc, #28]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 80011c2:	f003 fda3 	bl	8004d0c <HAL_TIM_PWM_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80011cc:	f7ff fba4 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011d0:	4803      	ldr	r0, [pc, #12]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 80011d2:	f000 f85d 	bl	8001290 <HAL_TIM_MspPostInit>

}
 80011d6:	bf00      	nop
 80011d8:	3738      	adds	r7, #56	@ 0x38
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000150 	.word	0x20000150
 80011e4:	40000800 	.word	0x40000800

080011e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a22      	ldr	r2, [pc, #136]	@ (8001280 <HAL_TIM_Base_MspInit+0x98>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d13d      	bne.n	8001276 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b21      	ldr	r3, [pc, #132]	@ (8001284 <HAL_TIM_Base_MspInit+0x9c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	4a20      	ldr	r2, [pc, #128]	@ (8001284 <HAL_TIM_Base_MspInit+0x9c>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	6413      	str	r3, [r2, #64]	@ 0x40
 800120a:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <HAL_TIM_Base_MspInit+0x9c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8001216:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <HAL_TIM_Base_MspInit+0xa0>)
 8001218:	4a1c      	ldr	r2, [pc, #112]	@ (800128c <HAL_TIM_Base_MspInit+0xa4>)
 800121a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 800121c:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <HAL_TIM_Base_MspInit+0xa0>)
 800121e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001222:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001224:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <HAL_TIM_Base_MspInit+0xa0>)
 8001226:	2240      	movs	r2, #64	@ 0x40
 8001228:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800122a:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <HAL_TIM_Base_MspInit+0xa0>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <HAL_TIM_Base_MspInit+0xa0>)
 8001232:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001236:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <HAL_TIM_Base_MspInit+0xa0>)
 800123a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800123e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <HAL_TIM_Base_MspInit+0xa0>)
 8001242:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001246:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <HAL_TIM_Base_MspInit+0xa0>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <HAL_TIM_Base_MspInit+0xa0>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <HAL_TIM_Base_MspInit+0xa0>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800125a:	480b      	ldr	r0, [pc, #44]	@ (8001288 <HAL_TIM_Base_MspInit+0xa0>)
 800125c:	f001 fb12 	bl	8002884 <HAL_DMA_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001266:	f7ff fb57 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a06      	ldr	r2, [pc, #24]	@ (8001288 <HAL_TIM_Base_MspInit+0xa0>)
 800126e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001270:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <HAL_TIM_Base_MspInit+0xa0>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40000800 	.word	0x40000800
 8001284:	40023800 	.word	0x40023800
 8001288:	20000198 	.word	0x20000198
 800128c:	40026010 	.word	0x40026010

08001290 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <HAL_TIM_MspPostInit+0x68>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d11d      	bne.n	80012ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_TIM_MspPostInit+0x6c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a10      	ldr	r2, [pc, #64]	@ (80012fc <HAL_TIM_MspPostInit+0x6c>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <HAL_TIM_MspPostInit+0x6c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ce:	2340      	movs	r3, #64	@ 0x40
 80012d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012de:	2302      	movs	r3, #2
 80012e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	@ (8001300 <HAL_TIM_MspPostInit+0x70>)
 80012ea:	f001 fe5d 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40000800 	.word	0x40000800
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020400 	.word	0x40020400

08001304 <startTransaction>:

#define SCREEN_WIDTH 320
#define SCREEN_HEIGHT 480


void startTransaction() {
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2108      	movs	r1, #8
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <startTransaction+0x14>)
 800130e:	f001 ffcf 	bl	80032b0 <HAL_GPIO_WritePin>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40020400 	.word	0x40020400

0800131c <endTransaction>:

void endTransaction() {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001320:	2201      	movs	r2, #1
 8001322:	2108      	movs	r1, #8
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <endTransaction+0x14>)
 8001326:	f001 ffc3 	bl	80032b0 <HAL_GPIO_WritePin>
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40020400 	.word	0x40020400

08001334 <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
	if (data) {
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001344:	2201      	movs	r2, #1
 8001346:	2110      	movs	r1, #16
 8001348:	4806      	ldr	r0, [pc, #24]	@ (8001364 <dataOrRegister+0x30>)
 800134a:	f001 ffb1 	bl	80032b0 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
	}
}
 800134e:	e004      	b.n	800135a <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	2110      	movs	r1, #16
 8001354:	4803      	ldr	r0, [pc, #12]	@ (8001364 <dataOrRegister+0x30>)
 8001356:	f001 ffab 	bl	80032b0 <HAL_GPIO_WritePin>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40020400 	.word	0x40020400

08001368 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8001376:	f7ff ffc5 	bl	8001304 <startTransaction>

	dataOrRegister(0);
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff ffda 	bl	8001334 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8001380:	f107 010e 	add.w	r1, r7, #14
 8001384:	230a      	movs	r3, #10
 8001386:	2201      	movs	r2, #1
 8001388:	480a      	ldr	r0, [pc, #40]	@ (80013b4 <commandAndData+0x4c>)
 800138a:	f002 fc58 	bl	8003c3e <HAL_SPI_Transmit>

	if (size) {
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <commandAndData+0x40>
		dataOrRegister(1);
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff ffcd 	bl	8001334 <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	b29a      	uxth	r2, r3
 800139e:	230a      	movs	r3, #10
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <commandAndData+0x4c>)
 80013a4:	f002 fc4b 	bl	8003c3e <HAL_SPI_Transmit>
	}

	endTransaction();
 80013a8:	f7ff ffb8 	bl	800131c <endTransaction>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000040 	.word	0x20000040

080013b8 <startCommand>:

void startCommand(uint16_t command) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 80013c2:	f7ff ff9f 	bl	8001304 <startTransaction>
	dataOrRegister(0);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff ffb4 	bl	8001334 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 80013cc:	1db9      	adds	r1, r7, #6
 80013ce:	230a      	movs	r3, #10
 80013d0:	2201      	movs	r2, #1
 80013d2:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <startCommand+0x28>)
 80013d4:	f002 fc33 	bl	8003c3e <HAL_SPI_Transmit>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000040 	.word	0x20000040

080013e4 <transmitRepeatedData>:

void transmitRepeatedData(uint16_t data16, unsigned int count) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	80fb      	strh	r3, [r7, #6]
	dataOrRegister(1);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff ff9f 	bl	8001334 <dataOrRegister>
	for (int i = 0; i < count; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e008      	b.n	800140e <transmitRepeatedData+0x2a>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
 80013fc:	1db9      	adds	r1, r7, #6
 80013fe:	230a      	movs	r3, #10
 8001400:	2201      	movs	r2, #1
 8001402:	4807      	ldr	r0, [pc, #28]	@ (8001420 <transmitRepeatedData+0x3c>)
 8001404:	f002 fc1b 	bl	8003c3e <HAL_SPI_Transmit>
	for (int i = 0; i < count; i++) {
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3301      	adds	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d8f2      	bhi.n	80013fc <transmitRepeatedData+0x18>
	}
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000040 	.word	0x20000040

08001424 <transmitSingleData>:

void transmitSingleData(uint16_t data16) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	80fb      	strh	r3, [r7, #6]
	dataOrRegister(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff ff80 	bl	8001334 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
 8001434:	1db9      	adds	r1, r7, #6
 8001436:	230a      	movs	r3, #10
 8001438:	2201      	movs	r2, #1
 800143a:	4803      	ldr	r0, [pc, #12]	@ (8001448 <transmitSingleData+0x24>)
 800143c:	f002 fbff 	bl	8003c3e <HAL_SPI_Transmit>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000040 	.word	0x20000040

0800144c <endCommand>:

void endCommand() {
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	endTransaction();
 8001450:	f7ff ff64 	bl	800131c <endTransaction>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <resetScreen>:

void resetScreen() {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800145c:	2201      	movs	r2, #1
 800145e:	2120      	movs	r1, #32
 8001460:	480b      	ldr	r0, [pc, #44]	@ (8001490 <resetScreen+0x38>)
 8001462:	f001 ff25 	bl	80032b0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001466:	2014      	movs	r0, #20
 8001468:	f001 f8d6 	bl	8002618 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	2120      	movs	r1, #32
 8001470:	4807      	ldr	r0, [pc, #28]	@ (8001490 <resetScreen+0x38>)
 8001472:	f001 ff1d 	bl	80032b0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001476:	2014      	movs	r0, #20
 8001478:	f001 f8ce 	bl	8002618 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800147c:	2201      	movs	r2, #1
 800147e:	2120      	movs	r1, #32
 8001480:	4803      	ldr	r0, [pc, #12]	@ (8001490 <resetScreen+0x38>)
 8001482:	f001 ff15 	bl	80032b0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001486:	2064      	movs	r0, #100	@ 0x64
 8001488:	f001 f8c6 	bl	8002618 <HAL_Delay>
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40020400 	.word	0x40020400

08001494 <initializeScreen>:

void initializeScreen() {
 8001494:	b5b0      	push	{r4, r5, r7, lr}
 8001496:	b0a0      	sub	sp, #128	@ 0x80
 8001498:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff ff62 	bl	8001368 <commandAndData>
	commandAndData(0x11, NULL, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	2011      	movs	r0, #17
 80014aa:	f7ff ff5d 	bl	8001368 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 80014ae:	2355      	movs	r3, #85	@ 0x55
 80014b0:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
		commandAndData(0x3A, data, sizeof(data));
 80014b4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80014b8:	2202      	movs	r2, #2
 80014ba:	4619      	mov	r1, r3
 80014bc:	203a      	movs	r0, #58	@ 0x3a
 80014be:	f7ff ff53 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 80014c2:	4b5a      	ldr	r3, [pc, #360]	@ (800162c <initializeScreen+0x198>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	67bb      	str	r3, [r7, #120]	@ 0x78
		commandAndData(0xC0, data, sizeof(data));
 80014c8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80014cc:	2204      	movs	r2, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	20c0      	movs	r0, #192	@ 0xc0
 80014d2:	f7ff ff49 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 80014d6:	2345      	movs	r3, #69	@ 0x45
 80014d8:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 80014dc:	2300      	movs	r3, #0
 80014de:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		commandAndData(0xC1, data, sizeof(data));
 80014e2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014e6:	2204      	movs	r2, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	20c1      	movs	r0, #193	@ 0xc1
 80014ec:	f7ff ff3c 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 80014f0:	2333      	movs	r3, #51	@ 0x33
 80014f2:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
		commandAndData(0xC2, data, sizeof(data));
 80014f6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80014fa:	2202      	movs	r2, #2
 80014fc:	4619      	mov	r1, r3
 80014fe:	20c2      	movs	r0, #194	@ 0xc2
 8001500:	f7ff ff32 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8001504:	2300      	movs	r3, #0
 8001506:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800150a:	2328      	movs	r3, #40	@ 0x28
 800150c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		commandAndData(0xC5, data, sizeof(data));
 8001510:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001514:	2204      	movs	r2, #4
 8001516:	4619      	mov	r1, r3
 8001518:	20c5      	movs	r0, #197	@ 0xc5
 800151a:	f7ff ff25 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 800151e:	4b44      	ldr	r3, [pc, #272]	@ (8001630 <initializeScreen+0x19c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xB1, data, sizeof(data));
 8001524:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001528:	2204      	movs	r2, #4
 800152a:	4619      	mov	r1, r3
 800152c:	20b1      	movs	r0, #177	@ 0xb1
 800152e:	f7ff ff1b 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 8001532:	2302      	movs	r3, #2
 8001534:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		commandAndData(0xB4, data, sizeof(data));
 8001538:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800153c:	2202      	movs	r2, #2
 800153e:	4619      	mov	r1, r3
 8001540:	20b4      	movs	r0, #180	@ 0xb4
 8001542:	f7ff ff11 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 8001546:	4a3b      	ldr	r2, [pc, #236]	@ (8001634 <initializeScreen+0x1a0>)
 8001548:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800154c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001550:	6018      	str	r0, [r3, #0]
 8001552:	3304      	adds	r3, #4
 8001554:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 8001556:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800155a:	2206      	movs	r2, #6
 800155c:	4619      	mov	r1, r3
 800155e:	20b6      	movs	r0, #182	@ 0xb6
 8001560:	f7ff ff02 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 8001564:	4b34      	ldr	r3, [pc, #208]	@ (8001638 <initializeScreen+0x1a4>)
 8001566:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800156a:	461d      	mov	r5, r3
 800156c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800156e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001570:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001574:	c407      	stmia	r4!, {r0, r1, r2}
 8001576:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8001578:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800157c:	221e      	movs	r2, #30
 800157e:	4619      	mov	r1, r3
 8001580:	20e0      	movs	r0, #224	@ 0xe0
 8001582:	f7ff fef1 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 8001586:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <initializeScreen+0x1a8>)
 8001588:	f107 041c 	add.w	r4, r7, #28
 800158c:	461d      	mov	r5, r3
 800158e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001592:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001596:	c407      	stmia	r4!, {r0, r1, r2}
 8001598:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	221e      	movs	r2, #30
 80015a0:	4619      	mov	r1, r3
 80015a2:	20e1      	movs	r0, #225	@ 0xe1
 80015a4:	f7ff fee0 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 80015a8:	2300      	movs	r3, #0
 80015aa:	833b      	strh	r3, [r7, #24]
 80015ac:	2322      	movs	r3, #34	@ 0x22
 80015ae:	837b      	strh	r3, [r7, #26]
		commandAndData(0xB6, data, sizeof(data));
 80015b0:	f107 0318 	add.w	r3, r7, #24
 80015b4:	2204      	movs	r2, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	20b6      	movs	r0, #182	@ 0xb6
 80015ba:	f7ff fed5 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {0x0008};
 80015be:	2308      	movs	r3, #8
 80015c0:	82bb      	strh	r3, [r7, #20]
		commandAndData(0x36, data, sizeof(data));
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	2202      	movs	r2, #2
 80015c8:	4619      	mov	r1, r3
 80015ca:	2036      	movs	r0, #54	@ 0x36
 80015cc:	f7ff fecc 	bl	8001368 <commandAndData>
	}
	{
		commandAndData(0x29, NULL, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2029      	movs	r0, #41	@ 0x29
 80015d6:	f7ff fec7 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_WIDTH - 1) >> 8), (uint16_t)((SCREEN_WIDTH - 1) & 0xFF)};
 80015da:	4a19      	ldr	r2, [pc, #100]	@ (8001640 <initializeScreen+0x1ac>)
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015e4:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2A, data, sizeof(data));
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2208      	movs	r2, #8
 80015ee:	4619      	mov	r1, r3
 80015f0:	202a      	movs	r0, #42	@ 0x2a
 80015f2:	f7ff feb9 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_HEIGHT - 1) >> 8), (uint16_t)((SCREEN_HEIGHT - 1) & 0xFF)};
 80015f6:	4a13      	ldr	r2, [pc, #76]	@ (8001644 <initializeScreen+0x1b0>)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015fe:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2B, data, sizeof(data));
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2208      	movs	r2, #8
 8001606:	4619      	mov	r1, r3
 8001608:	202b      	movs	r0, #43	@ 0x2b
 800160a:	f7ff fead 	bl	8001368 <commandAndData>
	}
	{
		startCommand(0x2C);
 800160e:	202c      	movs	r0, #44	@ 0x2c
 8001610:	f7ff fed2 	bl	80013b8 <startCommand>
		transmitRepeatedData(0x0000, 320 * 480);
 8001614:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fee3 	bl	80013e4 <transmitRepeatedData>
		endCommand();
 800161e:	f7ff ff15 	bl	800144c <endCommand>
	}
}
 8001622:	bf00      	nop
 8001624:	3780      	adds	r7, #128	@ 0x80
 8001626:	46bd      	mov	sp, r7
 8001628:	bdb0      	pop	{r4, r5, r7, pc}
 800162a:	bf00      	nop
 800162c:	080059e0 	.word	0x080059e0
 8001630:	080059e4 	.word	0x080059e4
 8001634:	080059e8 	.word	0x080059e8
 8001638:	080059f0 	.word	0x080059f0
 800163c:	08005a10 	.word	0x08005a10
 8001640:	08005a30 	.word	0x08005a30
 8001644:	08005a38 	.word	0x08005a38

08001648 <clearScreen>:

void clearScreen(uint16_t color) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_WIDTH - 1) >> 8), (uint16_t)((SCREEN_WIDTH - 1) & 0xFF)};
 8001652:	4a15      	ldr	r2, [pc, #84]	@ (80016a8 <clearScreen+0x60>)
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800165c:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2A, data, sizeof(data));
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	2208      	movs	r2, #8
 8001666:	4619      	mov	r1, r3
 8001668:	202a      	movs	r0, #42	@ 0x2a
 800166a:	f7ff fe7d 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_HEIGHT - 1) >> 8), (uint16_t)((SCREEN_HEIGHT - 1) & 0xFF)};
 800166e:	4a0f      	ldr	r2, [pc, #60]	@ (80016ac <clearScreen+0x64>)
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001678:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2B, data, sizeof(data));
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	2208      	movs	r2, #8
 8001682:	4619      	mov	r1, r3
 8001684:	202b      	movs	r0, #43	@ 0x2b
 8001686:	f7ff fe6f 	bl	8001368 <commandAndData>
	}
	{
		startCommand(0x2C);
 800168a:	202c      	movs	r0, #44	@ 0x2c
 800168c:	f7ff fe94 	bl	80013b8 <startCommand>
		transmitRepeatedData(color, 320 * 480);
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fea4 	bl	80013e4 <transmitRepeatedData>
		endCommand();
 800169c:	f7ff fed6 	bl	800144c <endCommand>
	}
}
 80016a0:	bf00      	nop
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	08005a30 	.word	0x08005a30
 80016ac:	08005a38 	.word	0x08005a38

080016b0 <modifySpace>:
}

/**
 * Final pixel in row/column is one less than x2/y2
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4604      	mov	r4, r0
 80016b8:	4608      	mov	r0, r1
 80016ba:	4611      	mov	r1, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	4623      	mov	r3, r4
 80016c0:	80fb      	strh	r3, [r7, #6]
 80016c2:	4603      	mov	r3, r0
 80016c4:	80bb      	strh	r3, [r7, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	807b      	strh	r3, [r7, #2]
 80016ca:	4613      	mov	r3, r2
 80016cc:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0xFF, y1 & 0xFF, (y2 >> 8) & 0xFF, y2 & 0xFF};
 80016ce:	88bb      	ldrh	r3, [r7, #4]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	823b      	strh	r3, [r7, #16]
 80016d6:	88bb      	ldrh	r3, [r7, #4]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	827b      	strh	r3, [r7, #18]
 80016de:	883b      	ldrh	r3, [r7, #0]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	82bb      	strh	r3, [r7, #20]
 80016e6:	883b      	ldrh	r3, [r7, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	2208      	movs	r2, #8
 80016f4:	4619      	mov	r1, r3
 80016f6:	202a      	movs	r0, #42	@ 0x2a
 80016f8:	f7ff fe36 	bl	8001368 <commandAndData>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0xFF, x1 & 0xFF, (x2 >> 8) & 0xFF, x2 & 0xFF};
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	b29b      	uxth	r3, r3
 8001702:	813b      	strh	r3, [r7, #8]
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	b29b      	uxth	r3, r3
 800170a:	817b      	strh	r3, [r7, #10]
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	b29b      	uxth	r3, r3
 8001712:	81bb      	strh	r3, [r7, #12]
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	b29b      	uxth	r3, r3
 800171a:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	2208      	movs	r2, #8
 8001722:	4619      	mov	r1, r3
 8001724:	202b      	movs	r0, #43	@ 0x2b
 8001726:	f7ff fe1f 	bl	8001368 <commandAndData>
	}
}
 800172a:	bf00      	nop
 800172c:	371c      	adds	r7, #28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}

08001732 <fillArea>:

/**
 * must be used in ocnjunction with modifySpace()
 */

void fillArea(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color) {
 8001732:	b590      	push	{r4, r7, lr}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	4604      	mov	r4, r0
 800173a:	4608      	mov	r0, r1
 800173c:	4611      	mov	r1, r2
 800173e:	461a      	mov	r2, r3
 8001740:	4623      	mov	r3, r4
 8001742:	80fb      	strh	r3, [r7, #6]
 8001744:	4603      	mov	r3, r0
 8001746:	80bb      	strh	r3, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	803b      	strh	r3, [r7, #0]
	modifySpace(x1, y1, x1 + length, y1 + height);
 8001750:	88fa      	ldrh	r2, [r7, #6]
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	4413      	add	r3, r2
 8001756:	b29c      	uxth	r4, r3
 8001758:	88ba      	ldrh	r2, [r7, #4]
 800175a:	883b      	ldrh	r3, [r7, #0]
 800175c:	4413      	add	r3, r2
 800175e:	b29b      	uxth	r3, r3
 8001760:	88b9      	ldrh	r1, [r7, #4]
 8001762:	88f8      	ldrh	r0, [r7, #6]
 8001764:	4622      	mov	r2, r4
 8001766:	f7ff ffa3 	bl	80016b0 <modifySpace>
	startCommand(0x2C);
 800176a:	202c      	movs	r0, #44	@ 0x2c
 800176c:	f7ff fe24 	bl	80013b8 <startCommand>
	transmitRepeatedData(color, length * height);
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	883a      	ldrh	r2, [r7, #0]
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	461a      	mov	r2, r3
 800177a:	8b3b      	ldrh	r3, [r7, #24]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fe30 	bl	80013e4 <transmitRepeatedData>
	endCommand();
 8001784:	f7ff fe62 	bl	800144c <endCommand>
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bd90      	pop	{r4, r7, pc}

08001790 <drawPoint>:

void drawVLine(uint16_t x1, uint16_t y1, uint16_t height, uint16_t color) {
	fillArea(x1, y1, 1, height, color);
}

void drawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
 800179a:	460b      	mov	r3, r1
 800179c:	80bb      	strh	r3, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	807b      	strh	r3, [r7, #2]
	modifySpace(x, y, x, y);
 80017a2:	88bb      	ldrh	r3, [r7, #4]
 80017a4:	88fa      	ldrh	r2, [r7, #6]
 80017a6:	88b9      	ldrh	r1, [r7, #4]
 80017a8:	88f8      	ldrh	r0, [r7, #6]
 80017aa:	f7ff ff81 	bl	80016b0 <modifySpace>
	startCommand(0x2C);
 80017ae:	202c      	movs	r0, #44	@ 0x2c
 80017b0:	f7ff fe02 	bl	80013b8 <startCommand>
	transmitSingleData(color);
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fe34 	bl	8001424 <transmitSingleData>
	endCommand();
 80017bc:	f7ff fe46 	bl	800144c <endCommand>

}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <drawRectangleFilled>:


void drawRectangleFilled(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color) {
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	4604      	mov	r4, r0
 80017d0:	4608      	mov	r0, r1
 80017d2:	4611      	mov	r1, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	4623      	mov	r3, r4
 80017d8:	80fb      	strh	r3, [r7, #6]
 80017da:	4603      	mov	r3, r0
 80017dc:	80bb      	strh	r3, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	807b      	strh	r3, [r7, #2]
 80017e2:	4613      	mov	r3, r2
 80017e4:	803b      	strh	r3, [r7, #0]
	fillArea(x1, y1, length, height, color);
 80017e6:	883c      	ldrh	r4, [r7, #0]
 80017e8:	887a      	ldrh	r2, [r7, #2]
 80017ea:	88b9      	ldrh	r1, [r7, #4]
 80017ec:	88f8      	ldrh	r0, [r7, #6]
 80017ee:	8b3b      	ldrh	r3, [r7, #24]
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	4623      	mov	r3, r4
 80017f4:	f7ff ff9d 	bl	8001732 <fillArea>
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}

08001800 <drawChar>:
			}
		}
	}
}

uint16_t drawChar(char letter, const GFXfont* font, int16_t xpos, int16_t ypos, uint8_t flip) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	@ 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	4611      	mov	r1, r2
 800180a:	461a      	mov	r2, r3
 800180c:	4603      	mov	r3, r0
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	460b      	mov	r3, r1
 8001812:	81bb      	strh	r3, [r7, #12]
 8001814:	4613      	mov	r3, r2
 8001816:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001822:	3b20      	subs	r3, #32
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4413      	add	r3, r2
 8001828:	61fb      	str	r3, [r7, #28]
	int16_t width = toDraw->width, height = toDraw->height;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	789b      	ldrb	r3, [r3, #2]
 800182e:	837b      	strh	r3, [r7, #26]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	78db      	ldrb	r3, [r3, #3]
 8001834:	833b      	strh	r3, [r7, #24]
	int16_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800183c:	82fb      	strh	r3, [r7, #22]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001844:	82bb      	strh	r3, [r7, #20]
	uint8_t *bitlist = font->bitmap;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	613b      	str	r3, [r7, #16]
	uint16_t bo = toDraw->bitmapOffset;
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t bits = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t bit = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	for (int16_t yy = 0; yy < height; yy++) {
 800185e:	2300      	movs	r3, #0
 8001860:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001862:	e05a      	b.n	800191a <drawChar+0x11a>
	  for (int16_t xx = 0; xx < width; xx++) {
 8001864:	2300      	movs	r3, #0
 8001866:	843b      	strh	r3, [r7, #32]
 8001868:	e04b      	b.n	8001902 <drawChar+0x102>
		if (!(bit++ & 7)) {
 800186a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	2b00      	cmp	r3, #0
 800187a:	d108      	bne.n	800188e <drawChar+0x8e>
		  bits = bitlist[bo++];
 800187c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8001882:	461a      	mov	r2, r3
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4413      	add	r3, r2
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		}
		if (bits & 0b10000000) {
 800188e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8001892:	2b00      	cmp	r3, #0
 8001894:	da2a      	bge.n	80018ec <drawChar+0xec>
			if (flip) {
 8001896:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800189a:	2b00      	cmp	r3, #0
 800189c:	d016      	beq.n	80018cc <drawChar+0xcc>
				drawPoint((uint16_t)(xpos + xo + xx), (uint16_t)(ypos + yo + yy + height), 0xFFFF);
 800189e:	89ba      	ldrh	r2, [r7, #12]
 80018a0:	8afb      	ldrh	r3, [r7, #22]
 80018a2:	4413      	add	r3, r2
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	8c3b      	ldrh	r3, [r7, #32]
 80018a8:	4413      	add	r3, r2
 80018aa:	b298      	uxth	r0, r3
 80018ac:	88fa      	ldrh	r2, [r7, #6]
 80018ae:	8abb      	ldrh	r3, [r7, #20]
 80018b0:	4413      	add	r3, r2
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80018b6:	4413      	add	r3, r2
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	8b3b      	ldrh	r3, [r7, #24]
 80018bc:	4413      	add	r3, r2
 80018be:	b29b      	uxth	r3, r3
 80018c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff ff63 	bl	8001790 <drawPoint>
 80018ca:	e00f      	b.n	80018ec <drawChar+0xec>
			} else {
				drawPoint((uint16_t)(xpos - xx + width), (uint16_t)(ypos - yy), 0xFFFF);
 80018cc:	89ba      	ldrh	r2, [r7, #12]
 80018ce:	8c3b      	ldrh	r3, [r7, #32]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	8b7b      	ldrh	r3, [r7, #26]
 80018d6:	4413      	add	r3, r2
 80018d8:	b298      	uxth	r0, r3
 80018da:	88fa      	ldrh	r2, [r7, #6]
 80018dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff ff52 	bl	8001790 <drawPoint>
			}
		}
		bits <<= 1;
 80018ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	  for (int16_t xx = 0; xx < width; xx++) {
 80018f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	b29b      	uxth	r3, r3
 8001900:	843b      	strh	r3, [r7, #32]
 8001902:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001906:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800190a:	429a      	cmp	r2, r3
 800190c:	dbad      	blt.n	800186a <drawChar+0x6a>
	for (int16_t yy = 0; yy < height; yy++) {
 800190e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001912:	b29b      	uxth	r3, r3
 8001914:	3301      	adds	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	847b      	strh	r3, [r7, #34]	@ 0x22
 800191a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800191e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001922:	429a      	cmp	r2, r3
 8001924:	db9e      	blt.n	8001864 <drawChar+0x64>
	  }
	}

	return (uint16_t)((toDraw->xAdvance));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	791b      	ldrb	r3, [r3, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3728      	adds	r7, #40	@ 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <drawString>:

uint8_t drawString(char *buffer, const GFXfont *font, int16_t xpos, int16_t ypos, uint8_t flip) {
 8001932:	b580      	push	{r7, lr}
 8001934:	b08a      	sub	sp, #40	@ 0x28
 8001936:	af02      	add	r7, sp, #8
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	4611      	mov	r1, r2
 800193e:	461a      	mov	r2, r3
 8001940:	460b      	mov	r3, r1
 8001942:	80fb      	strh	r3, [r7, #6]
 8001944:	4613      	mov	r3, r2
 8001946:	80bb      	strh	r3, [r7, #4]
	uint16_t xAdvance = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	83fb      	strh	r3, [r7, #30]
	if (flip) {
 800194c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01f      	beq.n	8001994 <drawString+0x62>
		char *currentChar = buffer;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	61bb      	str	r3, [r7, #24]
		while (*currentChar) {
 8001958:	e017      	b.n	800198a <drawString+0x58>
			xAdvance += drawChar(*currentChar, font, xpos + xAdvance, ypos, flip);
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	7818      	ldrb	r0, [r3, #0]
 800195e:	88fa      	ldrh	r2, [r7, #6]
 8001960:	8bfb      	ldrh	r3, [r7, #30]
 8001962:	4413      	add	r3, r2
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21a      	sxth	r2, r3
 8001968:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800196c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	460b      	mov	r3, r1
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	f7ff ff43 	bl	8001800 <drawChar>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	8bfb      	ldrh	r3, [r7, #30]
 8001980:	4413      	add	r3, r2
 8001982:	83fb      	strh	r3, [r7, #30]
			currentChar++;
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	3301      	adds	r3, #1
 8001988:	61bb      	str	r3, [r7, #24]
		while (*currentChar) {
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1e3      	bne.n	800195a <drawString+0x28>
 8001992:	e02c      	b.n	80019ee <drawString+0xbc>
		}
	} else {
		uint16_t buffersize = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	82fb      	strh	r3, [r7, #22]
		while (buffer[buffersize++]) {};
 8001998:	bf00      	nop
 800199a:	8afb      	ldrh	r3, [r7, #22]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	82fa      	strh	r2, [r7, #22]
 80019a0:	461a      	mov	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f6      	bne.n	800199a <drawString+0x68>
		for (int i = buffersize - 1; i >= 0; i--) {
 80019ac:	8afb      	ldrh	r3, [r7, #22]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	e019      	b.n	80019e8 <drawString+0xb6>
			xAdvance += drawChar(buffer[i], font, xpos + xAdvance, ypos, flip);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4413      	add	r3, r2
 80019ba:	7818      	ldrb	r0, [r3, #0]
 80019bc:	88fa      	ldrh	r2, [r7, #6]
 80019be:	8bfb      	ldrh	r3, [r7, #30]
 80019c0:	4413      	add	r3, r2
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80019ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	460b      	mov	r3, r1
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	f7ff ff14 	bl	8001800 <drawChar>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	8bfb      	ldrh	r3, [r7, #30]
 80019de:	4413      	add	r3, r2
 80019e0:	83fb      	strh	r3, [r7, #30]
		for (int i = buffersize - 1; i >= 0; i--) {
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	dae2      	bge.n	80019b4 <drawString+0x82>
		}
	}
	return font->yAdvance;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	7b1b      	ldrb	r3, [r3, #12]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	7e3a      	ldrb	r2, [r7, #24]
 8001a12:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	605a      	str	r2, [r3, #4]
    endSPI();
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 f839 	bl	8001a98 <_ZN7MCP25156endSPIEv>
}
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	1cf9      	adds	r1, r7, #3
 8001a46:	2201      	movs	r2, #1
 8001a48:	f002 f8f9 	bl	8003c3e <HAL_SPI_Transmit>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f107 010f 	add.w	r1, r7, #15
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f002 fa2c 	bl	8003ec6 <HAL_SPI_Receive>
	return retVal;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6898      	ldr	r0, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7b1b      	ldrb	r3, [r3, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f001 fc10 	bl	80032b0 <HAL_GPIO_WritePin>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6898      	ldr	r0, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7b1b      	ldrb	r3, [r3, #12]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f001 fc00 	bl	80032b0 <HAL_GPIO_WritePin>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08c      	sub	sp, #48	@ 0x30
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	startSPI();
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ffd9 	bl	8001a78 <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 8001ac6:	21c0      	movs	r1, #192	@ 0xc0
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ffb1 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
	endSPI();
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffe2 	bl	8001a98 <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	220e      	movs	r2, #14
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 ff25 	bl	800592c <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8001ae2:	f107 0214 	add.w	r2, r7, #20
 8001ae6:	230e      	movs	r3, #14
 8001ae8:	2130      	movs	r1, #48	@ 0x30
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f8ec 	bl	8001cc8 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8001af0:	f107 0214 	add.w	r2, r7, #20
 8001af4:	230e      	movs	r3, #14
 8001af6:	2140      	movs	r1, #64	@ 0x40
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f8e5 	bl	8001cc8 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8001afe:	f107 0214 	add.w	r2, r7, #20
 8001b02:	230e      	movs	r3, #14
 8001b04:	2150      	movs	r1, #80	@ 0x50
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f8de 	bl	8001cc8 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2160      	movs	r1, #96	@ 0x60
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f8b9 	bl	8001c88 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2170      	movs	r1, #112	@ 0x70
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f8b4 	bl	8001c88 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 8001b20:	22a3      	movs	r2, #163	@ 0xa3
 8001b22:	212b      	movs	r1, #43	@ 0x2b
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f8af 	bl	8001c88 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	2267      	movs	r2, #103	@ 0x67
 8001b2e:	2160      	movs	r1, #96	@ 0x60
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f8f8 	bl	8001d26 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 8001b36:	2301      	movs	r3, #1
 8001b38:	2267      	movs	r2, #103	@ 0x67
 8001b3a:	2170      	movs	r1, #112	@ 0x70
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f8f2 	bl	8001d26 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8001b42:	4a29      	ldr	r2, [pc, #164]	@ (8001be8 <_ZN7MCP25155resetEv+0x130>)
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b4c:	6018      	str	r0, [r3, #0]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8001b52:	2300      	movs	r3, #0
 8001b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b56:	e01e      	b.n	8001b96 <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 8001b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	bf0c      	ite	eq
 8001b5e:	2301      	moveq	r3, #1
 8001b60:	2300      	movne	r3, #0
 8001b62:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 8001b66:	f107 020c 	add.w	r2, r7, #12
 8001b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b6c:	4413      	add	r3, r2
 8001b6e:	7819      	ldrb	r1, [r3, #0]
 8001b70:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001b74:	2300      	movs	r3, #0
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 fbcc 	bl	8002314 <_ZN7MCP25159setFilterENS_3RXFEbm>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 8001b82:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <_ZN7MCP25155resetEv+0xd8>
            return result;
 8001b8a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001b8e:	e027      	b.n	8001be0 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 8001b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b92:	3301      	adds	r3, #1
 8001b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	dddd      	ble.n	8001b58 <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	723b      	strb	r3, [r7, #8]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ba8:	e016      	b.n	8001bd8 <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 8001baa:	f107 0208 	add.w	r2, r7, #8
 8001bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb0:	4413      	add	r3, r2
 8001bb2:	7819      	ldrb	r1, [r3, #0]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 fb77 	bl	80022ac <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 8001bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <_ZN7MCP25155resetEv+0x11a>
            return result;
 8001bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001bd0:	e006      	b.n	8001be0 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 8001bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	dde5      	ble.n	8001baa <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3730      	adds	r7, #48	@ 0x30
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	08005a40 	.word	0x08005a40

08001bec <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	70fb      	strb	r3, [r7, #3]
    startSPI();
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff3d 	bl	8001a78 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8001bfe:	2103      	movs	r1, #3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff15 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ff10 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff1f 	bl	8001a54 <_ZN7MCP25156SPI_RxEv>
 8001c16:	4603      	mov	r3, r0
 8001c18:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ff3c 	bl	8001a98 <_ZN7MCP25156endSPIEv>

    return ret;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 8001c2a:	b590      	push	{r4, r7, lr}
 8001c2c:	b087      	sub	sp, #28
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	461a      	mov	r2, r3
 8001c36:	460b      	mov	r3, r1
 8001c38:	72fb      	strb	r3, [r7, #11]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f7ff ff1a 	bl	8001a78 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8001c44:	2103      	movs	r1, #3
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f7ff fef2 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f7ff feed 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8001c56:	2300      	movs	r3, #0
 8001c58:	75fb      	strb	r3, [r7, #23]
 8001c5a:	e00a      	b.n	8001c72 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	18d4      	adds	r4, r2, r3
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f7ff fef6 	bl	8001a54 <_ZN7MCP25156SPI_RxEv>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
 8001c72:	7dfa      	ldrb	r2, [r7, #23]
 8001c74:	7abb      	ldrb	r3, [r7, #10]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d3f0      	bcc.n	8001c5c <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f7ff ff0c 	bl	8001a98 <_ZN7MCP25156endSPIEv>
}
 8001c80:	bf00      	nop
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd90      	pop	{r4, r7, pc}

08001c88 <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
 8001c94:	4613      	mov	r3, r2
 8001c96:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff feed 	bl	8001a78 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fec5 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001ca6:	78fb      	ldrb	r3, [r7, #3]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fec0 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 8001cb0:	78bb      	ldrb	r3, [r7, #2]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff febb 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff feec 	bl	8001a98 <_ZN7MCP25156endSPIEv>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	72fb      	strb	r3, [r7, #11]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f7ff fecb 	bl	8001a78 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f7ff fea3 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	4619      	mov	r1, r3
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7ff fe9e 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	75fb      	strb	r3, [r7, #23]
 8001cf8:	e00a      	b.n	8001d10 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7ff fe93 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	75fb      	strb	r3, [r7, #23]
 8001d10:	7dfa      	ldrb	r2, [r7, #23]
 8001d12:	7abb      	ldrb	r3, [r7, #10]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d3f0      	bcc.n	8001cfa <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f7ff febd 	bl	8001a98 <_ZN7MCP25156endSPIEv>
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	4608      	mov	r0, r1
 8001d30:	4611      	mov	r1, r2
 8001d32:	461a      	mov	r2, r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	70fb      	strb	r3, [r7, #3]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70bb      	strb	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
    startSPI();
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fe99 	bl	8001a78 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 8001d46:	2105      	movs	r1, #5
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff fe71 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fe6c 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 8001d58:	78bb      	ldrb	r3, [r7, #2]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fe67 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 8001d62:	787b      	ldrb	r3, [r7, #1]
 8001d64:	4619      	mov	r1, r3
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff fe62 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff fe93 	bl	8001a98 <_ZN7MCP25156endSPIEv>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
    startSPI();
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fe78 	bl	8001a78 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 8001d88:	21a0      	movs	r1, #160	@ 0xa0
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fe50 	bl	8001a30 <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff fe5f 	bl	8001a54 <_ZN7MCP25156SPI_RxEv>
 8001d96:	4603      	mov	r3, r0
 8001d98:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff fe7c 	bl	8001a98 <_ZN7MCP25156endSPIEv>

    return i;
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 8001db2:	2180      	movs	r1, #128	@ 0x80
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f812 	bl	8001dde <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8001dba:	4603      	mov	r3, r0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f805 	bl	8001dde <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	22e0      	movs	r2, #224	@ 0xe0
 8001dee:	210f      	movs	r1, #15
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff98 	bl	8001d26 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 8001df6:	f000 fc03 	bl	8002600 <HAL_GetTick>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	330a      	adds	r3, #10
 8001dfe:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 8001e00:	2300      	movs	r3, #0
 8001e02:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 8001e04:	e013      	b.n	8001e2e <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 8001e06:	210e      	movs	r1, #14
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff feef 	bl	8001bec <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	f023 031f 	bic.w	r3, r3, #31
 8001e18:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	bf0c      	ite	eq
 8001e22:	2301      	moveq	r3, #1
 8001e24:	2300      	movne	r3, #0
 8001e26:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10b      	bne.n	8001e46 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 8001e2e:	f000 fbe7 	bl	8002600 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4293      	cmp	r3, r2
 8001e38:	bf8c      	ite	hi
 8001e3a:	2301      	movhi	r3, #1
 8001e3c:	2300      	movls	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1e0      	bne.n	8001e06 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 8001e44:	e000      	b.n	8001e48 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 8001e46:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 8001e52:	2301      	movs	r3, #1

}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff9c 	bl	8001daa <_ZN7MCP251513setConfigModeEv>
 8001e72:	4603      	mov	r3, r0
 8001e74:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 8001e76:	7afb      	ldrb	r3, [r7, #11]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 8001e7c:	7afb      	ldrb	r3, [r7, #11]
 8001e7e:	e1b5      	b.n	80021ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 8001e84:	78bb      	ldrb	r3, [r7, #2]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d009      	beq.n	8001e9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	f300 8193 	bgt.w	80021b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 811f 	beq.w	80020d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	f000 808e 	beq.w	8001fb8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 8001e9c:	e18b      	b.n	80021b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	2b0f      	cmp	r3, #15
 8001ea2:	f200 8085 	bhi.w	8001fb0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 8001ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8001eac <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 8001ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eac:	08001eed 	.word	0x08001eed
 8001eb0:	08001efb 	.word	0x08001efb
 8001eb4:	08001f09 	.word	0x08001f09
 8001eb8:	08001f17 	.word	0x08001f17
 8001ebc:	08001f25 	.word	0x08001f25
 8001ec0:	08001f33 	.word	0x08001f33
 8001ec4:	08001f41 	.word	0x08001f41
 8001ec8:	08001f4f 	.word	0x08001f4f
 8001ecc:	08001fb1 	.word	0x08001fb1
 8001ed0:	08001fb1 	.word	0x08001fb1
 8001ed4:	08001f5d 	.word	0x08001f5d
 8001ed8:	08001f6b 	.word	0x08001f6b
 8001edc:	08001f79 	.word	0x08001f79
 8001ee0:	08001f87 	.word	0x08001f87
 8001ee4:	08001f95 	.word	0x08001f95
 8001ee8:	08001fa3 	.word	0x08001fa3
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 8001eec:	231f      	movs	r3, #31
 8001eee:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 8001ef0:	23bf      	movs	r3, #191	@ 0xbf
 8001ef2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 8001ef4:	2387      	movs	r3, #135	@ 0x87
 8001ef6:	733b      	strb	r3, [r7, #12]
            break;
 8001ef8:	e05d      	b.n	8001fb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 8001efa:	230f      	movs	r3, #15
 8001efc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 8001efe:	23bf      	movs	r3, #191	@ 0xbf
 8001f00:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 8001f02:	2387      	movs	r3, #135	@ 0x87
 8001f04:	733b      	strb	r3, [r7, #12]
            break;
 8001f06:	e056      	b.n	8001fb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 8001f08:	2307      	movs	r3, #7
 8001f0a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 8001f0c:	23bf      	movs	r3, #191	@ 0xbf
 8001f0e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 8001f10:	2387      	movs	r3, #135	@ 0x87
 8001f12:	733b      	strb	r3, [r7, #12]
            break;
 8001f14:	e04f      	b.n	8001fb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 8001f16:	2307      	movs	r3, #7
 8001f18:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 8001f1a:	23a4      	movs	r3, #164	@ 0xa4
 8001f1c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 8001f1e:	2384      	movs	r3, #132	@ 0x84
 8001f20:	733b      	strb	r3, [r7, #12]
            break;
 8001f22:	e048      	b.n	8001fb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 8001f24:	2347      	movs	r3, #71	@ 0x47
 8001f26:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 8001f28:	23e2      	movs	r3, #226	@ 0xe2
 8001f2a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8001f2c:	2385      	movs	r3, #133	@ 0x85
 8001f2e:	733b      	strb	r3, [r7, #12]
            break;
 8001f30:	e041      	b.n	8001fb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 8001f32:	2303      	movs	r3, #3
 8001f34:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 8001f36:	23bf      	movs	r3, #191	@ 0xbf
 8001f38:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 8001f3a:	2387      	movs	r3, #135	@ 0x87
 8001f3c:	733b      	strb	r3, [r7, #12]
            break;
 8001f3e:	e03a      	b.n	8001fb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 8001f40:	2303      	movs	r3, #3
 8001f42:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8001f44:	23b4      	movs	r3, #180	@ 0xb4
 8001f46:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8001f48:	2386      	movs	r3, #134	@ 0x86
 8001f4a:	733b      	strb	r3, [r7, #12]
            break;
 8001f4c:	e033      	b.n	8001fb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 8001f52:	23bf      	movs	r3, #191	@ 0xbf
 8001f54:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 8001f56:	2387      	movs	r3, #135	@ 0x87
 8001f58:	733b      	strb	r3, [r7, #12]
            break;
 8001f5a:	e02c      	b.n	8001fb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 8001f60:	23b4      	movs	r3, #180	@ 0xb4
 8001f62:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 8001f64:	2386      	movs	r3, #134	@ 0x86
 8001f66:	733b      	strb	r3, [r7, #12]
            break;
 8001f68:	e025      	b.n	8001fb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 8001f6e:	23b1      	movs	r3, #177	@ 0xb1
 8001f70:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 8001f72:	2385      	movs	r3, #133	@ 0x85
 8001f74:	733b      	strb	r3, [r7, #12]
            break;
 8001f76:	e01e      	b.n	8001fb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 8001f7c:	23b4      	movs	r3, #180	@ 0xb4
 8001f7e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 8001f80:	2386      	movs	r3, #134	@ 0x86
 8001f82:	733b      	strb	r3, [r7, #12]
            break;
 8001f84:	e017      	b.n	8001fb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 8001f8a:	23b1      	movs	r3, #177	@ 0xb1
 8001f8c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 8001f8e:	2385      	movs	r3, #133	@ 0x85
 8001f90:	733b      	strb	r3, [r7, #12]
            break;
 8001f92:	e010      	b.n	8001fb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 8001f98:	2390      	movs	r3, #144	@ 0x90
 8001f9a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 8001f9c:	2382      	movs	r3, #130	@ 0x82
 8001f9e:	733b      	strb	r3, [r7, #12]
            break;
 8001fa0:	e009      	b.n	8001fb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 8001fa6:	2380      	movs	r3, #128	@ 0x80
 8001fa8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 8001faa:	2380      	movs	r3, #128	@ 0x80
 8001fac:	733b      	strb	r3, [r7, #12]
            break;
 8001fae:	e002      	b.n	8001fb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
            break;
 8001fb4:	bf00      	nop
        }
        break;
 8001fb6:	e101      	b.n	80021bc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b0f      	cmp	r3, #15
 8001fbc:	f200 8086 	bhi.w	80020cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 8001fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 8001fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc6:	bf00      	nop
 8001fc8:	08002009 	.word	0x08002009
 8001fcc:	08002017 	.word	0x08002017
 8001fd0:	08002025 	.word	0x08002025
 8001fd4:	080020cd 	.word	0x080020cd
 8001fd8:	08002033 	.word	0x08002033
 8001fdc:	08002041 	.word	0x08002041
 8001fe0:	0800204f 	.word	0x0800204f
 8001fe4:	0800205d 	.word	0x0800205d
 8001fe8:	0800206b 	.word	0x0800206b
 8001fec:	080020cd 	.word	0x080020cd
 8001ff0:	08002079 	.word	0x08002079
 8001ff4:	08002087 	.word	0x08002087
 8001ff8:	08002095 	.word	0x08002095
 8001ffc:	080020a3 	.word	0x080020a3
 8002000:	080020b1 	.word	0x080020b1
 8002004:	080020bf 	.word	0x080020bf
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 8002008:	233f      	movs	r3, #63	@ 0x3f
 800200a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 800200c:	23ff      	movs	r3, #255	@ 0xff
 800200e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 8002010:	2387      	movs	r3, #135	@ 0x87
 8002012:	733b      	strb	r3, [r7, #12]
            break;
 8002014:	e05d      	b.n	80020d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 8002016:	231f      	movs	r3, #31
 8002018:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 800201a:	23ff      	movs	r3, #255	@ 0xff
 800201c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 800201e:	2387      	movs	r3, #135	@ 0x87
 8002020:	733b      	strb	r3, [r7, #12]
            break;
 8002022:	e056      	b.n	80020d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 8002024:	230f      	movs	r3, #15
 8002026:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8002028:	23ff      	movs	r3, #255	@ 0xff
 800202a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 800202c:	2387      	movs	r3, #135	@ 0x87
 800202e:	733b      	strb	r3, [r7, #12]
            break;
 8002030:	e04f      	b.n	80020d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 8002032:	234e      	movs	r3, #78	@ 0x4e
 8002034:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 8002036:	23f1      	movs	r3, #241	@ 0xf1
 8002038:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 800203a:	2385      	movs	r3, #133	@ 0x85
 800203c:	733b      	strb	r3, [r7, #12]
            break;
 800203e:	e048      	b.n	80020d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 8002040:	2307      	movs	r3, #7
 8002042:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8002044:	23ff      	movs	r3, #255	@ 0xff
 8002046:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8002048:	2387      	movs	r3, #135	@ 0x87
 800204a:	733b      	strb	r3, [r7, #12]
            break;
 800204c:	e041      	b.n	80020d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 800204e:	2307      	movs	r3, #7
 8002050:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 8002052:	23fa      	movs	r3, #250	@ 0xfa
 8002054:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 8002056:	2387      	movs	r3, #135	@ 0x87
 8002058:	733b      	strb	r3, [r7, #12]
            break;
 800205a:	e03a      	b.n	80020d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 800205c:	2303      	movs	r3, #3
 800205e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 8002060:	23ff      	movs	r3, #255	@ 0xff
 8002062:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 8002064:	2387      	movs	r3, #135	@ 0x87
 8002066:	733b      	strb	r3, [r7, #12]
            break;
 8002068:	e033      	b.n	80020d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 800206a:	2303      	movs	r3, #3
 800206c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 800206e:	23be      	movs	r3, #190	@ 0xbe
 8002070:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 8002072:	2307      	movs	r3, #7
 8002074:	733b      	strb	r3, [r7, #12]
            break;
 8002076:	e02c      	b.n	80020d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 8002078:	2303      	movs	r3, #3
 800207a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 800207c:	23fa      	movs	r3, #250	@ 0xfa
 800207e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 8002080:	2387      	movs	r3, #135	@ 0x87
 8002082:	733b      	strb	r3, [r7, #12]
            break;
 8002084:	e025      	b.n	80020d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 8002086:	2303      	movs	r3, #3
 8002088:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 800208a:	23f0      	movs	r3, #240	@ 0xf0
 800208c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 800208e:	2386      	movs	r3, #134	@ 0x86
 8002090:	733b      	strb	r3, [r7, #12]
            break;
 8002092:	e01e      	b.n	80020d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 8002094:	2301      	movs	r3, #1
 8002096:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 8002098:	23fa      	movs	r3, #250	@ 0xfa
 800209a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 800209c:	2387      	movs	r3, #135	@ 0x87
 800209e:	733b      	strb	r3, [r7, #12]
            break;
 80020a0:	e017      	b.n	80020d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 80020a2:	2341      	movs	r3, #65	@ 0x41
 80020a4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 80020a6:	23f1      	movs	r3, #241	@ 0xf1
 80020a8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 80020aa:	2385      	movs	r3, #133	@ 0x85
 80020ac:	733b      	strb	r3, [r7, #12]
            break;
 80020ae:	e010      	b.n	80020d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 80020b0:	2300      	movs	r3, #0
 80020b2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 80020b4:	23f0      	movs	r3, #240	@ 0xf0
 80020b6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 80020b8:	2386      	movs	r3, #134	@ 0x86
 80020ba:	733b      	strb	r3, [r7, #12]
            break;
 80020bc:	e009      	b.n	80020d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 80020be:	2300      	movs	r3, #0
 80020c0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 80020c2:	23d0      	movs	r3, #208	@ 0xd0
 80020c4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 80020c6:	2382      	movs	r3, #130	@ 0x82
 80020c8:	733b      	strb	r3, [r7, #12]
            break;
 80020ca:	e002      	b.n	80020d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]
            break;
 80020d0:	bf00      	nop
        }
        break;
 80020d2:	e073      	b.n	80021bc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	3b04      	subs	r3, #4
 80020d8:	2b0b      	cmp	r3, #11
 80020da:	d868      	bhi.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 80020dc:	a201      	add	r2, pc, #4	@ (adr r2, 80020e4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	08002115 	.word	0x08002115
 80020e8:	08002123 	.word	0x08002123
 80020ec:	08002131 	.word	0x08002131
 80020f0:	0800213f 	.word	0x0800213f
 80020f4:	0800214d 	.word	0x0800214d
 80020f8:	080021af 	.word	0x080021af
 80020fc:	0800215b 	.word	0x0800215b
 8002100:	08002169 	.word	0x08002169
 8002104:	08002177 	.word	0x08002177
 8002108:	08002185 	.word	0x08002185
 800210c:	08002193 	.word	0x08002193
 8002110:	080021a1 	.word	0x080021a1
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 8002114:	230b      	movs	r3, #11
 8002116:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 8002118:	23ff      	movs	r3, #255	@ 0xff
 800211a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 800211c:	2387      	movs	r3, #135	@ 0x87
 800211e:	733b      	strb	r3, [r7, #12]
	    break;
 8002120:	e048      	b.n	80021b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 8002122:	2309      	movs	r3, #9
 8002124:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 8002126:	23ff      	movs	r3, #255	@ 0xff
 8002128:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 800212a:	2387      	movs	r3, #135	@ 0x87
 800212c:	733b      	strb	r3, [r7, #12]
            break;
 800212e:	e041      	b.n	80021b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 8002130:	2309      	movs	r3, #9
 8002132:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 8002134:	23fa      	movs	r3, #250	@ 0xfa
 8002136:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8002138:	2387      	movs	r3, #135	@ 0x87
 800213a:	733b      	strb	r3, [r7, #12]
            break;
 800213c:	e03a      	b.n	80021b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 800213e:	2304      	movs	r3, #4
 8002140:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 8002142:	23ff      	movs	r3, #255	@ 0xff
 8002144:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 8002146:	2387      	movs	r3, #135	@ 0x87
 8002148:	733b      	strb	r3, [r7, #12]
            break;
 800214a:	e033      	b.n	80021b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 800214c:	2304      	movs	r3, #4
 800214e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 8002150:	23fe      	movs	r3, #254	@ 0xfe
 8002152:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 8002154:	2387      	movs	r3, #135	@ 0x87
 8002156:	733b      	strb	r3, [r7, #12]
	    break;
 8002158:	e02c      	b.n	80021b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 800215a:	2304      	movs	r3, #4
 800215c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 800215e:	23fa      	movs	r3, #250	@ 0xfa
 8002160:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 8002162:	2387      	movs	r3, #135	@ 0x87
 8002164:	733b      	strb	r3, [r7, #12]
            break;
 8002166:	e025      	b.n	80021b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 8002168:	2303      	movs	r3, #3
 800216a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 800216c:	23fa      	movs	r3, #250	@ 0xfa
 800216e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 8002170:	2387      	movs	r3, #135	@ 0x87
 8002172:	733b      	strb	r3, [r7, #12]
            break;
 8002174:	e01e      	b.n	80021b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 8002176:	2301      	movs	r3, #1
 8002178:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 800217a:	23ff      	movs	r3, #255	@ 0xff
 800217c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 800217e:	2387      	movs	r3, #135	@ 0x87
 8002180:	733b      	strb	r3, [r7, #12]
            break;
 8002182:	e017      	b.n	80021b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 8002184:	2341      	movs	r3, #65	@ 0x41
 8002186:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 8002188:	23fb      	movs	r3, #251	@ 0xfb
 800218a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 800218c:	2386      	movs	r3, #134	@ 0x86
 800218e:	733b      	strb	r3, [r7, #12]
            break;
 8002190:	e010      	b.n	80021b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 8002192:	2300      	movs	r3, #0
 8002194:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 8002196:	23fa      	movs	r3, #250	@ 0xfa
 8002198:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 800219a:	2387      	movs	r3, #135	@ 0x87
 800219c:	733b      	strb	r3, [r7, #12]
            break;
 800219e:	e009      	b.n	80021b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 80021a4:	23d9      	movs	r3, #217	@ 0xd9
 80021a6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 80021a8:	2382      	movs	r3, #130	@ 0x82
 80021aa:	733b      	strb	r3, [r7, #12]
            break;
 80021ac:	e002      	b.n	80021b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
            break;
 80021b2:	bf00      	nop
        }
        break;
 80021b4:	e002      	b.n	80021bc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
        break;
 80021ba:	bf00      	nop
    }

    if (set) {
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d013      	beq.n	80021ea <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	461a      	mov	r2, r3
 80021c6:	212a      	movs	r1, #42	@ 0x2a
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff fd5d 	bl	8001c88 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 80021ce:	7b7b      	ldrb	r3, [r7, #13]
 80021d0:	461a      	mov	r2, r3
 80021d2:	2129      	movs	r1, #41	@ 0x29
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff fd57 	bl	8001c88 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 80021da:	7b3b      	ldrb	r3, [r7, #12]
 80021dc:	461a      	mov	r2, r3
 80021de:	2128      	movs	r1, #40	@ 0x28
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fd51 	bl	8001c88 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e000      	b.n	80021ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 80021ea:	2301      	movs	r3, #1
    }
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d034      	beq.n	8002278 <_ZN7MCP25159prepareIdEPhbm+0x84>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3303      	adds	r3, #3
 8002212:	8afa      	ldrh	r2, [r7, #22]
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 8002218:	8afb      	ldrh	r3, [r7, #22]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	b29a      	uxth	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3302      	adds	r3, #2
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	0c1b      	lsrs	r3, r3, #16
 800222a:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 800222c:	8afb      	ldrh	r3, [r7, #22]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3301      	adds	r3, #1
 8002234:	f002 0203 	and.w	r2, r2, #3
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	3301      	adds	r3, #1
 8002240:	7819      	ldrb	r1, [r3, #0]
 8002242:	8afb      	ldrh	r3, [r7, #22]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f023 031f 	bic.w	r3, r3, #31
 800224c:	b2da      	uxtb	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	3301      	adds	r3, #1
 8002252:	440a      	add	r2, r1
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	3301      	adds	r3, #1
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	3301      	adds	r3, #1
 8002262:	f042 0208 	orr.w	r2, r2, #8
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 800226a:	8afb      	ldrh	r3, [r7, #22]
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	b29b      	uxth	r3, r3
 8002270:	b2da      	uxtb	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 8002276:	e013      	b.n	80022a0 <_ZN7MCP25159prepareIdEPhbm+0xac>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 8002278:	8afb      	ldrh	r3, [r7, #22]
 800227a:	08db      	lsrs	r3, r3, #3
 800227c:	b29b      	uxth	r3, r3
 800227e:	b2da      	uxtb	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 8002284:	8afb      	ldrh	r3, [r7, #22]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	3301      	adds	r3, #1
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	3303      	adds	r3, #3
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	3302      	adds	r3, #2
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
}
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	460b      	mov	r3, r1
 80022b8:	72fb      	strb	r3, [r7, #11]
 80022ba:	4613      	mov	r3, r2
 80022bc:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f7ff fd73 	bl	8001daa <_ZN7MCP251513setConfigModeEv>
 80022c4:	4603      	mov	r3, r0
 80022c6:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 80022c8:	7dbb      	ldrb	r3, [r7, #22]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 80022ce:	7dbb      	ldrb	r3, [r7, #22]
 80022d0:	e01c      	b.n	800230c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80022d2:	7aba      	ldrb	r2, [r7, #10]
 80022d4:	f107 0110 	add.w	r1, r7, #16
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f7ff ff8a 	bl	80021f4 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d003      	beq.n	80022f2 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 80022ea:	e005      	b.n	80022f8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 80022ec:	2320      	movs	r3, #32
 80022ee:	75fb      	strb	r3, [r7, #23]
 80022f0:	e004      	b.n	80022fc <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 80022f2:	2324      	movs	r3, #36	@ 0x24
 80022f4:	75fb      	strb	r3, [r7, #23]
 80022f6:	e001      	b.n	80022fc <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e007      	b.n	800230c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 80022fc:	f107 0210 	add.w	r2, r7, #16
 8002300:	7df9      	ldrb	r1, [r7, #23]
 8002302:	2304      	movs	r3, #4
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff fcdf 	bl	8001cc8 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	72fb      	strb	r3, [r7, #11]
 8002322:	4613      	mov	r3, r2
 8002324:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f7ff fd3f 	bl	8001daa <_ZN7MCP251513setConfigModeEv>
 800232c:	4603      	mov	r3, r0
 800232e:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8002330:	7dbb      	ldrb	r3, [r7, #22]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 8002336:	7dbb      	ldrb	r3, [r7, #22]
 8002338:	e035      	b.n	80023a6 <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 800233a:	7afb      	ldrb	r3, [r7, #11]
 800233c:	2b05      	cmp	r3, #5
 800233e:	d821      	bhi.n	8002384 <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 8002340:	a201      	add	r2, pc, #4	@ (adr r2, 8002348 <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 8002342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002346:	bf00      	nop
 8002348:	08002361 	.word	0x08002361
 800234c:	08002367 	.word	0x08002367
 8002350:	0800236d 	.word	0x0800236d
 8002354:	08002373 	.word	0x08002373
 8002358:	08002379 	.word	0x08002379
 800235c:	0800237f 	.word	0x0800237f
        case RXF0: reg = MCP_RXF0SIDH; break;
 8002360:	2300      	movs	r3, #0
 8002362:	75fb      	strb	r3, [r7, #23]
 8002364:	e010      	b.n	8002388 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 8002366:	2304      	movs	r3, #4
 8002368:	75fb      	strb	r3, [r7, #23]
 800236a:	e00d      	b.n	8002388 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 800236c:	2308      	movs	r3, #8
 800236e:	75fb      	strb	r3, [r7, #23]
 8002370:	e00a      	b.n	8002388 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 8002372:	2310      	movs	r3, #16
 8002374:	75fb      	strb	r3, [r7, #23]
 8002376:	e007      	b.n	8002388 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 8002378:	2314      	movs	r3, #20
 800237a:	75fb      	strb	r3, [r7, #23]
 800237c:	e004      	b.n	8002388 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 800237e:	2318      	movs	r3, #24
 8002380:	75fb      	strb	r3, [r7, #23]
 8002382:	e001      	b.n	8002388 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 8002384:	2301      	movs	r3, #1
 8002386:	e00e      	b.n	80023a6 <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8002388:	7aba      	ldrb	r2, [r7, #10]
 800238a:	f107 0110 	add.w	r1, r7, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f7ff ff2f 	bl	80021f4 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 8002396:	f107 0210 	add.w	r2, r7, #16
 800239a:	7df9      	ldrb	r1, [r7, #23]
 800239c:	2304      	movs	r3, #4
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f7ff fc92 	bl	8001cc8 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop

080023b0 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

    return ERROR_ALLTXBUSY;
}

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	460b      	mov	r3, r1
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 80023be:	7afb      	ldrb	r3, [r7, #11]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4a30      	ldr	r2, [pc, #192]	@ (8002484 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 80023c4:	4413      	add	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	7859      	ldrb	r1, [r3, #1]
 80023cc:	f107 0210 	add.w	r2, r7, #16
 80023d0:	2305      	movs	r3, #5
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f7ff fc29 	bl	8001c2a <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 80023d8:	7c3b      	ldrb	r3, [r7, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	7c7a      	ldrb	r2, [r7, #17]
 80023de:	0952      	lsrs	r2, r2, #5
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	4413      	add	r3, r2
 80023e4:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 80023e6:	7c7b      	ldrb	r3, [r7, #17]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d014      	beq.n	800241a <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	009a      	lsls	r2, r3, #2
 80023f4:	7c7b      	ldrb	r3, [r7, #17]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	7cba      	ldrb	r2, [r7, #18]
 8002404:	4413      	add	r3, r2
 8002406:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	7cfa      	ldrb	r2, [r7, #19]
 800240e:	4413      	add	r3, r2
 8002410:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002418:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 800241a:	7d3b      	ldrb	r3, [r7, #20]
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 8002422:	7dfb      	ldrb	r3, [r7, #23]
 8002424:	2b08      	cmp	r3, #8
 8002426:	d901      	bls.n	800242c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 8002428:	2301      	movs	r3, #1
 800242a:	e027      	b.n	800247c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	4619      	mov	r1, r3
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f7ff fbda 	bl	8001bec <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8002438:	4603      	mov	r3, r0
 800243a:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 800243c:	7dbb      	ldrb	r3, [r7, #22]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800244c:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	7dfa      	ldrb	r2, [r7, #23]
 8002458:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	7899      	ldrb	r1, [r3, #2]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f103 0208 	add.w	r2, r3, #8
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff fbdf 	bl	8001c2a <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	78da      	ldrb	r2, [r3, #3]
 8002470:	2300      	movs	r3, #0
 8002472:	212c      	movs	r1, #44	@ 0x2c
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f7ff fc56 	bl	8001d26 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	08006da4 	.word	0x08006da4

08002488 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff fc71 	bl	8001d7a <_ZN7MCP25159getStatusEv>
 8002498:	4603      	mov	r3, r0
 800249a:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 800249c:	7bbb      	ldrb	r3, [r7, #14]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	2100      	movs	r1, #0
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ff80 	bl	80023b0 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 80024b0:	4603      	mov	r3, r0
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	e00e      	b.n	80024d4 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 80024b6:	7bbb      	ldrb	r3, [r7, #14]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	2101      	movs	r1, #1
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff73 	bl	80023b0 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 80024ca:	4603      	mov	r3, r0
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e001      	b.n	80024d4 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 80024d0:	2305      	movs	r3, #5
 80024d2:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002518 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024e4:	f7fe fdf8 	bl	80010d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024e8:	480c      	ldr	r0, [pc, #48]	@ (800251c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ea:	490d      	ldr	r1, [pc, #52]	@ (8002520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f0:	e002      	b.n	80024f8 <LoopCopyDataInit>

080024f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f6:	3304      	adds	r3, #4

080024f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024fc:	d3f9      	bcc.n	80024f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002500:	4c0a      	ldr	r4, [pc, #40]	@ (800252c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002504:	e001      	b.n	800250a <LoopFillZerobss>

08002506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002508:	3204      	adds	r2, #4

0800250a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800250c:	d3fb      	bcc.n	8002506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800250e:	f003 fa15 	bl	800593c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002512:	f7fe f89d 	bl	8000650 <main>
  bx  lr    
 8002516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002518:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800251c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002520:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002524:	08006df0 	.word	0x08006df0
  ldr r2, =_sbss
 8002528:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800252c:	200001fc 	.word	0x200001fc

08002530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002530:	e7fe      	b.n	8002530 <ADC_IRQHandler>
	...

08002534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002538:	4b0e      	ldr	r3, [pc, #56]	@ (8002574 <HAL_Init+0x40>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0d      	ldr	r2, [pc, #52]	@ (8002574 <HAL_Init+0x40>)
 800253e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002544:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <HAL_Init+0x40>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <HAL_Init+0x40>)
 800254a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800254e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002550:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <HAL_Init+0x40>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a07      	ldr	r2, [pc, #28]	@ (8002574 <HAL_Init+0x40>)
 8002556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255c:	2003      	movs	r0, #3
 800255e:	f000 f94f 	bl	8002800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002562:	200f      	movs	r0, #15
 8002564:	f000 f808 	bl	8002578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002568:	f7fe fd4a 	bl	8001000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023c00 	.word	0x40023c00

08002578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002580:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <HAL_InitTick+0x54>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <HAL_InitTick+0x58>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800258e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f967 	bl	800286a <HAL_SYSTICK_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00e      	b.n	80025c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b0f      	cmp	r3, #15
 80025aa:	d80a      	bhi.n	80025c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ac:	2200      	movs	r2, #0
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f000 f92f 	bl	8002816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b8:	4a06      	ldr	r2, [pc, #24]	@ (80025d4 <HAL_InitTick+0x5c>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000004 	.word	0x20000004
 80025d0:	2000000c 	.word	0x2000000c
 80025d4:	20000008 	.word	0x20000008

080025d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_IncTick+0x20>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <HAL_IncTick+0x24>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <HAL_IncTick+0x24>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000000c 	.word	0x2000000c
 80025fc:	200001f8 	.word	0x200001f8

08002600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return uwTick;
 8002604:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <HAL_GetTick+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	200001f8 	.word	0x200001f8

08002618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff ffee 	bl	8002600 <HAL_GetTick>
 8002624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d005      	beq.n	800263e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_Delay+0x44>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800263e:	bf00      	nop
 8002640:	f7ff ffde 	bl	8002600 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	d8f7      	bhi.n	8002640 <HAL_Delay+0x28>
  {
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000000c 	.word	0x2000000c

08002660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002670:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800267c:	4013      	ands	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002688:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800268c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002692:	4a04      	ldr	r2, [pc, #16]	@ (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	60d3      	str	r3, [r2, #12]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ac:	4b04      	ldr	r3, [pc, #16]	@ (80026c0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0307 	and.w	r3, r3, #7
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	db0b      	blt.n	80026ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	f003 021f 	and.w	r2, r3, #31
 80026dc:	4907      	ldr	r1, [pc, #28]	@ (80026fc <__NVIC_EnableIRQ+0x38>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2001      	movs	r0, #1
 80026e6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000e100 	.word	0xe000e100

08002700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db0a      	blt.n	800272a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	490c      	ldr	r1, [pc, #48]	@ (800274c <__NVIC_SetPriority+0x4c>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	440b      	add	r3, r1
 8002724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002728:	e00a      	b.n	8002740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4908      	ldr	r1, [pc, #32]	@ (8002750 <__NVIC_SetPriority+0x50>)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	3b04      	subs	r3, #4
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	440b      	add	r3, r1
 800273e:	761a      	strb	r2, [r3, #24]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	@ 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f1c3 0307 	rsb	r3, r3, #7
 800276e:	2b04      	cmp	r3, #4
 8002770:	bf28      	it	cs
 8002772:	2304      	movcs	r3, #4
 8002774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3304      	adds	r3, #4
 800277a:	2b06      	cmp	r3, #6
 800277c:	d902      	bls.n	8002784 <NVIC_EncodePriority+0x30>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3b03      	subs	r3, #3
 8002782:	e000      	b.n	8002786 <NVIC_EncodePriority+0x32>
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	401a      	ands	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43d9      	mvns	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	4313      	orrs	r3, r2
         );
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	@ 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027cc:	d301      	bcc.n	80027d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00f      	b.n	80027f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d2:	4a0a      	ldr	r2, [pc, #40]	@ (80027fc <SysTick_Config+0x40>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027da:	210f      	movs	r1, #15
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	f7ff ff8e 	bl	8002700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e4:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <SysTick_Config+0x40>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ea:	4b04      	ldr	r3, [pc, #16]	@ (80027fc <SysTick_Config+0x40>)
 80027ec:	2207      	movs	r2, #7
 80027ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	e000e010 	.word	0xe000e010

08002800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ff29 	bl	8002660 <__NVIC_SetPriorityGrouping>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002828:	f7ff ff3e 	bl	80026a8 <__NVIC_GetPriorityGrouping>
 800282c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff ff8e 	bl	8002754 <NVIC_EncodePriority>
 8002838:	4602      	mov	r2, r0
 800283a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff5d 	bl	8002700 <__NVIC_SetPriority>
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	4603      	mov	r3, r0
 8002856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff31 	bl	80026c4 <__NVIC_EnableIRQ>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ffa2 	bl	80027bc <SysTick_Config>
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff feb6 	bl	8002600 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e099      	b.n	80029d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c0:	e00f      	b.n	80028e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028c2:	f7ff fe9d 	bl	8002600 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d908      	bls.n	80028e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2203      	movs	r2, #3
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e078      	b.n	80029d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e8      	bne.n	80028c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4b38      	ldr	r3, [pc, #224]	@ (80029dc <HAL_DMA_Init+0x158>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800290e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002926:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4313      	orrs	r3, r2
 8002932:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	2b04      	cmp	r3, #4
 800293a:	d107      	bne.n	800294c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002944:	4313      	orrs	r3, r2
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f023 0307 	bic.w	r3, r3, #7
 8002962:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	2b04      	cmp	r3, #4
 8002974:	d117      	bne.n	80029a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00e      	beq.n	80029a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fa91 	bl	8002eb0 <DMA_CheckFifoParam>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2240      	movs	r2, #64	@ 0x40
 8002998:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80029a2:	2301      	movs	r3, #1
 80029a4:	e016      	b.n	80029d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fa48 	bl	8002e44 <DMA_CalcBaseAndBitshift>
 80029b4:	4603      	mov	r3, r0
 80029b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029bc:	223f      	movs	r2, #63	@ 0x3f
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	f010803f 	.word	0xf010803f

080029e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_DMA_Start_IT+0x26>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e040      	b.n	8002a88 <HAL_DMA_Start_IT+0xa8>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d12f      	bne.n	8002a7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f9da 	bl	8002de8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a38:	223f      	movs	r2, #63	@ 0x3f
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0216 	orr.w	r2, r2, #22
 8002a4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0208 	orr.w	r2, r2, #8
 8002a66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e005      	b.n	8002a86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a82:	2302      	movs	r3, #2
 8002a84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d004      	beq.n	8002aae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2280      	movs	r2, #128	@ 0x80
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00c      	b.n	8002ac8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2205      	movs	r2, #5
 8002ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0201 	bic.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ae0:	4b8e      	ldr	r3, [pc, #568]	@ (8002d1c <HAL_DMA_IRQHandler+0x248>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a8e      	ldr	r2, [pc, #568]	@ (8002d20 <HAL_DMA_IRQHandler+0x24c>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	0a9b      	lsrs	r3, r3, #10
 8002aec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afe:	2208      	movs	r2, #8
 8002b00:	409a      	lsls	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01a      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b44:	2201      	movs	r2, #1
 8002b46:	409a      	lsls	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d012      	beq.n	8002b76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	2201      	movs	r2, #1
 8002b64:	409a      	lsls	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	f043 0202 	orr.w	r2, r3, #2
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d012      	beq.n	8002bac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00b      	beq.n	8002bac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b98:	2204      	movs	r2, #4
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba4:	f043 0204 	orr.w	r2, r3, #4
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d043      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d03c      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bce:	2210      	movs	r2, #16
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d018      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d108      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d024      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
 8002c02:	e01f      	b.n	8002c44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01b      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
 8002c14:	e016      	b.n	8002c44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d107      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0208 	bic.w	r2, r2, #8
 8002c32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c48:	2220      	movs	r2, #32
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 808f 	beq.w	8002d74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8087 	beq.w	8002d74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d136      	bne.n	8002cec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0216 	bic.w	r2, r2, #22
 8002c8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695a      	ldr	r2, [r3, #20]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d103      	bne.n	8002cae <HAL_DMA_IRQHandler+0x1da>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0208 	bic.w	r2, r2, #8
 8002cbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc2:	223f      	movs	r2, #63	@ 0x3f
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d07e      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
        }
        return;
 8002cea:	e079      	b.n	8002de0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01d      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10d      	bne.n	8002d24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d031      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4798      	blx	r3
 8002d18:	e02c      	b.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
 8002d1a:	bf00      	nop
 8002d1c:	20000004 	.word	0x20000004
 8002d20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d023      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
 8002d34:	e01e      	b.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10f      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0210 	bic.w	r2, r2, #16
 8002d52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d032      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d022      	beq.n	8002dce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2205      	movs	r2, #5
 8002d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	3301      	adds	r3, #1
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d307      	bcc.n	8002dbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f2      	bne.n	8002da0 <HAL_DMA_IRQHandler+0x2cc>
 8002dba:	e000      	b.n	8002dbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4798      	blx	r3
 8002dde:	e000      	b.n	8002de2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002de0:	bf00      	nop
    }
  }
}
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b40      	cmp	r3, #64	@ 0x40
 8002e14:	d108      	bne.n	8002e28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e26:	e007      	b.n	8002e38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	3b10      	subs	r3, #16
 8002e54:	4a14      	ldr	r2, [pc, #80]	@ (8002ea8 <DMA_CalcBaseAndBitshift+0x64>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e5e:	4a13      	ldr	r2, [pc, #76]	@ (8002eac <DMA_CalcBaseAndBitshift+0x68>)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d909      	bls.n	8002e86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	1d1a      	adds	r2, r3, #4
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e84:	e007      	b.n	8002e96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	aaaaaaab 	.word	0xaaaaaaab
 8002eac:	08006dac 	.word	0x08006dac

08002eb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d11f      	bne.n	8002f0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d856      	bhi.n	8002f7e <DMA_CheckFifoParam+0xce>
 8002ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed8 <DMA_CheckFifoParam+0x28>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002ee9 	.word	0x08002ee9
 8002edc:	08002efb 	.word	0x08002efb
 8002ee0:	08002ee9 	.word	0x08002ee9
 8002ee4:	08002f7f 	.word	0x08002f7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d046      	beq.n	8002f82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef8:	e043      	b.n	8002f82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f02:	d140      	bne.n	8002f86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f08:	e03d      	b.n	8002f86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f12:	d121      	bne.n	8002f58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d837      	bhi.n	8002f8a <DMA_CheckFifoParam+0xda>
 8002f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f20 <DMA_CheckFifoParam+0x70>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f37 	.word	0x08002f37
 8002f28:	08002f31 	.word	0x08002f31
 8002f2c:	08002f49 	.word	0x08002f49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      break;
 8002f34:	e030      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d025      	beq.n	8002f8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f46:	e022      	b.n	8002f8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f50:	d11f      	bne.n	8002f92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f56:	e01c      	b.n	8002f92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d903      	bls.n	8002f66 <DMA_CheckFifoParam+0xb6>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d003      	beq.n	8002f6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f64:	e018      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
      break;
 8002f6a:	e015      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00e      	beq.n	8002f96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7c:	e00b      	b.n	8002f96 <DMA_CheckFifoParam+0xe6>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e00a      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f82:	bf00      	nop
 8002f84:	e008      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f86:	bf00      	nop
 8002f88:	e006      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e004      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e002      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f92:	bf00      	nop
 8002f94:	e000      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f96:	bf00      	nop
    }
  } 
  
  return status; 
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	@ 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e159      	b.n	8003278 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	f040 8148 	bne.w	8003272 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d005      	beq.n	8002ffa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d130      	bne.n	800305c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	2203      	movs	r2, #3
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003030:	2201      	movs	r2, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 0201 	and.w	r2, r3, #1
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	2b03      	cmp	r3, #3
 8003066:	d017      	beq.n	8003098 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2203      	movs	r2, #3
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d123      	bne.n	80030ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	08da      	lsrs	r2, r3, #3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3208      	adds	r2, #8
 80030ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	220f      	movs	r2, #15
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	08da      	lsrs	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3208      	adds	r2, #8
 80030e6:	69b9      	ldr	r1, [r7, #24]
 80030e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0203 	and.w	r2, r3, #3
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80a2 	beq.w	8003272 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	4b57      	ldr	r3, [pc, #348]	@ (8003290 <HAL_GPIO_Init+0x2e8>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003136:	4a56      	ldr	r2, [pc, #344]	@ (8003290 <HAL_GPIO_Init+0x2e8>)
 8003138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800313c:	6453      	str	r3, [r2, #68]	@ 0x44
 800313e:	4b54      	ldr	r3, [pc, #336]	@ (8003290 <HAL_GPIO_Init+0x2e8>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800314a:	4a52      	ldr	r2, [pc, #328]	@ (8003294 <HAL_GPIO_Init+0x2ec>)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	3302      	adds	r3, #2
 8003152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a49      	ldr	r2, [pc, #292]	@ (8003298 <HAL_GPIO_Init+0x2f0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d019      	beq.n	80031aa <HAL_GPIO_Init+0x202>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a48      	ldr	r2, [pc, #288]	@ (800329c <HAL_GPIO_Init+0x2f4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_GPIO_Init+0x1fe>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a47      	ldr	r2, [pc, #284]	@ (80032a0 <HAL_GPIO_Init+0x2f8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00d      	beq.n	80031a2 <HAL_GPIO_Init+0x1fa>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a46      	ldr	r2, [pc, #280]	@ (80032a4 <HAL_GPIO_Init+0x2fc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d007      	beq.n	800319e <HAL_GPIO_Init+0x1f6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a45      	ldr	r2, [pc, #276]	@ (80032a8 <HAL_GPIO_Init+0x300>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_GPIO_Init+0x1f2>
 8003196:	2304      	movs	r3, #4
 8003198:	e008      	b.n	80031ac <HAL_GPIO_Init+0x204>
 800319a:	2307      	movs	r3, #7
 800319c:	e006      	b.n	80031ac <HAL_GPIO_Init+0x204>
 800319e:	2303      	movs	r3, #3
 80031a0:	e004      	b.n	80031ac <HAL_GPIO_Init+0x204>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e002      	b.n	80031ac <HAL_GPIO_Init+0x204>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_GPIO_Init+0x204>
 80031aa:	2300      	movs	r3, #0
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	f002 0203 	and.w	r2, r2, #3
 80031b2:	0092      	lsls	r2, r2, #2
 80031b4:	4093      	lsls	r3, r2
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031bc:	4935      	ldr	r1, [pc, #212]	@ (8003294 <HAL_GPIO_Init+0x2ec>)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	3302      	adds	r3, #2
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ca:	4b38      	ldr	r3, [pc, #224]	@ (80032ac <HAL_GPIO_Init+0x304>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ee:	4a2f      	ldr	r2, [pc, #188]	@ (80032ac <HAL_GPIO_Init+0x304>)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f4:	4b2d      	ldr	r3, [pc, #180]	@ (80032ac <HAL_GPIO_Init+0x304>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003218:	4a24      	ldr	r2, [pc, #144]	@ (80032ac <HAL_GPIO_Init+0x304>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800321e:	4b23      	ldr	r3, [pc, #140]	@ (80032ac <HAL_GPIO_Init+0x304>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003242:	4a1a      	ldr	r2, [pc, #104]	@ (80032ac <HAL_GPIO_Init+0x304>)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003248:	4b18      	ldr	r3, [pc, #96]	@ (80032ac <HAL_GPIO_Init+0x304>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800326c:	4a0f      	ldr	r2, [pc, #60]	@ (80032ac <HAL_GPIO_Init+0x304>)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3301      	adds	r3, #1
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b0f      	cmp	r3, #15
 800327c:	f67f aea2 	bls.w	8002fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	3724      	adds	r7, #36	@ 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	40013800 	.word	0x40013800
 8003298:	40020000 	.word	0x40020000
 800329c:	40020400 	.word	0x40020400
 80032a0:	40020800 	.word	0x40020800
 80032a4:	40020c00 	.word	0x40020c00
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40013c00 	.word	0x40013c00

080032b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	807b      	strh	r3, [r7, #2]
 80032bc:	4613      	mov	r3, r2
 80032be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c0:	787b      	ldrb	r3, [r7, #1]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032c6:	887a      	ldrh	r2, [r7, #2]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032cc:	e003      	b.n	80032d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ce:	887b      	ldrh	r3, [r7, #2]
 80032d0:	041a      	lsls	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	619a      	str	r2, [r3, #24]
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e267      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d075      	beq.n	80033ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003302:	4b88      	ldr	r3, [pc, #544]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b04      	cmp	r3, #4
 800330c:	d00c      	beq.n	8003328 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330e:	4b85      	ldr	r3, [pc, #532]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003316:	2b08      	cmp	r3, #8
 8003318:	d112      	bne.n	8003340 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331a:	4b82      	ldr	r3, [pc, #520]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003326:	d10b      	bne.n	8003340 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	4b7e      	ldr	r3, [pc, #504]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d05b      	beq.n	80033ec <HAL_RCC_OscConfig+0x108>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d157      	bne.n	80033ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e242      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003348:	d106      	bne.n	8003358 <HAL_RCC_OscConfig+0x74>
 800334a:	4b76      	ldr	r3, [pc, #472]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a75      	ldr	r2, [pc, #468]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e01d      	b.n	8003394 <HAL_RCC_OscConfig+0xb0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x98>
 8003362:	4b70      	ldr	r3, [pc, #448]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6f      	ldr	r2, [pc, #444]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b6d      	ldr	r3, [pc, #436]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6c      	ldr	r2, [pc, #432]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0xb0>
 800337c:	4b69      	ldr	r3, [pc, #420]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a68      	ldr	r2, [pc, #416]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b66      	ldr	r3, [pc, #408]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a65      	ldr	r2, [pc, #404]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7ff f930 	bl	8002600 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a4:	f7ff f92c 	bl	8002600 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	@ 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e207      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0xc0>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7ff f91c 	bl	8002600 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033cc:	f7ff f918 	bl	8002600 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	@ 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e1f3      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	4b51      	ldr	r3, [pc, #324]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0xe8>
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d063      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003406:	4b47      	ldr	r3, [pc, #284]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800340e:	2b08      	cmp	r3, #8
 8003410:	d11c      	bne.n	800344c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003412:	4b44      	ldr	r3, [pc, #272]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d116      	bne.n	800344c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341e:	4b41      	ldr	r3, [pc, #260]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x152>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e1c7      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	4b3b      	ldr	r3, [pc, #236]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4937      	ldr	r1, [pc, #220]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	e03a      	b.n	80034c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003454:	4b34      	ldr	r3, [pc, #208]	@ (8003528 <HAL_RCC_OscConfig+0x244>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7ff f8d1 	bl	8002600 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003462:	f7ff f8cd 	bl	8002600 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e1a8      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	4b2b      	ldr	r3, [pc, #172]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	4b28      	ldr	r3, [pc, #160]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4925      	ldr	r1, [pc, #148]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]
 8003494:	e015      	b.n	80034c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003496:	4b24      	ldr	r3, [pc, #144]	@ (8003528 <HAL_RCC_OscConfig+0x244>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7ff f8b0 	bl	8002600 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a4:	f7ff f8ac 	bl	8002600 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e187      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d036      	beq.n	800353c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d016      	beq.n	8003504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d6:	4b15      	ldr	r3, [pc, #84]	@ (800352c <HAL_RCC_OscConfig+0x248>)
 80034d8:	2201      	movs	r2, #1
 80034da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7ff f890 	bl	8002600 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e4:	f7ff f88c 	bl	8002600 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e167      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <HAL_RCC_OscConfig+0x240>)
 80034f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x200>
 8003502:	e01b      	b.n	800353c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003504:	4b09      	ldr	r3, [pc, #36]	@ (800352c <HAL_RCC_OscConfig+0x248>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350a:	f7ff f879 	bl	8002600 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	e00e      	b.n	8003530 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003512:	f7ff f875 	bl	8002600 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d907      	bls.n	8003530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e150      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
 8003524:	40023800 	.word	0x40023800
 8003528:	42470000 	.word	0x42470000
 800352c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003530:	4b88      	ldr	r3, [pc, #544]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ea      	bne.n	8003512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8097 	beq.w	8003678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354e:	4b81      	ldr	r3, [pc, #516]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10f      	bne.n	800357a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	4b7d      	ldr	r3, [pc, #500]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	4a7c      	ldr	r2, [pc, #496]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	@ 0x40
 800356a:	4b7a      	ldr	r3, [pc, #488]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357a:	4b77      	ldr	r3, [pc, #476]	@ (8003758 <HAL_RCC_OscConfig+0x474>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d118      	bne.n	80035b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003586:	4b74      	ldr	r3, [pc, #464]	@ (8003758 <HAL_RCC_OscConfig+0x474>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a73      	ldr	r2, [pc, #460]	@ (8003758 <HAL_RCC_OscConfig+0x474>)
 800358c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003592:	f7ff f835 	bl	8002600 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359a:	f7ff f831 	bl	8002600 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e10c      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003758 <HAL_RCC_OscConfig+0x474>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x2ea>
 80035c0:	4b64      	ldr	r3, [pc, #400]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c4:	4a63      	ldr	r2, [pc, #396]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80035cc:	e01c      	b.n	8003608 <HAL_RCC_OscConfig+0x324>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x30c>
 80035d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035da:	4a5e      	ldr	r2, [pc, #376]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ee:	e00b      	b.n	8003608 <HAL_RCC_OscConfig+0x324>
 80035f0:	4b58      	ldr	r3, [pc, #352]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f4:	4a57      	ldr	r2, [pc, #348]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80035fc:	4b55      	ldr	r3, [pc, #340]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003600:	4a54      	ldr	r2, [pc, #336]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003602:	f023 0304 	bic.w	r3, r3, #4
 8003606:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d015      	beq.n	800363c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7fe fff6 	bl	8002600 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fe fff2 	bl	8002600 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0cb      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	4b49      	ldr	r3, [pc, #292]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0ee      	beq.n	8003618 <HAL_RCC_OscConfig+0x334>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363c:	f7fe ffe0 	bl	8002600 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fe ffdc 	bl	8002600 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e0b5      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365a:	4b3e      	ldr	r3, [pc, #248]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1ee      	bne.n	8003644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366c:	4b39      	ldr	r3, [pc, #228]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	4a38      	ldr	r2, [pc, #224]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003676:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a1 	beq.w	80037c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003682:	4b34      	ldr	r3, [pc, #208]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b08      	cmp	r3, #8
 800368c:	d05c      	beq.n	8003748 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d141      	bne.n	800371a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003696:	4b31      	ldr	r3, [pc, #196]	@ (800375c <HAL_RCC_OscConfig+0x478>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fe ffb0 	bl	8002600 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a4:	f7fe ffac 	bl	8002600 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e087      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b6:	4b27      	ldr	r3, [pc, #156]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	019b      	lsls	r3, r3, #6
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	3b01      	subs	r3, #1
 80036dc:	041b      	lsls	r3, r3, #16
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	491b      	ldr	r1, [pc, #108]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ec:	4b1b      	ldr	r3, [pc, #108]	@ (800375c <HAL_RCC_OscConfig+0x478>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fe ff85 	bl	8002600 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fa:	f7fe ff81 	bl	8002600 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e05c      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370c:	4b11      	ldr	r3, [pc, #68]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x416>
 8003718:	e054      	b.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	4b10      	ldr	r3, [pc, #64]	@ (800375c <HAL_RCC_OscConfig+0x478>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7fe ff6e 	bl	8002600 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003728:	f7fe ff6a 	bl	8002600 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e045      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <HAL_RCC_OscConfig+0x470>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x444>
 8003746:	e03d      	b.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d107      	bne.n	8003760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e038      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
 8003754:	40023800 	.word	0x40023800
 8003758:	40007000 	.word	0x40007000
 800375c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003760:	4b1b      	ldr	r3, [pc, #108]	@ (80037d0 <HAL_RCC_OscConfig+0x4ec>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d028      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d121      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d11a      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003790:	4013      	ands	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003798:	4293      	cmp	r3, r2
 800379a:	d111      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	3b01      	subs	r3, #1
 80037aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800

080037d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0cc      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b68      	ldr	r3, [pc, #416]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d90c      	bls.n	8003810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b65      	ldr	r3, [pc, #404]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b63      	ldr	r3, [pc, #396]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0b8      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003828:	4b59      	ldr	r3, [pc, #356]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a58      	ldr	r2, [pc, #352]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003832:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003840:	4b53      	ldr	r3, [pc, #332]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a52      	ldr	r2, [pc, #328]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800384a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b50      	ldr	r3, [pc, #320]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	494d      	ldr	r1, [pc, #308]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d044      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b47      	ldr	r3, [pc, #284]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d119      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d003      	beq.n	8003892 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388e:	2b03      	cmp	r3, #3
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	4b3f      	ldr	r3, [pc, #252]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e06f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e067      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b37      	ldr	r3, [pc, #220]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4934      	ldr	r1, [pc, #208]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7fe fe9c 	bl	8002600 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fe fe98 	bl	8002600 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e04f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b25      	ldr	r3, [pc, #148]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d20c      	bcs.n	800391c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b22      	ldr	r3, [pc, #136]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b20      	ldr	r3, [pc, #128]	@ (800398c <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e032      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003928:	4b19      	ldr	r3, [pc, #100]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4916      	ldr	r1, [pc, #88]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003946:	4b12      	ldr	r3, [pc, #72]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	490e      	ldr	r1, [pc, #56]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800395a:	f000 f821 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800395e:	4602      	mov	r2, r0
 8003960:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	490a      	ldr	r1, [pc, #40]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	5ccb      	ldrb	r3, [r1, r3]
 800396e:	fa22 f303 	lsr.w	r3, r2, r3
 8003972:	4a09      	ldr	r2, [pc, #36]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003976:	4b09      	ldr	r3, [pc, #36]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fdfc 	bl	8002578 <HAL_InitTick>

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023c00 	.word	0x40023c00
 8003990:	40023800 	.word	0x40023800
 8003994:	08006d94 	.word	0x08006d94
 8003998:	20000004 	.word	0x20000004
 800399c:	20000008 	.word	0x20000008

080039a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a4:	b090      	sub	sp, #64	@ 0x40
 80039a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b8:	4b59      	ldr	r3, [pc, #356]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d00d      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x40>
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	f200 80a1 	bhi.w	8003b0c <HAL_RCC_GetSysClockFreq+0x16c>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x34>
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d003      	beq.n	80039da <HAL_RCC_GetSysClockFreq+0x3a>
 80039d2:	e09b      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b53      	ldr	r3, [pc, #332]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x184>)
 80039d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039d8:	e09b      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039da:	4b53      	ldr	r3, [pc, #332]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x188>)
 80039dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039de:	e098      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e0:	4b4f      	ldr	r3, [pc, #316]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ea:	4b4d      	ldr	r3, [pc, #308]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d028      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x180>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	099b      	lsrs	r3, r3, #6
 80039fc:	2200      	movs	r2, #0
 80039fe:	623b      	str	r3, [r7, #32]
 8003a00:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4b47      	ldr	r3, [pc, #284]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a0c:	fb03 f201 	mul.w	r2, r3, r1
 8003a10:	2300      	movs	r3, #0
 8003a12:	fb00 f303 	mul.w	r3, r0, r3
 8003a16:	4413      	add	r3, r2
 8003a18:	4a43      	ldr	r2, [pc, #268]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a1a:	fba0 1202 	umull	r1, r2, r0, r2
 8003a1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a20:	460a      	mov	r2, r1
 8003a22:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a26:	4413      	add	r3, r2
 8003a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	61fa      	str	r2, [r7, #28]
 8003a32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a3a:	f7fc fbcb 	bl	80001d4 <__aeabi_uldivmod>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4613      	mov	r3, r2
 8003a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a46:	e053      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a48:	4b35      	ldr	r3, [pc, #212]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	2200      	movs	r2, #0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	617a      	str	r2, [r7, #20]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a5a:	f04f 0b00 	mov.w	fp, #0
 8003a5e:	4652      	mov	r2, sl
 8003a60:	465b      	mov	r3, fp
 8003a62:	f04f 0000 	mov.w	r0, #0
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	0159      	lsls	r1, r3, #5
 8003a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a70:	0150      	lsls	r0, r2, #5
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	ebb2 080a 	subs.w	r8, r2, sl
 8003a7a:	eb63 090b 	sbc.w	r9, r3, fp
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a92:	ebb2 0408 	subs.w	r4, r2, r8
 8003a96:	eb63 0509 	sbc.w	r5, r3, r9
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	00eb      	lsls	r3, r5, #3
 8003aa4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aa8:	00e2      	lsls	r2, r4, #3
 8003aaa:	4614      	mov	r4, r2
 8003aac:	461d      	mov	r5, r3
 8003aae:	eb14 030a 	adds.w	r3, r4, sl
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	eb45 030b 	adc.w	r3, r5, fp
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	028b      	lsls	r3, r1, #10
 8003aca:	4621      	mov	r1, r4
 8003acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	028a      	lsls	r2, r1, #10
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ada:	2200      	movs	r2, #0
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	60fa      	str	r2, [r7, #12]
 8003ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ae4:	f7fc fb76 	bl	80001d4 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4613      	mov	r3, r2
 8003aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003af0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	0c1b      	lsrs	r3, r3, #16
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	3301      	adds	r3, #1
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003b00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b0a:	e002      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b0c:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3740      	adds	r7, #64	@ 0x40
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
 8003b24:	00f42400 	.word	0x00f42400
 8003b28:	017d7840 	.word	0x017d7840

08003b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e07b      	b.n	8003c36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d108      	bne.n	8003b58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b4e:	d009      	beq.n	8003b64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	61da      	str	r2, [r3, #28]
 8003b56:	e005      	b.n	8003b64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd f982 	bl	8000e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be8:	ea42 0103 	orr.w	r1, r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	f003 0104 	and.w	r1, r3, #4
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	f003 0210 	and.w	r2, r3, #16
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b088      	sub	sp, #32
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c4e:	f7fe fcd7 	bl	8002600 <HAL_GetTick>
 8003c52:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d001      	beq.n	8003c68 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003c64:	2302      	movs	r3, #2
 8003c66:	e12a      	b.n	8003ebe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_SPI_Transmit+0x36>
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e122      	b.n	8003ebe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_SPI_Transmit+0x48>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e11b      	b.n	8003ebe <HAL_SPI_Transmit+0x280>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2203      	movs	r2, #3
 8003c92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	88fa      	ldrh	r2, [r7, #6]
 8003ca6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	88fa      	ldrh	r2, [r7, #6]
 8003cac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cd4:	d10f      	bne.n	8003cf6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ce4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d00:	2b40      	cmp	r3, #64	@ 0x40
 8003d02:	d007      	beq.n	8003d14 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d1c:	d152      	bne.n	8003dc4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_SPI_Transmit+0xee>
 8003d26:	8b7b      	ldrh	r3, [r7, #26]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d145      	bne.n	8003db8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d30:	881a      	ldrh	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	1c9a      	adds	r2, r3, #2
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d50:	e032      	b.n	8003db8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d112      	bne.n	8003d86 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	881a      	ldrh	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d70:	1c9a      	adds	r2, r3, #2
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d84:	e018      	b.n	8003db8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d86:	f7fe fc3b 	bl	8002600 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d803      	bhi.n	8003d9e <HAL_SPI_Transmit+0x160>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d102      	bne.n	8003da4 <HAL_SPI_Transmit+0x166>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d109      	bne.n	8003db8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e082      	b.n	8003ebe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1c7      	bne.n	8003d52 <HAL_SPI_Transmit+0x114>
 8003dc2:	e053      	b.n	8003e6c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_SPI_Transmit+0x194>
 8003dcc:	8b7b      	ldrh	r3, [r7, #26]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d147      	bne.n	8003e62 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	330c      	adds	r3, #12
 8003ddc:	7812      	ldrb	r2, [r2, #0]
 8003dde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003df8:	e033      	b.n	8003e62 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d113      	bne.n	8003e30 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	7812      	ldrb	r2, [r2, #0]
 8003e14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e2e:	e018      	b.n	8003e62 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e30:	f7fe fbe6 	bl	8002600 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d803      	bhi.n	8003e48 <HAL_SPI_Transmit+0x20a>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	d102      	bne.n	8003e4e <HAL_SPI_Transmit+0x210>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e02d      	b.n	8003ebe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1c6      	bne.n	8003dfa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	6839      	ldr	r1, [r7, #0]
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fbd9 	bl	8004628 <SPI_EndRxTxTransaction>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b088      	sub	sp, #32
 8003eca:	af02      	add	r7, sp, #8
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d001      	beq.n	8003ee6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e104      	b.n	80040f0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eee:	d112      	bne.n	8003f16 <HAL_SPI_Receive+0x50>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10e      	bne.n	8003f16 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2204      	movs	r2, #4
 8003efc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f00:	88fa      	ldrh	r2, [r7, #6]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	4613      	mov	r3, r2
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f8f3 	bl	80040f8 <HAL_SPI_TransmitReceive>
 8003f12:	4603      	mov	r3, r0
 8003f14:	e0ec      	b.n	80040f0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f16:	f7fe fb73 	bl	8002600 <HAL_GetTick>
 8003f1a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_SPI_Receive+0x62>
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0e1      	b.n	80040f0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_SPI_Receive+0x74>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e0da      	b.n	80040f0 <HAL_SPI_Receive+0x22a>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2204      	movs	r2, #4
 8003f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	88fa      	ldrh	r2, [r7, #6]
 8003f5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	88fa      	ldrh	r2, [r7, #6]
 8003f60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f88:	d10f      	bne.n	8003faa <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003fa8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb4:	2b40      	cmp	r3, #64	@ 0x40
 8003fb6:	d007      	beq.n	8003fc8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fc6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d170      	bne.n	80040b2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003fd0:	e035      	b.n	800403e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d115      	bne.n	800400c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f103 020c 	add.w	r2, r3, #12
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fec:	7812      	ldrb	r2, [r2, #0]
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800400a:	e018      	b.n	800403e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800400c:	f7fe faf8 	bl	8002600 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d803      	bhi.n	8004024 <HAL_SPI_Receive+0x15e>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004022:	d102      	bne.n	800402a <HAL_SPI_Receive+0x164>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e058      	b.n	80040f0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1c4      	bne.n	8003fd2 <HAL_SPI_Receive+0x10c>
 8004048:	e038      	b.n	80040bc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b01      	cmp	r3, #1
 8004056:	d113      	bne.n	8004080 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004062:	b292      	uxth	r2, r2
 8004064:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	1c9a      	adds	r2, r3, #2
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800407e:	e018      	b.n	80040b2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004080:	f7fe fabe 	bl	8002600 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d803      	bhi.n	8004098 <HAL_SPI_Receive+0x1d2>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004096:	d102      	bne.n	800409e <HAL_SPI_Receive+0x1d8>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e01e      	b.n	80040f0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1c6      	bne.n	800404a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	6839      	ldr	r1, [r7, #0]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fa4b 	bl	800455c <SPI_EndRxTransaction>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80040ee:	2300      	movs	r3, #0
  }
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08a      	sub	sp, #40	@ 0x28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004106:	2301      	movs	r3, #1
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800410a:	f7fe fa79 	bl	8002600 <HAL_GetTick>
 800410e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004116:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800411e:	887b      	ldrh	r3, [r7, #2]
 8004120:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004122:	7ffb      	ldrb	r3, [r7, #31]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d00c      	beq.n	8004142 <HAL_SPI_TransmitReceive+0x4a>
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800412e:	d106      	bne.n	800413e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d102      	bne.n	800413e <HAL_SPI_TransmitReceive+0x46>
 8004138:	7ffb      	ldrb	r3, [r7, #31]
 800413a:	2b04      	cmp	r3, #4
 800413c:	d001      	beq.n	8004142 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800413e:	2302      	movs	r3, #2
 8004140:	e17f      	b.n	8004442 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x5c>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x5c>
 800414e:	887b      	ldrh	r3, [r7, #2]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e174      	b.n	8004442 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x6e>
 8004162:	2302      	movs	r3, #2
 8004164:	e16d      	b.n	8004442 <HAL_SPI_TransmitReceive+0x34a>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b04      	cmp	r3, #4
 8004178:	d003      	beq.n	8004182 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2205      	movs	r2, #5
 800417e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	887a      	ldrh	r2, [r7, #2]
 8004192:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	887a      	ldrh	r2, [r7, #2]
 8004198:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	887a      	ldrh	r2, [r7, #2]
 80041a4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	887a      	ldrh	r2, [r7, #2]
 80041aa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c2:	2b40      	cmp	r3, #64	@ 0x40
 80041c4:	d007      	beq.n	80041d6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041de:	d17e      	bne.n	80042de <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <HAL_SPI_TransmitReceive+0xf6>
 80041e8:	8afb      	ldrh	r3, [r7, #22]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d16c      	bne.n	80042c8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f2:	881a      	ldrh	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fe:	1c9a      	adds	r2, r3, #2
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004212:	e059      	b.n	80042c8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b02      	cmp	r3, #2
 8004220:	d11b      	bne.n	800425a <HAL_SPI_TransmitReceive+0x162>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d016      	beq.n	800425a <HAL_SPI_TransmitReceive+0x162>
 800422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422e:	2b01      	cmp	r3, #1
 8004230:	d113      	bne.n	800425a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	881a      	ldrh	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004242:	1c9a      	adds	r2, r3, #2
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	d119      	bne.n	800429c <HAL_SPI_TransmitReceive+0x1a4>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d014      	beq.n	800429c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427c:	b292      	uxth	r2, r2
 800427e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	1c9a      	adds	r2, r3, #2
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004298:	2301      	movs	r3, #1
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800429c:	f7fe f9b0 	bl	8002600 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d80d      	bhi.n	80042c8 <HAL_SPI_TransmitReceive+0x1d0>
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b2:	d009      	beq.n	80042c8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e0bc      	b.n	8004442 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1a0      	bne.n	8004214 <HAL_SPI_TransmitReceive+0x11c>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d19b      	bne.n	8004214 <HAL_SPI_TransmitReceive+0x11c>
 80042dc:	e082      	b.n	80043e4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_SPI_TransmitReceive+0x1f4>
 80042e6:	8afb      	ldrh	r3, [r7, #22]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d171      	bne.n	80043d0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	330c      	adds	r3, #12
 80042f6:	7812      	ldrb	r2, [r2, #0]
 80042f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004312:	e05d      	b.n	80043d0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b02      	cmp	r3, #2
 8004320:	d11c      	bne.n	800435c <HAL_SPI_TransmitReceive+0x264>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d017      	beq.n	800435c <HAL_SPI_TransmitReceive+0x264>
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	2b01      	cmp	r3, #1
 8004330:	d114      	bne.n	800435c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	330c      	adds	r3, #12
 800433c:	7812      	ldrb	r2, [r2, #0]
 800433e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b01      	cmp	r3, #1
 8004368:	d119      	bne.n	800439e <HAL_SPI_TransmitReceive+0x2a6>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d014      	beq.n	800439e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800439a:	2301      	movs	r3, #1
 800439c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800439e:	f7fe f92f 	bl	8002600 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d803      	bhi.n	80043b6 <HAL_SPI_TransmitReceive+0x2be>
 80043ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d102      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x2c4>
 80043b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e038      	b.n	8004442 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d19c      	bne.n	8004314 <HAL_SPI_TransmitReceive+0x21c>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d197      	bne.n	8004314 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043e4:	6a3a      	ldr	r2, [r7, #32]
 80043e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f91d 	bl	8004628 <SPI_EndRxTxTransaction>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e01d      	b.n	8004442 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10a      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004440:	2300      	movs	r3, #0
  }
}
 8004442:	4618      	mov	r0, r3
 8004444:	3728      	adds	r7, #40	@ 0x28
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800445c:	f7fe f8d0 	bl	8002600 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	4413      	add	r3, r2
 800446a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800446c:	f7fe f8c8 	bl	8002600 <HAL_GetTick>
 8004470:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004472:	4b39      	ldr	r3, [pc, #228]	@ (8004558 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	015b      	lsls	r3, r3, #5
 8004478:	0d1b      	lsrs	r3, r3, #20
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	fb02 f303 	mul.w	r3, r2, r3
 8004480:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004482:	e054      	b.n	800452e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d050      	beq.n	800452e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800448c:	f7fe f8b8 	bl	8002600 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	429a      	cmp	r2, r3
 800449a:	d902      	bls.n	80044a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d13d      	bne.n	800451e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044ba:	d111      	bne.n	80044e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044c4:	d004      	beq.n	80044d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ce:	d107      	bne.n	80044e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e8:	d10f      	bne.n	800450a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004508:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e017      	b.n	800454e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	3b01      	subs	r3, #1
 800452c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4013      	ands	r3, r2
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	429a      	cmp	r2, r3
 800453c:	bf0c      	ite	eq
 800453e:	2301      	moveq	r3, #1
 8004540:	2300      	movne	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	429a      	cmp	r2, r3
 800454a:	d19b      	bne.n	8004484 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000004 	.word	0x20000004

0800455c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004570:	d111      	bne.n	8004596 <SPI_EndRxTransaction+0x3a>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800457a:	d004      	beq.n	8004586 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004584:	d107      	bne.n	8004596 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004594:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800459e:	d12a      	bne.n	80045f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a8:	d012      	beq.n	80045d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2200      	movs	r2, #0
 80045b2:	2180      	movs	r1, #128	@ 0x80
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7ff ff49 	bl	800444c <SPI_WaitFlagStateUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02d      	beq.n	800461c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c4:	f043 0220 	orr.w	r2, r3, #32
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e026      	b.n	800461e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2200      	movs	r2, #0
 80045d8:	2101      	movs	r1, #1
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f7ff ff36 	bl	800444c <SPI_WaitFlagStateUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d01a      	beq.n	800461c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ea:	f043 0220 	orr.w	r2, r3, #32
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e013      	b.n	800461e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2200      	movs	r2, #0
 80045fe:	2101      	movs	r1, #1
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff ff23 	bl	800444c <SPI_WaitFlagStateUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d007      	beq.n	800461c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e000      	b.n	800461e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2201      	movs	r2, #1
 800463c:	2102      	movs	r1, #2
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff ff04 	bl	800444c <SPI_WaitFlagStateUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464e:	f043 0220 	orr.w	r2, r3, #32
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e032      	b.n	80046c0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800465a:	4b1b      	ldr	r3, [pc, #108]	@ (80046c8 <SPI_EndRxTxTransaction+0xa0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1b      	ldr	r2, [pc, #108]	@ (80046cc <SPI_EndRxTxTransaction+0xa4>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	0d5b      	lsrs	r3, r3, #21
 8004666:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004678:	d112      	bne.n	80046a0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2200      	movs	r2, #0
 8004682:	2180      	movs	r1, #128	@ 0x80
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f7ff fee1 	bl	800444c <SPI_WaitFlagStateUntilTimeout>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d016      	beq.n	80046be <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004694:	f043 0220 	orr.w	r2, r3, #32
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e00f      	b.n	80046c0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b6:	2b80      	cmp	r3, #128	@ 0x80
 80046b8:	d0f2      	beq.n	80046a0 <SPI_EndRxTxTransaction+0x78>
 80046ba:	e000      	b.n	80046be <SPI_EndRxTxTransaction+0x96>
        break;
 80046bc:	bf00      	nop
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20000004 	.word	0x20000004
 80046cc:	165e9f81 	.word	0x165e9f81

080046d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e041      	b.n	8004766 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc fd76 	bl	80011e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f000 fd6a 	bl	80051e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e041      	b.n	8004804 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d106      	bne.n	800479a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f839 	bl	800480c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2202      	movs	r2, #2
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3304      	adds	r3, #4
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f000 fd1b 	bl	80051e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	bf0c      	ite	eq
 8004844:	2301      	moveq	r3, #1
 8004846:	2300      	movne	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e022      	b.n	8004892 <HAL_TIM_PWM_Start_DMA+0x72>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b04      	cmp	r3, #4
 8004850:	d109      	bne.n	8004866 <HAL_TIM_PWM_Start_DMA+0x46>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	bf0c      	ite	eq
 800485e:	2301      	moveq	r3, #1
 8004860:	2300      	movne	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	e015      	b.n	8004892 <HAL_TIM_PWM_Start_DMA+0x72>
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b08      	cmp	r3, #8
 800486a:	d109      	bne.n	8004880 <HAL_TIM_PWM_Start_DMA+0x60>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	e008      	b.n	8004892 <HAL_TIM_PWM_Start_DMA+0x72>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	bf0c      	ite	eq
 800488c:	2301      	moveq	r3, #1
 800488e:	2300      	movne	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004896:	2302      	movs	r3, #2
 8004898:	e15d      	b.n	8004b56 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d109      	bne.n	80048b4 <HAL_TIM_PWM_Start_DMA+0x94>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	e022      	b.n	80048fa <HAL_TIM_PWM_Start_DMA+0xda>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d109      	bne.n	80048ce <HAL_TIM_PWM_Start_DMA+0xae>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	bf0c      	ite	eq
 80048c6:	2301      	moveq	r3, #1
 80048c8:	2300      	movne	r3, #0
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	e015      	b.n	80048fa <HAL_TIM_PWM_Start_DMA+0xda>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d109      	bne.n	80048e8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	bf0c      	ite	eq
 80048e0:	2301      	moveq	r3, #1
 80048e2:	2300      	movne	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	e008      	b.n	80048fa <HAL_TIM_PWM_Start_DMA+0xda>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	bf0c      	ite	eq
 80048f4:	2301      	moveq	r3, #1
 80048f6:	2300      	movne	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d024      	beq.n	8004948 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_TIM_PWM_Start_DMA+0xea>
 8004904:	887b      	ldrh	r3, [r7, #2]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e123      	b.n	8004b56 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d104      	bne.n	800491e <HAL_TIM_PWM_Start_DMA+0xfe>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800491c:	e016      	b.n	800494c <HAL_TIM_PWM_Start_DMA+0x12c>
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b04      	cmp	r3, #4
 8004922:	d104      	bne.n	800492e <HAL_TIM_PWM_Start_DMA+0x10e>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800492c:	e00e      	b.n	800494c <HAL_TIM_PWM_Start_DMA+0x12c>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b08      	cmp	r3, #8
 8004932:	d104      	bne.n	800493e <HAL_TIM_PWM_Start_DMA+0x11e>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800493c:	e006      	b.n	800494c <HAL_TIM_PWM_Start_DMA+0x12c>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2202      	movs	r2, #2
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004946:	e001      	b.n	800494c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e104      	b.n	8004b56 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b0c      	cmp	r3, #12
 8004950:	f200 80ae 	bhi.w	8004ab0 <HAL_TIM_PWM_Start_DMA+0x290>
 8004954:	a201      	add	r2, pc, #4	@ (adr r2, 800495c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	08004991 	.word	0x08004991
 8004960:	08004ab1 	.word	0x08004ab1
 8004964:	08004ab1 	.word	0x08004ab1
 8004968:	08004ab1 	.word	0x08004ab1
 800496c:	080049d9 	.word	0x080049d9
 8004970:	08004ab1 	.word	0x08004ab1
 8004974:	08004ab1 	.word	0x08004ab1
 8004978:	08004ab1 	.word	0x08004ab1
 800497c:	08004a21 	.word	0x08004a21
 8004980:	08004ab1 	.word	0x08004ab1
 8004984:	08004ab1 	.word	0x08004ab1
 8004988:	08004ab1 	.word	0x08004ab1
 800498c:	08004a69 	.word	0x08004a69
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	4a72      	ldr	r2, [pc, #456]	@ (8004b60 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004996:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	4a71      	ldr	r2, [pc, #452]	@ (8004b64 <HAL_TIM_PWM_Start_DMA+0x344>)
 800499e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	4a70      	ldr	r2, [pc, #448]	@ (8004b68 <HAL_TIM_PWM_Start_DMA+0x348>)
 80049a6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3334      	adds	r3, #52	@ 0x34
 80049b4:	461a      	mov	r2, r3
 80049b6:	887b      	ldrh	r3, [r7, #2]
 80049b8:	f7fe f812 	bl	80029e0 <HAL_DMA_Start_IT>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e0c7      	b.n	8004b56 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d4:	60da      	str	r2, [r3, #12]
      break;
 80049d6:	e06e      	b.n	8004ab6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	4a60      	ldr	r2, [pc, #384]	@ (8004b60 <HAL_TIM_PWM_Start_DMA+0x340>)
 80049de:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e4:	4a5f      	ldr	r2, [pc, #380]	@ (8004b64 <HAL_TIM_PWM_Start_DMA+0x344>)
 80049e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004b68 <HAL_TIM_PWM_Start_DMA+0x348>)
 80049ee:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3338      	adds	r3, #56	@ 0x38
 80049fc:	461a      	mov	r2, r3
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	f7fd ffee 	bl	80029e0 <HAL_DMA_Start_IT>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e0a3      	b.n	8004b56 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a1c:	60da      	str	r2, [r3, #12]
      break;
 8004a1e:	e04a      	b.n	8004ab6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	4a4e      	ldr	r2, [pc, #312]	@ (8004b60 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004a26:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2c:	4a4d      	ldr	r2, [pc, #308]	@ (8004b64 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004a2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a34:	4a4c      	ldr	r2, [pc, #304]	@ (8004b68 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004a36:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	333c      	adds	r3, #60	@ 0x3c
 8004a44:	461a      	mov	r2, r3
 8004a46:	887b      	ldrh	r3, [r7, #2]
 8004a48:	f7fd ffca 	bl	80029e0 <HAL_DMA_Start_IT>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e07f      	b.n	8004b56 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a64:	60da      	str	r2, [r3, #12]
      break;
 8004a66:	e026      	b.n	8004ab6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b60 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004a6e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a74:	4a3b      	ldr	r2, [pc, #236]	@ (8004b64 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004a76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	4a3a      	ldr	r2, [pc, #232]	@ (8004b68 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004a7e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3340      	adds	r3, #64	@ 0x40
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	887b      	ldrh	r3, [r7, #2]
 8004a90:	f7fd ffa6 	bl	80029e0 <HAL_DMA_Start_IT>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e05b      	b.n	8004b56 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004aac:	60da      	str	r2, [r3, #12]
      break;
 8004aae:	e002      	b.n	8004ab6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab4:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d14b      	bne.n	8004b54 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fe41 	bl	800574c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a27      	ldr	r2, [pc, #156]	@ (8004b6c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d107      	bne.n	8004ae4 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ae2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a20      	ldr	r2, [pc, #128]	@ (8004b6c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d018      	beq.n	8004b20 <HAL_TIM_PWM_Start_DMA+0x300>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af6:	d013      	beq.n	8004b20 <HAL_TIM_PWM_Start_DMA+0x300>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1c      	ldr	r2, [pc, #112]	@ (8004b70 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00e      	beq.n	8004b20 <HAL_TIM_PWM_Start_DMA+0x300>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1b      	ldr	r2, [pc, #108]	@ (8004b74 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d009      	beq.n	8004b20 <HAL_TIM_PWM_Start_DMA+0x300>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a19      	ldr	r2, [pc, #100]	@ (8004b78 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d004      	beq.n	8004b20 <HAL_TIM_PWM_Start_DMA+0x300>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a18      	ldr	r2, [pc, #96]	@ (8004b7c <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d111      	bne.n	8004b44 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b06      	cmp	r3, #6
 8004b30:	d010      	beq.n	8004b54 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0201 	orr.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b42:	e007      	b.n	8004b54 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	080050d9 	.word	0x080050d9
 8004b64:	08005181 	.word	0x08005181
 8004b68:	08005047 	.word	0x08005047
 8004b6c:	40010000 	.word	0x40010000
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800
 8004b78:	40000c00 	.word	0x40000c00
 8004b7c:	40014000 	.word	0x40014000

08004b80 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	d855      	bhi.n	8004c40 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004b94:	a201      	add	r2, pc, #4	@ (adr r2, 8004b9c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004c41 	.word	0x08004c41
 8004ba4:	08004c41 	.word	0x08004c41
 8004ba8:	08004c41 	.word	0x08004c41
 8004bac:	08004bed 	.word	0x08004bed
 8004bb0:	08004c41 	.word	0x08004c41
 8004bb4:	08004c41 	.word	0x08004c41
 8004bb8:	08004c41 	.word	0x08004c41
 8004bbc:	08004c09 	.word	0x08004c09
 8004bc0:	08004c41 	.word	0x08004c41
 8004bc4:	08004c41 	.word	0x08004c41
 8004bc8:	08004c41 	.word	0x08004c41
 8004bcc:	08004c25 	.word	0x08004c25
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004bde:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fd ff53 	bl	8002a90 <HAL_DMA_Abort_IT>
      break;
 8004bea:	e02c      	b.n	8004c46 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bfa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fd ff45 	bl	8002a90 <HAL_DMA_Abort_IT>
      break;
 8004c06:	e01e      	b.n	8004c46 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fd ff37 	bl	8002a90 <HAL_DMA_Abort_IT>
      break;
 8004c22:	e010      	b.n	8004c46 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c32:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fd ff29 	bl	8002a90 <HAL_DMA_Abort_IT>
      break;
 8004c3e:	e002      	b.n	8004c46 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
      break;
 8004c44:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d157      	bne.n	8004cfc <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2200      	movs	r2, #0
 8004c52:	6839      	ldr	r1, [r7, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fd79 	bl	800574c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8004d08 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d117      	bne.n	8004c94 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6a1a      	ldr	r2, [r3, #32]
 8004c6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10f      	bne.n	8004c94 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6a1a      	ldr	r2, [r3, #32]
 8004c7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d107      	bne.n	8004c94 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c92:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6a1a      	ldr	r2, [r3, #32]
 8004c9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10f      	bne.n	8004cc4 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6a1a      	ldr	r2, [r3, #32]
 8004caa:	f240 4344 	movw	r3, #1092	@ 0x444
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d107      	bne.n	8004cc4 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d104      	bne.n	8004cd4 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cd2:	e013      	b.n	8004cfc <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d104      	bne.n	8004ce4 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce2:	e00b      	b.n	8004cfc <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d104      	bne.n	8004cf4 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cf2:	e003      	b.n	8004cfc <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40010000 	.word	0x40010000

08004d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e0ae      	b.n	8004e88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b0c      	cmp	r3, #12
 8004d36:	f200 809f 	bhi.w	8004e78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d75 	.word	0x08004d75
 8004d44:	08004e79 	.word	0x08004e79
 8004d48:	08004e79 	.word	0x08004e79
 8004d4c:	08004e79 	.word	0x08004e79
 8004d50:	08004db5 	.word	0x08004db5
 8004d54:	08004e79 	.word	0x08004e79
 8004d58:	08004e79 	.word	0x08004e79
 8004d5c:	08004e79 	.word	0x08004e79
 8004d60:	08004df7 	.word	0x08004df7
 8004d64:	08004e79 	.word	0x08004e79
 8004d68:	08004e79 	.word	0x08004e79
 8004d6c:	08004e79 	.word	0x08004e79
 8004d70:	08004e37 	.word	0x08004e37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fac0 	bl	8005300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0208 	orr.w	r2, r2, #8
 8004d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0204 	bic.w	r2, r2, #4
 8004d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6999      	ldr	r1, [r3, #24]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	619a      	str	r2, [r3, #24]
      break;
 8004db2:	e064      	b.n	8004e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fb06 	bl	80053cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6999      	ldr	r1, [r3, #24]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	021a      	lsls	r2, r3, #8
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	619a      	str	r2, [r3, #24]
      break;
 8004df4:	e043      	b.n	8004e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fb51 	bl	80054a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0208 	orr.w	r2, r2, #8
 8004e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0204 	bic.w	r2, r2, #4
 8004e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69d9      	ldr	r1, [r3, #28]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	61da      	str	r2, [r3, #28]
      break;
 8004e34:	e023      	b.n	8004e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fb9b 	bl	8005578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69d9      	ldr	r1, [r3, #28]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	021a      	lsls	r2, r3, #8
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	61da      	str	r2, [r3, #28]
      break;
 8004e76:	e002      	b.n	8004e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_TIM_ConfigClockSource+0x1c>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e0b4      	b.n	8005016 <HAL_TIM_ConfigClockSource+0x186>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ed2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ee4:	d03e      	beq.n	8004f64 <HAL_TIM_ConfigClockSource+0xd4>
 8004ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eea:	f200 8087 	bhi.w	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef2:	f000 8086 	beq.w	8005002 <HAL_TIM_ConfigClockSource+0x172>
 8004ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004efa:	d87f      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004efc:	2b70      	cmp	r3, #112	@ 0x70
 8004efe:	d01a      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0xa6>
 8004f00:	2b70      	cmp	r3, #112	@ 0x70
 8004f02:	d87b      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004f04:	2b60      	cmp	r3, #96	@ 0x60
 8004f06:	d050      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x11a>
 8004f08:	2b60      	cmp	r3, #96	@ 0x60
 8004f0a:	d877      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004f0c:	2b50      	cmp	r3, #80	@ 0x50
 8004f0e:	d03c      	beq.n	8004f8a <HAL_TIM_ConfigClockSource+0xfa>
 8004f10:	2b50      	cmp	r3, #80	@ 0x50
 8004f12:	d873      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004f14:	2b40      	cmp	r3, #64	@ 0x40
 8004f16:	d058      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0x13a>
 8004f18:	2b40      	cmp	r3, #64	@ 0x40
 8004f1a:	d86f      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004f1c:	2b30      	cmp	r3, #48	@ 0x30
 8004f1e:	d064      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x15a>
 8004f20:	2b30      	cmp	r3, #48	@ 0x30
 8004f22:	d86b      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d060      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x15a>
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d867      	bhi.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d05c      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x15a>
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d05a      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x15a>
 8004f34:	e062      	b.n	8004ffc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f46:	f000 fbe1 	bl	800570c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	609a      	str	r2, [r3, #8]
      break;
 8004f62:	e04f      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f74:	f000 fbca 	bl	800570c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f86:	609a      	str	r2, [r3, #8]
      break;
 8004f88:	e03c      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f96:	461a      	mov	r2, r3
 8004f98:	f000 fb3e 	bl	8005618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2150      	movs	r1, #80	@ 0x50
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fb97 	bl	80056d6 <TIM_ITRx_SetConfig>
      break;
 8004fa8:	e02c      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f000 fb5d 	bl	8005676 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2160      	movs	r1, #96	@ 0x60
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fb87 	bl	80056d6 <TIM_ITRx_SetConfig>
      break;
 8004fc8:	e01c      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f000 fb1e 	bl	8005618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2140      	movs	r1, #64	@ 0x40
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fb77 	bl	80056d6 <TIM_ITRx_SetConfig>
      break;
 8004fe8:	e00c      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	f000 fb6e 	bl	80056d6 <TIM_ITRx_SetConfig>
      break;
 8004ffa:	e003      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8005000:	e000      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005002:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005052:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	429a      	cmp	r2, r3
 800505c:	d107      	bne.n	800506e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800506c:	e02a      	b.n	80050c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	429a      	cmp	r2, r3
 8005076:	d107      	bne.n	8005088 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2202      	movs	r2, #2
 800507c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005086:	e01d      	b.n	80050c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	429a      	cmp	r2, r3
 8005090:	d107      	bne.n	80050a2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2204      	movs	r2, #4
 8005096:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a0:	e010      	b.n	80050c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d107      	bne.n	80050bc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2208      	movs	r2, #8
 80050b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050ba:	e003      	b.n	80050c4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff ffb4 	bl	8005032 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	771a      	strb	r2, [r3, #28]
}
 80050d0:	bf00      	nop
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d10b      	bne.n	8005108 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d136      	bne.n	800516c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005106:	e031      	b.n	800516c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	429a      	cmp	r2, r3
 8005110:	d10b      	bne.n	800512a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2202      	movs	r2, #2
 8005116:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d125      	bne.n	800516c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005128:	e020      	b.n	800516c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d10b      	bne.n	800514c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2204      	movs	r2, #4
 8005138:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d114      	bne.n	800516c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800514a:	e00f      	b.n	800516c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	429a      	cmp	r2, r3
 8005154:	d10a      	bne.n	800516c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2208      	movs	r2, #8
 800515a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f7fb fd1b 	bl	8000ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]
}
 8005178:	bf00      	nop
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d103      	bne.n	80051a0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2201      	movs	r2, #1
 800519c:	771a      	strb	r2, [r3, #28]
 800519e:	e019      	b.n	80051d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d103      	bne.n	80051b2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2202      	movs	r2, #2
 80051ae:	771a      	strb	r2, [r3, #28]
 80051b0:	e010      	b.n	80051d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d103      	bne.n	80051c4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2204      	movs	r2, #4
 80051c0:	771a      	strb	r2, [r3, #28]
 80051c2:	e007      	b.n	80051d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d102      	bne.n	80051d4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2208      	movs	r2, #8
 80051d2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f7ff ff22 	bl	800501e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
}
 80051e0:	bf00      	nop
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3a      	ldr	r2, [pc, #232]	@ (80052e4 <TIM_Base_SetConfig+0xfc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00f      	beq.n	8005220 <TIM_Base_SetConfig+0x38>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005206:	d00b      	beq.n	8005220 <TIM_Base_SetConfig+0x38>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a37      	ldr	r2, [pc, #220]	@ (80052e8 <TIM_Base_SetConfig+0x100>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_Base_SetConfig+0x38>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a36      	ldr	r2, [pc, #216]	@ (80052ec <TIM_Base_SetConfig+0x104>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_Base_SetConfig+0x38>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a35      	ldr	r2, [pc, #212]	@ (80052f0 <TIM_Base_SetConfig+0x108>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d108      	bne.n	8005232 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2b      	ldr	r2, [pc, #172]	@ (80052e4 <TIM_Base_SetConfig+0xfc>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01b      	beq.n	8005272 <TIM_Base_SetConfig+0x8a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005240:	d017      	beq.n	8005272 <TIM_Base_SetConfig+0x8a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a28      	ldr	r2, [pc, #160]	@ (80052e8 <TIM_Base_SetConfig+0x100>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <TIM_Base_SetConfig+0x8a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a27      	ldr	r2, [pc, #156]	@ (80052ec <TIM_Base_SetConfig+0x104>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00f      	beq.n	8005272 <TIM_Base_SetConfig+0x8a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a26      	ldr	r2, [pc, #152]	@ (80052f0 <TIM_Base_SetConfig+0x108>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00b      	beq.n	8005272 <TIM_Base_SetConfig+0x8a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a25      	ldr	r2, [pc, #148]	@ (80052f4 <TIM_Base_SetConfig+0x10c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d007      	beq.n	8005272 <TIM_Base_SetConfig+0x8a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a24      	ldr	r2, [pc, #144]	@ (80052f8 <TIM_Base_SetConfig+0x110>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_Base_SetConfig+0x8a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a23      	ldr	r2, [pc, #140]	@ (80052fc <TIM_Base_SetConfig+0x114>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d108      	bne.n	8005284 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a0e      	ldr	r2, [pc, #56]	@ (80052e4 <TIM_Base_SetConfig+0xfc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d103      	bne.n	80052b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d105      	bne.n	80052d6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f023 0201 	bic.w	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	611a      	str	r2, [r3, #16]
  }
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40014400 	.word	0x40014400
 80052fc:	40014800 	.word	0x40014800

08005300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f023 0201 	bic.w	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0303 	bic.w	r3, r3, #3
 8005336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f023 0302 	bic.w	r3, r3, #2
 8005348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a1c      	ldr	r2, [pc, #112]	@ (80053c8 <TIM_OC1_SetConfig+0xc8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d10c      	bne.n	8005376 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f023 0308 	bic.w	r3, r3, #8
 8005362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f023 0304 	bic.w	r3, r3, #4
 8005374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a13      	ldr	r2, [pc, #76]	@ (80053c8 <TIM_OC1_SetConfig+0xc8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d111      	bne.n	80053a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800538c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	621a      	str	r2, [r3, #32]
}
 80053bc:	bf00      	nop
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	40010000 	.word	0x40010000

080053cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f023 0210 	bic.w	r2, r3, #16
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f023 0320 	bic.w	r3, r3, #32
 8005416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a1e      	ldr	r2, [pc, #120]	@ (80054a0 <TIM_OC2_SetConfig+0xd4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d10d      	bne.n	8005448 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005446:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a15      	ldr	r2, [pc, #84]	@ (80054a0 <TIM_OC2_SetConfig+0xd4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d113      	bne.n	8005478 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800545e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40010000 	.word	0x40010000

080054a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 0303 	bic.w	r3, r3, #3
 80054da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005574 <TIM_OC3_SetConfig+0xd0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d10d      	bne.n	800551e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800551c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a14      	ldr	r2, [pc, #80]	@ (8005574 <TIM_OC3_SetConfig+0xd0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d113      	bne.n	800554e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800552c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	621a      	str	r2, [r3, #32]
}
 8005568:	bf00      	nop
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	40010000 	.word	0x40010000

08005578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	021b      	lsls	r3, r3, #8
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	031b      	lsls	r3, r3, #12
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a10      	ldr	r2, [pc, #64]	@ (8005614 <TIM_OC4_SetConfig+0x9c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d109      	bne.n	80055ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	019b      	lsls	r3, r3, #6
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	621a      	str	r2, [r3, #32]
}
 8005606:	bf00      	nop
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40010000 	.word	0x40010000

08005618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 0201 	bic.w	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f023 030a 	bic.w	r3, r3, #10
 8005654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	621a      	str	r2, [r3, #32]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005676:	b480      	push	{r7}
 8005678:	b087      	sub	sp, #28
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	f023 0210 	bic.w	r2, r3, #16
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	031b      	lsls	r3, r3, #12
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	621a      	str	r2, [r3, #32]
}
 80056ca:	bf00      	nop
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b085      	sub	sp, #20
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f043 0307 	orr.w	r3, r3, #7
 80056f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	609a      	str	r2, [r3, #8]
}
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	021a      	lsls	r2, r3, #8
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	431a      	orrs	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4313      	orrs	r3, r2
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	4313      	orrs	r3, r2
 8005738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	609a      	str	r2, [r3, #8]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f003 031f 	and.w	r3, r3, #31
 800575e:	2201      	movs	r2, #1
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1a      	ldr	r2, [r3, #32]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	43db      	mvns	r3, r3
 800576e:	401a      	ands	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a1a      	ldr	r2, [r3, #32]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	fa01 f303 	lsl.w	r3, r1, r3
 8005784:	431a      	orrs	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e050      	b.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d018      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057fc:	d013      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a18      	ldr	r2, [pc, #96]	@ (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00e      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a16      	ldr	r2, [pc, #88]	@ (8005868 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d009      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a15      	ldr	r2, [pc, #84]	@ (800586c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d004      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a13      	ldr	r2, [pc, #76]	@ (8005870 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d10c      	bne.n	8005840 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800582c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	4313      	orrs	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40010000 	.word	0x40010000
 8005864:	40000400 	.word	0x40000400
 8005868:	40000800 	.word	0x40000800
 800586c:	40000c00 	.word	0x40000c00
 8005870:	40014000 	.word	0x40014000

08005874 <__itoa>:
 8005874:	1e93      	subs	r3, r2, #2
 8005876:	2b22      	cmp	r3, #34	@ 0x22
 8005878:	b510      	push	{r4, lr}
 800587a:	460c      	mov	r4, r1
 800587c:	d904      	bls.n	8005888 <__itoa+0x14>
 800587e:	2300      	movs	r3, #0
 8005880:	700b      	strb	r3, [r1, #0]
 8005882:	461c      	mov	r4, r3
 8005884:	4620      	mov	r0, r4
 8005886:	bd10      	pop	{r4, pc}
 8005888:	2a0a      	cmp	r2, #10
 800588a:	d109      	bne.n	80058a0 <__itoa+0x2c>
 800588c:	2800      	cmp	r0, #0
 800588e:	da07      	bge.n	80058a0 <__itoa+0x2c>
 8005890:	232d      	movs	r3, #45	@ 0x2d
 8005892:	700b      	strb	r3, [r1, #0]
 8005894:	4240      	negs	r0, r0
 8005896:	2101      	movs	r1, #1
 8005898:	4421      	add	r1, r4
 800589a:	f000 f805 	bl	80058a8 <__utoa>
 800589e:	e7f1      	b.n	8005884 <__itoa+0x10>
 80058a0:	2100      	movs	r1, #0
 80058a2:	e7f9      	b.n	8005898 <__itoa+0x24>

080058a4 <itoa>:
 80058a4:	f7ff bfe6 	b.w	8005874 <__itoa>

080058a8 <__utoa>:
 80058a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058aa:	4c1f      	ldr	r4, [pc, #124]	@ (8005928 <__utoa+0x80>)
 80058ac:	b08b      	sub	sp, #44	@ 0x2c
 80058ae:	4605      	mov	r5, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	466e      	mov	r6, sp
 80058b4:	f104 0c20 	add.w	ip, r4, #32
 80058b8:	6820      	ldr	r0, [r4, #0]
 80058ba:	6861      	ldr	r1, [r4, #4]
 80058bc:	4637      	mov	r7, r6
 80058be:	c703      	stmia	r7!, {r0, r1}
 80058c0:	3408      	adds	r4, #8
 80058c2:	4564      	cmp	r4, ip
 80058c4:	463e      	mov	r6, r7
 80058c6:	d1f7      	bne.n	80058b8 <__utoa+0x10>
 80058c8:	7921      	ldrb	r1, [r4, #4]
 80058ca:	7139      	strb	r1, [r7, #4]
 80058cc:	1e91      	subs	r1, r2, #2
 80058ce:	6820      	ldr	r0, [r4, #0]
 80058d0:	6038      	str	r0, [r7, #0]
 80058d2:	2922      	cmp	r1, #34	@ 0x22
 80058d4:	f04f 0100 	mov.w	r1, #0
 80058d8:	d904      	bls.n	80058e4 <__utoa+0x3c>
 80058da:	7019      	strb	r1, [r3, #0]
 80058dc:	460b      	mov	r3, r1
 80058de:	4618      	mov	r0, r3
 80058e0:	b00b      	add	sp, #44	@ 0x2c
 80058e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e4:	1e58      	subs	r0, r3, #1
 80058e6:	4684      	mov	ip, r0
 80058e8:	fbb5 f7f2 	udiv	r7, r5, r2
 80058ec:	fb02 5617 	mls	r6, r2, r7, r5
 80058f0:	3628      	adds	r6, #40	@ 0x28
 80058f2:	446e      	add	r6, sp
 80058f4:	460c      	mov	r4, r1
 80058f6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80058fa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80058fe:	462e      	mov	r6, r5
 8005900:	42b2      	cmp	r2, r6
 8005902:	f101 0101 	add.w	r1, r1, #1
 8005906:	463d      	mov	r5, r7
 8005908:	d9ee      	bls.n	80058e8 <__utoa+0x40>
 800590a:	2200      	movs	r2, #0
 800590c:	545a      	strb	r2, [r3, r1]
 800590e:	1919      	adds	r1, r3, r4
 8005910:	1aa5      	subs	r5, r4, r2
 8005912:	42aa      	cmp	r2, r5
 8005914:	dae3      	bge.n	80058de <__utoa+0x36>
 8005916:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800591a:	780e      	ldrb	r6, [r1, #0]
 800591c:	7006      	strb	r6, [r0, #0]
 800591e:	3201      	adds	r2, #1
 8005920:	f801 5901 	strb.w	r5, [r1], #-1
 8005924:	e7f4      	b.n	8005910 <__utoa+0x68>
 8005926:	bf00      	nop
 8005928:	08006db4 	.word	0x08006db4

0800592c <memset>:
 800592c:	4402      	add	r2, r0
 800592e:	4603      	mov	r3, r0
 8005930:	4293      	cmp	r3, r2
 8005932:	d100      	bne.n	8005936 <memset+0xa>
 8005934:	4770      	bx	lr
 8005936:	f803 1b01 	strb.w	r1, [r3], #1
 800593a:	e7f9      	b.n	8005930 <memset+0x4>

0800593c <__libc_init_array>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	4d0d      	ldr	r5, [pc, #52]	@ (8005974 <__libc_init_array+0x38>)
 8005940:	4c0d      	ldr	r4, [pc, #52]	@ (8005978 <__libc_init_array+0x3c>)
 8005942:	1b64      	subs	r4, r4, r5
 8005944:	10a4      	asrs	r4, r4, #2
 8005946:	2600      	movs	r6, #0
 8005948:	42a6      	cmp	r6, r4
 800594a:	d109      	bne.n	8005960 <__libc_init_array+0x24>
 800594c:	4d0b      	ldr	r5, [pc, #44]	@ (800597c <__libc_init_array+0x40>)
 800594e:	4c0c      	ldr	r4, [pc, #48]	@ (8005980 <__libc_init_array+0x44>)
 8005950:	f000 f818 	bl	8005984 <_init>
 8005954:	1b64      	subs	r4, r4, r5
 8005956:	10a4      	asrs	r4, r4, #2
 8005958:	2600      	movs	r6, #0
 800595a:	42a6      	cmp	r6, r4
 800595c:	d105      	bne.n	800596a <__libc_init_array+0x2e>
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	f855 3b04 	ldr.w	r3, [r5], #4
 8005964:	4798      	blx	r3
 8005966:	3601      	adds	r6, #1
 8005968:	e7ee      	b.n	8005948 <__libc_init_array+0xc>
 800596a:	f855 3b04 	ldr.w	r3, [r5], #4
 800596e:	4798      	blx	r3
 8005970:	3601      	adds	r6, #1
 8005972:	e7f2      	b.n	800595a <__libc_init_array+0x1e>
 8005974:	08006de4 	.word	0x08006de4
 8005978:	08006de4 	.word	0x08006de4
 800597c:	08006de4 	.word	0x08006de4
 8005980:	08006dec 	.word	0x08006dec

08005984 <_init>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	bf00      	nop
 8005988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598a:	bc08      	pop	{r3}
 800598c:	469e      	mov	lr, r3
 800598e:	4770      	bx	lr

08005990 <_fini>:
 8005990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005992:	bf00      	nop
 8005994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005996:	bc08      	pop	{r3}
 8005998:	469e      	mov	lr, r3
 800599a:	4770      	bx	lr
