
stm32-spidisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077e8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800797c  0800797c  0000897c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a34  08007a34  000090fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007a34  08007a34  00008a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a3c  08007a3c  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a3c  08007a3c  00008a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a40  08007a40  00008a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08007a44  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000145c  200000fc  08007b40  000090fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001558  08007b40  00009558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104ce  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ae  00000000  00000000  000195fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a80  00000000  00000000  0001d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185b9  00000000  00000000  0001e050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012df4  00000000  00000000  00036609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008844c  00000000  00000000  000493fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1849  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003890  00000000  00000000  000d188c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d511c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007964 	.word	0x08007964

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08007964 	.word	0x08007964

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	@ 0x28
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	4b29      	ldr	r3, [pc, #164]	@ (8000584 <MX_GPIO_Init+0xc0>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	4a28      	ldr	r2, [pc, #160]	@ (8000584 <MX_GPIO_Init+0xc0>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ea:	4b26      	ldr	r3, [pc, #152]	@ (8000584 <MX_GPIO_Init+0xc0>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	4b22      	ldr	r3, [pc, #136]	@ (8000584 <MX_GPIO_Init+0xc0>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	4a21      	ldr	r2, [pc, #132]	@ (8000584 <MX_GPIO_Init+0xc0>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000504:	6313      	str	r3, [r2, #48]	@ 0x30
 8000506:	4b1f      	ldr	r3, [pc, #124]	@ (8000584 <MX_GPIO_Init+0xc0>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <MX_GPIO_Init+0xc0>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	4a1a      	ldr	r2, [pc, #104]	@ (8000584 <MX_GPIO_Init+0xc0>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6313      	str	r3, [r2, #48]	@ 0x30
 8000522:	4b18      	ldr	r3, [pc, #96]	@ (8000584 <MX_GPIO_Init+0xc0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	4b14      	ldr	r3, [pc, #80]	@ (8000584 <MX_GPIO_Init+0xc0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	4a13      	ldr	r2, [pc, #76]	@ (8000584 <MX_GPIO_Init+0xc0>)
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	6313      	str	r3, [r2, #48]	@ 0x30
 800053e:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <MX_GPIO_Init+0xc0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(chip_select_GPIO_Port, chip_select_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2108      	movs	r1, #8
 800054e:	480e      	ldr	r0, [pc, #56]	@ (8000588 <MX_GPIO_Init+0xc4>)
 8000550:	f001 f8d2 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, register_select_Pin|reset_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2130      	movs	r1, #48	@ 0x30
 8000558:	480b      	ldr	r0, [pc, #44]	@ (8000588 <MX_GPIO_Init+0xc4>)
 800055a:	f001 f8cd 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : chip_select_Pin register_select_Pin reset_Pin */
  GPIO_InitStruct.Pin = chip_select_Pin|register_select_Pin|reset_Pin;
 800055e:	2338      	movs	r3, #56	@ 0x38
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	4804      	ldr	r0, [pc, #16]	@ (8000588 <MX_GPIO_Init+0xc4>)
 8000576:	f000 ff3b 	bl	80013f0 <HAL_GPIO_Init>

}
 800057a:	bf00      	nop
 800057c:	3728      	adds	r7, #40	@ 0x28
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800
 8000588:	40020400 	.word	0x40020400

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fd85 	bl	80010a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f857 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f7ff ff93 	bl	80004c4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800059e:	f006 fccb 	bl	8006f38 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80005a2:	f000 f8c3 	bl	800072c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(200);
 80005a6:	20c8      	movs	r0, #200	@ 0xc8
 80005a8:	f000 fdec 	bl	8001184 <HAL_Delay>
  initializeScreen();
 80005ac:	f000 fa48 	bl	8000a40 <initializeScreen>
  while (1)
  {
    /* USER CODE END WHILE */
	  drawRectangleFilled(300, 30, 120, 100, 0xFF00);
 80005b0:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2364      	movs	r3, #100	@ 0x64
 80005b8:	2278      	movs	r2, #120	@ 0x78
 80005ba:	211e      	movs	r1, #30
 80005bc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80005c0:	f000 fbc8 	bl	8000d54 <drawRectangleFilled>
	  HAL_Delay(100);
 80005c4:	2064      	movs	r0, #100	@ 0x64
 80005c6:	f000 fddd 	bl	8001184 <HAL_Delay>
	  drawRectangleOutline(200, 100, 40, 40, 0x13F4);
 80005ca:	f241 33f4 	movw	r3, #5108	@ 0x13f4
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2328      	movs	r3, #40	@ 0x28
 80005d2:	2228      	movs	r2, #40	@ 0x28
 80005d4:	2164      	movs	r1, #100	@ 0x64
 80005d6:	20c8      	movs	r0, #200	@ 0xc8
 80005d8:	f000 fbd8 	bl	8000d8c <drawRectangleOutline>
	  drawHLine(10, 10, 20, 0xFFFF);
 80005dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005e0:	2214      	movs	r2, #20
 80005e2:	210a      	movs	r1, #10
 80005e4:	200a      	movs	r0, #10
 80005e6:	f000 fb7e 	bl	8000ce6 <drawHLine>
	  drawVLine(10, 10, 20, 0xFF00);
 80005ea:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80005ee:	2214      	movs	r2, #20
 80005f0:	210a      	movs	r1, #10
 80005f2:	200a      	movs	r0, #10
 80005f4:	f000 fb92 	bl	8000d1c <drawVLine>
	  drawRectangleFilled(20, 20, 40, 55, 0xff00);
 80005f8:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2337      	movs	r3, #55	@ 0x37
 8000600:	2228      	movs	r2, #40	@ 0x28
 8000602:	2114      	movs	r1, #20
 8000604:	2014      	movs	r0, #20
 8000606:	f000 fba5 	bl	8000d54 <drawRectangleFilled>
	  drawEllipseFilled(100, 100, 20, 50, 0x00ff);
 800060a:	23ff      	movs	r3, #255	@ 0xff
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2332      	movs	r3, #50	@ 0x32
 8000610:	2214      	movs	r2, #20
 8000612:	2164      	movs	r1, #100	@ 0x64
 8000614:	2064      	movs	r0, #100	@ 0x64
 8000616:	f000 fc1e 	bl	8000e56 <drawEllipseFilled>
	  drawEllipseOutline(180, 70, 50, 30, 0xffff);
 800061a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	231e      	movs	r3, #30
 8000622:	2232      	movs	r2, #50	@ 0x32
 8000624:	2146      	movs	r1, #70	@ 0x46
 8000626:	20b4      	movs	r0, #180	@ 0xb4
 8000628:	f000 fc7c 	bl	8000f24 <drawEllipseOutline>
	  drawEllipseOutline(200, 200, 100, 100, 0xfc00);
 800062c:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2364      	movs	r3, #100	@ 0x64
 8000634:	2264      	movs	r2, #100	@ 0x64
 8000636:	21c8      	movs	r1, #200	@ 0xc8
 8000638:	20c8      	movs	r0, #200	@ 0xc8
 800063a:	f000 fc73 	bl	8000f24 <drawEllipseOutline>
	  HAL_Delay(100);
 800063e:	2064      	movs	r0, #100	@ 0x64
 8000640:	f000 fda0 	bl	8001184 <HAL_Delay>
	  drawRectangleFilled(300, 30, 120, 100, 0xFF00);
 8000644:	bf00      	nop
 8000646:	e7b3      	b.n	80005b0 <main+0x24>

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	@ 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f007 f958 	bl	800790c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a28      	ldr	r2, [pc, #160]	@ (8000718 <SystemClock_Config+0xd0>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b23      	ldr	r3, [pc, #140]	@ (800071c <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000694:	4a21      	ldr	r2, [pc, #132]	@ (800071c <SystemClock_Config+0xd4>)
 8000696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <SystemClock_Config+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006bc:	2319      	movs	r3, #25
 80006be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ca:	2307      	movs	r3, #7
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fa7c 	bl	8002bd0 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006de:	f000 f81f 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fcde 	bl	80030c0 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800070a:	f000 f809 	bl	8000720 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	@ 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <Error_Handler+0x8>

0800072c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000732:	4a19      	ldr	r2, [pc, #100]	@ (8000798 <MX_SPI1_Init+0x6c>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000738:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800073c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000746:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800074a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_SPI1_Init+0x68>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_SPI1_Init+0x68>)
 800075a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800075e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_SPI1_Init+0x68>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000774:	2200      	movs	r2, #0
 8000776:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_SPI1_Init+0x68>)
 800077a:	220a      	movs	r2, #10
 800077c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000780:	f002 fe56 	bl	8003430 <HAL_SPI_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800078a:	f7ff ffc9 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000118 	.word	0x20000118
 8000798:	40013000 	.word	0x40013000

0800079c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a19      	ldr	r2, [pc, #100]	@ (8000820 <HAL_SPI_MspInit+0x84>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d12b      	bne.n	8000816 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <HAL_SPI_MspInit+0x88>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	4a17      	ldr	r2, [pc, #92]	@ (8000824 <HAL_SPI_MspInit+0x88>)
 80007c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ce:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <HAL_SPI_MspInit+0x88>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <HAL_SPI_MspInit+0x88>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <HAL_SPI_MspInit+0x88>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <HAL_SPI_MspInit+0x88>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007f6:	23e0      	movs	r3, #224	@ 0xe0
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000806:	2305      	movs	r3, #5
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	@ (8000828 <HAL_SPI_MspInit+0x8c>)
 8000812:	f000 fded 	bl	80013f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	@ 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40013000 	.word	0x40013000
 8000824:	40023800 	.word	0x40023800
 8000828:	40020000 	.word	0x40020000

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	4a0f      	ldr	r2, [pc, #60]	@ (8000878 <HAL_MspInit+0x4c>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000840:	6453      	str	r3, [r2, #68]	@ 0x44
 8000842:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	4a08      	ldr	r2, [pc, #32]	@ (8000878 <HAL_MspInit+0x4c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	@ 0x40
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <MemManage_Handler+0x4>

08000894 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d2:	f000 fc37 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008e0:	4802      	ldr	r0, [pc, #8]	@ (80008ec <OTG_FS_IRQHandler+0x10>)
 80008e2:	f001 f866 	bl	80019b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000e54 	.word	0x20000e54

080008f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	@ (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <startTransaction>:


#define SCREEN_WIDTH 320
#define SCREEN_HEIGHT 480

void startTransaction() {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2108      	movs	r1, #8
 800091c:	4802      	ldr	r0, [pc, #8]	@ (8000928 <startTransaction+0x14>)
 800091e:	f000 feeb 	bl	80016f8 <HAL_GPIO_WritePin>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40020400 	.word	0x40020400

0800092c <endTransaction>:

void endTransaction() {
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2108      	movs	r1, #8
 8000934:	4802      	ldr	r0, [pc, #8]	@ (8000940 <endTransaction+0x14>)
 8000936:	f000 fedf 	bl	80016f8 <HAL_GPIO_WritePin>
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40020400 	.word	0x40020400

08000944 <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	if (data) {
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d005      	beq.n	8000960 <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2110      	movs	r1, #16
 8000958:	4806      	ldr	r0, [pc, #24]	@ (8000974 <dataOrRegister+0x30>)
 800095a:	f000 fecd 	bl	80016f8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
	}
}
 800095e:	e004      	b.n	800096a <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2110      	movs	r1, #16
 8000964:	4803      	ldr	r0, [pc, #12]	@ (8000974 <dataOrRegister+0x30>)
 8000966:	f000 fec7 	bl	80016f8 <HAL_GPIO_WritePin>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40020400 	.word	0x40020400

08000978 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8000986:	f7ff ffc5 	bl	8000914 <startTransaction>

	dataOrRegister(0);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff ffda 	bl	8000944 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8000990:	f107 010e 	add.w	r1, r7, #14
 8000994:	230a      	movs	r3, #10
 8000996:	2201      	movs	r2, #1
 8000998:	480a      	ldr	r0, [pc, #40]	@ (80009c4 <commandAndData+0x4c>)
 800099a:	f002 fdd2 	bl	8003542 <HAL_SPI_Transmit>

	if (size) {
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d009      	beq.n	80009b8 <commandAndData+0x40>
		dataOrRegister(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ffcd 	bl	8000944 <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	230a      	movs	r3, #10
 80009b0:	68b9      	ldr	r1, [r7, #8]
 80009b2:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <commandAndData+0x4c>)
 80009b4:	f002 fdc5 	bl	8003542 <HAL_SPI_Transmit>
	}

	endTransaction();
 80009b8:	f7ff ffb8 	bl	800092c <endTransaction>
}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000118 	.word	0x20000118

080009c8 <startCommand>:

void startCommand(uint16_t command) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 80009d2:	f7ff ff9f 	bl	8000914 <startTransaction>
	dataOrRegister(0);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff ffb4 	bl	8000944 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 80009dc:	1db9      	adds	r1, r7, #6
 80009de:	230a      	movs	r3, #10
 80009e0:	2201      	movs	r2, #1
 80009e2:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <startCommand+0x28>)
 80009e4:	f002 fdad 	bl	8003542 <HAL_SPI_Transmit>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000118 	.word	0x20000118

080009f4 <transmitRepeatedData>:

void transmitRepeatedData(uint16_t data16, unsigned int count) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	80fb      	strh	r3, [r7, #6]
	dataOrRegister(1);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff ff9f 	bl	8000944 <dataOrRegister>
	for (int i = 0; i < count; i++) {
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	e008      	b.n	8000a1e <transmitRepeatedData+0x2a>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
 8000a0c:	1db9      	adds	r1, r7, #6
 8000a0e:	230a      	movs	r3, #10
 8000a10:	2201      	movs	r2, #1
 8000a12:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <transmitRepeatedData+0x3c>)
 8000a14:	f002 fd95 	bl	8003542 <HAL_SPI_Transmit>
	for (int i = 0; i < count; i++) {
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d8f2      	bhi.n	8000a0c <transmitRepeatedData+0x18>
	}
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000118 	.word	0x20000118

08000a34 <endCommand>:
void transmitSingleData(uint16_t data16) {
	dataOrRegister(1);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
}

void endCommand() {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	endTransaction();
 8000a38:	f7ff ff78 	bl	800092c <endTransaction>
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <initializeScreen>:
	HAL_Delay(20);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
	HAL_Delay(100);
}

void initializeScreen() {
 8000a40:	b5b0      	push	{r4, r5, r7, lr}
 8000a42:	b0a0      	sub	sp, #128	@ 0x80
 8000a44:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f7ff ff94 	bl	8000978 <commandAndData>
	commandAndData(0x11, NULL, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2011      	movs	r0, #17
 8000a56:	f7ff ff8f 	bl	8000978 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 8000a5a:	2355      	movs	r3, #85	@ 0x55
 8000a5c:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
		commandAndData(0x3A, data, sizeof(data));
 8000a60:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a64:	2202      	movs	r2, #2
 8000a66:	4619      	mov	r1, r3
 8000a68:	203a      	movs	r0, #58	@ 0x3a
 8000a6a:	f7ff ff85 	bl	8000978 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 8000a6e:	4b5a      	ldr	r3, [pc, #360]	@ (8000bd8 <initializeScreen+0x198>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	67bb      	str	r3, [r7, #120]	@ 0x78
		commandAndData(0xC0, data, sizeof(data));
 8000a74:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000a78:	2204      	movs	r2, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	20c0      	movs	r0, #192	@ 0xc0
 8000a7e:	f7ff ff7b 	bl	8000978 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8000a82:	2345      	movs	r3, #69	@ 0x45
 8000a84:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		commandAndData(0xC1, data, sizeof(data));
 8000a8e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a92:	2204      	movs	r2, #4
 8000a94:	4619      	mov	r1, r3
 8000a96:	20c1      	movs	r0, #193	@ 0xc1
 8000a98:	f7ff ff6e 	bl	8000978 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 8000a9c:	2333      	movs	r3, #51	@ 0x33
 8000a9e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
		commandAndData(0xC2, data, sizeof(data));
 8000aa2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	20c2      	movs	r0, #194	@ 0xc2
 8000aac:	f7ff ff64 	bl	8000978 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8000ab6:	2328      	movs	r3, #40	@ 0x28
 8000ab8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		commandAndData(0xC5, data, sizeof(data));
 8000abc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	20c5      	movs	r0, #197	@ 0xc5
 8000ac6:	f7ff ff57 	bl	8000978 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 8000aca:	4b44      	ldr	r3, [pc, #272]	@ (8000bdc <initializeScreen+0x19c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xB1, data, sizeof(data));
 8000ad0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	20b1      	movs	r0, #177	@ 0xb1
 8000ada:	f7ff ff4d 	bl	8000978 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 8000ade:	2302      	movs	r3, #2
 8000ae0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		commandAndData(0xB4, data, sizeof(data));
 8000ae4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ae8:	2202      	movs	r2, #2
 8000aea:	4619      	mov	r1, r3
 8000aec:	20b4      	movs	r0, #180	@ 0xb4
 8000aee:	f7ff ff43 	bl	8000978 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 8000af2:	4a3b      	ldr	r2, [pc, #236]	@ (8000be0 <initializeScreen+0x1a0>)
 8000af4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000afc:	6018      	str	r0, [r3, #0]
 8000afe:	3304      	adds	r3, #4
 8000b00:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 8000b02:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b06:	2206      	movs	r2, #6
 8000b08:	4619      	mov	r1, r3
 8000b0a:	20b6      	movs	r0, #182	@ 0xb6
 8000b0c:	f7ff ff34 	bl	8000978 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 8000b10:	4b34      	ldr	r3, [pc, #208]	@ (8000be4 <initializeScreen+0x1a4>)
 8000b12:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000b16:	461d      	mov	r5, r3
 8000b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b20:	c407      	stmia	r4!, {r0, r1, r2}
 8000b22:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8000b24:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b28:	221e      	movs	r2, #30
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	20e0      	movs	r0, #224	@ 0xe0
 8000b2e:	f7ff ff23 	bl	8000978 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 8000b32:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <initializeScreen+0x1a8>)
 8000b34:	f107 041c 	add.w	r4, r7, #28
 8000b38:	461d      	mov	r5, r3
 8000b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b42:	c407      	stmia	r4!, {r0, r1, r2}
 8000b44:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	221e      	movs	r2, #30
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	20e1      	movs	r0, #225	@ 0xe1
 8000b50:	f7ff ff12 	bl	8000978 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8000b54:	2300      	movs	r3, #0
 8000b56:	833b      	strh	r3, [r7, #24]
 8000b58:	2322      	movs	r3, #34	@ 0x22
 8000b5a:	837b      	strh	r3, [r7, #26]
		commandAndData(0xB6, data, sizeof(data));
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	2204      	movs	r2, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	20b6      	movs	r0, #182	@ 0xb6
 8000b66:	f7ff ff07 	bl	8000978 <commandAndData>
	}
	{
		uint16_t data[] = {0x0008};
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	82bb      	strh	r3, [r7, #20]
		commandAndData(0x36, data, sizeof(data));
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	2202      	movs	r2, #2
 8000b74:	4619      	mov	r1, r3
 8000b76:	2036      	movs	r0, #54	@ 0x36
 8000b78:	f7ff fefe 	bl	8000978 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_WIDTH - 1) >> 8), (uint16_t)((SCREEN_WIDTH - 1) & 0xFF)};
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bec <initializeScreen+0x1ac>)
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b86:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2A, data, sizeof(data));
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2208      	movs	r2, #8
 8000b90:	4619      	mov	r1, r3
 8000b92:	202a      	movs	r0, #42	@ 0x2a
 8000b94:	f7ff fef0 	bl	8000978 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_HEIGHT - 1) >> 8), (uint16_t)((SCREEN_HEIGHT - 1) & 0xFF)};
 8000b98:	4a15      	ldr	r2, [pc, #84]	@ (8000bf0 <initializeScreen+0x1b0>)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ba0:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2B, data, sizeof(data));
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	4619      	mov	r1, r3
 8000baa:	202b      	movs	r0, #43	@ 0x2b
 8000bac:	f7ff fee4 	bl	8000978 <commandAndData>
	}
	{
		startCommand(0x2C);
 8000bb0:	202c      	movs	r0, #44	@ 0x2c
 8000bb2:	f7ff ff09 	bl	80009c8 <startCommand>
		transmitRepeatedData(0x0000, 320 * 480);
 8000bb6:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff ff1a 	bl	80009f4 <transmitRepeatedData>
		endCommand();
 8000bc0:	f7ff ff38 	bl	8000a34 <endCommand>
	}
	{
		commandAndData(0x29, NULL, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2029      	movs	r0, #41	@ 0x29
 8000bca:	f7ff fed5 	bl	8000978 <commandAndData>
	}
}
 8000bce:	bf00      	nop
 8000bd0:	3780      	adds	r7, #128	@ 0x80
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	0800797c 	.word	0x0800797c
 8000bdc:	08007980 	.word	0x08007980
 8000be0:	08007984 	.word	0x08007984
 8000be4:	0800798c 	.word	0x0800798c
 8000be8:	080079ac 	.word	0x080079ac
 8000bec:	080079cc 	.word	0x080079cc
 8000bf0:	080079d4 	.word	0x080079d4

08000bf4 <modifySpace>:

/**
 * Final pixel in row/column is one less than x2/y2
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	4611      	mov	r1, r2
 8000c00:	461a      	mov	r2, r3
 8000c02:	4623      	mov	r3, r4
 8000c04:	80fb      	strh	r3, [r7, #6]
 8000c06:	4603      	mov	r3, r0
 8000c08:	80bb      	strh	r3, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	807b      	strh	r3, [r7, #2]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	803b      	strh	r3, [r7, #0]
	{
		y2 -= 1;
 8000c12:	883b      	ldrh	r3, [r7, #0]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	803b      	strh	r3, [r7, #0]
		uint16_t data[] = {y1 >> 8, y1 & 0xFF, y2 >> 8, y2 & 0xFF};
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	823b      	strh	r3, [r7, #16]
 8000c20:	88bb      	ldrh	r3, [r7, #4]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	827b      	strh	r3, [r7, #18]
 8000c28:	883b      	ldrh	r3, [r7, #0]
 8000c2a:	0a1b      	lsrs	r3, r3, #8
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	82bb      	strh	r3, [r7, #20]
 8000c30:	883b      	ldrh	r3, [r7, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	2208      	movs	r2, #8
 8000c3e:	4619      	mov	r1, r3
 8000c40:	202a      	movs	r0, #42	@ 0x2a
 8000c42:	f7ff fe99 	bl	8000978 <commandAndData>
	}
	{
		x2 -= 1;
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	807b      	strh	r3, [r7, #2]
		uint16_t data[] = {x1 >> 8, x1 & 0xFF, x2 >> 8, x2 && 0xFF};
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	813b      	strh	r3, [r7, #8]
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	817b      	strh	r3, [r7, #10]
 8000c5c:	887b      	ldrh	r3, [r7, #2]
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	81bb      	strh	r3, [r7, #12]
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bf14      	ite	ne
 8000c6a:	2301      	movne	r3, #1
 8000c6c:	2300      	moveq	r3, #0
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	2208      	movs	r2, #8
 8000c78:	4619      	mov	r1, r3
 8000c7a:	202b      	movs	r0, #43	@ 0x2b
 8000c7c:	f7ff fe7c 	bl	8000978 <commandAndData>
	}
}
 8000c80:	bf00      	nop
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd90      	pop	{r4, r7, pc}

08000c88 <fillArea>:

/**
 * must be used in ocnjunction with modifySpace()
 */

void fillArea(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color) {
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4608      	mov	r0, r1
 8000c92:	4611      	mov	r1, r2
 8000c94:	461a      	mov	r2, r3
 8000c96:	4623      	mov	r3, r4
 8000c98:	80fb      	strh	r3, [r7, #6]
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80bb      	strh	r3, [r7, #4]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	807b      	strh	r3, [r7, #2]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	803b      	strh	r3, [r7, #0]
	modifySpace(x1, y1, x1 + length, y1 + height);
 8000ca6:	88fa      	ldrh	r2, [r7, #6]
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	4413      	add	r3, r2
 8000cac:	b29c      	uxth	r4, r3
 8000cae:	88ba      	ldrh	r2, [r7, #4]
 8000cb0:	883b      	ldrh	r3, [r7, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	88b9      	ldrh	r1, [r7, #4]
 8000cb8:	88f8      	ldrh	r0, [r7, #6]
 8000cba:	4622      	mov	r2, r4
 8000cbc:	f7ff ff9a 	bl	8000bf4 <modifySpace>
	startCommand(0x2C);
 8000cc0:	202c      	movs	r0, #44	@ 0x2c
 8000cc2:	f7ff fe81 	bl	80009c8 <startCommand>
	transmitRepeatedData(color, length * height);
 8000cc6:	887b      	ldrh	r3, [r7, #2]
 8000cc8:	883a      	ldrh	r2, [r7, #0]
 8000cca:	fb02 f303 	mul.w	r3, r2, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	8b3b      	ldrh	r3, [r7, #24]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fe8d 	bl	80009f4 <transmitRepeatedData>
	endCommand();
 8000cda:	f7ff feab 	bl	8000a34 <endCommand>
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}

08000ce6 <drawHLine>:

void drawHLine(uint16_t x1, uint16_t y1, uint16_t length, uint16_t color) {
 8000ce6:	b590      	push	{r4, r7, lr}
 8000ce8:	b085      	sub	sp, #20
 8000cea:	af02      	add	r7, sp, #8
 8000cec:	4604      	mov	r4, r0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4623      	mov	r3, r4
 8000cf6:	80fb      	strh	r3, [r7, #6]
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	80bb      	strh	r3, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
 8000d00:	4613      	mov	r3, r2
 8000d02:	803b      	strh	r3, [r7, #0]
	fillArea(x1, y1, length, 1, color);
 8000d04:	887a      	ldrh	r2, [r7, #2]
 8000d06:	88b9      	ldrh	r1, [r7, #4]
 8000d08:	88f8      	ldrh	r0, [r7, #6]
 8000d0a:	883b      	ldrh	r3, [r7, #0]
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	f7ff ffba 	bl	8000c88 <fillArea>
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd90      	pop	{r4, r7, pc}

08000d1c <drawVLine>:

void drawVLine(uint16_t x1, uint16_t y1, uint16_t height, uint16_t color) {
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	4604      	mov	r4, r0
 8000d24:	4608      	mov	r0, r1
 8000d26:	4611      	mov	r1, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	80fb      	strh	r3, [r7, #6]
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80bb      	strh	r3, [r7, #4]
 8000d32:	460b      	mov	r3, r1
 8000d34:	807b      	strh	r3, [r7, #2]
 8000d36:	4613      	mov	r3, r2
 8000d38:	803b      	strh	r3, [r7, #0]
	fillArea(x1, y1, 1, height, color);
 8000d3a:	887a      	ldrh	r2, [r7, #2]
 8000d3c:	88b9      	ldrh	r1, [r7, #4]
 8000d3e:	88f8      	ldrh	r0, [r7, #6]
 8000d40:	883b      	ldrh	r3, [r7, #0]
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	4613      	mov	r3, r2
 8000d46:	2201      	movs	r2, #1
 8000d48:	f7ff ff9e 	bl	8000c88 <fillArea>
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}

08000d54 <drawRectangleFilled>:
	endCommand();

}


void drawRectangleFilled(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color) {
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	4611      	mov	r1, r2
 8000d60:	461a      	mov	r2, r3
 8000d62:	4623      	mov	r3, r4
 8000d64:	80fb      	strh	r3, [r7, #6]
 8000d66:	4603      	mov	r3, r0
 8000d68:	80bb      	strh	r3, [r7, #4]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	807b      	strh	r3, [r7, #2]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	803b      	strh	r3, [r7, #0]
	fillArea(x1, y1, length, height, color);
 8000d72:	883c      	ldrh	r4, [r7, #0]
 8000d74:	887a      	ldrh	r2, [r7, #2]
 8000d76:	88b9      	ldrh	r1, [r7, #4]
 8000d78:	88f8      	ldrh	r0, [r7, #6]
 8000d7a:	8b3b      	ldrh	r3, [r7, #24]
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	4623      	mov	r3, r4
 8000d80:	f7ff ff82 	bl	8000c88 <fillArea>
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd90      	pop	{r4, r7, pc}

08000d8c <drawRectangleOutline>:

void drawRectangleOutline(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color) {
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4604      	mov	r4, r0
 8000d94:	4608      	mov	r0, r1
 8000d96:	4611      	mov	r1, r2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	80fb      	strh	r3, [r7, #6]
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80bb      	strh	r3, [r7, #4]
 8000da2:	460b      	mov	r3, r1
 8000da4:	807b      	strh	r3, [r7, #2]
 8000da6:	4613      	mov	r3, r2
 8000da8:	803b      	strh	r3, [r7, #0]
	drawVLine(x1, y1, height, color);
 8000daa:	8b3b      	ldrh	r3, [r7, #24]
 8000dac:	883a      	ldrh	r2, [r7, #0]
 8000dae:	88b9      	ldrh	r1, [r7, #4]
 8000db0:	88f8      	ldrh	r0, [r7, #6]
 8000db2:	f7ff ffb3 	bl	8000d1c <drawVLine>
	drawVLine(x1 + length, y1, height, color);
 8000db6:	88fa      	ldrh	r2, [r7, #6]
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	4413      	add	r3, r2
 8000dbc:	b298      	uxth	r0, r3
 8000dbe:	8b3b      	ldrh	r3, [r7, #24]
 8000dc0:	883a      	ldrh	r2, [r7, #0]
 8000dc2:	88b9      	ldrh	r1, [r7, #4]
 8000dc4:	f7ff ffaa 	bl	8000d1c <drawVLine>
	drawHLine(x1, y1, length, color);
 8000dc8:	8b3b      	ldrh	r3, [r7, #24]
 8000dca:	887a      	ldrh	r2, [r7, #2]
 8000dcc:	88b9      	ldrh	r1, [r7, #4]
 8000dce:	88f8      	ldrh	r0, [r7, #6]
 8000dd0:	f7ff ff89 	bl	8000ce6 <drawHLine>
	drawHLine(x1, y1 + height, length, color);
 8000dd4:	88ba      	ldrh	r2, [r7, #4]
 8000dd6:	883b      	ldrh	r3, [r7, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b299      	uxth	r1, r3
 8000ddc:	8b3b      	ldrh	r3, [r7, #24]
 8000dde:	887a      	ldrh	r2, [r7, #2]
 8000de0:	88f8      	ldrh	r0, [r7, #6]
 8000de2:	f7ff ff80 	bl	8000ce6 <drawHLine>
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd90      	pop	{r4, r7, pc}

08000dee <checkPointInEllipse>:
 * @param ry radius y
 * @param x x coord to check
 * @param y y coord to check
 * @return number that represents where your point lies (< 1 then in ellipse, > 1 then outside ellipse)
 */
int checkPointInEllipse(int cx, int cy, int rx, int ry, int x, int y) {
 8000dee:	b480      	push	{r7}
 8000df0:	b089      	sub	sp, #36	@ 0x24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	603b      	str	r3, [r7, #0]
	int diffx = cx - x;
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	61fb      	str	r3, [r7, #28]
	int diffy = cy - y;
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	61bb      	str	r3, [r7, #24]
	int result = (diffy*diffy*rx*rx) + (diffx*diffx*ry*ry) - (rx*rx*ry*ry);
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fb03 f303 	mul.w	r3, r3, r3
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	fb02 f303 	mul.w	r3, r2, r3
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	fb03 f202 	mul.w	r2, r3, r2
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fb03 f303 	mul.w	r3, r3, r3
 8000e24:	6839      	ldr	r1, [r7, #0]
 8000e26:	fb01 f303 	mul.w	r3, r1, r3
 8000e2a:	6839      	ldr	r1, [r7, #0]
 8000e2c:	fb01 f303 	mul.w	r3, r1, r3
 8000e30:	441a      	add	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	fb03 f303 	mul.w	r3, r3, r3
 8000e38:	6839      	ldr	r1, [r7, #0]
 8000e3a:	fb01 f303 	mul.w	r3, r1, r3
 8000e3e:	6839      	ldr	r1, [r7, #0]
 8000e40:	fb01 f303 	mul.w	r3, r1, r3
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	617b      	str	r3, [r7, #20]
	return result;
 8000e48:	697b      	ldr	r3, [r7, #20]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	@ 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <drawEllipseFilled>:

/**
 * draws ellipse at given coordinates based on parameters
 */
void drawEllipseFilled(uint16_t x, uint16_t y, uint16_t length, uint16_t height, uint16_t color) {
 8000e56:	b590      	push	{r4, r7, lr}
 8000e58:	b08f      	sub	sp, #60	@ 0x3c
 8000e5a:	af02      	add	r7, sp, #8
 8000e5c:	4604      	mov	r4, r0
 8000e5e:	4608      	mov	r0, r1
 8000e60:	4611      	mov	r1, r2
 8000e62:	461a      	mov	r2, r3
 8000e64:	4623      	mov	r3, r4
 8000e66:	80fb      	strh	r3, [r7, #6]
 8000e68:	4603      	mov	r3, r0
 8000e6a:	80bb      	strh	r3, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]
 8000e70:	4613      	mov	r3, r2
 8000e72:	803b      	strh	r3, [r7, #0]
	int rx = length / 2, ry = height / 2;
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	085b      	lsrs	r3, r3, #1
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e7c:	883b      	ldrh	r3, [r7, #0]
 8000e7e:	085b      	lsrs	r3, r3, #1
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	623b      	str	r3, [r7, #32]
	int startx = x - (length/2), endx = x + (length/2), starty = y - (height/2), endy = y + (height/2);
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	0852      	lsrs	r2, r2, #1
 8000e8a:	b292      	uxth	r2, r2
 8000e8c:	1a9b      	subs	r3, r3, r2
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	0852      	lsrs	r2, r2, #1
 8000e96:	b292      	uxth	r2, r2
 8000e98:	4413      	add	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	88bb      	ldrh	r3, [r7, #4]
 8000e9e:	883a      	ldrh	r2, [r7, #0]
 8000ea0:	0852      	lsrs	r2, r2, #1
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	1a9b      	subs	r3, r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	88bb      	ldrh	r3, [r7, #4]
 8000eaa:	883a      	ldrh	r2, [r7, #0]
 8000eac:	0852      	lsrs	r2, r2, #1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
	for (int i = startx; i < endx; i++) {
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000eb8:	e02b      	b.n	8000f12 <drawEllipseFilled+0xbc>
		for (int j = starty; j < endy; j++) {
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ebe:	e021      	b.n	8000f04 <drawEllipseFilled+0xae>
			if (checkPointInEllipse(x, y, rx, ry, i, j) < 0) {
 8000ec0:	88f8      	ldrh	r0, [r7, #6]
 8000ec2:	88b9      	ldrh	r1, [r7, #4]
 8000ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ed0:	f7ff ff8d 	bl	8000dee <checkPointInEllipse>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	da11      	bge.n	8000efe <drawEllipseFilled+0xa8>
				int sliceHeight = height - (2 * (j - starty));
 8000eda:	883a      	ldrh	r2, [r7, #0]
 8000edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	60fb      	str	r3, [r7, #12]
				drawVLine(i, j, sliceHeight, color);
 8000ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eea:	b298      	uxth	r0, r3
 8000eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eee:	b299      	uxth	r1, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000ef8:	f7ff ff10 	bl	8000d1c <drawVLine>
				break;
 8000efc:	e006      	b.n	8000f0c <drawEllipseFilled+0xb6>
		for (int j = starty; j < endy; j++) {
 8000efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f00:	3301      	adds	r3, #1
 8000f02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbd9      	blt.n	8000ec0 <drawEllipseFilled+0x6a>
	for (int i = startx; i < endx; i++) {
 8000f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f0e:	3301      	adds	r3, #1
 8000f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	dbcf      	blt.n	8000eba <drawEllipseFilled+0x64>
			}
		}
	}
}
 8000f1a:	bf00      	nop
 8000f1c:	bf00      	nop
 8000f1e:	3734      	adds	r7, #52	@ 0x34
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}

08000f24 <drawEllipseOutline>:

void drawEllipseOutline(uint16_t x, uint16_t y, uint16_t length, uint16_t height, uint16_t color) {
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b08d      	sub	sp, #52	@ 0x34
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	4611      	mov	r1, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	4623      	mov	r3, r4
 8000f34:	80fb      	strh	r3, [r7, #6]
 8000f36:	4603      	mov	r3, r0
 8000f38:	80bb      	strh	r3, [r7, #4]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	807b      	strh	r3, [r7, #2]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	803b      	strh	r3, [r7, #0]
	int rx = length / 2, ry = height / 2;
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	085b      	lsrs	r3, r3, #1
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	085b      	lsrs	r3, r3, #1
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	617b      	str	r3, [r7, #20]
	int startx = x - (length/2), starty = y - (height/2);
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	887a      	ldrh	r2, [r7, #2]
 8000f56:	0852      	lsrs	r2, r2, #1
 8000f58:	b292      	uxth	r2, r2
 8000f5a:	1a9b      	subs	r3, r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	883a      	ldrh	r2, [r7, #0]
 8000f62:	0852      	lsrs	r2, r2, #1
 8000f64:	b292      	uxth	r2, r2
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
	int lastending = y;
 8000f6a:	88bb      	ldrh	r3, [r7, #4]
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = startx; i < x; i++) {
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	623b      	str	r3, [r7, #32]
 8000f72:	e061      	b.n	8001038 <drawEllipseOutline+0x114>
		for (int j = lastending; j > starty - 1; j--) {
 8000f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	e057      	b.n	800102a <drawEllipseOutline+0x106>
			if (checkPointInEllipse(x, y, rx, ry, i, j) > 0) {
 8000f7a:	88f8      	ldrh	r0, [r7, #6]
 8000f7c:	88b9      	ldrh	r1, [r7, #4]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	f7ff ff30 	bl	8000dee <checkPointInEllipse>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dd47      	ble.n	8001024 <drawEllipseOutline+0x100>
				int lineheight = lastending - j + 1;
 8000f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
				drawVLine(i, j, lineheight, color); //2nd quadrant
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	b298      	uxth	r0, r3
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000fac:	f7ff feb6 	bl	8000d1c <drawVLine>
				drawVLine(i, y + y - j - lineheight, lineheight, color); //3rd quadrant
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	b298      	uxth	r0, r3
 8000fb4:	88bb      	ldrh	r3, [r7, #4]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	b299      	uxth	r1, r3
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000fd0:	f7ff fea4 	bl	8000d1c <drawVLine>
				drawVLine(x + x - i, j, lineheight, color); //1st quadrant
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	b298      	uxth	r0, r3
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000fec:	f7ff fe96 	bl	8000d1c <drawVLine>
				drawVLine(x + x - i, y + y - j - lineheight, lineheight, color); //4th quadrant
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	b298      	uxth	r0, r3
 8000ffe:	88bb      	ldrh	r3, [r7, #4]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b29a      	uxth	r2, r3
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	b29b      	uxth	r3, r3
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	b29a      	uxth	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	b29b      	uxth	r3, r3
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	b299      	uxth	r1, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	b29a      	uxth	r2, r3
 8001018:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800101a:	f7ff fe7f 	bl	8000d1c <drawVLine>
				lastending = j;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
				break;
 8001022:	e006      	b.n	8001032 <drawEllipseOutline+0x10e>
		for (int j = lastending; j > starty - 1; j--) {
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	3b01      	subs	r3, #1
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	429a      	cmp	r2, r3
 8001030:	dda3      	ble.n	8000f7a <drawEllipseOutline+0x56>
	for (int i = startx; i < x; i++) {
 8001032:	6a3b      	ldr	r3, [r7, #32]
 8001034:	3301      	adds	r3, #1
 8001036:	623b      	str	r3, [r7, #32]
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	6a3a      	ldr	r2, [r7, #32]
 800103c:	429a      	cmp	r2, r3
 800103e:	db99      	blt.n	8000f74 <drawEllipseOutline+0x50>
			}
		}
	}
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	372c      	adds	r7, #44	@ 0x2c
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}
	...

0800104c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800104c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001084 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001050:	f7ff fc4e 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001054:	480c      	ldr	r0, [pc, #48]	@ (8001088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001056:	490d      	ldr	r1, [pc, #52]	@ (800108c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001058:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800106c:	4c0a      	ldr	r4, [pc, #40]	@ (8001098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107a:	f006 fc4f 	bl	800791c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107e:	f7ff fa85 	bl	800058c <main>
  bx  lr    
 8001082:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001084:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001090:	08007a44 	.word	0x08007a44
  ldr r2, =_sbss
 8001094:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001098:	20001558 	.word	0x20001558

0800109c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC_IRQHandler>
	...

080010a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a4:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <HAL_Init+0x40>)
 80010aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b0:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <HAL_Init+0x40>)
 80010b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <HAL_Init+0x40>)
 80010c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f94f 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	200f      	movs	r0, #15
 80010d0:	f000 f808 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff fbaa 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023c00 	.word	0x40023c00

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f967 	bl	80013d6 <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f92f 	bl	8001382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	@ (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000000 	.word	0x20000000
 800113c:	20000008 	.word	0x20000008
 8001140:	20000004 	.word	0x20000004

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008
 8001168:	20000170 	.word	0x20000170

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000170 	.word	0x20000170

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffde 	bl	800116c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	@ (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	@ (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	@ (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	@ 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	@ 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	@ (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001394:	f7ff ff3e 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f7ff ff8e 	bl	80012c0 <NVIC_EncodePriority>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff5d 	bl	800126c <__NVIC_SetPriority>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff31 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffa2 	bl	8001328 <SysTick_Config>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	@ 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	e159      	b.n	80016c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800140c:	2201      	movs	r2, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	429a      	cmp	r2, r3
 8001426:	f040 8148 	bne.w	80016ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d005      	beq.n	8001442 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143e:	2b02      	cmp	r3, #2
 8001440:	d130      	bne.n	80014a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001478:	2201      	movs	r2, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	f003 0201 	and.w	r2, r3, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d017      	beq.n	80014e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d123      	bne.n	8001534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	69b9      	ldr	r1, [r7, #24]
 8001530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0203 	and.w	r2, r3, #3
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80a2 	beq.w	80016ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b57      	ldr	r3, [pc, #348]	@ (80016d8 <HAL_GPIO_Init+0x2e8>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	4a56      	ldr	r2, [pc, #344]	@ (80016d8 <HAL_GPIO_Init+0x2e8>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001584:	6453      	str	r3, [r2, #68]	@ 0x44
 8001586:	4b54      	ldr	r3, [pc, #336]	@ (80016d8 <HAL_GPIO_Init+0x2e8>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001592:	4a52      	ldr	r2, [pc, #328]	@ (80016dc <HAL_GPIO_Init+0x2ec>)
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	089b      	lsrs	r3, r3, #2
 8001598:	3302      	adds	r3, #2
 800159a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	220f      	movs	r2, #15
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a49      	ldr	r2, [pc, #292]	@ (80016e0 <HAL_GPIO_Init+0x2f0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d019      	beq.n	80015f2 <HAL_GPIO_Init+0x202>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a48      	ldr	r2, [pc, #288]	@ (80016e4 <HAL_GPIO_Init+0x2f4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0x1fe>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a47      	ldr	r2, [pc, #284]	@ (80016e8 <HAL_GPIO_Init+0x2f8>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d00d      	beq.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a46      	ldr	r2, [pc, #280]	@ (80016ec <HAL_GPIO_Init+0x2fc>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d007      	beq.n	80015e6 <HAL_GPIO_Init+0x1f6>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a45      	ldr	r2, [pc, #276]	@ (80016f0 <HAL_GPIO_Init+0x300>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d101      	bne.n	80015e2 <HAL_GPIO_Init+0x1f2>
 80015de:	2304      	movs	r3, #4
 80015e0:	e008      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015e2:	2307      	movs	r3, #7
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015e6:	2303      	movs	r3, #3
 80015e8:	e004      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_GPIO_Init+0x204>
 80015f2:	2300      	movs	r3, #0
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	f002 0203 	and.w	r2, r2, #3
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	4093      	lsls	r3, r2
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001604:	4935      	ldr	r1, [pc, #212]	@ (80016dc <HAL_GPIO_Init+0x2ec>)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001612:	4b38      	ldr	r3, [pc, #224]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001636:	4a2f      	ldr	r2, [pc, #188]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800163c:	4b2d      	ldr	r3, [pc, #180]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001660:	4a24      	ldr	r2, [pc, #144]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001666:	4b23      	ldr	r3, [pc, #140]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800168a:	4a1a      	ldr	r2, [pc, #104]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b4:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <HAL_GPIO_Init+0x304>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3301      	adds	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	f67f aea2 	bls.w	800140c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3724      	adds	r7, #36	@ 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40013800 	.word	0x40013800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40013c00 	.word	0x40013c00

080016f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001708:	787b      	ldrb	r3, [r7, #1]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001714:	e003      	b.n	800171e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001716:	887b      	ldrh	r3, [r7, #2]
 8001718:	041a      	lsls	r2, r3, #16
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	619a      	str	r2, [r3, #24]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af02      	add	r7, sp, #8
 8001730:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e101      	b.n	8001940 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d106      	bne.n	800175c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f005 fdce 	bl	80072f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2203      	movs	r2, #3
 8001760:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800176a:	d102      	bne.n	8001772 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f002 fa1b 	bl	8003bb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7c1a      	ldrb	r2, [r3, #16]
 8001784:	f88d 2000 	strb.w	r2, [sp]
 8001788:	3304      	adds	r3, #4
 800178a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800178c:	f002 f8fa 	bl	8003984 <USB_CoreInit>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2202      	movs	r2, #2
 800179a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e0ce      	b.n	8001940 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 fa13 	bl	8003bd4 <USB_SetCurrentMode>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0bf      	b.n	8001940 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e04a      	b.n	800185c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	3315      	adds	r3, #21
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	3314      	adds	r3, #20
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	b298      	uxth	r0, r3
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	332e      	adds	r3, #46	@ 0x2e
 8001802:	4602      	mov	r2, r0
 8001804:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001806:	7bfa      	ldrb	r2, [r7, #15]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	3318      	adds	r3, #24
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	331c      	adds	r3, #28
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800182e:	7bfa      	ldrb	r2, [r7, #15]
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	3320      	adds	r3, #32
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001842:	7bfa      	ldrb	r2, [r7, #15]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	3324      	adds	r3, #36	@ 0x24
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	3301      	adds	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	791b      	ldrb	r3, [r3, #4]
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	429a      	cmp	r2, r3
 8001864:	d3af      	bcc.n	80017c6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	e044      	b.n	80018f6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001898:	7bfa      	ldrb	r2, [r7, #15]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	3301      	adds	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	791b      	ldrb	r3, [r3, #4]
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3b5      	bcc.n	800186c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7c1a      	ldrb	r2, [r3, #16]
 8001908:	f88d 2000 	strb.w	r2, [sp]
 800190c:	3304      	adds	r3, #4
 800190e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001910:	f002 f9ac 	bl	8003c6c <USB_DevInit>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2202      	movs	r2, #2
 800191e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00c      	b.n	8001940 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f003 f9f6 	bl	8004d2a <USB_DevDisconnect>

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_PCD_Start+0x1c>
 8001960:	2302      	movs	r3, #2
 8001962:	e022      	b.n	80019aa <HAL_PCD_Start+0x62>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001974:	2b00      	cmp	r3, #0
 8001976:	d009      	beq.n	800198c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001984:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f002 f8fd 	bl	8003b90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f003 f9a4 	bl	8004ce8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019b2:	b590      	push	{r4, r7, lr}
 80019b4:	b08d      	sub	sp, #52	@ 0x34
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 fa62 	bl	8004e92 <USB_GetMode>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f040 848c 	bne.w	80022ee <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 f9c6 	bl	8004d6c <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8482 	beq.w	80022ec <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 f9b3 	bl	8004d6c <USB_ReadInterrupts>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d107      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f002 0202 	and.w	r2, r2, #2
 8001a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 f9a1 	bl	8004d6c <USB_ReadInterrupts>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b10      	cmp	r3, #16
 8001a32:	d161      	bne.n	8001af8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699a      	ldr	r2, [r3, #24]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0210 	bic.w	r2, r2, #16
 8001a42:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	f003 020f 	and.w	r2, r3, #15
 8001a50:	4613      	mov	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	3304      	adds	r3, #4
 8001a62:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	0c5b      	lsrs	r3, r3, #17
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d124      	bne.n	8001aba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d035      	beq.n	8001ae8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	6a38      	ldr	r0, [r7, #32]
 8001a90:	f002 ffd8 	bl	8004a44 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	091b      	lsrs	r3, r3, #4
 8001a9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aa0:	441a      	add	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab2:	441a      	add	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	615a      	str	r2, [r3, #20]
 8001ab8:	e016      	b.n	8001ae8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	0c5b      	lsrs	r3, r3, #17
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d110      	bne.n	8001ae8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001acc:	2208      	movs	r2, #8
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6a38      	ldr	r0, [r7, #32]
 8001ad2:	f002 ffb7 	bl	8004a44 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ae2:	441a      	add	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0210 	orr.w	r2, r2, #16
 8001af6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 f935 	bl	8004d6c <USB_ReadInterrupts>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001b0c:	f040 80a7 	bne.w	8001c5e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 f93a 	bl	8004d92 <USB_ReadDevAllOutEpInterrupt>
 8001b1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001b20:	e099      	b.n	8001c56 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 808e 	beq.w	8001c4a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 f95e 	bl	8004dfa <USB_ReadDevOutEPInterrupt>
 8001b3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00c      	beq.n	8001b64 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	015a      	lsls	r2, r3, #5
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	4413      	add	r3, r2
 8001b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b56:	461a      	mov	r2, r3
 8001b58:	2301      	movs	r3, #1
 8001b5a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 fea4 	bl	80028ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00c      	beq.n	8001b88 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	015a      	lsls	r2, r3, #5
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	4413      	add	r3, r2
 8001b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 ff7a 	bl	8002a7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2310      	movs	r3, #16
 8001ba2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d030      	beq.n	8001c10 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb6:	2b80      	cmp	r3, #128	@ 0x80
 8001bb8:	d109      	bne.n	8001bce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bcc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	3304      	adds	r3, #4
 8001be2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	78db      	ldrb	r3, [r3, #3]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d108      	bne.n	8001bfe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f005 fc79 	bl	80074f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d008      	beq.n	8001c2c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c26:	461a      	mov	r2, r3
 8001c28:	2320      	movs	r3, #32
 8001c2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c42:	461a      	mov	r2, r3
 8001c44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c48:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c52:	085b      	lsrs	r3, r3, #1
 8001c54:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f47f af62 	bne.w	8001b22 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 f882 	bl	8004d6c <USB_ReadInterrupts>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001c72:	f040 80db 	bne.w	8001e2c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 f8a3 	bl	8004dc6 <USB_ReadDevAllInEpInterrupt>
 8001c80:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001c86:	e0cd      	b.n	8001e24 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80c2 	beq.w	8001e18 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 f8c9 	bl	8004e36 <USB_ReadDevInEPInterrupt>
 8001ca4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d057      	beq.n	8001d60 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69f9      	ldr	r1, [r7, #28]
 8001ccc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	799b      	ldrb	r3, [r3, #6]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d132      	bne.n	8001d54 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3320      	adds	r3, #32
 8001cfe:	6819      	ldr	r1, [r3, #0]
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4403      	add	r3, r0
 8001d0e:	331c      	adds	r3, #28
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4419      	add	r1, r3
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4403      	add	r3, r0
 8001d22:	3320      	adds	r3, #32
 8001d24:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d113      	bne.n	8001d54 <HAL_PCD_IRQHandler+0x3a2>
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	3324      	adds	r3, #36	@ 0x24
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d108      	bne.n	8001d54 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2101      	movs	r1, #1
 8001d50:	f003 f8d0 	bl	8004ef4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f005 fb4d 	bl	80073fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d008      	beq.n	8001d7c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d76:	461a      	mov	r2, r3
 8001d78:	2308      	movs	r3, #8
 8001d7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d008      	beq.n	8001d98 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d92:	461a      	mov	r2, r3
 8001d94:	2310      	movs	r3, #16
 8001d96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d008      	beq.n	8001db4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dae:	461a      	mov	r2, r3
 8001db0:	2340      	movs	r3, #64	@ 0x40
 8001db2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d023      	beq.n	8001e06 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001dbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dc0:	6a38      	ldr	r0, [r7, #32]
 8001dc2:	f002 f8b7 	bl	8003f34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	3310      	adds	r3, #16
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	78db      	ldrb	r3, [r3, #3]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d108      	bne.n	8001df4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2200      	movs	r2, #0
 8001de6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	4619      	mov	r1, r3
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f005 fb90 	bl	8007514 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e00:	461a      	mov	r2, r3
 8001e02:	2302      	movs	r3, #2
 8001e04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fcbd 	bl	8002792 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e20:	085b      	lsrs	r3, r3, #1
 8001e22:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f47f af2e 	bne.w	8001c88 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f002 ff9b 	bl	8004d6c <USB_ReadInterrupts>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e40:	d122      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d108      	bne.n	8001e72 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fea4 	bl	8002bb8 <HAL_PCDEx_LPM_Callback>
 8001e70:	e002      	b.n	8001e78 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f005 fb2e 	bl	80074d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f002 ff6d 	bl	8004d6c <USB_ReadInterrupts>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e9c:	d112      	bne.n	8001ec4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f005 faea 	bl	8007488 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001ec2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f002 ff4f 	bl	8004d6c <USB_ReadInterrupts>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ed8:	f040 80b7 	bne.w	800204a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001eea:	f023 0301 	bic.w	r3, r3, #1
 8001eee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2110      	movs	r1, #16
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 f81c 	bl	8003f34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f00:	e046      	b.n	8001f90 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f14:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f26:	0151      	lsls	r1, r2, #5
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	440a      	add	r2, r1
 8001f2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001f30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f42:	461a      	mov	r2, r3
 8001f44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f48:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f5a:	0151      	lsls	r1, r2, #5
 8001f5c:	69fa      	ldr	r2, [r7, #28]
 8001f5e:	440a      	add	r2, r1
 8001f60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001f64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f7a:	0151      	lsls	r1, r2, #5
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	440a      	add	r2, r1
 8001f80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001f84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f88:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	791b      	ldrb	r3, [r3, #4]
 8001f94:	461a      	mov	r2, r3
 8001f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d3b2      	bcc.n	8001f02 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001faa:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001fae:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7bdb      	ldrb	r3, [r3, #15]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d016      	beq.n	8001fe6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fc8:	f043 030b 	orr.w	r3, r3, #11
 8001fcc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fde:	f043 030b 	orr.w	r3, r3, #11
 8001fe2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fe4:	e015      	b.n	8002012 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ff4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ff8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001ffc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800200c:	f043 030b 	orr.w	r3, r3, #11
 8002010:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002020:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002024:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002034:	461a      	mov	r2, r3
 8002036:	f002 ff5d 	bl	8004ef4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002048:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f002 fe8c 	bl	8004d6c <USB_ReadInterrupts>
 8002054:	4603      	mov	r3, r0
 8002056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800205a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800205e:	d123      	bne.n	80020a8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f002 ff22 	bl	8004eae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f001 ffd9 	bl	8004026 <USB_GetDevSpeed>
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681c      	ldr	r4, [r3, #0]
 8002080:	f001 f9ca 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8002084:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800208a:	461a      	mov	r2, r3
 800208c:	4620      	mov	r0, r4
 800208e:	f001 fcdd 	bl	8003a4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f005 f9d9 	bl	800744a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80020a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f002 fe5d 	bl	8004d6c <USB_ReadInterrupts>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d10a      	bne.n	80020d2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f005 f9b6 	bl	800742e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f002 0208 	and.w	r2, r2, #8
 80020d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f002 fe48 	bl	8004d6c <USB_ReadInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020e2:	2b80      	cmp	r3, #128	@ 0x80
 80020e4:	d123      	bne.n	800212e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020f2:	2301      	movs	r3, #1
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f6:	e014      	b.n	8002122 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4619      	mov	r1, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fb0a 	bl	8002730 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	3301      	adds	r3, #1
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	791b      	ldrb	r3, [r3, #4]
 8002126:	461a      	mov	r2, r3
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	4293      	cmp	r3, r2
 800212c:	d3e4      	bcc.n	80020f8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f002 fe1a 	bl	8004d6c <USB_ReadInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800213e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002142:	d13c      	bne.n	80021be <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002144:	2301      	movs	r3, #1
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
 8002148:	e02b      	b.n	80021a2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	4413      	add	r3, r2
 8002152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	3318      	adds	r3, #24
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d115      	bne.n	800219c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002170:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002172:	2b00      	cmp	r3, #0
 8002174:	da12      	bge.n	800219c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3317      	adds	r3, #23
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	b2db      	uxtb	r3, r3
 800218e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4619      	mov	r1, r3
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 faca 	bl	8002730 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	3301      	adds	r3, #1
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	791b      	ldrb	r3, [r3, #4]
 80021a6:	461a      	mov	r2, r3
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d3cd      	bcc.n	800214a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80021bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f002 fdd2 	bl	8004d6c <USB_ReadInterrupts>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021d2:	d156      	bne.n	8002282 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021d4:	2301      	movs	r3, #1
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d8:	e045      	b.n	8002266 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d12e      	bne.n	8002260 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002202:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002204:	2b00      	cmp	r3, #0
 8002206:	da2b      	bge.n	8002260 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002214:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002218:	429a      	cmp	r2, r3
 800221a:	d121      	bne.n	8002260 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10a      	bne.n	8002260 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002258:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800225c:	6053      	str	r3, [r2, #4]
            break;
 800225e:	e008      	b.n	8002272 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	3301      	adds	r3, #1
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	791b      	ldrb	r3, [r3, #4]
 800226a:	461a      	mov	r2, r3
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	4293      	cmp	r3, r2
 8002270:	d3b3      	bcc.n	80021da <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fd70 	bl	8004d6c <USB_ReadInterrupts>
 800228c:	4603      	mov	r3, r0
 800228e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002296:	d10a      	bne.n	80022ae <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f005 f94d 	bl	8007538 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80022ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f002 fd5a 	bl	8004d6c <USB_ReadInterrupts>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d115      	bne.n	80022ee <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f005 f93d 	bl	8007554 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	e000      	b.n	80022ee <HAL_PCD_IRQHandler+0x93c>
      return;
 80022ec:	bf00      	nop
    }
  }
}
 80022ee:	3734      	adds	r7, #52	@ 0x34
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd90      	pop	{r4, r7, pc}

080022f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_PCD_SetAddress+0x1a>
 800230a:	2302      	movs	r3, #2
 800230c:	e012      	b.n	8002334 <HAL_PCD_SetAddress+0x40>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f002 fcb9 	bl	8004c9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	4608      	mov	r0, r1
 8002346:	4611      	mov	r1, r2
 8002348:	461a      	mov	r2, r3
 800234a:	4603      	mov	r3, r0
 800234c:	70fb      	strb	r3, [r7, #3]
 800234e:	460b      	mov	r3, r1
 8002350:	803b      	strh	r3, [r7, #0]
 8002352:	4613      	mov	r3, r2
 8002354:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800235a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800235e:	2b00      	cmp	r3, #0
 8002360:	da0f      	bge.n	8002382 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	f003 020f 	and.w	r2, r3, #15
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	3310      	adds	r3, #16
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	3304      	adds	r3, #4
 8002378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	705a      	strb	r2, [r3, #1]
 8002380:	e00f      	b.n	80023a2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	f003 020f 	and.w	r2, r3, #15
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	3304      	adds	r3, #4
 800239a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80023ae:	883b      	ldrh	r3, [r7, #0]
 80023b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	78ba      	ldrb	r2, [r7, #2]
 80023bc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	785b      	ldrb	r3, [r3, #1]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023d0:	78bb      	ldrb	r3, [r7, #2]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d102      	bne.n	80023dc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_PCD_EP_Open+0xae>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e00e      	b.n	8002408 <HAL_PCD_EP_Open+0xcc>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68f9      	ldr	r1, [r7, #12]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f001 fe39 	bl	8004070 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002406:	7afb      	ldrb	r3, [r7, #11]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800241c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002420:	2b00      	cmp	r3, #0
 8002422:	da0f      	bge.n	8002444 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 020f 	and.w	r2, r3, #15
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	3310      	adds	r3, #16
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	3304      	adds	r3, #4
 800243a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	705a      	strb	r2, [r3, #1]
 8002442:	e00f      	b.n	8002464 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	f003 020f 	and.w	r2, r3, #15
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	3304      	adds	r3, #4
 800245c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	b2da      	uxtb	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_PCD_EP_Close+0x6e>
 800247a:	2302      	movs	r3, #2
 800247c:	e00e      	b.n	800249c <HAL_PCD_EP_Close+0x8c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68f9      	ldr	r1, [r7, #12]
 800248c:	4618      	mov	r0, r3
 800248e:	f001 fe77 	bl	8004180 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	460b      	mov	r3, r1
 80024b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b4:	7afb      	ldrb	r3, [r7, #11]
 80024b6:	f003 020f 	and.w	r2, r3, #15
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4413      	add	r3, r2
 80024ca:	3304      	adds	r3, #4
 80024cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2200      	movs	r2, #0
 80024de:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2200      	movs	r2, #0
 80024e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024e6:	7afb      	ldrb	r3, [r7, #11]
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	799b      	ldrb	r3, [r3, #6]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d102      	bne.n	8002500 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	799b      	ldrb	r3, [r3, #6]
 8002508:	461a      	mov	r2, r3
 800250a:	6979      	ldr	r1, [r7, #20]
 800250c:	f001 ff14 	bl	8004338 <USB_EPStartXfer>

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	f003 020f 	and.w	r2, r3, #15
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800253c:	681b      	ldr	r3, [r3, #0]
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	460b      	mov	r3, r1
 8002558:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800255a:	7afb      	ldrb	r3, [r7, #11]
 800255c:	f003 020f 	and.w	r2, r3, #15
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	3310      	adds	r3, #16
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4413      	add	r3, r2
 800256e:	3304      	adds	r3, #4
 8002570:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2201      	movs	r2, #1
 8002588:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800258a:	7afb      	ldrb	r3, [r7, #11]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	b2da      	uxtb	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	799b      	ldrb	r3, [r3, #6]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d102      	bne.n	80025a4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	799b      	ldrb	r3, [r3, #6]
 80025ac:	461a      	mov	r2, r3
 80025ae:	6979      	ldr	r1, [r7, #20]
 80025b0:	f001 fec2 	bl	8004338 <USB_EPStartXfer>

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	7912      	ldrb	r2, [r2, #4]
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e04f      	b.n	800267c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	da0f      	bge.n	8002604 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	f003 020f 	and.w	r2, r3, #15
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	3310      	adds	r3, #16
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	4413      	add	r3, r2
 80025f8:	3304      	adds	r3, #4
 80025fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	705a      	strb	r2, [r3, #1]
 8002602:	e00d      	b.n	8002620 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	3304      	adds	r3, #4
 8002618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	b2da      	uxtb	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_PCD_EP_SetStall+0x82>
 800263c:	2302      	movs	r3, #2
 800263e:	e01d      	b.n	800267c <HAL_PCD_EP_SetStall+0xbe>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68f9      	ldr	r1, [r7, #12]
 800264e:	4618      	mov	r0, r3
 8002650:	f002 fa50 	bl	8004af4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7999      	ldrb	r1, [r3, #6]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800266c:	461a      	mov	r2, r3
 800266e:	f002 fc41 	bl	8004ef4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	7912      	ldrb	r2, [r2, #4]
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e042      	b.n	8002728 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	da0f      	bge.n	80026ca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	f003 020f 	and.w	r2, r3, #15
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	3310      	adds	r3, #16
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	3304      	adds	r3, #4
 80026c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	705a      	strb	r2, [r3, #1]
 80026c8:	e00f      	b.n	80026ea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	f003 020f 	and.w	r2, r3, #15
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	4413      	add	r3, r2
 80026e0:	3304      	adds	r3, #4
 80026e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_PCD_EP_ClrStall+0x86>
 8002706:	2302      	movs	r3, #2
 8002708:	e00e      	b.n	8002728 <HAL_PCD_EP_ClrStall+0xa4>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68f9      	ldr	r1, [r7, #12]
 8002718:	4618      	mov	r0, r3
 800271a:	f002 fa59 	bl	8004bd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800273c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002740:	2b00      	cmp	r3, #0
 8002742:	da0c      	bge.n	800275e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	f003 020f 	and.w	r2, r3, #15
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	3310      	adds	r3, #16
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	3304      	adds	r3, #4
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	e00c      	b.n	8002778 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	f003 020f 	and.w	r2, r3, #15
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	4413      	add	r3, r2
 8002774:	3304      	adds	r3, #4
 8002776:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	4618      	mov	r0, r3
 8002780:	f002 f878 	bl	8004874 <USB_EPStopXfer>
 8002784:	4603      	mov	r3, r0
 8002786:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002788:	7afb      	ldrb	r3, [r7, #11]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b08a      	sub	sp, #40	@ 0x28
 8002796:	af02      	add	r7, sp, #8
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	3310      	adds	r3, #16
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	3304      	adds	r3, #4
 80027b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d901      	bls.n	80027ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e06b      	b.n	80028a2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d902      	bls.n	80027e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3303      	adds	r3, #3
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027ee:	e02a      	b.n	8002846 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	429a      	cmp	r2, r3
 8002804:	d902      	bls.n	800280c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	3303      	adds	r3, #3
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	68d9      	ldr	r1, [r3, #12]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	4603      	mov	r3, r0
 8002828:	6978      	ldr	r0, [r7, #20]
 800282a:	f002 f8cd 	bl	80049c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	441a      	add	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	441a      	add	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4413      	add	r3, r2
 800284e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	429a      	cmp	r2, r3
 800285a:	d809      	bhi.n	8002870 <PCD_WriteEmptyTxFifo+0xde>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002864:	429a      	cmp	r2, r3
 8002866:	d203      	bcs.n	8002870 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1bf      	bne.n	80027f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	d811      	bhi.n	80028a0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	2201      	movs	r2, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	43db      	mvns	r3, r3
 8002896:	6939      	ldr	r1, [r7, #16]
 8002898:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800289c:	4013      	ands	r3, r2
 800289e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	333c      	adds	r3, #60	@ 0x3c
 80028c4:	3304      	adds	r3, #4
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	799b      	ldrb	r3, [r3, #6]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d17b      	bne.n	80029da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d015      	beq.n	8002918 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	4a61      	ldr	r2, [pc, #388]	@ (8002a74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	f240 80b9 	bls.w	8002a68 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80b3 	beq.w	8002a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4413      	add	r3, r2
 800290a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800290e:	461a      	mov	r2, r3
 8002910:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002914:	6093      	str	r3, [r2, #8]
 8002916:	e0a7      	b.n	8002a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4413      	add	r3, r2
 800292a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800292e:	461a      	mov	r2, r3
 8002930:	2320      	movs	r3, #32
 8002932:	6093      	str	r3, [r2, #8]
 8002934:	e098      	b.n	8002a68 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	f040 8093 	bne.w	8002a68 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	4a4b      	ldr	r2, [pc, #300]	@ (8002a74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d90f      	bls.n	800296a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	4413      	add	r3, r2
 800295c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002960:	461a      	mov	r2, r3
 8002962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002966:	6093      	str	r3, [r2, #8]
 8002968:	e07e      	b.n	8002a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	3304      	adds	r3, #4
 800297e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a1a      	ldr	r2, [r3, #32]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	0159      	lsls	r1, r3, #5
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	440b      	add	r3, r1
 800298c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002996:	1ad2      	subs	r2, r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d114      	bne.n	80029cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029b4:	461a      	mov	r2, r3
 80029b6:	2101      	movs	r1, #1
 80029b8:	f002 fa9c 	bl	8004ef4 <USB_EP0_OutStart>
 80029bc:	e006      	b.n	80029cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	441a      	add	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4619      	mov	r1, r3
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f004 fcf6 	bl	80073c4 <HAL_PCD_DataOutStageCallback>
 80029d8:	e046      	b.n	8002a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	4a26      	ldr	r2, [pc, #152]	@ (8002a78 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d124      	bne.n	8002a2c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029f8:	461a      	mov	r2, r3
 80029fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029fe:	6093      	str	r3, [r2, #8]
 8002a00:	e032      	b.n	8002a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f004 fccd 	bl	80073c4 <HAL_PCD_DataOutStageCallback>
 8002a2a:	e01d      	b.n	8002a68 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d114      	bne.n	8002a5c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d108      	bne.n	8002a5c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a54:	461a      	mov	r2, r3
 8002a56:	2100      	movs	r1, #0
 8002a58:	f002 fa4c 	bl	8004ef4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	4619      	mov	r1, r3
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f004 fcae 	bl	80073c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	4f54300a 	.word	0x4f54300a
 8002a78:	4f54310a 	.word	0x4f54310a

08002a7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	333c      	adds	r3, #60	@ 0x3c
 8002a94:	3304      	adds	r3, #4
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4a15      	ldr	r2, [pc, #84]	@ (8002b04 <PCD_EP_OutSetupPacket_int+0x88>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d90e      	bls.n	8002ad0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ace:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f004 fc65 	bl	80073a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8002b04 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d90c      	bls.n	8002af8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	799b      	ldrb	r3, [r3, #6]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d108      	bne.n	8002af8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002af0:	461a      	mov	r2, r3
 8002af2:	2101      	movs	r1, #1
 8002af4:	f002 f9fe 	bl	8004ef4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	4f54300a 	.word	0x4f54300a

08002b08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]
 8002b14:	4613      	mov	r3, r2
 8002b16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d107      	bne.n	8002b36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b26:	883b      	ldrh	r3, [r7, #0]
 8002b28:	0419      	lsls	r1, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b34:	e028      	b.n	8002b88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	0c1b      	lsrs	r3, r3, #16
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	4413      	add	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]
 8002b48:	e00d      	b.n	8002b66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	3340      	adds	r3, #64	@ 0x40
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	0c1b      	lsrs	r3, r3, #16
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	3301      	adds	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d3ec      	bcc.n	8002b4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b70:	883b      	ldrh	r3, [r7, #0]
 8002b72:	0418      	lsls	r0, r3, #16
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6819      	ldr	r1, [r3, #0]
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	4302      	orrs	r2, r0
 8002b80:	3340      	adds	r3, #64	@ 0x40
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	887a      	ldrh	r2, [r7, #2]
 8002ba8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e267      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d075      	beq.n	8002cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bee:	4b88      	ldr	r3, [pc, #544]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d00c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfa:	4b85      	ldr	r3, [pc, #532]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d112      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c06:	4b82      	ldr	r3, [pc, #520]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c12:	d10b      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	4b7e      	ldr	r3, [pc, #504]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d05b      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x108>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d157      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e242      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c34:	d106      	bne.n	8002c44 <HAL_RCC_OscConfig+0x74>
 8002c36:	4b76      	ldr	r3, [pc, #472]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a75      	ldr	r2, [pc, #468]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xb0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x98>
 8002c4e:	4b70      	ldr	r3, [pc, #448]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a6f      	ldr	r2, [pc, #444]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6c      	ldr	r2, [pc, #432]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xb0>
 8002c68:	4b69      	ldr	r3, [pc, #420]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a68      	ldr	r2, [pc, #416]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b66      	ldr	r3, [pc, #408]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a65      	ldr	r2, [pc, #404]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fa70 	bl	800116c <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe fa6c 	bl	800116c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	@ 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e207      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xc0>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fa5c 	bl	800116c <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fa58 	bl	800116c <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	@ 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1f3      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b51      	ldr	r3, [pc, #324]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xe8>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d063      	beq.n	8002dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf2:	4b47      	ldr	r3, [pc, #284]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfe:	4b44      	ldr	r3, [pc, #272]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	4b41      	ldr	r3, [pc, #260]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x152>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e1c7      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b3b      	ldr	r3, [pc, #236]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4937      	ldr	r1, [pc, #220]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	e03a      	b.n	8002dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d40:	4b34      	ldr	r3, [pc, #208]	@ (8002e14 <HAL_RCC_OscConfig+0x244>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7fe fa11 	bl	800116c <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7fe fa0d 	bl	800116c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e1a8      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	4b2b      	ldr	r3, [pc, #172]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b28      	ldr	r3, [pc, #160]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4925      	ldr	r1, [pc, #148]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	e015      	b.n	8002dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d82:	4b24      	ldr	r3, [pc, #144]	@ (8002e14 <HAL_RCC_OscConfig+0x244>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe f9f0 	bl	800116c <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7fe f9ec 	bl	800116c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e187      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d036      	beq.n	8002e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <HAL_RCC_OscConfig+0x248>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7fe f9d0 	bl	800116c <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fe f9cc 	bl	800116c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e167      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x200>
 8002dee:	e01b      	b.n	8002e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df0:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <HAL_RCC_OscConfig+0x248>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df6:	f7fe f9b9 	bl	800116c <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	e00e      	b.n	8002e1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7fe f9b5 	bl	800116c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d907      	bls.n	8002e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e150      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
 8002e10:	40023800 	.word	0x40023800
 8002e14:	42470000 	.word	0x42470000
 8002e18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	4b88      	ldr	r3, [pc, #544]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ea      	bne.n	8002dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8097 	beq.w	8002f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b81      	ldr	r3, [pc, #516]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	4b7d      	ldr	r3, [pc, #500]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	4a7c      	ldr	r2, [pc, #496]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e56:	4b7a      	ldr	r3, [pc, #488]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e62:	2301      	movs	r3, #1
 8002e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b77      	ldr	r3, [pc, #476]	@ (8003044 <HAL_RCC_OscConfig+0x474>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d118      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e72:	4b74      	ldr	r3, [pc, #464]	@ (8003044 <HAL_RCC_OscConfig+0x474>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a73      	ldr	r2, [pc, #460]	@ (8003044 <HAL_RCC_OscConfig+0x474>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7e:	f7fe f975 	bl	800116c <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7fe f971 	bl	800116c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e10c      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	4b6a      	ldr	r3, [pc, #424]	@ (8003044 <HAL_RCC_OscConfig+0x474>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x2ea>
 8002eac:	4b64      	ldr	r3, [pc, #400]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb0:	4a63      	ldr	r2, [pc, #396]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb8:	e01c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x324>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0x30c>
 8002ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec6:	4a5e      	ldr	r2, [pc, #376]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ece:	4b5c      	ldr	r3, [pc, #368]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed2:	4a5b      	ldr	r2, [pc, #364]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eda:	e00b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x324>
 8002edc:	4b58      	ldr	r3, [pc, #352]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee0:	4a57      	ldr	r2, [pc, #348]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee8:	4b55      	ldr	r3, [pc, #340]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eec:	4a54      	ldr	r2, [pc, #336]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002eee:	f023 0304 	bic.w	r3, r3, #4
 8002ef2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d015      	beq.n	8002f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe f936 	bl	800116c <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	f7fe f932 	bl	800116c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e0cb      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1a:	4b49      	ldr	r3, [pc, #292]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0ee      	beq.n	8002f04 <HAL_RCC_OscConfig+0x334>
 8002f26:	e014      	b.n	8002f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f28:	f7fe f920 	bl	800116c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7fe f91c 	bl	800116c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0b5      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f46:	4b3e      	ldr	r3, [pc, #248]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1ee      	bne.n	8002f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f58:	4b39      	ldr	r3, [pc, #228]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	4a38      	ldr	r2, [pc, #224]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80a1 	beq.w	80030b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f6e:	4b34      	ldr	r3, [pc, #208]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d05c      	beq.n	8003034 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d141      	bne.n	8003006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4b31      	ldr	r3, [pc, #196]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe f8f0 	bl	800116c <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe f8ec 	bl	800116c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e087      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	4b27      	ldr	r3, [pc, #156]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	019b      	lsls	r3, r3, #6
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	491b      	ldr	r1, [pc, #108]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fe f8c5 	bl	800116c <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe6:	f7fe f8c1 	bl	800116c <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e05c      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff8:	4b11      	ldr	r3, [pc, #68]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x416>
 8003004:	e054      	b.n	80030b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fe f8ae 	bl	800116c <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe f8aa 	bl	800116c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e045      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003026:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x444>
 8003032:	e03d      	b.n	80030b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e038      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
 8003040:	40023800 	.word	0x40023800
 8003044:	40007000 	.word	0x40007000
 8003048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800304c:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HAL_RCC_OscConfig+0x4ec>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d028      	beq.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d121      	bne.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d11a      	bne.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003084:	4293      	cmp	r3, r2
 8003086:	d111      	bne.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	3b01      	subs	r3, #1
 8003096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d107      	bne.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800

080030c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0cc      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d4:	4b68      	ldr	r3, [pc, #416]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d90c      	bls.n	80030fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b65      	ldr	r3, [pc, #404]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b63      	ldr	r3, [pc, #396]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0b8      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003114:	4b59      	ldr	r3, [pc, #356]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4a58      	ldr	r2, [pc, #352]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800311e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800312c:	4b53      	ldr	r3, [pc, #332]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a52      	ldr	r2, [pc, #328]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	4b50      	ldr	r3, [pc, #320]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	494d      	ldr	r1, [pc, #308]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d044      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b47      	ldr	r3, [pc, #284]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d119      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d003      	beq.n	800317e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317a:	2b03      	cmp	r3, #3
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317e:	4b3f      	ldr	r3, [pc, #252]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e06f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318e:	4b3b      	ldr	r3, [pc, #236]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e067      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319e:	4b37      	ldr	r3, [pc, #220]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f023 0203 	bic.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4934      	ldr	r1, [pc, #208]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b0:	f7fd ffdc 	bl	800116c <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b8:	f7fd ffd8 	bl	800116c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e04f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	4b2b      	ldr	r3, [pc, #172]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 020c 	and.w	r2, r3, #12
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	429a      	cmp	r2, r3
 80031de:	d1eb      	bne.n	80031b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e0:	4b25      	ldr	r3, [pc, #148]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d20c      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b22      	ldr	r3, [pc, #136]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b20      	ldr	r3, [pc, #128]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e032      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003214:	4b19      	ldr	r3, [pc, #100]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4916      	ldr	r1, [pc, #88]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003232:	4b12      	ldr	r3, [pc, #72]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	490e      	ldr	r1, [pc, #56]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003246:	f000 f821 	bl	800328c <HAL_RCC_GetSysClockFreq>
 800324a:	4602      	mov	r2, r0
 800324c:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	490a      	ldr	r1, [pc, #40]	@ (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	4a09      	ldr	r2, [pc, #36]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003262:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd ff3c 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40023c00 	.word	0x40023c00
 800327c:	40023800 	.word	0x40023800
 8003280:	08007a24 	.word	0x08007a24
 8003284:	20000000 	.word	0x20000000
 8003288:	20000004 	.word	0x20000004

0800328c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800328c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003290:	b090      	sub	sp, #64	@ 0x40
 8003292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a4:	4b59      	ldr	r3, [pc, #356]	@ (800340c <HAL_RCC_GetSysClockFreq+0x180>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d00d      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x40>
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	f200 80a1 	bhi.w	80033f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032be:	e09b      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c0:	4b53      	ldr	r3, [pc, #332]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x184>)
 80032c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032c4:	e09b      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c6:	4b53      	ldr	r3, [pc, #332]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x188>)
 80032c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032ca:	e098      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032cc:	4b4f      	ldr	r3, [pc, #316]	@ (800340c <HAL_RCC_GetSysClockFreq+0x180>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d6:	4b4d      	ldr	r3, [pc, #308]	@ (800340c <HAL_RCC_GetSysClockFreq+0x180>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d028      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e2:	4b4a      	ldr	r3, [pc, #296]	@ (800340c <HAL_RCC_GetSysClockFreq+0x180>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	2200      	movs	r2, #0
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032f4:	2100      	movs	r1, #0
 80032f6:	4b47      	ldr	r3, [pc, #284]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x188>)
 80032f8:	fb03 f201 	mul.w	r2, r3, r1
 80032fc:	2300      	movs	r3, #0
 80032fe:	fb00 f303 	mul.w	r3, r0, r3
 8003302:	4413      	add	r3, r2
 8003304:	4a43      	ldr	r2, [pc, #268]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x188>)
 8003306:	fba0 1202 	umull	r1, r2, r0, r2
 800330a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800330c:	460a      	mov	r2, r1
 800330e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003312:	4413      	add	r3, r2
 8003314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003318:	2200      	movs	r2, #0
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	61fa      	str	r2, [r7, #28]
 800331e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003322:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003326:	f7fc ff55 	bl	80001d4 <__aeabi_uldivmod>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4613      	mov	r3, r2
 8003330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003332:	e053      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003334:	4b35      	ldr	r3, [pc, #212]	@ (800340c <HAL_RCC_GetSysClockFreq+0x180>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	099b      	lsrs	r3, r3, #6
 800333a:	2200      	movs	r2, #0
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	617a      	str	r2, [r7, #20]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003346:	f04f 0b00 	mov.w	fp, #0
 800334a:	4652      	mov	r2, sl
 800334c:	465b      	mov	r3, fp
 800334e:	f04f 0000 	mov.w	r0, #0
 8003352:	f04f 0100 	mov.w	r1, #0
 8003356:	0159      	lsls	r1, r3, #5
 8003358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800335c:	0150      	lsls	r0, r2, #5
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	ebb2 080a 	subs.w	r8, r2, sl
 8003366:	eb63 090b 	sbc.w	r9, r3, fp
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003376:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800337a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800337e:	ebb2 0408 	subs.w	r4, r2, r8
 8003382:	eb63 0509 	sbc.w	r5, r3, r9
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	00eb      	lsls	r3, r5, #3
 8003390:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003394:	00e2      	lsls	r2, r4, #3
 8003396:	4614      	mov	r4, r2
 8003398:	461d      	mov	r5, r3
 800339a:	eb14 030a 	adds.w	r3, r4, sl
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	eb45 030b 	adc.w	r3, r5, fp
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033b2:	4629      	mov	r1, r5
 80033b4:	028b      	lsls	r3, r1, #10
 80033b6:	4621      	mov	r1, r4
 80033b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033bc:	4621      	mov	r1, r4
 80033be:	028a      	lsls	r2, r1, #10
 80033c0:	4610      	mov	r0, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c6:	2200      	movs	r2, #0
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	60fa      	str	r2, [r7, #12]
 80033cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033d0:	f7fc ff00 	bl	80001d4 <__aeabi_uldivmod>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4613      	mov	r3, r2
 80033da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033dc:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <HAL_RCC_GetSysClockFreq+0x180>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	0c1b      	lsrs	r3, r3, #16
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	3301      	adds	r3, #1
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80033ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033f6:	e002      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x184>)
 80033fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003400:	4618      	mov	r0, r3
 8003402:	3740      	adds	r7, #64	@ 0x40
 8003404:	46bd      	mov	sp, r7
 8003406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	00f42400 	.word	0x00f42400
 8003414:	017d7840 	.word	0x017d7840

08003418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800341c:	4b03      	ldr	r3, [pc, #12]	@ (800342c <HAL_RCC_GetHCLKFreq+0x14>)
 800341e:	681b      	ldr	r3, [r3, #0]
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000000 	.word	0x20000000

08003430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e07b      	b.n	800353a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	2b00      	cmp	r3, #0
 8003448:	d108      	bne.n	800345c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003452:	d009      	beq.n	8003468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	61da      	str	r2, [r3, #28]
 800345a:	e005      	b.n	8003468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd f98a 	bl	800079c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800349e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ec:	ea42 0103 	orr.w	r1, r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	0c1b      	lsrs	r3, r3, #16
 8003506:	f003 0104 	and.w	r1, r3, #4
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	f003 0210 	and.w	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003528:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b088      	sub	sp, #32
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	603b      	str	r3, [r7, #0]
 800354e:	4613      	mov	r3, r2
 8003550:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003552:	f7fd fe0b 	bl	800116c <HAL_GetTick>
 8003556:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d001      	beq.n	800356c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
 800356a:	e12a      	b.n	80037c2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_SPI_Transmit+0x36>
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e122      	b.n	80037c2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_SPI_Transmit+0x48>
 8003586:	2302      	movs	r3, #2
 8003588:	e11b      	b.n	80037c2 <HAL_SPI_Transmit+0x280>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2203      	movs	r2, #3
 8003596:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	88fa      	ldrh	r2, [r7, #6]
 80035aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	88fa      	ldrh	r2, [r7, #6]
 80035b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035d8:	d10f      	bne.n	80035fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003604:	2b40      	cmp	r3, #64	@ 0x40
 8003606:	d007      	beq.n	8003618 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003620:	d152      	bne.n	80036c8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_SPI_Transmit+0xee>
 800362a:	8b7b      	ldrh	r3, [r7, #26]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d145      	bne.n	80036bc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003634:	881a      	ldrh	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003640:	1c9a      	adds	r2, r3, #2
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003654:	e032      	b.n	80036bc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b02      	cmp	r3, #2
 8003662:	d112      	bne.n	800368a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	1c9a      	adds	r2, r3, #2
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003688:	e018      	b.n	80036bc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800368a:	f7fd fd6f 	bl	800116c <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d803      	bhi.n	80036a2 <HAL_SPI_Transmit+0x160>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d102      	bne.n	80036a8 <HAL_SPI_Transmit+0x166>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d109      	bne.n	80036bc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e082      	b.n	80037c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1c7      	bne.n	8003656 <HAL_SPI_Transmit+0x114>
 80036c6:	e053      	b.n	8003770 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_SPI_Transmit+0x194>
 80036d0:	8b7b      	ldrh	r3, [r7, #26]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d147      	bne.n	8003766 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	7812      	ldrb	r2, [r2, #0]
 80036e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036fc:	e033      	b.n	8003766 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b02      	cmp	r3, #2
 800370a:	d113      	bne.n	8003734 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	7812      	ldrb	r2, [r2, #0]
 8003718:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003732:	e018      	b.n	8003766 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003734:	f7fd fd1a 	bl	800116c <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d803      	bhi.n	800374c <HAL_SPI_Transmit+0x20a>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d102      	bne.n	8003752 <HAL_SPI_Transmit+0x210>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e02d      	b.n	80037c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1c6      	bne.n	80036fe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	6839      	ldr	r1, [r7, #0]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f8b1 	bl	80038dc <SPI_EndRxTxTransaction>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80037c0:	2300      	movs	r3, #0
  }
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037dc:	f7fd fcc6 	bl	800116c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	4413      	add	r3, r2
 80037ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037ec:	f7fd fcbe 	bl	800116c <HAL_GetTick>
 80037f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037f2:	4b39      	ldr	r3, [pc, #228]	@ (80038d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	015b      	lsls	r3, r3, #5
 80037f8:	0d1b      	lsrs	r3, r3, #20
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003802:	e054      	b.n	80038ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d050      	beq.n	80038ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800380c:	f7fd fcae 	bl	800116c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	429a      	cmp	r2, r3
 800381a:	d902      	bls.n	8003822 <SPI_WaitFlagStateUntilTimeout+0x56>
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d13d      	bne.n	800389e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003830:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800383a:	d111      	bne.n	8003860 <SPI_WaitFlagStateUntilTimeout+0x94>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003844:	d004      	beq.n	8003850 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800384e:	d107      	bne.n	8003860 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800385e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003868:	d10f      	bne.n	800388a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003888:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e017      	b.n	80038ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4013      	ands	r3, r2
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	bf0c      	ite	eq
 80038be:	2301      	moveq	r3, #1
 80038c0:	2300      	movne	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d19b      	bne.n	8003804 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000000 	.word	0x20000000

080038dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2201      	movs	r2, #1
 80038f0:	2102      	movs	r1, #2
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7ff ff6a 	bl	80037cc <SPI_WaitFlagStateUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003902:	f043 0220 	orr.w	r2, r3, #32
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e032      	b.n	8003974 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800390e:	4b1b      	ldr	r3, [pc, #108]	@ (800397c <SPI_EndRxTxTransaction+0xa0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1b      	ldr	r2, [pc, #108]	@ (8003980 <SPI_EndRxTxTransaction+0xa4>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	0d5b      	lsrs	r3, r3, #21
 800391a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800392c:	d112      	bne.n	8003954 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2200      	movs	r2, #0
 8003936:	2180      	movs	r1, #128	@ 0x80
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f7ff ff47 	bl	80037cc <SPI_WaitFlagStateUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d016      	beq.n	8003972 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003948:	f043 0220 	orr.w	r2, r3, #32
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e00f      	b.n	8003974 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	3b01      	subs	r3, #1
 800395e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396a:	2b80      	cmp	r3, #128	@ 0x80
 800396c:	d0f2      	beq.n	8003954 <SPI_EndRxTxTransaction+0x78>
 800396e:	e000      	b.n	8003972 <SPI_EndRxTxTransaction+0x96>
        break;
 8003970:	bf00      	nop
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000000 	.word	0x20000000
 8003980:	165e9f81 	.word	0x165e9f81

08003984 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003984:	b084      	sub	sp, #16
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	f107 001c 	add.w	r0, r7, #28
 8003992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003996:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800399a:	2b01      	cmp	r3, #1
 800399c:	d123      	bne.n	80039e6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80039b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d105      	bne.n	80039da <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f001 fae8 	bl	8004fb0 <USB_CoreReset>
 80039e0:	4603      	mov	r3, r0
 80039e2:	73fb      	strb	r3, [r7, #15]
 80039e4:	e01b      	b.n	8003a1e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f001 fadc 	bl	8004fb0 <USB_CoreReset>
 80039f8:	4603      	mov	r3, r0
 80039fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80039fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d106      	bne.n	8003a12 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a08:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a10:	e005      	b.n	8003a1e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a1e:	7fbb      	ldrb	r3, [r7, #30]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d10b      	bne.n	8003a3c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f043 0206 	orr.w	r2, r3, #6
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a48:	b004      	add	sp, #16
 8003a4a:	4770      	bx	lr

08003a4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	4613      	mov	r3, r2
 8003a58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d165      	bne.n	8003b2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4a41      	ldr	r2, [pc, #260]	@ (8003b68 <USB_SetTurnaroundTime+0x11c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d906      	bls.n	8003a76 <USB_SetTurnaroundTime+0x2a>
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4a40      	ldr	r2, [pc, #256]	@ (8003b6c <USB_SetTurnaroundTime+0x120>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d202      	bcs.n	8003a76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a70:	230f      	movs	r3, #15
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	e062      	b.n	8003b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4a3c      	ldr	r2, [pc, #240]	@ (8003b6c <USB_SetTurnaroundTime+0x120>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d306      	bcc.n	8003a8c <USB_SetTurnaroundTime+0x40>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	4a3b      	ldr	r2, [pc, #236]	@ (8003b70 <USB_SetTurnaroundTime+0x124>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d202      	bcs.n	8003a8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003a86:	230e      	movs	r3, #14
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	e057      	b.n	8003b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4a38      	ldr	r2, [pc, #224]	@ (8003b70 <USB_SetTurnaroundTime+0x124>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d306      	bcc.n	8003aa2 <USB_SetTurnaroundTime+0x56>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4a37      	ldr	r2, [pc, #220]	@ (8003b74 <USB_SetTurnaroundTime+0x128>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d202      	bcs.n	8003aa2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003a9c:	230d      	movs	r3, #13
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	e04c      	b.n	8003b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4a33      	ldr	r2, [pc, #204]	@ (8003b74 <USB_SetTurnaroundTime+0x128>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d306      	bcc.n	8003ab8 <USB_SetTurnaroundTime+0x6c>
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4a32      	ldr	r2, [pc, #200]	@ (8003b78 <USB_SetTurnaroundTime+0x12c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d802      	bhi.n	8003ab8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	e041      	b.n	8003b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4a2f      	ldr	r2, [pc, #188]	@ (8003b78 <USB_SetTurnaroundTime+0x12c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d906      	bls.n	8003ace <USB_SetTurnaroundTime+0x82>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4a2e      	ldr	r2, [pc, #184]	@ (8003b7c <USB_SetTurnaroundTime+0x130>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d802      	bhi.n	8003ace <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003ac8:	230b      	movs	r3, #11
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	e036      	b.n	8003b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b7c <USB_SetTurnaroundTime+0x130>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d906      	bls.n	8003ae4 <USB_SetTurnaroundTime+0x98>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4a29      	ldr	r2, [pc, #164]	@ (8003b80 <USB_SetTurnaroundTime+0x134>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d802      	bhi.n	8003ae4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003ade:	230a      	movs	r3, #10
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	e02b      	b.n	8003b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4a26      	ldr	r2, [pc, #152]	@ (8003b80 <USB_SetTurnaroundTime+0x134>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d906      	bls.n	8003afa <USB_SetTurnaroundTime+0xae>
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4a25      	ldr	r2, [pc, #148]	@ (8003b84 <USB_SetTurnaroundTime+0x138>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d202      	bcs.n	8003afa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003af4:	2309      	movs	r3, #9
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e020      	b.n	8003b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	4a21      	ldr	r2, [pc, #132]	@ (8003b84 <USB_SetTurnaroundTime+0x138>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d306      	bcc.n	8003b10 <USB_SetTurnaroundTime+0xc4>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	4a20      	ldr	r2, [pc, #128]	@ (8003b88 <USB_SetTurnaroundTime+0x13c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d802      	bhi.n	8003b10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	e015      	b.n	8003b3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4a1d      	ldr	r2, [pc, #116]	@ (8003b88 <USB_SetTurnaroundTime+0x13c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d906      	bls.n	8003b26 <USB_SetTurnaroundTime+0xda>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b8c <USB_SetTurnaroundTime+0x140>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d202      	bcs.n	8003b26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003b20:	2307      	movs	r3, #7
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	e00a      	b.n	8003b3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003b26:	2306      	movs	r3, #6
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	e007      	b.n	8003b3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003b32:	2309      	movs	r3, #9
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e001      	b.n	8003b3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003b38:	2309      	movs	r3, #9
 8003b3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	029b      	lsls	r3, r3, #10
 8003b50:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	371c      	adds	r7, #28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	00d8acbf 	.word	0x00d8acbf
 8003b6c:	00e4e1c0 	.word	0x00e4e1c0
 8003b70:	00f42400 	.word	0x00f42400
 8003b74:	01067380 	.word	0x01067380
 8003b78:	011a499f 	.word	0x011a499f
 8003b7c:	01312cff 	.word	0x01312cff
 8003b80:	014ca43f 	.word	0x014ca43f
 8003b84:	016e3600 	.word	0x016e3600
 8003b88:	01a6ab1f 	.word	0x01a6ab1f
 8003b8c:	01e84800 	.word	0x01e84800

08003b90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f043 0201 	orr.w	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f023 0201 	bic.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d115      	bne.n	8003c22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003c02:	200a      	movs	r0, #10
 8003c04:	f7fd fabe 	bl	8001184 <HAL_Delay>
      ms += 10U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	330a      	adds	r3, #10
 8003c0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f001 f93f 	bl	8004e92 <USB_GetMode>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d01e      	beq.n	8003c58 <USB_SetCurrentMode+0x84>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2bc7      	cmp	r3, #199	@ 0xc7
 8003c1e:	d9f0      	bls.n	8003c02 <USB_SetCurrentMode+0x2e>
 8003c20:	e01a      	b.n	8003c58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d115      	bne.n	8003c54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003c34:	200a      	movs	r0, #10
 8003c36:	f7fd faa5 	bl	8001184 <HAL_Delay>
      ms += 10U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	330a      	adds	r3, #10
 8003c3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f001 f926 	bl	8004e92 <USB_GetMode>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <USB_SetCurrentMode+0x84>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003c50:	d9f0      	bls.n	8003c34 <USB_SetCurrentMode+0x60>
 8003c52:	e001      	b.n	8003c58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e005      	b.n	8003c64 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2bc8      	cmp	r3, #200	@ 0xc8
 8003c5c:	d101      	bne.n	8003c62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	e009      	b.n	8003ca0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	3340      	adds	r3, #64	@ 0x40
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	2200      	movs	r2, #0
 8003c98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	2b0e      	cmp	r3, #14
 8003ca4:	d9f2      	bls.n	8003c8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ca6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d11c      	bne.n	8003ce8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cde:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ce6:	e00b      	b.n	8003d00 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003d06:	461a      	mov	r2, r3
 8003d08:	2300      	movs	r3, #0
 8003d0a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d10d      	bne.n	8003d30 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f968 	bl	8003ff4 <USB_SetDevSpeed>
 8003d24:	e008      	b.n	8003d38 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d26:	2101      	movs	r1, #1
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f963 	bl	8003ff4 <USB_SetDevSpeed>
 8003d2e:	e003      	b.n	8003d38 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d30:	2103      	movs	r1, #3
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f95e 	bl	8003ff4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d38:	2110      	movs	r1, #16
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f8fa 	bl	8003f34 <USB_FlushTxFifo>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f924 	bl	8003f98 <USB_FlushRxFifo>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d60:	461a      	mov	r2, r3
 8003d62:	2300      	movs	r3, #0
 8003d64:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2300      	movs	r3, #0
 8003d70:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d78:	461a      	mov	r2, r3
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d7e:	2300      	movs	r3, #0
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	e043      	b.n	8003e0c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d9a:	d118      	bne.n	8003dce <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dae:	461a      	mov	r2, r3
 8003db0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e013      	b.n	8003de0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	e008      	b.n	8003de0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2300      	movs	r3, #0
 8003dde:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dec:	461a      	mov	r2, r3
 8003dee:	2300      	movs	r3, #0
 8003df0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e10:	461a      	mov	r2, r3
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d3b5      	bcc.n	8003d84 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	e043      	b.n	8003ea6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e34:	d118      	bne.n	8003e68 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	e013      	b.n	8003e7a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e008      	b.n	8003e7a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e74:	461a      	mov	r2, r3
 8003e76:	2300      	movs	r3, #0
 8003e78:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e86:	461a      	mov	r2, r3
 8003e88:	2300      	movs	r3, #0
 8003e8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e98:	461a      	mov	r2, r3
 8003e9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003eaa:	461a      	mov	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d3b5      	bcc.n	8003e1e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ec4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003ed2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ed4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d105      	bne.n	8003ee8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f043 0210 	orr.w	r2, r3, #16
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	4b10      	ldr	r3, [pc, #64]	@ (8003f30 <USB_DevInit+0x2c4>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ef4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f043 0208 	orr.w	r2, r3, #8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d107      	bne.n	8003f20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f18:	f043 0304 	orr.w	r3, r3, #4
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f2c:	b004      	add	sp, #16
 8003f2e:	4770      	bx	lr
 8003f30:	803c3800 	.word	0x803c3800

08003f34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3301      	adds	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f4e:	d901      	bls.n	8003f54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e01b      	b.n	8003f8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	daf2      	bge.n	8003f42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	019b      	lsls	r3, r3, #6
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f78:	d901      	bls.n	8003f7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e006      	b.n	8003f8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d0f0      	beq.n	8003f6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003fb0:	d901      	bls.n	8003fb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e018      	b.n	8003fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	daf2      	bge.n	8003fa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003fd4:	d901      	bls.n	8003fda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e006      	b.n	8003fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d0f0      	beq.n	8003fc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004014:	4313      	orrs	r3, r2
 8004016:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004026:	b480      	push	{r7}
 8004028:	b087      	sub	sp, #28
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0306 	and.w	r3, r3, #6
 800403e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d102      	bne.n	800404c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004046:	2300      	movs	r3, #0
 8004048:	75fb      	strb	r3, [r7, #23]
 800404a:	e00a      	b.n	8004062 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d002      	beq.n	8004058 <USB_GetDevSpeed+0x32>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b06      	cmp	r3, #6
 8004056:	d102      	bne.n	800405e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004058:	2302      	movs	r3, #2
 800405a:	75fb      	strb	r3, [r7, #23]
 800405c:	e001      	b.n	8004062 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800405e:	230f      	movs	r3, #15
 8004060:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004062:	7dfb      	ldrb	r3, [r7, #23]
}
 8004064:	4618      	mov	r0, r3
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	785b      	ldrb	r3, [r3, #1]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d13a      	bne.n	8004102 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	2101      	movs	r1, #1
 800409e:	fa01 f303 	lsl.w	r3, r1, r3
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	68f9      	ldr	r1, [r7, #12]
 80040a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d155      	bne.n	8004170 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	791b      	ldrb	r3, [r3, #4]
 80040de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	059b      	lsls	r3, r3, #22
 80040e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040e8:	4313      	orrs	r3, r2
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	0151      	lsls	r1, r2, #5
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	440a      	add	r2, r1
 80040f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	e036      	b.n	8004170 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	2101      	movs	r1, #1
 8004114:	fa01 f303 	lsl.w	r3, r1, r3
 8004118:	041b      	lsls	r3, r3, #16
 800411a:	68f9      	ldr	r1, [r7, #12]
 800411c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004120:	4313      	orrs	r3, r2
 8004122:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d11a      	bne.n	8004170 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	791b      	ldrb	r3, [r3, #4]
 8004154:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004156:	430b      	orrs	r3, r1
 8004158:	4313      	orrs	r3, r2
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	0151      	lsls	r1, r2, #5
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	440a      	add	r2, r1
 8004162:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800416e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	785b      	ldrb	r3, [r3, #1]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d161      	bne.n	8004260 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041b2:	d11f      	bne.n	80041f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	0151      	lsls	r1, r2, #5
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	440a      	add	r2, r1
 80041ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80041d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	0151      	lsls	r1, r2, #5
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	440a      	add	r2, r1
 80041ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	2101      	movs	r1, #1
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	b29b      	uxth	r3, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004214:	4013      	ands	r3, r2
 8004216:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	2101      	movs	r1, #1
 800422a:	fa01 f303 	lsl.w	r3, r1, r3
 800422e:	b29b      	uxth	r3, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	68f9      	ldr	r1, [r7, #12]
 8004234:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004238:	4013      	ands	r3, r2
 800423a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	0159      	lsls	r1, r3, #5
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	440b      	add	r3, r1
 8004252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004256:	4619      	mov	r1, r3
 8004258:	4b35      	ldr	r3, [pc, #212]	@ (8004330 <USB_DeactivateEndpoint+0x1b0>)
 800425a:	4013      	ands	r3, r2
 800425c:	600b      	str	r3, [r1, #0]
 800425e:	e060      	b.n	8004322 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004272:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004276:	d11f      	bne.n	80042b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004292:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004296:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80042b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	2101      	movs	r1, #1
 80042ca:	fa01 f303 	lsl.w	r3, r1, r3
 80042ce:	041b      	lsls	r3, r3, #16
 80042d0:	43db      	mvns	r3, r3
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042d8:	4013      	ands	r3, r2
 80042da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	041b      	lsls	r3, r3, #16
 80042f4:	43db      	mvns	r3, r3
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042fc:	4013      	ands	r3, r2
 80042fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	0159      	lsls	r1, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	440b      	add	r3, r1
 8004316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800431a:	4619      	mov	r1, r3
 800431c:	4b05      	ldr	r3, [pc, #20]	@ (8004334 <USB_DeactivateEndpoint+0x1b4>)
 800431e:	4013      	ands	r3, r2
 8004320:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	ec337800 	.word	0xec337800
 8004334:	eff37800 	.word	0xeff37800

08004338 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	@ 0x28
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	4613      	mov	r3, r2
 8004344:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	785b      	ldrb	r3, [r3, #1]
 8004354:	2b01      	cmp	r3, #1
 8004356:	f040 817f 	bne.w	8004658 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d132      	bne.n	80043c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	0151      	lsls	r1, r2, #5
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	440a      	add	r2, r1
 8004378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800437c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004380:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004384:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	0151      	lsls	r1, r2, #5
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	440a      	add	r2, r1
 800439c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	0151      	lsls	r1, r2, #5
 80043b8:	69fa      	ldr	r2, [r7, #28]
 80043ba:	440a      	add	r2, r1
 80043bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043c0:	0cdb      	lsrs	r3, r3, #19
 80043c2:	04db      	lsls	r3, r3, #19
 80043c4:	6113      	str	r3, [r2, #16]
 80043c6:	e097      	b.n	80044f8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	0151      	lsls	r1, r2, #5
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	440a      	add	r2, r1
 80043de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043e2:	0cdb      	lsrs	r3, r3, #19
 80043e4:	04db      	lsls	r3, r3, #19
 80043e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	0151      	lsls	r1, r2, #5
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	440a      	add	r2, r1
 80043fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004402:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004406:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800440a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d11a      	bne.n	8004448 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	429a      	cmp	r2, r3
 800441c:	d903      	bls.n	8004426 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	0151      	lsls	r1, r2, #5
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	440a      	add	r2, r1
 800443c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004440:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004444:	6113      	str	r3, [r2, #16]
 8004446:	e044      	b.n	80044d2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4413      	add	r3, r2
 8004452:	1e5a      	subs	r2, r3, #1
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	8afb      	ldrh	r3, [r7, #22]
 800446e:	04d9      	lsls	r1, r3, #19
 8004470:	4ba4      	ldr	r3, [pc, #656]	@ (8004704 <USB_EPStartXfer+0x3cc>)
 8004472:	400b      	ands	r3, r1
 8004474:	69b9      	ldr	r1, [r7, #24]
 8004476:	0148      	lsls	r0, r1, #5
 8004478:	69f9      	ldr	r1, [r7, #28]
 800447a:	4401      	add	r1, r0
 800447c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004480:	4313      	orrs	r3, r2
 8004482:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	791b      	ldrb	r3, [r3, #4]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d122      	bne.n	80044d2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	0151      	lsls	r1, r2, #5
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	440a      	add	r2, r1
 80044a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044a6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80044aa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	8afb      	ldrh	r3, [r7, #22]
 80044bc:	075b      	lsls	r3, r3, #29
 80044be:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80044c2:	69b9      	ldr	r1, [r7, #24]
 80044c4:	0148      	lsls	r0, r1, #5
 80044c6:	69f9      	ldr	r1, [r7, #28]
 80044c8:	4401      	add	r1, r0
 80044ca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80044ce:	4313      	orrs	r3, r2
 80044d0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e8:	69b9      	ldr	r1, [r7, #24]
 80044ea:	0148      	lsls	r0, r1, #5
 80044ec:	69f9      	ldr	r1, [r7, #28]
 80044ee:	4401      	add	r1, r0
 80044f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80044f4:	4313      	orrs	r3, r2
 80044f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d14b      	bne.n	8004596 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004512:	461a      	mov	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	791b      	ldrb	r3, [r3, #4]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d128      	bne.n	8004574 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d110      	bne.n	8004554 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	0151      	lsls	r1, r2, #5
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	440a      	add	r2, r1
 8004548:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800454c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e00f      	b.n	8004574 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	0151      	lsls	r1, r2, #5
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	440a      	add	r2, r1
 800456a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800456e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004572:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	0151      	lsls	r1, r2, #5
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	440a      	add	r2, r1
 800458a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800458e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	e166      	b.n	8004864 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	0151      	lsls	r1, r2, #5
 80045a8:	69fa      	ldr	r2, [r7, #28]
 80045aa:	440a      	add	r2, r1
 80045ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80045b4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	791b      	ldrb	r3, [r3, #4]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d015      	beq.n	80045ea <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 814e 	beq.w	8004864 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	2101      	movs	r1, #1
 80045da:	fa01 f303 	lsl.w	r3, r1, r3
 80045de:	69f9      	ldr	r1, [r7, #28]
 80045e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045e4:	4313      	orrs	r3, r2
 80045e6:	634b      	str	r3, [r1, #52]	@ 0x34
 80045e8:	e13c      	b.n	8004864 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d110      	bne.n	800461c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	0151      	lsls	r1, r2, #5
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	440a      	add	r2, r1
 8004610:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004614:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e00f      	b.n	800463c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800463a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	68d9      	ldr	r1, [r3, #12]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	b298      	uxth	r0, r3
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	4603      	mov	r3, r0
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f9b9 	bl	80049c8 <USB_WritePacket>
 8004656:	e105      	b.n	8004864 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	0151      	lsls	r1, r2, #5
 800466a:	69fa      	ldr	r2, [r7, #28]
 800466c:	440a      	add	r2, r1
 800466e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004672:	0cdb      	lsrs	r3, r3, #19
 8004674:	04db      	lsls	r3, r3, #19
 8004676:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	0151      	lsls	r1, r2, #5
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	440a      	add	r2, r1
 800468e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004692:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004696:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800469a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d132      	bne.n	8004708 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d0:	69b9      	ldr	r1, [r7, #24]
 80046d2:	0148      	lsls	r0, r1, #5
 80046d4:	69f9      	ldr	r1, [r7, #28]
 80046d6:	4401      	add	r1, r0
 80046d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80046dc:	4313      	orrs	r3, r2
 80046de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80046fe:	6113      	str	r3, [r2, #16]
 8004700:	e062      	b.n	80047c8 <USB_EPStartXfer+0x490>
 8004702:	bf00      	nop
 8004704:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d123      	bne.n	8004758 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004726:	69b9      	ldr	r1, [r7, #24]
 8004728:	0148      	lsls	r0, r1, #5
 800472a:	69f9      	ldr	r1, [r7, #28]
 800472c:	4401      	add	r1, r0
 800472e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004732:	4313      	orrs	r3, r2
 8004734:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	0151      	lsls	r1, r2, #5
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	440a      	add	r2, r1
 800474c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004750:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004754:	6113      	str	r3, [r2, #16]
 8004756:	e037      	b.n	80047c8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4413      	add	r3, r2
 8004762:	1e5a      	subs	r2, r3, #1
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	8afa      	ldrh	r2, [r7, #22]
 8004774:	fb03 f202 	mul.w	r2, r3, r2
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	8afb      	ldrh	r3, [r7, #22]
 800478c:	04d9      	lsls	r1, r3, #19
 800478e:	4b38      	ldr	r3, [pc, #224]	@ (8004870 <USB_EPStartXfer+0x538>)
 8004790:	400b      	ands	r3, r1
 8004792:	69b9      	ldr	r1, [r7, #24]
 8004794:	0148      	lsls	r0, r1, #5
 8004796:	69f9      	ldr	r1, [r7, #28]
 8004798:	4401      	add	r1, r0
 800479a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800479e:	4313      	orrs	r3, r2
 80047a0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b8:	69b9      	ldr	r1, [r7, #24]
 80047ba:	0148      	lsls	r0, r1, #5
 80047bc:	69f9      	ldr	r1, [r7, #28]
 80047be:	4401      	add	r1, r0
 80047c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80047c4:	4313      	orrs	r3, r2
 80047c6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d10d      	bne.n	80047ea <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	68d9      	ldr	r1, [r3, #12]
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e6:	460a      	mov	r2, r1
 80047e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	791b      	ldrb	r3, [r3, #4]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d128      	bne.n	8004844 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d110      	bne.n	8004824 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	0151      	lsls	r1, r2, #5
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	440a      	add	r2, r1
 8004818:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800481c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	e00f      	b.n	8004844 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	0151      	lsls	r1, r2, #5
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	440a      	add	r2, r1
 800483a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800483e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004842:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	0151      	lsls	r1, r2, #5
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	440a      	add	r2, r1
 800485a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800485e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004862:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	1ff80000 	.word	0x1ff80000

08004874 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	785b      	ldrb	r3, [r3, #1]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d14a      	bne.n	8004928 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048aa:	f040 8086 	bne.w	80049ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	7812      	ldrb	r2, [r2, #0]
 80048c2:	0151      	lsls	r1, r2, #5
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	440a      	add	r2, r1
 80048c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80048d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	7812      	ldrb	r2, [r2, #0]
 80048e6:	0151      	lsls	r1, r2, #5
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	440a      	add	r2, r1
 80048ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3301      	adds	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004902:	4293      	cmp	r3, r2
 8004904:	d902      	bls.n	800490c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	75fb      	strb	r3, [r7, #23]
          break;
 800490a:	e056      	b.n	80049ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004920:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004924:	d0e7      	beq.n	80048f6 <USB_EPStopXfer+0x82>
 8004926:	e048      	b.n	80049ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800493c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004940:	d13b      	bne.n	80049ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	0151      	lsls	r1, r2, #5
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	440a      	add	r2, r1
 800495c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004960:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004964:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	7812      	ldrb	r2, [r2, #0]
 800497a:	0151      	lsls	r1, r2, #5
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	440a      	add	r2, r1
 8004980:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004984:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004988:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3301      	adds	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004996:	4293      	cmp	r3, r2
 8004998:	d902      	bls.n	80049a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	75fb      	strb	r3, [r7, #23]
          break;
 800499e:	e00c      	b.n	80049ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049b8:	d0e7      	beq.n	800498a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b089      	sub	sp, #36	@ 0x24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	4611      	mov	r1, r2
 80049d4:	461a      	mov	r2, r3
 80049d6:	460b      	mov	r3, r1
 80049d8:	71fb      	strb	r3, [r7, #7]
 80049da:	4613      	mov	r3, r2
 80049dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80049e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d123      	bne.n	8004a36 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049ee:	88bb      	ldrh	r3, [r7, #4]
 80049f0:	3303      	adds	r3, #3
 80049f2:	089b      	lsrs	r3, r3, #2
 80049f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e018      	b.n	8004a2e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	031a      	lsls	r2, r3, #12
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a08:	461a      	mov	r2, r3
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	3301      	adds	r3, #1
 8004a14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	3301      	adds	r3, #1
 8004a26:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d3e2      	bcc.n	80049fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3724      	adds	r7, #36	@ 0x24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b08b      	sub	sp, #44	@ 0x2c
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	089b      	lsrs	r3, r3, #2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	623b      	str	r3, [r7, #32]
 8004a6e:	e014      	b.n	8004a9a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	3301      	adds	r3, #1
 8004a80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	3301      	adds	r3, #1
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	3301      	adds	r3, #1
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	3301      	adds	r3, #1
 8004a98:	623b      	str	r3, [r7, #32]
 8004a9a:	6a3a      	ldr	r2, [r7, #32]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d3e6      	bcc.n	8004a70 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004aa2:	8bfb      	ldrh	r3, [r7, #30]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01e      	beq.n	8004ae6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f107 0310 	add.w	r3, r7, #16
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	701a      	strb	r2, [r3, #0]
      i++;
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004ada:	8bfb      	ldrh	r3, [r7, #30]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ae0:	8bfb      	ldrh	r3, [r7, #30]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1ea      	bne.n	8004abc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	372c      	adds	r7, #44	@ 0x2c
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	785b      	ldrb	r3, [r3, #1]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d12c      	bne.n	8004b6a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	db12      	blt.n	8004b48 <USB_EPSetStall+0x54>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00f      	beq.n	8004b48 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	0151      	lsls	r1, r2, #5
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	440a      	add	r2, r1
 8004b3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b46:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e02b      	b.n	8004bc2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	db12      	blt.n	8004ba2 <USB_EPSetStall+0xae>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00f      	beq.n	8004ba2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ba0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	0151      	lsls	r1, r2, #5
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	440a      	add	r2, r1
 8004bb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004bc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	785b      	ldrb	r3, [r3, #1]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d128      	bne.n	8004c3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	0151      	lsls	r1, r2, #5
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	440a      	add	r2, r1
 8004c02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	791b      	ldrb	r3, [r3, #4]
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d003      	beq.n	8004c1c <USB_EPClearStall+0x4c>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	791b      	ldrb	r3, [r3, #4]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d138      	bne.n	8004c8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	e027      	b.n	8004c8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	0151      	lsls	r1, r2, #5
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	440a      	add	r2, r1
 8004c54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	791b      	ldrb	r3, [r3, #4]
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d003      	beq.n	8004c6e <USB_EPClearStall+0x9e>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	791b      	ldrb	r3, [r3, #4]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d10f      	bne.n	8004c8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	0151      	lsls	r1, r2, #5
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	440a      	add	r2, r1
 8004c84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004cbe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004cd0:	68f9      	ldr	r1, [r7, #12]
 8004cd2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004d02:	f023 0303 	bic.w	r3, r3, #3
 8004d06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d16:	f023 0302 	bic.w	r3, r3, #2
 8004d1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004d44:	f023 0303 	bic.w	r3, r3, #3
 8004d48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d58:	f043 0302 	orr.w	r3, r3, #2
 8004d5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4013      	ands	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d84:	68fb      	ldr	r3, [r7, #12]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b085      	sub	sp, #20
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	4013      	ands	r3, r2
 8004db4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	0c1b      	lsrs	r3, r3, #16
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	4013      	ands	r3, r2
 8004de8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	b29b      	uxth	r3, r3
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	4013      	ands	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e28:	68bb      	ldr	r3, [r7, #8]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b087      	sub	sp, #28
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	fa22 f303 	lsr.w	r3, r2, r3
 8004e66:	01db      	lsls	r3, r3, #7
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4013      	ands	r3, r2
 8004e82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e84:	68bb      	ldr	r3, [r7, #8]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ec8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ecc:	f023 0307 	bic.w	r3, r3, #7
 8004ed0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	460b      	mov	r3, r1
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	333c      	adds	r3, #60	@ 0x3c
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	4a26      	ldr	r2, [pc, #152]	@ (8004fac <USB_EP0_OutStart+0xb8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d90a      	bls.n	8004f2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f28:	d101      	bne.n	8004f2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e037      	b.n	8004f9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f34:	461a      	mov	r2, r3
 8004f36:	2300      	movs	r3, #0
 8004f38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f5c:	f043 0318 	orr.w	r3, r3, #24
 8004f60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f70:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004f74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004f76:	7afb      	ldrb	r3, [r7, #11]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d10f      	bne.n	8004f9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f82:	461a      	mov	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f96:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004f9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	4f54300a 	.word	0x4f54300a

08004fb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fc8:	d901      	bls.n	8004fce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e01b      	b.n	8005006 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	daf2      	bge.n	8004fbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f043 0201 	orr.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ff2:	d901      	bls.n	8004ff8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e006      	b.n	8005006 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d0f0      	beq.n	8004fe6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005020:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005024:	f002 fc2e 	bl	8007884 <USBD_static_malloc>
 8005028:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d109      	bne.n	8005044 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	32b0      	adds	r2, #176	@ 0xb0
 800503a:	2100      	movs	r1, #0
 800503c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005040:	2302      	movs	r3, #2
 8005042:	e0d4      	b.n	80051ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005044:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005048:	2100      	movs	r1, #0
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f002 fc5e 	bl	800790c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	32b0      	adds	r2, #176	@ 0xb0
 800505a:	68f9      	ldr	r1, [r7, #12]
 800505c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	32b0      	adds	r2, #176	@ 0xb0
 800506a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	7c1b      	ldrb	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d138      	bne.n	80050ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800507c:	4b5e      	ldr	r3, [pc, #376]	@ (80051f8 <USBD_CDC_Init+0x1e4>)
 800507e:	7819      	ldrb	r1, [r3, #0]
 8005080:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005084:	2202      	movs	r2, #2
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f002 fad9 	bl	800763e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800508c:	4b5a      	ldr	r3, [pc, #360]	@ (80051f8 <USBD_CDC_Init+0x1e4>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	f003 020f 	and.w	r2, r3, #15
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	3324      	adds	r3, #36	@ 0x24
 80050a2:	2201      	movs	r2, #1
 80050a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80050a6:	4b55      	ldr	r3, [pc, #340]	@ (80051fc <USBD_CDC_Init+0x1e8>)
 80050a8:	7819      	ldrb	r1, [r3, #0]
 80050aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050ae:	2202      	movs	r2, #2
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f002 fac4 	bl	800763e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80050b6:	4b51      	ldr	r3, [pc, #324]	@ (80051fc <USBD_CDC_Init+0x1e8>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	f003 020f 	and.w	r2, r3, #15
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80050ce:	2201      	movs	r2, #1
 80050d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80050d2:	4b4b      	ldr	r3, [pc, #300]	@ (8005200 <USBD_CDC_Init+0x1ec>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	f003 020f 	and.w	r2, r3, #15
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	3326      	adds	r3, #38	@ 0x26
 80050e8:	2210      	movs	r2, #16
 80050ea:	801a      	strh	r2, [r3, #0]
 80050ec:	e035      	b.n	800515a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80050ee:	4b42      	ldr	r3, [pc, #264]	@ (80051f8 <USBD_CDC_Init+0x1e4>)
 80050f0:	7819      	ldrb	r1, [r3, #0]
 80050f2:	2340      	movs	r3, #64	@ 0x40
 80050f4:	2202      	movs	r2, #2
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f002 faa1 	bl	800763e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80050fc:	4b3e      	ldr	r3, [pc, #248]	@ (80051f8 <USBD_CDC_Init+0x1e4>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f003 020f 	and.w	r2, r3, #15
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	3324      	adds	r3, #36	@ 0x24
 8005112:	2201      	movs	r2, #1
 8005114:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005116:	4b39      	ldr	r3, [pc, #228]	@ (80051fc <USBD_CDC_Init+0x1e8>)
 8005118:	7819      	ldrb	r1, [r3, #0]
 800511a:	2340      	movs	r3, #64	@ 0x40
 800511c:	2202      	movs	r2, #2
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f002 fa8d 	bl	800763e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005124:	4b35      	ldr	r3, [pc, #212]	@ (80051fc <USBD_CDC_Init+0x1e8>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	f003 020f 	and.w	r2, r3, #15
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800513c:	2201      	movs	r2, #1
 800513e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005140:	4b2f      	ldr	r3, [pc, #188]	@ (8005200 <USBD_CDC_Init+0x1ec>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	f003 020f 	and.w	r2, r3, #15
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	3326      	adds	r3, #38	@ 0x26
 8005156:	2210      	movs	r2, #16
 8005158:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800515a:	4b29      	ldr	r3, [pc, #164]	@ (8005200 <USBD_CDC_Init+0x1ec>)
 800515c:	7819      	ldrb	r1, [r3, #0]
 800515e:	2308      	movs	r3, #8
 8005160:	2203      	movs	r2, #3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f002 fa6b 	bl	800763e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005168:	4b25      	ldr	r3, [pc, #148]	@ (8005200 <USBD_CDC_Init+0x1ec>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	f003 020f 	and.w	r2, r3, #15
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	4613      	mov	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	3324      	adds	r3, #36	@ 0x24
 800517e:	2201      	movs	r2, #1
 8005180:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	33b0      	adds	r3, #176	@ 0xb0
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80051b8:	2302      	movs	r3, #2
 80051ba:	e018      	b.n	80051ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	7c1b      	ldrb	r3, [r3, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80051c4:	4b0d      	ldr	r3, [pc, #52]	@ (80051fc <USBD_CDC_Init+0x1e8>)
 80051c6:	7819      	ldrb	r1, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80051ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f002 fb22 	bl	800781c <USBD_LL_PrepareReceive>
 80051d8:	e008      	b.n	80051ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80051da:	4b08      	ldr	r3, [pc, #32]	@ (80051fc <USBD_CDC_Init+0x1e8>)
 80051dc:	7819      	ldrb	r1, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80051e4:	2340      	movs	r3, #64	@ 0x40
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f002 fb18 	bl	800781c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000093 	.word	0x20000093
 80051fc:	20000094 	.word	0x20000094
 8005200:	20000095 	.word	0x20000095

08005204 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005210:	4b3a      	ldr	r3, [pc, #232]	@ (80052fc <USBD_CDC_DeInit+0xf8>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	4619      	mov	r1, r3
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f002 fa37 	bl	800768a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800521c:	4b37      	ldr	r3, [pc, #220]	@ (80052fc <USBD_CDC_DeInit+0xf8>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	f003 020f 	and.w	r2, r3, #15
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	3324      	adds	r3, #36	@ 0x24
 8005232:	2200      	movs	r2, #0
 8005234:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005236:	4b32      	ldr	r3, [pc, #200]	@ (8005300 <USBD_CDC_DeInit+0xfc>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	4619      	mov	r1, r3
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f002 fa24 	bl	800768a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005242:	4b2f      	ldr	r3, [pc, #188]	@ (8005300 <USBD_CDC_DeInit+0xfc>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	f003 020f 	and.w	r2, r3, #15
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	440b      	add	r3, r1
 8005256:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800525a:	2200      	movs	r2, #0
 800525c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800525e:	4b29      	ldr	r3, [pc, #164]	@ (8005304 <USBD_CDC_DeInit+0x100>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f002 fa10 	bl	800768a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800526a:	4b26      	ldr	r3, [pc, #152]	@ (8005304 <USBD_CDC_DeInit+0x100>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	f003 020f 	and.w	r2, r3, #15
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	3324      	adds	r3, #36	@ 0x24
 8005280:	2200      	movs	r2, #0
 8005282:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005284:	4b1f      	ldr	r3, [pc, #124]	@ (8005304 <USBD_CDC_DeInit+0x100>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	f003 020f 	and.w	r2, r3, #15
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	3326      	adds	r3, #38	@ 0x26
 800529a:	2200      	movs	r2, #0
 800529c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	32b0      	adds	r2, #176	@ 0xb0
 80052a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01f      	beq.n	80052f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	33b0      	adds	r3, #176	@ 0xb0
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	32b0      	adds	r2, #176	@ 0xb0
 80052ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f002 fae4 	bl	80078a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	32b0      	adds	r2, #176	@ 0xb0
 80052e2:	2100      	movs	r1, #0
 80052e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000093 	.word	0x20000093
 8005300:	20000094 	.word	0x20000094
 8005304:	20000095 	.word	0x20000095

08005308 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	32b0      	adds	r2, #176	@ 0xb0
 800531c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005320:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005334:	2303      	movs	r3, #3
 8005336:	e0bf      	b.n	80054b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005340:	2b00      	cmp	r3, #0
 8005342:	d050      	beq.n	80053e6 <USBD_CDC_Setup+0xde>
 8005344:	2b20      	cmp	r3, #32
 8005346:	f040 80af 	bne.w	80054a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	88db      	ldrh	r3, [r3, #6]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d03a      	beq.n	80053c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	b25b      	sxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	da1b      	bge.n	8005394 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	33b0      	adds	r3, #176	@ 0xb0
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005372:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	88d2      	ldrh	r2, [r2, #6]
 8005378:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	88db      	ldrh	r3, [r3, #6]
 800537e:	2b07      	cmp	r3, #7
 8005380:	bf28      	it	cs
 8005382:	2307      	movcs	r3, #7
 8005384:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	89fa      	ldrh	r2, [r7, #14]
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f001 fd53 	bl	8006e38 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005392:	e090      	b.n	80054b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	785a      	ldrb	r2, [r3, #1]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	88db      	ldrh	r3, [r3, #6]
 80053a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80053a4:	d803      	bhi.n	80053ae <USBD_CDC_Setup+0xa6>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	88db      	ldrh	r3, [r3, #6]
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	e000      	b.n	80053b0 <USBD_CDC_Setup+0xa8>
 80053ae:	2240      	movs	r2, #64	@ 0x40
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80053b6:	6939      	ldr	r1, [r7, #16]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80053be:	461a      	mov	r2, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 fd65 	bl	8006e90 <USBD_CtlPrepareRx>
      break;
 80053c6:	e076      	b.n	80054b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	33b0      	adds	r3, #176	@ 0xb0
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	7850      	ldrb	r0, [r2, #1]
 80053de:	2200      	movs	r2, #0
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	4798      	blx	r3
      break;
 80053e4:	e067      	b.n	80054b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	785b      	ldrb	r3, [r3, #1]
 80053ea:	2b0b      	cmp	r3, #11
 80053ec:	d851      	bhi.n	8005492 <USBD_CDC_Setup+0x18a>
 80053ee:	a201      	add	r2, pc, #4	@ (adr r2, 80053f4 <USBD_CDC_Setup+0xec>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	08005425 	.word	0x08005425
 80053f8:	080054a1 	.word	0x080054a1
 80053fc:	08005493 	.word	0x08005493
 8005400:	08005493 	.word	0x08005493
 8005404:	08005493 	.word	0x08005493
 8005408:	08005493 	.word	0x08005493
 800540c:	08005493 	.word	0x08005493
 8005410:	08005493 	.word	0x08005493
 8005414:	08005493 	.word	0x08005493
 8005418:	08005493 	.word	0x08005493
 800541c:	0800544f 	.word	0x0800544f
 8005420:	08005479 	.word	0x08005479
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b03      	cmp	r3, #3
 800542e:	d107      	bne.n	8005440 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005430:	f107 030a 	add.w	r3, r7, #10
 8005434:	2202      	movs	r2, #2
 8005436:	4619      	mov	r1, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 fcfd 	bl	8006e38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800543e:	e032      	b.n	80054a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f001 fc7b 	bl	8006d3e <USBD_CtlError>
            ret = USBD_FAIL;
 8005448:	2303      	movs	r3, #3
 800544a:	75fb      	strb	r3, [r7, #23]
          break;
 800544c:	e02b      	b.n	80054a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b03      	cmp	r3, #3
 8005458:	d107      	bne.n	800546a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800545a:	f107 030d 	add.w	r3, r7, #13
 800545e:	2201      	movs	r2, #1
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 fce8 	bl	8006e38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005468:	e01d      	b.n	80054a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800546a:	6839      	ldr	r1, [r7, #0]
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f001 fc66 	bl	8006d3e <USBD_CtlError>
            ret = USBD_FAIL;
 8005472:	2303      	movs	r3, #3
 8005474:	75fb      	strb	r3, [r7, #23]
          break;
 8005476:	e016      	b.n	80054a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b03      	cmp	r3, #3
 8005482:	d00f      	beq.n	80054a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f001 fc59 	bl	8006d3e <USBD_CtlError>
            ret = USBD_FAIL;
 800548c:	2303      	movs	r3, #3
 800548e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005490:	e008      	b.n	80054a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f001 fc52 	bl	8006d3e <USBD_CtlError>
          ret = USBD_FAIL;
 800549a:	2303      	movs	r3, #3
 800549c:	75fb      	strb	r3, [r7, #23]
          break;
 800549e:	e002      	b.n	80054a6 <USBD_CDC_Setup+0x19e>
          break;
 80054a0:	bf00      	nop
 80054a2:	e008      	b.n	80054b6 <USBD_CDC_Setup+0x1ae>
          break;
 80054a4:	bf00      	nop
      }
      break;
 80054a6:	e006      	b.n	80054b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f001 fc47 	bl	8006d3e <USBD_CtlError>
      ret = USBD_FAIL;
 80054b0:	2303      	movs	r3, #3
 80054b2:	75fb      	strb	r3, [r7, #23]
      break;
 80054b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80054d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	32b0      	adds	r2, #176	@ 0xb0
 80054de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e065      	b.n	80055b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	32b0      	adds	r2, #176	@ 0xb0
 80054f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	f003 020f 	and.w	r2, r3, #15
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	440b      	add	r3, r1
 800550c:	3318      	adds	r3, #24
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d02f      	beq.n	8005574 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	f003 020f 	and.w	r2, r3, #15
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	440b      	add	r3, r1
 8005526:	3318      	adds	r3, #24
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	78fb      	ldrb	r3, [r7, #3]
 800552c:	f003 010f 	and.w	r1, r3, #15
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	460b      	mov	r3, r1
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	440b      	add	r3, r1
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4403      	add	r3, r0
 800553c:	331c      	adds	r3, #28
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	fbb2 f1f3 	udiv	r1, r2, r3
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800554a:	2b00      	cmp	r3, #0
 800554c:	d112      	bne.n	8005574 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800554e:	78fb      	ldrb	r3, [r7, #3]
 8005550:	f003 020f 	and.w	r2, r3, #15
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	3318      	adds	r3, #24
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005566:	78f9      	ldrb	r1, [r7, #3]
 8005568:	2300      	movs	r3, #0
 800556a:	2200      	movs	r2, #0
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f002 f934 	bl	80077da <USBD_LL_Transmit>
 8005572:	e01f      	b.n	80055b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	33b0      	adds	r3, #176	@ 0xb0
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d010      	beq.n	80055b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	33b0      	adds	r3, #176	@ 0xb0
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80055b0:	78fa      	ldrb	r2, [r7, #3]
 80055b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	460b      	mov	r3, r1
 80055c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	32b0      	adds	r2, #176	@ 0xb0
 80055d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	32b0      	adds	r2, #176	@ 0xb0
 80055e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e01a      	b.n	8005626 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f002 f932 	bl	800785e <USBD_LL_GetRxDataSize>
 80055fa:	4602      	mov	r2, r0
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	33b0      	adds	r3, #176	@ 0xb0
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005620:	4611      	mov	r1, r2
 8005622:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	32b0      	adds	r2, #176	@ 0xb0
 8005640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005644:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800564c:	2303      	movs	r3, #3
 800564e:	e024      	b.n	800569a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	33b0      	adds	r3, #176	@ 0xb0
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d019      	beq.n	8005698 <USBD_CDC_EP0_RxReady+0x6a>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800566a:	2bff      	cmp	r3, #255	@ 0xff
 800566c:	d014      	beq.n	8005698 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	33b0      	adds	r3, #176	@ 0xb0
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005686:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800568e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	22ff      	movs	r2, #255	@ 0xff
 8005694:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056ac:	2182      	movs	r1, #130	@ 0x82
 80056ae:	4818      	ldr	r0, [pc, #96]	@ (8005710 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80056b0:	f000 fd0f 	bl	80060d2 <USBD_GetEpDesc>
 80056b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056b6:	2101      	movs	r1, #1
 80056b8:	4815      	ldr	r0, [pc, #84]	@ (8005710 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80056ba:	f000 fd0a 	bl	80060d2 <USBD_GetEpDesc>
 80056be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056c0:	2181      	movs	r1, #129	@ 0x81
 80056c2:	4813      	ldr	r0, [pc, #76]	@ (8005710 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80056c4:	f000 fd05 	bl	80060d2 <USBD_GetEpDesc>
 80056c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2210      	movs	r2, #16
 80056d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d006      	beq.n	80056ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2200      	movs	r2, #0
 80056e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056e4:	711a      	strb	r2, [r3, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d006      	beq.n	80056fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056f8:	711a      	strb	r2, [r3, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2243      	movs	r2, #67	@ 0x43
 8005702:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005704:	4b02      	ldr	r3, [pc, #8]	@ (8005710 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	20000050 	.word	0x20000050

08005714 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800571c:	2182      	movs	r1, #130	@ 0x82
 800571e:	4818      	ldr	r0, [pc, #96]	@ (8005780 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005720:	f000 fcd7 	bl	80060d2 <USBD_GetEpDesc>
 8005724:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005726:	2101      	movs	r1, #1
 8005728:	4815      	ldr	r0, [pc, #84]	@ (8005780 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800572a:	f000 fcd2 	bl	80060d2 <USBD_GetEpDesc>
 800572e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005730:	2181      	movs	r1, #129	@ 0x81
 8005732:	4813      	ldr	r0, [pc, #76]	@ (8005780 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005734:	f000 fccd 	bl	80060d2 <USBD_GetEpDesc>
 8005738:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	2210      	movs	r2, #16
 8005744:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d006      	beq.n	800575a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2200      	movs	r2, #0
 8005750:	711a      	strb	r2, [r3, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f042 0202 	orr.w	r2, r2, #2
 8005758:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d006      	beq.n	800576e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	711a      	strb	r2, [r3, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f042 0202 	orr.w	r2, r2, #2
 800576c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2243      	movs	r2, #67	@ 0x43
 8005772:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005774:	4b02      	ldr	r3, [pc, #8]	@ (8005780 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000050 	.word	0x20000050

08005784 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800578c:	2182      	movs	r1, #130	@ 0x82
 800578e:	4818      	ldr	r0, [pc, #96]	@ (80057f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005790:	f000 fc9f 	bl	80060d2 <USBD_GetEpDesc>
 8005794:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005796:	2101      	movs	r1, #1
 8005798:	4815      	ldr	r0, [pc, #84]	@ (80057f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800579a:	f000 fc9a 	bl	80060d2 <USBD_GetEpDesc>
 800579e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80057a0:	2181      	movs	r1, #129	@ 0x81
 80057a2:	4813      	ldr	r0, [pc, #76]	@ (80057f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80057a4:	f000 fc95 	bl	80060d2 <USBD_GetEpDesc>
 80057a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2210      	movs	r2, #16
 80057b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d006      	beq.n	80057ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	2200      	movs	r2, #0
 80057c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057c4:	711a      	strb	r2, [r3, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d006      	beq.n	80057de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057d8:	711a      	strb	r2, [r3, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2243      	movs	r2, #67	@ 0x43
 80057e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80057e4:	4b02      	ldr	r3, [pc, #8]	@ (80057f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000050 	.word	0x20000050

080057f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	220a      	movs	r2, #10
 8005800:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005802:	4b03      	ldr	r3, [pc, #12]	@ (8005810 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	2000000c 	.word	0x2000000c

08005814 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005824:	2303      	movs	r3, #3
 8005826:	e009      	b.n	800583c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	33b0      	adds	r3, #176	@ 0xb0
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	32b0      	adds	r2, #176	@ 0xb0
 800585e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005862:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800586a:	2303      	movs	r3, #3
 800586c:	e008      	b.n	8005880 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	32b0      	adds	r2, #176	@ 0xb0
 80058a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e004      	b.n	80058ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
	...

080058c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	32b0      	adds	r2, #176	@ 0xb0
 80058da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	32b0      	adds	r2, #176	@ 0xb0
 80058ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e018      	b.n	8005928 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	7c1b      	ldrb	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005930 <USBD_CDC_ReceivePacket+0x68>)
 8005900:	7819      	ldrb	r1, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 ff85 	bl	800781c <USBD_LL_PrepareReceive>
 8005912:	e008      	b.n	8005926 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005914:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <USBD_CDC_ReceivePacket+0x68>)
 8005916:	7819      	ldrb	r1, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800591e:	2340      	movs	r3, #64	@ 0x40
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 ff7b 	bl	800781c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20000094 	.word	0x20000094

08005934 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	4613      	mov	r3, r2
 8005940:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005948:	2303      	movs	r3, #3
 800594a:	e01f      	b.n	800598c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	79fa      	ldrb	r2, [r7, #7]
 800597e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f001 fdf5 	bl	8007570 <USBD_LL_Init>
 8005986:	4603      	mov	r3, r0
 8005988:	75fb      	strb	r3, [r7, #23]

  return ret;
 800598a:	7dfb      	ldrb	r3, [r7, #23]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e025      	b.n	80059f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	32ae      	adds	r2, #174	@ 0xae
 80059be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00f      	beq.n	80059e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	32ae      	adds	r2, #174	@ 0xae
 80059d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d8:	f107 020e 	add.w	r2, r7, #14
 80059dc:	4610      	mov	r0, r2
 80059de:	4798      	blx	r3
 80059e0:	4602      	mov	r2, r0
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 fdfd 	bl	8007608 <USBD_LL_Start>
 8005a0e:	4603      	mov	r3, r0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	460b      	mov	r3, r1
 8005a38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d009      	beq.n	8005a5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	78fa      	ldrb	r2, [r7, #3]
 8005a52:	4611      	mov	r1, r2
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	4798      	blx	r3
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	78fa      	ldrb	r2, [r7, #3]
 8005a80:	4611      	mov	r1, r2
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 f90c 	bl	8006cca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d01a      	beq.n	8005b0c <USBD_LL_SetupStage+0x72>
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d822      	bhi.n	8005b20 <USBD_LL_SetupStage+0x86>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <USBD_LL_SetupStage+0x4a>
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d00a      	beq.n	8005af8 <USBD_LL_SetupStage+0x5e>
 8005ae2:	e01d      	b.n	8005b20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005aea:	4619      	mov	r1, r3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fb63 	bl	80061b8 <USBD_StdDevReq>
 8005af2:	4603      	mov	r3, r0
 8005af4:	73fb      	strb	r3, [r7, #15]
      break;
 8005af6:	e020      	b.n	8005b3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fbcb 	bl	800629c <USBD_StdItfReq>
 8005b06:	4603      	mov	r3, r0
 8005b08:	73fb      	strb	r3, [r7, #15]
      break;
 8005b0a:	e016      	b.n	8005b3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fc2d 	bl	8006374 <USBD_StdEPReq>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b1e:	e00c      	b.n	8005b3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005b26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f001 fdca 	bl	80076c8 <USBD_LL_StallEP>
 8005b34:	4603      	mov	r3, r0
 8005b36:	73fb      	strb	r3, [r7, #15]
      break;
 8005b38:	bf00      	nop
  }

  return ret;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005b56:	7afb      	ldrb	r3, [r7, #11]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d16e      	bne.n	8005c3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005b62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	f040 8098 	bne.w	8005ca0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d913      	bls.n	8005ba4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	1ad2      	subs	r2, r2, r3
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	4293      	cmp	r3, r2
 8005b94:	bf28      	it	cs
 8005b96:	4613      	movcs	r3, r2
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f001 f994 	bl	8006eca <USBD_CtlContinueRx>
 8005ba2:	e07d      	b.n	8005ca0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d014      	beq.n	8005bdc <USBD_LL_DataOutStage+0x98>
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d81d      	bhi.n	8005bf2 <USBD_LL_DataOutStage+0xae>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <USBD_LL_DataOutStage+0x7c>
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d003      	beq.n	8005bc6 <USBD_LL_DataOutStage+0x82>
 8005bbe:	e018      	b.n	8005bf2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	75bb      	strb	r3, [r7, #22]
            break;
 8005bc4:	e018      	b.n	8005bf8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	4619      	mov	r1, r3
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fa64 	bl	800609e <USBD_CoreFindIF>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	75bb      	strb	r3, [r7, #22]
            break;
 8005bda:	e00d      	b.n	8005bf8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	4619      	mov	r1, r3
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fa66 	bl	80060b8 <USBD_CoreFindEP>
 8005bec:	4603      	mov	r3, r0
 8005bee:	75bb      	strb	r3, [r7, #22]
            break;
 8005bf0:	e002      	b.n	8005bf8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75bb      	strb	r3, [r7, #22]
            break;
 8005bf6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005bf8:	7dbb      	ldrb	r3, [r7, #22]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d119      	bne.n	8005c32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d113      	bne.n	8005c32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005c0a:	7dba      	ldrb	r2, [r7, #22]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	32ae      	adds	r2, #174	@ 0xae
 8005c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005c1a:	7dba      	ldrb	r2, [r7, #22]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005c22:	7dba      	ldrb	r2, [r7, #22]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	32ae      	adds	r2, #174	@ 0xae
 8005c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f001 f95a 	bl	8006eec <USBD_CtlSendStatus>
 8005c38:	e032      	b.n	8005ca0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005c3a:	7afb      	ldrb	r3, [r7, #11]
 8005c3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	4619      	mov	r1, r3
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fa37 	bl	80060b8 <USBD_CoreFindEP>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c4e:	7dbb      	ldrb	r3, [r7, #22]
 8005c50:	2bff      	cmp	r3, #255	@ 0xff
 8005c52:	d025      	beq.n	8005ca0 <USBD_LL_DataOutStage+0x15c>
 8005c54:	7dbb      	ldrb	r3, [r7, #22]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d122      	bne.n	8005ca0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d117      	bne.n	8005c96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005c66:	7dba      	ldrb	r2, [r7, #22]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	32ae      	adds	r2, #174	@ 0xae
 8005c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00f      	beq.n	8005c96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005c76:	7dba      	ldrb	r2, [r7, #22]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005c7e:	7dba      	ldrb	r2, [r7, #22]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	32ae      	adds	r2, #174	@ 0xae
 8005c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	7afa      	ldrb	r2, [r7, #11]
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	4798      	blx	r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	e000      	b.n	8005ca2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b086      	sub	sp, #24
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005cb8:	7afb      	ldrb	r3, [r7, #11]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d16f      	bne.n	8005d9e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d15a      	bne.n	8005d84 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d914      	bls.n	8005d04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	1ad2      	subs	r2, r2, r3
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f001 f8bc 	bl	8006e6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f001 fd8d 	bl	800781c <USBD_LL_PrepareReceive>
 8005d02:	e03f      	b.n	8005d84 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d11c      	bne.n	8005d4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d316      	bcc.n	8005d4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d20f      	bcs.n	8005d4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f001 f89d 	bl	8006e6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2100      	movs	r1, #0
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f001 fd6a 	bl	800781c <USBD_LL_PrepareReceive>
 8005d48:	e01c      	b.n	8005d84 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d10f      	bne.n	8005d76 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d76:	2180      	movs	r1, #128	@ 0x80
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f001 fca5 	bl	80076c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f001 f8c7 	bl	8006f12 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d03a      	beq.n	8005e04 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f7ff fe42 	bl	8005a18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005d9c:	e032      	b.n	8005e04 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005d9e:	7afb      	ldrb	r3, [r7, #11]
 8005da0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	4619      	mov	r1, r3
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f985 	bl	80060b8 <USBD_CoreFindEP>
 8005dae:	4603      	mov	r3, r0
 8005db0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	2bff      	cmp	r3, #255	@ 0xff
 8005db6:	d025      	beq.n	8005e04 <USBD_LL_DataInStage+0x15a>
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d122      	bne.n	8005e04 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d11c      	bne.n	8005e04 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005dca:	7dfa      	ldrb	r2, [r7, #23]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	32ae      	adds	r2, #174	@ 0xae
 8005dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d014      	beq.n	8005e04 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005dda:	7dfa      	ldrb	r2, [r7, #23]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005de2:	7dfa      	ldrb	r2, [r7, #23]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	32ae      	adds	r2, #174	@ 0xae
 8005de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	7afa      	ldrb	r2, [r7, #11]
 8005df0:	4611      	mov	r1, r2
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	4798      	blx	r3
 8005df6:	4603      	mov	r3, r0
 8005df8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005dfa:	7dbb      	ldrb	r3, [r7, #22]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005e00:	7dbb      	ldrb	r3, [r7, #22]
 8005e02:	e000      	b.n	8005e06 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d014      	beq.n	8005e74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00e      	beq.n	8005e74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6852      	ldr	r2, [r2, #4]
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	4611      	mov	r1, r2
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	4798      	blx	r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005e70:	2303      	movs	r3, #3
 8005e72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e74:	2340      	movs	r3, #64	@ 0x40
 8005e76:	2200      	movs	r2, #0
 8005e78:	2100      	movs	r1, #0
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 fbdf 	bl	800763e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2240      	movs	r2, #64	@ 0x40
 8005e8c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e90:	2340      	movs	r3, #64	@ 0x40
 8005e92:	2200      	movs	r2, #0
 8005e94:	2180      	movs	r1, #128	@ 0x80
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f001 fbd1 	bl	800763e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2240      	movs	r2, #64	@ 0x40
 8005ea6:	621a      	str	r2, [r3, #32]

  return ret;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	460b      	mov	r3, r1
 8005ebc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	78fa      	ldrb	r2, [r7, #3]
 8005ec2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d006      	beq.n	8005ef4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2204      	movs	r2, #4
 8005ef8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d106      	bne.n	8005f2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d110      	bne.n	8005f70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00b      	beq.n	8005f70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	32ae      	adds	r2, #174	@ 0xae
 8005f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e01c      	b.n	8005fd6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d115      	bne.n	8005fd4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	32ae      	adds	r2, #174	@ 0xae
 8005fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00b      	beq.n	8005fd4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	32ae      	adds	r2, #174	@ 0xae
 8005fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	78fa      	ldrb	r2, [r7, #3]
 8005fce:	4611      	mov	r1, r2
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	32ae      	adds	r2, #174	@ 0xae
 8005ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e01c      	b.n	800603a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b03      	cmp	r3, #3
 800600a:	d115      	bne.n	8006038 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	32ae      	adds	r2, #174	@ 0xae
 8006016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00b      	beq.n	8006038 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	32ae      	adds	r2, #174	@ 0xae
 800602a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006030:	78fa      	ldrb	r2, [r7, #3]
 8006032:	4611      	mov	r1, r2
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00e      	beq.n	8006094 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6852      	ldr	r2, [r2, #4]
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	4611      	mov	r1, r2
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	4798      	blx	r3
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006090:	2303      	movs	r3, #3
 8006092:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80060aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80060c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b086      	sub	sp, #24
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	460b      	mov	r3, r1
 80060dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	885b      	ldrh	r3, [r3, #2]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	7812      	ldrb	r2, [r2, #0]
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d91f      	bls.n	8006138 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80060fe:	e013      	b.n	8006128 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006100:	f107 030a 	add.w	r3, r7, #10
 8006104:	4619      	mov	r1, r3
 8006106:	6978      	ldr	r0, [r7, #20]
 8006108:	f000 f81b 	bl	8006142 <USBD_GetNextDesc>
 800610c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	785b      	ldrb	r3, [r3, #1]
 8006112:	2b05      	cmp	r3, #5
 8006114:	d108      	bne.n	8006128 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	789b      	ldrb	r3, [r3, #2]
 800611e:	78fa      	ldrb	r2, [r7, #3]
 8006120:	429a      	cmp	r2, r3
 8006122:	d008      	beq.n	8006136 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006124:	2300      	movs	r3, #0
 8006126:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	885b      	ldrh	r3, [r3, #2]
 800612c:	b29a      	uxth	r2, r3
 800612e:	897b      	ldrh	r3, [r7, #10]
 8006130:	429a      	cmp	r2, r3
 8006132:	d8e5      	bhi.n	8006100 <USBD_GetEpDesc+0x2e>
 8006134:	e000      	b.n	8006138 <USBD_GetEpDesc+0x66>
          break;
 8006136:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006138:	693b      	ldr	r3, [r7, #16]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	7812      	ldrb	r2, [r2, #0]
 8006158:	4413      	add	r3, r2
 800615a:	b29a      	uxth	r2, r3
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4413      	add	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800616c:	68fb      	ldr	r3, [r7, #12]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800617a:	b480      	push	{r7}
 800617c:	b087      	sub	sp, #28
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	3301      	adds	r3, #1
 8006190:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006198:	8a3b      	ldrh	r3, [r7, #16]
 800619a:	021b      	lsls	r3, r3, #8
 800619c:	b21a      	sxth	r2, r3
 800619e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	b21b      	sxth	r3, r3
 80061a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80061a8:	89fb      	ldrh	r3, [r7, #14]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
	...

080061b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80061ce:	2b40      	cmp	r3, #64	@ 0x40
 80061d0:	d005      	beq.n	80061de <USBD_StdDevReq+0x26>
 80061d2:	2b40      	cmp	r3, #64	@ 0x40
 80061d4:	d857      	bhi.n	8006286 <USBD_StdDevReq+0xce>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00f      	beq.n	80061fa <USBD_StdDevReq+0x42>
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d153      	bne.n	8006286 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	32ae      	adds	r2, #174	@ 0xae
 80061e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	4798      	blx	r3
 80061f4:	4603      	mov	r3, r0
 80061f6:	73fb      	strb	r3, [r7, #15]
      break;
 80061f8:	e04a      	b.n	8006290 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	785b      	ldrb	r3, [r3, #1]
 80061fe:	2b09      	cmp	r3, #9
 8006200:	d83b      	bhi.n	800627a <USBD_StdDevReq+0xc2>
 8006202:	a201      	add	r2, pc, #4	@ (adr r2, 8006208 <USBD_StdDevReq+0x50>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	0800625d 	.word	0x0800625d
 800620c:	08006271 	.word	0x08006271
 8006210:	0800627b 	.word	0x0800627b
 8006214:	08006267 	.word	0x08006267
 8006218:	0800627b 	.word	0x0800627b
 800621c:	0800623b 	.word	0x0800623b
 8006220:	08006231 	.word	0x08006231
 8006224:	0800627b 	.word	0x0800627b
 8006228:	08006253 	.word	0x08006253
 800622c:	08006245 	.word	0x08006245
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa3c 	bl	80066b0 <USBD_GetDescriptor>
          break;
 8006238:	e024      	b.n	8006284 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fba1 	bl	8006984 <USBD_SetAddress>
          break;
 8006242:	e01f      	b.n	8006284 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fbe0 	bl	8006a0c <USBD_SetConfig>
 800624c:	4603      	mov	r3, r0
 800624e:	73fb      	strb	r3, [r7, #15]
          break;
 8006250:	e018      	b.n	8006284 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006252:	6839      	ldr	r1, [r7, #0]
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fc83 	bl	8006b60 <USBD_GetConfig>
          break;
 800625a:	e013      	b.n	8006284 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fcb4 	bl	8006bcc <USBD_GetStatus>
          break;
 8006264:	e00e      	b.n	8006284 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fce3 	bl	8006c34 <USBD_SetFeature>
          break;
 800626e:	e009      	b.n	8006284 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fd07 	bl	8006c86 <USBD_ClrFeature>
          break;
 8006278:	e004      	b.n	8006284 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fd5e 	bl	8006d3e <USBD_CtlError>
          break;
 8006282:	bf00      	nop
      }
      break;
 8006284:	e004      	b.n	8006290 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fd58 	bl	8006d3e <USBD_CtlError>
      break;
 800628e:	bf00      	nop
  }

  return ret;
 8006290:	7bfb      	ldrb	r3, [r7, #15]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop

0800629c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80062b2:	2b40      	cmp	r3, #64	@ 0x40
 80062b4:	d005      	beq.n	80062c2 <USBD_StdItfReq+0x26>
 80062b6:	2b40      	cmp	r3, #64	@ 0x40
 80062b8:	d852      	bhi.n	8006360 <USBD_StdItfReq+0xc4>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <USBD_StdItfReq+0x26>
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d14e      	bne.n	8006360 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d840      	bhi.n	8006352 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	889b      	ldrh	r3, [r3, #4]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d836      	bhi.n	8006348 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	889b      	ldrh	r3, [r3, #4]
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff fedb 	bl	800609e <USBD_CoreFindIF>
 80062e8:	4603      	mov	r3, r0
 80062ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062ec:	7bbb      	ldrb	r3, [r7, #14]
 80062ee:	2bff      	cmp	r3, #255	@ 0xff
 80062f0:	d01d      	beq.n	800632e <USBD_StdItfReq+0x92>
 80062f2:	7bbb      	ldrb	r3, [r7, #14]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d11a      	bne.n	800632e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80062f8:	7bba      	ldrb	r2, [r7, #14]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	32ae      	adds	r2, #174	@ 0xae
 80062fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00f      	beq.n	8006328 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006308:	7bba      	ldrb	r2, [r7, #14]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006310:	7bba      	ldrb	r2, [r7, #14]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	32ae      	adds	r2, #174	@ 0xae
 8006316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	4798      	blx	r3
 8006322:	4603      	mov	r3, r0
 8006324:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006326:	e004      	b.n	8006332 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006328:	2303      	movs	r3, #3
 800632a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800632c:	e001      	b.n	8006332 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800632e:	2303      	movs	r3, #3
 8006330:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	88db      	ldrh	r3, [r3, #6]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d110      	bne.n	800635c <USBD_StdItfReq+0xc0>
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fdd3 	bl	8006eec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006346:	e009      	b.n	800635c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fcf7 	bl	8006d3e <USBD_CtlError>
          break;
 8006350:	e004      	b.n	800635c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fcf2 	bl	8006d3e <USBD_CtlError>
          break;
 800635a:	e000      	b.n	800635e <USBD_StdItfReq+0xc2>
          break;
 800635c:	bf00      	nop
      }
      break;
 800635e:	e004      	b.n	800636a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fceb 	bl	8006d3e <USBD_CtlError>
      break;
 8006368:	bf00      	nop
  }

  return ret;
 800636a:	7bfb      	ldrb	r3, [r7, #15]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	889b      	ldrh	r3, [r3, #4]
 8006386:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006390:	2b40      	cmp	r3, #64	@ 0x40
 8006392:	d007      	beq.n	80063a4 <USBD_StdEPReq+0x30>
 8006394:	2b40      	cmp	r3, #64	@ 0x40
 8006396:	f200 817f 	bhi.w	8006698 <USBD_StdEPReq+0x324>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d02a      	beq.n	80063f4 <USBD_StdEPReq+0x80>
 800639e:	2b20      	cmp	r3, #32
 80063a0:	f040 817a 	bne.w	8006698 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff fe85 	bl	80060b8 <USBD_CoreFindEP>
 80063ae:	4603      	mov	r3, r0
 80063b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063b2:	7b7b      	ldrb	r3, [r7, #13]
 80063b4:	2bff      	cmp	r3, #255	@ 0xff
 80063b6:	f000 8174 	beq.w	80066a2 <USBD_StdEPReq+0x32e>
 80063ba:	7b7b      	ldrb	r3, [r7, #13]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f040 8170 	bne.w	80066a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80063c2:	7b7a      	ldrb	r2, [r7, #13]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80063ca:	7b7a      	ldrb	r2, [r7, #13]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	32ae      	adds	r2, #174	@ 0xae
 80063d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 8163 	beq.w	80066a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80063dc:	7b7a      	ldrb	r2, [r7, #13]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	32ae      	adds	r2, #174	@ 0xae
 80063e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	4798      	blx	r3
 80063ee:	4603      	mov	r3, r0
 80063f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063f2:	e156      	b.n	80066a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	785b      	ldrb	r3, [r3, #1]
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d008      	beq.n	800640e <USBD_StdEPReq+0x9a>
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	f300 8145 	bgt.w	800668c <USBD_StdEPReq+0x318>
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 809b 	beq.w	800653e <USBD_StdEPReq+0x1ca>
 8006408:	2b01      	cmp	r3, #1
 800640a:	d03c      	beq.n	8006486 <USBD_StdEPReq+0x112>
 800640c:	e13e      	b.n	800668c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d002      	beq.n	8006420 <USBD_StdEPReq+0xac>
 800641a:	2b03      	cmp	r3, #3
 800641c:	d016      	beq.n	800644c <USBD_StdEPReq+0xd8>
 800641e:	e02c      	b.n	800647a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006420:	7bbb      	ldrb	r3, [r7, #14]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00d      	beq.n	8006442 <USBD_StdEPReq+0xce>
 8006426:	7bbb      	ldrb	r3, [r7, #14]
 8006428:	2b80      	cmp	r3, #128	@ 0x80
 800642a:	d00a      	beq.n	8006442 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 f949 	bl	80076c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006436:	2180      	movs	r1, #128	@ 0x80
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 f945 	bl	80076c8 <USBD_LL_StallEP>
 800643e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006440:	e020      	b.n	8006484 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fc7a 	bl	8006d3e <USBD_CtlError>
              break;
 800644a:	e01b      	b.n	8006484 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	885b      	ldrh	r3, [r3, #2]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10e      	bne.n	8006472 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00b      	beq.n	8006472 <USBD_StdEPReq+0xfe>
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	2b80      	cmp	r3, #128	@ 0x80
 800645e:	d008      	beq.n	8006472 <USBD_StdEPReq+0xfe>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	88db      	ldrh	r3, [r3, #6]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d104      	bne.n	8006472 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006468:	7bbb      	ldrb	r3, [r7, #14]
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 f92b 	bl	80076c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fd3a 	bl	8006eec <USBD_CtlSendStatus>

              break;
 8006478:	e004      	b.n	8006484 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fc5e 	bl	8006d3e <USBD_CtlError>
              break;
 8006482:	bf00      	nop
          }
          break;
 8006484:	e107      	b.n	8006696 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d002      	beq.n	8006498 <USBD_StdEPReq+0x124>
 8006492:	2b03      	cmp	r3, #3
 8006494:	d016      	beq.n	80064c4 <USBD_StdEPReq+0x150>
 8006496:	e04b      	b.n	8006530 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006498:	7bbb      	ldrb	r3, [r7, #14]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00d      	beq.n	80064ba <USBD_StdEPReq+0x146>
 800649e:	7bbb      	ldrb	r3, [r7, #14]
 80064a0:	2b80      	cmp	r3, #128	@ 0x80
 80064a2:	d00a      	beq.n	80064ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064a4:	7bbb      	ldrb	r3, [r7, #14]
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 f90d 	bl	80076c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064ae:	2180      	movs	r1, #128	@ 0x80
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 f909 	bl	80076c8 <USBD_LL_StallEP>
 80064b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064b8:	e040      	b.n	800653c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fc3e 	bl	8006d3e <USBD_CtlError>
              break;
 80064c2:	e03b      	b.n	800653c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	885b      	ldrh	r3, [r3, #2]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d136      	bne.n	800653a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d004      	beq.n	80064e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80064d6:	7bbb      	ldrb	r3, [r7, #14]
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 f913 	bl	8007706 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fd03 	bl	8006eec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80064e6:	7bbb      	ldrb	r3, [r7, #14]
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff fde4 	bl	80060b8 <USBD_CoreFindEP>
 80064f0:	4603      	mov	r3, r0
 80064f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064f4:	7b7b      	ldrb	r3, [r7, #13]
 80064f6:	2bff      	cmp	r3, #255	@ 0xff
 80064f8:	d01f      	beq.n	800653a <USBD_StdEPReq+0x1c6>
 80064fa:	7b7b      	ldrb	r3, [r7, #13]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d11c      	bne.n	800653a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006500:	7b7a      	ldrb	r2, [r7, #13]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006508:	7b7a      	ldrb	r2, [r7, #13]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	32ae      	adds	r2, #174	@ 0xae
 800650e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d010      	beq.n	800653a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006518:	7b7a      	ldrb	r2, [r7, #13]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	32ae      	adds	r2, #174	@ 0xae
 800651e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	4798      	blx	r3
 800652a:	4603      	mov	r3, r0
 800652c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800652e:	e004      	b.n	800653a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fc03 	bl	8006d3e <USBD_CtlError>
              break;
 8006538:	e000      	b.n	800653c <USBD_StdEPReq+0x1c8>
              break;
 800653a:	bf00      	nop
          }
          break;
 800653c:	e0ab      	b.n	8006696 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d002      	beq.n	8006550 <USBD_StdEPReq+0x1dc>
 800654a:	2b03      	cmp	r3, #3
 800654c:	d032      	beq.n	80065b4 <USBD_StdEPReq+0x240>
 800654e:	e097      	b.n	8006680 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d007      	beq.n	8006566 <USBD_StdEPReq+0x1f2>
 8006556:	7bbb      	ldrb	r3, [r7, #14]
 8006558:	2b80      	cmp	r3, #128	@ 0x80
 800655a:	d004      	beq.n	8006566 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fbed 	bl	8006d3e <USBD_CtlError>
                break;
 8006564:	e091      	b.n	800668a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800656a:	2b00      	cmp	r3, #0
 800656c:	da0b      	bge.n	8006586 <USBD_StdEPReq+0x212>
 800656e:	7bbb      	ldrb	r3, [r7, #14]
 8006570:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	3310      	adds	r3, #16
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	4413      	add	r3, r2
 8006582:	3304      	adds	r3, #4
 8006584:	e00b      	b.n	800659e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006586:	7bbb      	ldrb	r3, [r7, #14]
 8006588:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	4413      	add	r3, r2
 800659c:	3304      	adds	r3, #4
 800659e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2202      	movs	r2, #2
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fc43 	bl	8006e38 <USBD_CtlSendData>
              break;
 80065b2:	e06a      	b.n	800668a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	da11      	bge.n	80065e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065bc:	7bbb      	ldrb	r3, [r7, #14]
 80065be:	f003 020f 	and.w	r2, r3, #15
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	4613      	mov	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	440b      	add	r3, r1
 80065ce:	3324      	adds	r3, #36	@ 0x24
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d117      	bne.n	8006606 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fbb0 	bl	8006d3e <USBD_CtlError>
                  break;
 80065de:	e054      	b.n	800668a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	f003 020f 	and.w	r2, r3, #15
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fb9d 	bl	8006d3e <USBD_CtlError>
                  break;
 8006604:	e041      	b.n	800668a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800660a:	2b00      	cmp	r3, #0
 800660c:	da0b      	bge.n	8006626 <USBD_StdEPReq+0x2b2>
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	3310      	adds	r3, #16
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	4413      	add	r3, r2
 8006622:	3304      	adds	r3, #4
 8006624:	e00b      	b.n	800663e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006626:	7bbb      	ldrb	r3, [r7, #14]
 8006628:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800662c:	4613      	mov	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	4413      	add	r3, r2
 800663c:	3304      	adds	r3, #4
 800663e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <USBD_StdEPReq+0x2d8>
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	2b80      	cmp	r3, #128	@ 0x80
 800664a:	d103      	bne.n	8006654 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	e00e      	b.n	8006672 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006654:	7bbb      	ldrb	r3, [r7, #14]
 8006656:	4619      	mov	r1, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 f873 	bl	8007744 <USBD_LL_IsStallEP>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2201      	movs	r2, #1
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	e002      	b.n	8006672 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2202      	movs	r2, #2
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fbdd 	bl	8006e38 <USBD_CtlSendData>
              break;
 800667e:	e004      	b.n	800668a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fb5b 	bl	8006d3e <USBD_CtlError>
              break;
 8006688:	bf00      	nop
          }
          break;
 800668a:	e004      	b.n	8006696 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fb55 	bl	8006d3e <USBD_CtlError>
          break;
 8006694:	bf00      	nop
      }
      break;
 8006696:	e005      	b.n	80066a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fb4f 	bl	8006d3e <USBD_CtlError>
      break;
 80066a0:	e000      	b.n	80066a4 <USBD_StdEPReq+0x330>
      break;
 80066a2:	bf00      	nop
  }

  return ret;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	885b      	ldrh	r3, [r3, #2]
 80066ca:	0a1b      	lsrs	r3, r3, #8
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	3b01      	subs	r3, #1
 80066d0:	2b06      	cmp	r3, #6
 80066d2:	f200 8128 	bhi.w	8006926 <USBD_GetDescriptor+0x276>
 80066d6:	a201      	add	r2, pc, #4	@ (adr r2, 80066dc <USBD_GetDescriptor+0x2c>)
 80066d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066dc:	080066f9 	.word	0x080066f9
 80066e0:	08006711 	.word	0x08006711
 80066e4:	08006751 	.word	0x08006751
 80066e8:	08006927 	.word	0x08006927
 80066ec:	08006927 	.word	0x08006927
 80066f0:	080068c7 	.word	0x080068c7
 80066f4:	080068f3 	.word	0x080068f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	7c12      	ldrb	r2, [r2, #16]
 8006704:	f107 0108 	add.w	r1, r7, #8
 8006708:	4610      	mov	r0, r2
 800670a:	4798      	blx	r3
 800670c:	60f8      	str	r0, [r7, #12]
      break;
 800670e:	e112      	b.n	8006936 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	7c1b      	ldrb	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10d      	bne.n	8006734 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800671e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006720:	f107 0208 	add.w	r2, r7, #8
 8006724:	4610      	mov	r0, r2
 8006726:	4798      	blx	r3
 8006728:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3301      	adds	r3, #1
 800672e:	2202      	movs	r2, #2
 8006730:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006732:	e100      	b.n	8006936 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800673a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673c:	f107 0208 	add.w	r2, r7, #8
 8006740:	4610      	mov	r0, r2
 8006742:	4798      	blx	r3
 8006744:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3301      	adds	r3, #1
 800674a:	2202      	movs	r2, #2
 800674c:	701a      	strb	r2, [r3, #0]
      break;
 800674e:	e0f2      	b.n	8006936 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	885b      	ldrh	r3, [r3, #2]
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b05      	cmp	r3, #5
 8006758:	f200 80ac 	bhi.w	80068b4 <USBD_GetDescriptor+0x204>
 800675c:	a201      	add	r2, pc, #4	@ (adr r2, 8006764 <USBD_GetDescriptor+0xb4>)
 800675e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006762:	bf00      	nop
 8006764:	0800677d 	.word	0x0800677d
 8006768:	080067b1 	.word	0x080067b1
 800676c:	080067e5 	.word	0x080067e5
 8006770:	08006819 	.word	0x08006819
 8006774:	0800684d 	.word	0x0800684d
 8006778:	08006881 	.word	0x08006881
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00b      	beq.n	80067a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	7c12      	ldrb	r2, [r2, #16]
 8006794:	f107 0108 	add.w	r1, r7, #8
 8006798:	4610      	mov	r0, r2
 800679a:	4798      	blx	r3
 800679c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800679e:	e091      	b.n	80068c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 facb 	bl	8006d3e <USBD_CtlError>
            err++;
 80067a8:	7afb      	ldrb	r3, [r7, #11]
 80067aa:	3301      	adds	r3, #1
 80067ac:	72fb      	strb	r3, [r7, #11]
          break;
 80067ae:	e089      	b.n	80068c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00b      	beq.n	80067d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	7c12      	ldrb	r2, [r2, #16]
 80067c8:	f107 0108 	add.w	r1, r7, #8
 80067cc:	4610      	mov	r0, r2
 80067ce:	4798      	blx	r3
 80067d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067d2:	e077      	b.n	80068c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fab1 	bl	8006d3e <USBD_CtlError>
            err++;
 80067dc:	7afb      	ldrb	r3, [r7, #11]
 80067de:	3301      	adds	r3, #1
 80067e0:	72fb      	strb	r3, [r7, #11]
          break;
 80067e2:	e06f      	b.n	80068c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	7c12      	ldrb	r2, [r2, #16]
 80067fc:	f107 0108 	add.w	r1, r7, #8
 8006800:	4610      	mov	r0, r2
 8006802:	4798      	blx	r3
 8006804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006806:	e05d      	b.n	80068c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fa97 	bl	8006d3e <USBD_CtlError>
            err++;
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	3301      	adds	r3, #1
 8006814:	72fb      	strb	r3, [r7, #11]
          break;
 8006816:	e055      	b.n	80068c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00b      	beq.n	800683c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	7c12      	ldrb	r2, [r2, #16]
 8006830:	f107 0108 	add.w	r1, r7, #8
 8006834:	4610      	mov	r0, r2
 8006836:	4798      	blx	r3
 8006838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800683a:	e043      	b.n	80068c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa7d 	bl	8006d3e <USBD_CtlError>
            err++;
 8006844:	7afb      	ldrb	r3, [r7, #11]
 8006846:	3301      	adds	r3, #1
 8006848:	72fb      	strb	r3, [r7, #11]
          break;
 800684a:	e03b      	b.n	80068c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	7c12      	ldrb	r2, [r2, #16]
 8006864:	f107 0108 	add.w	r1, r7, #8
 8006868:	4610      	mov	r0, r2
 800686a:	4798      	blx	r3
 800686c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800686e:	e029      	b.n	80068c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fa63 	bl	8006d3e <USBD_CtlError>
            err++;
 8006878:	7afb      	ldrb	r3, [r7, #11]
 800687a:	3301      	adds	r3, #1
 800687c:	72fb      	strb	r3, [r7, #11]
          break;
 800687e:	e021      	b.n	80068c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00b      	beq.n	80068a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	7c12      	ldrb	r2, [r2, #16]
 8006898:	f107 0108 	add.w	r1, r7, #8
 800689c:	4610      	mov	r0, r2
 800689e:	4798      	blx	r3
 80068a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068a2:	e00f      	b.n	80068c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa49 	bl	8006d3e <USBD_CtlError>
            err++;
 80068ac:	7afb      	ldrb	r3, [r7, #11]
 80068ae:	3301      	adds	r3, #1
 80068b0:	72fb      	strb	r3, [r7, #11]
          break;
 80068b2:	e007      	b.n	80068c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa41 	bl	8006d3e <USBD_CtlError>
          err++;
 80068bc:	7afb      	ldrb	r3, [r7, #11]
 80068be:	3301      	adds	r3, #1
 80068c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80068c2:	bf00      	nop
      }
      break;
 80068c4:	e037      	b.n	8006936 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	7c1b      	ldrb	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068d6:	f107 0208 	add.w	r2, r7, #8
 80068da:	4610      	mov	r0, r2
 80068dc:	4798      	blx	r3
 80068de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068e0:	e029      	b.n	8006936 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fa2a 	bl	8006d3e <USBD_CtlError>
        err++;
 80068ea:	7afb      	ldrb	r3, [r7, #11]
 80068ec:	3301      	adds	r3, #1
 80068ee:	72fb      	strb	r3, [r7, #11]
      break;
 80068f0:	e021      	b.n	8006936 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	7c1b      	ldrb	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10d      	bne.n	8006916 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006902:	f107 0208 	add.w	r2, r7, #8
 8006906:	4610      	mov	r0, r2
 8006908:	4798      	blx	r3
 800690a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	2207      	movs	r2, #7
 8006912:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006914:	e00f      	b.n	8006936 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fa10 	bl	8006d3e <USBD_CtlError>
        err++;
 800691e:	7afb      	ldrb	r3, [r7, #11]
 8006920:	3301      	adds	r3, #1
 8006922:	72fb      	strb	r3, [r7, #11]
      break;
 8006924:	e007      	b.n	8006936 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fa08 	bl	8006d3e <USBD_CtlError>
      err++;
 800692e:	7afb      	ldrb	r3, [r7, #11]
 8006930:	3301      	adds	r3, #1
 8006932:	72fb      	strb	r3, [r7, #11]
      break;
 8006934:	bf00      	nop
  }

  if (err != 0U)
 8006936:	7afb      	ldrb	r3, [r7, #11]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d11e      	bne.n	800697a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	88db      	ldrh	r3, [r3, #6]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d016      	beq.n	8006972 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006944:	893b      	ldrh	r3, [r7, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00e      	beq.n	8006968 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	88da      	ldrh	r2, [r3, #6]
 800694e:	893b      	ldrh	r3, [r7, #8]
 8006950:	4293      	cmp	r3, r2
 8006952:	bf28      	it	cs
 8006954:	4613      	movcs	r3, r2
 8006956:	b29b      	uxth	r3, r3
 8006958:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800695a:	893b      	ldrh	r3, [r7, #8]
 800695c:	461a      	mov	r2, r3
 800695e:	68f9      	ldr	r1, [r7, #12]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fa69 	bl	8006e38 <USBD_CtlSendData>
 8006966:	e009      	b.n	800697c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f9e7 	bl	8006d3e <USBD_CtlError>
 8006970:	e004      	b.n	800697c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 faba 	bl	8006eec <USBD_CtlSendStatus>
 8006978:	e000      	b.n	800697c <USBD_GetDescriptor+0x2cc>
    return;
 800697a:	bf00      	nop
  }
}
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop

08006984 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	889b      	ldrh	r3, [r3, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d131      	bne.n	80069fa <USBD_SetAddress+0x76>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	88db      	ldrh	r3, [r3, #6]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d12d      	bne.n	80069fa <USBD_SetAddress+0x76>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	885b      	ldrh	r3, [r3, #2]
 80069a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80069a4:	d829      	bhi.n	80069fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	885b      	ldrh	r3, [r3, #2]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b03      	cmp	r3, #3
 80069bc:	d104      	bne.n	80069c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f9bc 	bl	8006d3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c6:	e01d      	b.n	8006a04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	7bfa      	ldrb	r2, [r7, #15]
 80069cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fee1 	bl	800779c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fa86 	bl	8006eec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d004      	beq.n	80069f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2202      	movs	r2, #2
 80069ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ee:	e009      	b.n	8006a04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f8:	e004      	b.n	8006a04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f99e 	bl	8006d3e <USBD_CtlError>
  }
}
 8006a02:	bf00      	nop
 8006a04:	bf00      	nop
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	885b      	ldrh	r3, [r3, #2]
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	4b4e      	ldr	r3, [pc, #312]	@ (8006b5c <USBD_SetConfig+0x150>)
 8006a22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a24:	4b4d      	ldr	r3, [pc, #308]	@ (8006b5c <USBD_SetConfig+0x150>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d905      	bls.n	8006a38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f985 	bl	8006d3e <USBD_CtlError>
    return USBD_FAIL;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e08c      	b.n	8006b52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d002      	beq.n	8006a4a <USBD_SetConfig+0x3e>
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d029      	beq.n	8006a9c <USBD_SetConfig+0x90>
 8006a48:	e075      	b.n	8006b36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a4a:	4b44      	ldr	r3, [pc, #272]	@ (8006b5c <USBD_SetConfig+0x150>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d020      	beq.n	8006a94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006a52:	4b42      	ldr	r3, [pc, #264]	@ (8006b5c <USBD_SetConfig+0x150>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8006b5c <USBD_SetConfig+0x150>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fe ffe3 	bl	8005a2e <USBD_SetClassConfig>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d008      	beq.n	8006a84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f962 	bl	8006d3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a82:	e065      	b.n	8006b50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fa31 	bl	8006eec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2203      	movs	r2, #3
 8006a8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006a92:	e05d      	b.n	8006b50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fa29 	bl	8006eec <USBD_CtlSendStatus>
      break;
 8006a9a:	e059      	b.n	8006b50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8006b5c <USBD_SetConfig+0x150>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d112      	bne.n	8006aca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006aac:	4b2b      	ldr	r3, [pc, #172]	@ (8006b5c <USBD_SetConfig+0x150>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ab6:	4b29      	ldr	r3, [pc, #164]	@ (8006b5c <USBD_SetConfig+0x150>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7fe ffd2 	bl	8005a66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fa12 	bl	8006eec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ac8:	e042      	b.n	8006b50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006aca:	4b24      	ldr	r3, [pc, #144]	@ (8006b5c <USBD_SetConfig+0x150>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d02a      	beq.n	8006b2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7fe ffc0 	bl	8005a66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8006b5c <USBD_SetConfig+0x150>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006af0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b5c <USBD_SetConfig+0x150>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fe ff99 	bl	8005a2e <USBD_SetClassConfig>
 8006afc:	4603      	mov	r3, r0
 8006afe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00f      	beq.n	8006b26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f918 	bl	8006d3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fe ffa5 	bl	8005a66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006b24:	e014      	b.n	8006b50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f9e0 	bl	8006eec <USBD_CtlSendStatus>
      break;
 8006b2c:	e010      	b.n	8006b50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f9dc 	bl	8006eec <USBD_CtlSendStatus>
      break;
 8006b34:	e00c      	b.n	8006b50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f900 	bl	8006d3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b3e:	4b07      	ldr	r3, [pc, #28]	@ (8006b5c <USBD_SetConfig+0x150>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7fe ff8e 	bl	8005a66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b4e:	bf00      	nop
  }

  return ret;
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000174 	.word	0x20000174

08006b60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	88db      	ldrh	r3, [r3, #6]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d004      	beq.n	8006b7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f8e2 	bl	8006d3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b7a:	e023      	b.n	8006bc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	dc02      	bgt.n	8006b8e <USBD_GetConfig+0x2e>
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	dc03      	bgt.n	8006b94 <USBD_GetConfig+0x34>
 8006b8c:	e015      	b.n	8006bba <USBD_GetConfig+0x5a>
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d00b      	beq.n	8006baa <USBD_GetConfig+0x4a>
 8006b92:	e012      	b.n	8006bba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f948 	bl	8006e38 <USBD_CtlSendData>
        break;
 8006ba8:	e00c      	b.n	8006bc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	3304      	adds	r3, #4
 8006bae:	2201      	movs	r2, #1
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f940 	bl	8006e38 <USBD_CtlSendData>
        break;
 8006bb8:	e004      	b.n	8006bc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f8be 	bl	8006d3e <USBD_CtlError>
        break;
 8006bc2:	bf00      	nop
}
 8006bc4:	bf00      	nop
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d81e      	bhi.n	8006c22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	88db      	ldrh	r3, [r3, #6]
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d004      	beq.n	8006bf6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f8a5 	bl	8006d3e <USBD_CtlError>
        break;
 8006bf4:	e01a      	b.n	8006c2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f043 0202 	orr.w	r2, r3, #2
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	330c      	adds	r3, #12
 8006c16:	2202      	movs	r2, #2
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f90c 	bl	8006e38 <USBD_CtlSendData>
      break;
 8006c20:	e004      	b.n	8006c2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f88a 	bl	8006d3e <USBD_CtlError>
      break;
 8006c2a:	bf00      	nop
  }
}
 8006c2c:	bf00      	nop
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	885b      	ldrh	r3, [r3, #2]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d107      	bne.n	8006c56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f94c 	bl	8006eec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006c54:	e013      	b.n	8006c7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	885b      	ldrh	r3, [r3, #2]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d10b      	bne.n	8006c76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	889b      	ldrh	r3, [r3, #4]
 8006c62:	0a1b      	lsrs	r3, r3, #8
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f93c 	bl	8006eec <USBD_CtlSendStatus>
}
 8006c74:	e003      	b.n	8006c7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f860 	bl	8006d3e <USBD_CtlError>
}
 8006c7e:	bf00      	nop
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b082      	sub	sp, #8
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d80b      	bhi.n	8006cb6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	885b      	ldrh	r3, [r3, #2]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d10c      	bne.n	8006cc0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f91c 	bl	8006eec <USBD_CtlSendStatus>
      }
      break;
 8006cb4:	e004      	b.n	8006cc0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f840 	bl	8006d3e <USBD_CtlError>
      break;
 8006cbe:	e000      	b.n	8006cc2 <USBD_ClrFeature+0x3c>
      break;
 8006cc0:	bf00      	nop
  }
}
 8006cc2:	bf00      	nop
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	781a      	ldrb	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	781a      	ldrb	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f7ff fa40 	bl	800617a <SWAPBYTE>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3301      	adds	r3, #1
 8006d06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f7ff fa33 	bl	800617a <SWAPBYTE>
 8006d14:	4603      	mov	r3, r0
 8006d16:	461a      	mov	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3301      	adds	r3, #1
 8006d26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f7ff fa26 	bl	800617a <SWAPBYTE>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	461a      	mov	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	80da      	strh	r2, [r3, #6]
}
 8006d36:	bf00      	nop
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b082      	sub	sp, #8
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d48:	2180      	movs	r1, #128	@ 0x80
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fcbc 	bl	80076c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d50:	2100      	movs	r1, #0
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fcb8 	bl	80076c8 <USBD_LL_StallEP>
}
 8006d58:	bf00      	nop
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d042      	beq.n	8006dfc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006d7a:	6938      	ldr	r0, [r7, #16]
 8006d7c:	f000 f842 	bl	8006e04 <USBD_GetLen>
 8006d80:	4603      	mov	r3, r0
 8006d82:	3301      	adds	r3, #1
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d8a:	d808      	bhi.n	8006d9e <USBD_GetString+0x3e>
 8006d8c:	6938      	ldr	r0, [r7, #16]
 8006d8e:	f000 f839 	bl	8006e04 <USBD_GetLen>
 8006d92:	4603      	mov	r3, r0
 8006d94:	3301      	adds	r3, #1
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	e001      	b.n	8006da2 <USBD_GetString+0x42>
 8006d9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	4413      	add	r3, r2
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	7812      	ldrb	r2, [r2, #0]
 8006db0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
 8006db4:	3301      	adds	r3, #1
 8006db6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006db8:	7dfb      	ldrb	r3, [r7, #23]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	2203      	movs	r2, #3
 8006dc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006dc8:	e013      	b.n	8006df2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	4413      	add	r3, r2
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	7812      	ldrb	r2, [r2, #0]
 8006dd4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	613b      	str	r3, [r7, #16]
    idx++;
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	3301      	adds	r3, #1
 8006de0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	4413      	add	r3, r2
 8006de8:	2200      	movs	r2, #0
 8006dea:	701a      	strb	r2, [r3, #0]
    idx++;
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	3301      	adds	r3, #1
 8006df0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e7      	bne.n	8006dca <USBD_GetString+0x6a>
 8006dfa:	e000      	b.n	8006dfe <USBD_GetString+0x9e>
    return;
 8006dfc:	bf00      	nop
  }
}
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006e14:	e005      	b.n	8006e22 <USBD_GetLen+0x1e>
  {
    len++;
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1f5      	bne.n	8006e16 <USBD_GetLen+0x12>
  }

  return len;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2202      	movs	r2, #2
 8006e48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 fcbb 	bl	80077da <USBD_LL_Transmit>

  return USBD_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	2100      	movs	r1, #0
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 fcaa 	bl	80077da <USBD_LL_Transmit>

  return USBD_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	2100      	movs	r1, #0
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fcae 	bl	800781c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	2100      	movs	r1, #0
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 fc9d 	bl	800781c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2204      	movs	r2, #4
 8006ef8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006efc:	2300      	movs	r3, #0
 8006efe:	2200      	movs	r2, #0
 8006f00:	2100      	movs	r1, #0
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fc69 	bl	80077da <USBD_LL_Transmit>

  return USBD_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b082      	sub	sp, #8
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2205      	movs	r2, #5
 8006f1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f22:	2300      	movs	r3, #0
 8006f24:	2200      	movs	r2, #0
 8006f26:	2100      	movs	r1, #0
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fc77 	bl	800781c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	4912      	ldr	r1, [pc, #72]	@ (8006f88 <MX_USB_DEVICE_Init+0x50>)
 8006f40:	4812      	ldr	r0, [pc, #72]	@ (8006f8c <MX_USB_DEVICE_Init+0x54>)
 8006f42:	f7fe fcf7 	bl	8005934 <USBD_Init>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f4c:	f7f9 fbe8 	bl	8000720 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f50:	490f      	ldr	r1, [pc, #60]	@ (8006f90 <MX_USB_DEVICE_Init+0x58>)
 8006f52:	480e      	ldr	r0, [pc, #56]	@ (8006f8c <MX_USB_DEVICE_Init+0x54>)
 8006f54:	f7fe fd1e 	bl	8005994 <USBD_RegisterClass>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f5e:	f7f9 fbdf 	bl	8000720 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006f62:	490c      	ldr	r1, [pc, #48]	@ (8006f94 <MX_USB_DEVICE_Init+0x5c>)
 8006f64:	4809      	ldr	r0, [pc, #36]	@ (8006f8c <MX_USB_DEVICE_Init+0x54>)
 8006f66:	f7fe fc55 	bl	8005814 <USBD_CDC_RegisterInterface>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f70:	f7f9 fbd6 	bl	8000720 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f74:	4805      	ldr	r0, [pc, #20]	@ (8006f8c <MX_USB_DEVICE_Init+0x54>)
 8006f76:	f7fe fd43 	bl	8005a00 <USBD_Start>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f80:	f7f9 fbce 	bl	8000720 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f84:	bf00      	nop
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	200000ac 	.word	0x200000ac
 8006f8c:	20000178 	.word	0x20000178
 8006f90:	20000018 	.word	0x20000018
 8006f94:	20000098 	.word	0x20000098

08006f98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	4905      	ldr	r1, [pc, #20]	@ (8006fb4 <CDC_Init_FS+0x1c>)
 8006fa0:	4805      	ldr	r0, [pc, #20]	@ (8006fb8 <CDC_Init_FS+0x20>)
 8006fa2:	f7fe fc51 	bl	8005848 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006fa6:	4905      	ldr	r1, [pc, #20]	@ (8006fbc <CDC_Init_FS+0x24>)
 8006fa8:	4803      	ldr	r0, [pc, #12]	@ (8006fb8 <CDC_Init_FS+0x20>)
 8006faa:	f7fe fc6f 	bl	800588c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006fae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	20000854 	.word	0x20000854
 8006fb8:	20000178 	.word	0x20000178
 8006fbc:	20000454 	.word	0x20000454

08006fc0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006fc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	6039      	str	r1, [r7, #0]
 8006fda:	71fb      	strb	r3, [r7, #7]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	2b23      	cmp	r3, #35	@ 0x23
 8006fe4:	d84a      	bhi.n	800707c <CDC_Control_FS+0xac>
 8006fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fec <CDC_Control_FS+0x1c>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	0800707d 	.word	0x0800707d
 8006ff0:	0800707d 	.word	0x0800707d
 8006ff4:	0800707d 	.word	0x0800707d
 8006ff8:	0800707d 	.word	0x0800707d
 8006ffc:	0800707d 	.word	0x0800707d
 8007000:	0800707d 	.word	0x0800707d
 8007004:	0800707d 	.word	0x0800707d
 8007008:	0800707d 	.word	0x0800707d
 800700c:	0800707d 	.word	0x0800707d
 8007010:	0800707d 	.word	0x0800707d
 8007014:	0800707d 	.word	0x0800707d
 8007018:	0800707d 	.word	0x0800707d
 800701c:	0800707d 	.word	0x0800707d
 8007020:	0800707d 	.word	0x0800707d
 8007024:	0800707d 	.word	0x0800707d
 8007028:	0800707d 	.word	0x0800707d
 800702c:	0800707d 	.word	0x0800707d
 8007030:	0800707d 	.word	0x0800707d
 8007034:	0800707d 	.word	0x0800707d
 8007038:	0800707d 	.word	0x0800707d
 800703c:	0800707d 	.word	0x0800707d
 8007040:	0800707d 	.word	0x0800707d
 8007044:	0800707d 	.word	0x0800707d
 8007048:	0800707d 	.word	0x0800707d
 800704c:	0800707d 	.word	0x0800707d
 8007050:	0800707d 	.word	0x0800707d
 8007054:	0800707d 	.word	0x0800707d
 8007058:	0800707d 	.word	0x0800707d
 800705c:	0800707d 	.word	0x0800707d
 8007060:	0800707d 	.word	0x0800707d
 8007064:	0800707d 	.word	0x0800707d
 8007068:	0800707d 	.word	0x0800707d
 800706c:	0800707d 	.word	0x0800707d
 8007070:	0800707d 	.word	0x0800707d
 8007074:	0800707d 	.word	0x0800707d
 8007078:	0800707d 	.word	0x0800707d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800707c:	bf00      	nop
  }

  return (USBD_OK);
 800707e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007080:	4618      	mov	r0, r3
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	4805      	ldr	r0, [pc, #20]	@ (80070b0 <CDC_Receive_FS+0x24>)
 800709a:	f7fe fbf7 	bl	800588c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800709e:	4804      	ldr	r0, [pc, #16]	@ (80070b0 <CDC_Receive_FS+0x24>)
 80070a0:	f7fe fc12 	bl	80058c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80070a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20000178 	.word	0x20000178

080070b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	4613      	mov	r3, r2
 80070c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80070c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
	...

080070d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	6039      	str	r1, [r7, #0]
 80070e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2212      	movs	r2, #18
 80070e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070ea:	4b03      	ldr	r3, [pc, #12]	@ (80070f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	200000c8 	.word	0x200000c8

080070fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	6039      	str	r1, [r7, #0]
 8007106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2204      	movs	r2, #4
 800710c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800710e:	4b03      	ldr	r3, [pc, #12]	@ (800711c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007110:	4618      	mov	r0, r3
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	200000dc 	.word	0x200000dc

08007120 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	6039      	str	r1, [r7, #0]
 800712a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800712c:	79fb      	ldrb	r3, [r7, #7]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d105      	bne.n	800713e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	4907      	ldr	r1, [pc, #28]	@ (8007154 <USBD_FS_ProductStrDescriptor+0x34>)
 8007136:	4808      	ldr	r0, [pc, #32]	@ (8007158 <USBD_FS_ProductStrDescriptor+0x38>)
 8007138:	f7ff fe12 	bl	8006d60 <USBD_GetString>
 800713c:	e004      	b.n	8007148 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	4904      	ldr	r1, [pc, #16]	@ (8007154 <USBD_FS_ProductStrDescriptor+0x34>)
 8007142:	4805      	ldr	r0, [pc, #20]	@ (8007158 <USBD_FS_ProductStrDescriptor+0x38>)
 8007144:	f7ff fe0c 	bl	8006d60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007148:	4b02      	ldr	r3, [pc, #8]	@ (8007154 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000c54 	.word	0x20000c54
 8007158:	080079dc 	.word	0x080079dc

0800715c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	6039      	str	r1, [r7, #0]
 8007166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	4904      	ldr	r1, [pc, #16]	@ (800717c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800716c:	4804      	ldr	r0, [pc, #16]	@ (8007180 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800716e:	f7ff fdf7 	bl	8006d60 <USBD_GetString>
  return USBD_StrDesc;
 8007172:	4b02      	ldr	r3, [pc, #8]	@ (800717c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20000c54 	.word	0x20000c54
 8007180:	080079f4 	.word	0x080079f4

08007184 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	6039      	str	r1, [r7, #0]
 800718e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	221a      	movs	r2, #26
 8007194:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007196:	f000 f843 	bl	8007220 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800719a:	4b02      	ldr	r3, [pc, #8]	@ (80071a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	200000e0 	.word	0x200000e0

080071a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	6039      	str	r1, [r7, #0]
 80071b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071b4:	79fb      	ldrb	r3, [r7, #7]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d105      	bne.n	80071c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	4907      	ldr	r1, [pc, #28]	@ (80071dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80071be:	4808      	ldr	r0, [pc, #32]	@ (80071e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071c0:	f7ff fdce 	bl	8006d60 <USBD_GetString>
 80071c4:	e004      	b.n	80071d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	4904      	ldr	r1, [pc, #16]	@ (80071dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80071ca:	4805      	ldr	r0, [pc, #20]	@ (80071e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071cc:	f7ff fdc8 	bl	8006d60 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071d0:	4b02      	ldr	r3, [pc, #8]	@ (80071dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20000c54 	.word	0x20000c54
 80071e0:	08007a08 	.word	0x08007a08

080071e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	6039      	str	r1, [r7, #0]
 80071ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d105      	bne.n	8007202 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	4907      	ldr	r1, [pc, #28]	@ (8007218 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071fa:	4808      	ldr	r0, [pc, #32]	@ (800721c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071fc:	f7ff fdb0 	bl	8006d60 <USBD_GetString>
 8007200:	e004      	b.n	800720c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	4904      	ldr	r1, [pc, #16]	@ (8007218 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007206:	4805      	ldr	r0, [pc, #20]	@ (800721c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007208:	f7ff fdaa 	bl	8006d60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800720c:	4b02      	ldr	r3, [pc, #8]	@ (8007218 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000c54 	.word	0x20000c54
 800721c:	08007a14 	.word	0x08007a14

08007220 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007226:	4b0f      	ldr	r3, [pc, #60]	@ (8007264 <Get_SerialNum+0x44>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800722c:	4b0e      	ldr	r3, [pc, #56]	@ (8007268 <Get_SerialNum+0x48>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007232:	4b0e      	ldr	r3, [pc, #56]	@ (800726c <Get_SerialNum+0x4c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4413      	add	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d009      	beq.n	800725a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007246:	2208      	movs	r2, #8
 8007248:	4909      	ldr	r1, [pc, #36]	@ (8007270 <Get_SerialNum+0x50>)
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 f814 	bl	8007278 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007250:	2204      	movs	r2, #4
 8007252:	4908      	ldr	r1, [pc, #32]	@ (8007274 <Get_SerialNum+0x54>)
 8007254:	68b8      	ldr	r0, [r7, #8]
 8007256:	f000 f80f 	bl	8007278 <IntToUnicode>
  }
}
 800725a:	bf00      	nop
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	1fff7a10 	.word	0x1fff7a10
 8007268:	1fff7a14 	.word	0x1fff7a14
 800726c:	1fff7a18 	.word	0x1fff7a18
 8007270:	200000e2 	.word	0x200000e2
 8007274:	200000f2 	.word	0x200000f2

08007278 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	4613      	mov	r3, r2
 8007284:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800728a:	2300      	movs	r3, #0
 800728c:	75fb      	strb	r3, [r7, #23]
 800728e:	e027      	b.n	80072e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	0f1b      	lsrs	r3, r3, #28
 8007294:	2b09      	cmp	r3, #9
 8007296:	d80b      	bhi.n	80072b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	0f1b      	lsrs	r3, r3, #28
 800729c:	b2da      	uxtb	r2, r3
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	4619      	mov	r1, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	440b      	add	r3, r1
 80072a8:	3230      	adds	r2, #48	@ 0x30
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]
 80072ae:	e00a      	b.n	80072c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	0f1b      	lsrs	r3, r3, #28
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	4619      	mov	r1, r3
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	440b      	add	r3, r1
 80072c0:	3237      	adds	r2, #55	@ 0x37
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	3301      	adds	r3, #1
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	4413      	add	r3, r2
 80072d6:	2200      	movs	r2, #0
 80072d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	3301      	adds	r3, #1
 80072de:	75fb      	strb	r3, [r7, #23]
 80072e0:	7dfa      	ldrb	r2, [r7, #23]
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d3d3      	bcc.n	8007290 <IntToUnicode+0x18>
  }
}
 80072e8:	bf00      	nop
 80072ea:	bf00      	nop
 80072ec:	371c      	adds	r7, #28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
	...

080072f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	@ 0x28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007300:	f107 0314 	add.w	r3, r7, #20
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	605a      	str	r2, [r3, #4]
 800730a:	609a      	str	r2, [r3, #8]
 800730c:	60da      	str	r2, [r3, #12]
 800730e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007318:	d13a      	bne.n	8007390 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800731a:	2300      	movs	r3, #0
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	4b1e      	ldr	r3, [pc, #120]	@ (8007398 <HAL_PCD_MspInit+0xa0>)
 8007320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007322:	4a1d      	ldr	r2, [pc, #116]	@ (8007398 <HAL_PCD_MspInit+0xa0>)
 8007324:	f043 0301 	orr.w	r3, r3, #1
 8007328:	6313      	str	r3, [r2, #48]	@ 0x30
 800732a:	4b1b      	ldr	r3, [pc, #108]	@ (8007398 <HAL_PCD_MspInit+0xa0>)
 800732c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007336:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800733a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800733c:	2302      	movs	r3, #2
 800733e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007340:	2300      	movs	r3, #0
 8007342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007344:	2303      	movs	r3, #3
 8007346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007348:	230a      	movs	r3, #10
 800734a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800734c:	f107 0314 	add.w	r3, r7, #20
 8007350:	4619      	mov	r1, r3
 8007352:	4812      	ldr	r0, [pc, #72]	@ (800739c <HAL_PCD_MspInit+0xa4>)
 8007354:	f7fa f84c 	bl	80013f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007358:	4b0f      	ldr	r3, [pc, #60]	@ (8007398 <HAL_PCD_MspInit+0xa0>)
 800735a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800735c:	4a0e      	ldr	r2, [pc, #56]	@ (8007398 <HAL_PCD_MspInit+0xa0>)
 800735e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007362:	6353      	str	r3, [r2, #52]	@ 0x34
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	4b0b      	ldr	r3, [pc, #44]	@ (8007398 <HAL_PCD_MspInit+0xa0>)
 800736a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800736c:	4a0a      	ldr	r2, [pc, #40]	@ (8007398 <HAL_PCD_MspInit+0xa0>)
 800736e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007372:	6453      	str	r3, [r2, #68]	@ 0x44
 8007374:	4b08      	ldr	r3, [pc, #32]	@ (8007398 <HAL_PCD_MspInit+0xa0>)
 8007376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007378:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007380:	2200      	movs	r2, #0
 8007382:	2100      	movs	r1, #0
 8007384:	2043      	movs	r0, #67	@ 0x43
 8007386:	f7f9 fffc 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800738a:	2043      	movs	r0, #67	@ 0x43
 800738c:	f7fa f815 	bl	80013ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007390:	bf00      	nop
 8007392:	3728      	adds	r7, #40	@ 0x28
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	40023800 	.word	0x40023800
 800739c:	40020000 	.word	0x40020000

080073a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80073b4:	4619      	mov	r1, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	f7fe fb6f 	bl	8005a9a <USBD_LL_SetupStage>
}
 80073bc:	bf00      	nop
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80073d6:	78fa      	ldrb	r2, [r7, #3]
 80073d8:	6879      	ldr	r1, [r7, #4]
 80073da:	4613      	mov	r3, r2
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	440b      	add	r3, r1
 80073e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	78fb      	ldrb	r3, [r7, #3]
 80073ec:	4619      	mov	r1, r3
 80073ee:	f7fe fba9 	bl	8005b44 <USBD_LL_DataOutStage>
}
 80073f2:	bf00      	nop
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	460b      	mov	r3, r1
 8007404:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800740c:	78fa      	ldrb	r2, [r7, #3]
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	4613      	mov	r3, r2
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	4413      	add	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	440b      	add	r3, r1
 800741a:	3320      	adds	r3, #32
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	78fb      	ldrb	r3, [r7, #3]
 8007420:	4619      	mov	r1, r3
 8007422:	f7fe fc42 	bl	8005caa <USBD_LL_DataInStage>
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b082      	sub	sp, #8
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800743c:	4618      	mov	r0, r3
 800743e:	f7fe fd7c 	bl	8005f3a <USBD_LL_SOF>
}
 8007442:	bf00      	nop
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007452:	2301      	movs	r3, #1
 8007454:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	79db      	ldrb	r3, [r3, #7]
 800745a:	2b02      	cmp	r3, #2
 800745c:	d001      	beq.n	8007462 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800745e:	f7f9 f95f 	bl	8000720 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007468:	7bfa      	ldrb	r2, [r7, #15]
 800746a:	4611      	mov	r1, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f7fe fd20 	bl	8005eb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007478:	4618      	mov	r0, r3
 800747a:	f7fe fcc8 	bl	8005e0e <USBD_LL_Reset>
}
 800747e:	bf00      	nop
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe fd1b 	bl	8005ed2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80074ae:	f043 0301 	orr.w	r3, r3, #1
 80074b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	7adb      	ldrb	r3, [r3, #11]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d005      	beq.n	80074c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074bc:	4b04      	ldr	r3, [pc, #16]	@ (80074d0 <HAL_PCD_SuspendCallback+0x48>)
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	4a03      	ldr	r2, [pc, #12]	@ (80074d0 <HAL_PCD_SuspendCallback+0x48>)
 80074c2:	f043 0306 	orr.w	r3, r3, #6
 80074c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074c8:	bf00      	nop
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	e000ed00 	.word	0xe000ed00

080074d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe fd11 	bl	8005f0a <USBD_LL_Resume>
}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	4611      	mov	r1, r2
 8007506:	4618      	mov	r0, r3
 8007508:	f7fe fd69 	bl	8005fde <USBD_LL_IsoOUTIncomplete>
}
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007526:	78fa      	ldrb	r2, [r7, #3]
 8007528:	4611      	mov	r1, r2
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fd25 	bl	8005f7a <USBD_LL_IsoINIncomplete>
}
 8007530:	bf00      	nop
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe fd7b 	bl	8006042 <USBD_LL_DevConnected>
}
 800754c:	bf00      	nop
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007562:	4618      	mov	r0, r3
 8007564:	f7fe fd78 	bl	8006058 <USBD_LL_DevDisconnected>
}
 8007568:	bf00      	nop
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d13c      	bne.n	80075fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007580:	4a20      	ldr	r2, [pc, #128]	@ (8007604 <USBD_LL_Init+0x94>)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a1e      	ldr	r2, [pc, #120]	@ (8007604 <USBD_LL_Init+0x94>)
 800758c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007590:	4b1c      	ldr	r3, [pc, #112]	@ (8007604 <USBD_LL_Init+0x94>)
 8007592:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007596:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007598:	4b1a      	ldr	r3, [pc, #104]	@ (8007604 <USBD_LL_Init+0x94>)
 800759a:	2204      	movs	r2, #4
 800759c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800759e:	4b19      	ldr	r3, [pc, #100]	@ (8007604 <USBD_LL_Init+0x94>)
 80075a0:	2202      	movs	r2, #2
 80075a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075a4:	4b17      	ldr	r3, [pc, #92]	@ (8007604 <USBD_LL_Init+0x94>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075aa:	4b16      	ldr	r3, [pc, #88]	@ (8007604 <USBD_LL_Init+0x94>)
 80075ac:	2202      	movs	r2, #2
 80075ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80075b0:	4b14      	ldr	r3, [pc, #80]	@ (8007604 <USBD_LL_Init+0x94>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80075b6:	4b13      	ldr	r3, [pc, #76]	@ (8007604 <USBD_LL_Init+0x94>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075bc:	4b11      	ldr	r3, [pc, #68]	@ (8007604 <USBD_LL_Init+0x94>)
 80075be:	2200      	movs	r2, #0
 80075c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80075c2:	4b10      	ldr	r3, [pc, #64]	@ (8007604 <USBD_LL_Init+0x94>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80075c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007604 <USBD_LL_Init+0x94>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80075ce:	480d      	ldr	r0, [pc, #52]	@ (8007604 <USBD_LL_Init+0x94>)
 80075d0:	f7fa f8ab 	bl	800172a <HAL_PCD_Init>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80075da:	f7f9 f8a1 	bl	8000720 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80075de:	2180      	movs	r1, #128	@ 0x80
 80075e0:	4808      	ldr	r0, [pc, #32]	@ (8007604 <USBD_LL_Init+0x94>)
 80075e2:	f7fb fad8 	bl	8002b96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075e6:	2240      	movs	r2, #64	@ 0x40
 80075e8:	2100      	movs	r1, #0
 80075ea:	4806      	ldr	r0, [pc, #24]	@ (8007604 <USBD_LL_Init+0x94>)
 80075ec:	f7fb fa8c 	bl	8002b08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80075f0:	2280      	movs	r2, #128	@ 0x80
 80075f2:	2101      	movs	r1, #1
 80075f4:	4803      	ldr	r0, [pc, #12]	@ (8007604 <USBD_LL_Init+0x94>)
 80075f6:	f7fb fa87 	bl	8002b08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20000e54 	.word	0x20000e54

08007608 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800761e:	4618      	mov	r0, r3
 8007620:	f7fa f992 	bl	8001948 <HAL_PCD_Start>
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	4618      	mov	r0, r3
 800762c:	f000 f942 	bl	80078b4 <USBD_Get_USB_Status>
 8007630:	4603      	mov	r3, r0
 8007632:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007634:	7bbb      	ldrb	r3, [r7, #14]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	4608      	mov	r0, r1
 8007648:	4611      	mov	r1, r2
 800764a:	461a      	mov	r2, r3
 800764c:	4603      	mov	r3, r0
 800764e:	70fb      	strb	r3, [r7, #3]
 8007650:	460b      	mov	r3, r1
 8007652:	70bb      	strb	r3, [r7, #2]
 8007654:	4613      	mov	r3, r2
 8007656:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007666:	78bb      	ldrb	r3, [r7, #2]
 8007668:	883a      	ldrh	r2, [r7, #0]
 800766a:	78f9      	ldrb	r1, [r7, #3]
 800766c:	f7fa fe66 	bl	800233c <HAL_PCD_EP_Open>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 f91c 	bl	80078b4 <USBD_Get_USB_Status>
 800767c:	4603      	mov	r3, r0
 800767e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007680:	7bbb      	ldrb	r3, [r7, #14]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	460b      	mov	r3, r1
 8007694:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	4611      	mov	r1, r2
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fa feb1 	bl	8002410 <HAL_PCD_EP_Close>
 80076ae:	4603      	mov	r3, r0
 80076b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 f8fd 	bl	80078b4 <USBD_Get_USB_Status>
 80076ba:	4603      	mov	r3, r0
 80076bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076be:	7bbb      	ldrb	r3, [r7, #14]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076e2:	78fa      	ldrb	r2, [r7, #3]
 80076e4:	4611      	mov	r1, r2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fa ff69 	bl	80025be <HAL_PCD_EP_SetStall>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f8de 	bl	80078b4 <USBD_Get_USB_Status>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	4611      	mov	r1, r2
 8007724:	4618      	mov	r0, r3
 8007726:	f7fa ffad 	bl	8002684 <HAL_PCD_EP_ClrStall>
 800772a:	4603      	mov	r3, r0
 800772c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800772e:	7bfb      	ldrb	r3, [r7, #15]
 8007730:	4618      	mov	r0, r3
 8007732:	f000 f8bf 	bl	80078b4 <USBD_Get_USB_Status>
 8007736:	4603      	mov	r3, r0
 8007738:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800773a:	7bbb      	ldrb	r3, [r7, #14]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007756:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800775c:	2b00      	cmp	r3, #0
 800775e:	da0b      	bge.n	8007778 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	4613      	mov	r3, r2
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	440b      	add	r3, r1
 8007772:	3316      	adds	r3, #22
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	e00b      	b.n	8007790 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007778:	78fb      	ldrb	r3, [r7, #3]
 800777a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800777e:	68f9      	ldr	r1, [r7, #12]
 8007780:	4613      	mov	r3, r2
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	4413      	add	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	440b      	add	r3, r1
 800778a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800778e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80077b6:	78fa      	ldrb	r2, [r7, #3]
 80077b8:	4611      	mov	r1, r2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fa fd9a 	bl	80022f4 <HAL_PCD_SetAddress>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 f874 	bl	80078b4 <USBD_Get_USB_Status>
 80077cc:	4603      	mov	r3, r0
 80077ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b086      	sub	sp, #24
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	603b      	str	r3, [r7, #0]
 80077e6:	460b      	mov	r3, r1
 80077e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80077f8:	7af9      	ldrb	r1, [r7, #11]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	f7fa fea4 	bl	800254a <HAL_PCD_EP_Transmit>
 8007802:	4603      	mov	r3, r0
 8007804:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007806:	7dfb      	ldrb	r3, [r7, #23]
 8007808:	4618      	mov	r0, r3
 800780a:	f000 f853 	bl	80078b4 <USBD_Get_USB_Status>
 800780e:	4603      	mov	r3, r0
 8007810:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007812:	7dbb      	ldrb	r3, [r7, #22]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	460b      	mov	r3, r1
 800782a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800783a:	7af9      	ldrb	r1, [r7, #11]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	f7fa fe30 	bl	80024a4 <HAL_PCD_EP_Receive>
 8007844:	4603      	mov	r3, r0
 8007846:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	4618      	mov	r0, r3
 800784c:	f000 f832 	bl	80078b4 <USBD_Get_USB_Status>
 8007850:	4603      	mov	r3, r0
 8007852:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007854:	7dbb      	ldrb	r3, [r7, #22]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007870:	78fa      	ldrb	r2, [r7, #3]
 8007872:	4611      	mov	r1, r2
 8007874:	4618      	mov	r0, r3
 8007876:	f7fa fe50 	bl	800251a <HAL_PCD_EP_GetRxCount>
 800787a:	4603      	mov	r3, r0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800788c:	4b03      	ldr	r3, [pc, #12]	@ (800789c <USBD_static_malloc+0x18>)
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	20001338 	.word	0x20001338

080078a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]

}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078c2:	79fb      	ldrb	r3, [r7, #7]
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d817      	bhi.n	80078f8 <USBD_Get_USB_Status+0x44>
 80078c8:	a201      	add	r2, pc, #4	@ (adr r2, 80078d0 <USBD_Get_USB_Status+0x1c>)
 80078ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ce:	bf00      	nop
 80078d0:	080078e1 	.word	0x080078e1
 80078d4:	080078e7 	.word	0x080078e7
 80078d8:	080078ed 	.word	0x080078ed
 80078dc:	080078f3 	.word	0x080078f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]
    break;
 80078e4:	e00b      	b.n	80078fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078e6:	2303      	movs	r3, #3
 80078e8:	73fb      	strb	r3, [r7, #15]
    break;
 80078ea:	e008      	b.n	80078fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078ec:	2301      	movs	r3, #1
 80078ee:	73fb      	strb	r3, [r7, #15]
    break;
 80078f0:	e005      	b.n	80078fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078f2:	2303      	movs	r3, #3
 80078f4:	73fb      	strb	r3, [r7, #15]
    break;
 80078f6:	e002      	b.n	80078fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078f8:	2303      	movs	r3, #3
 80078fa:	73fb      	strb	r3, [r7, #15]
    break;
 80078fc:	bf00      	nop
  }
  return usb_status;
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <memset>:
 800790c:	4402      	add	r2, r0
 800790e:	4603      	mov	r3, r0
 8007910:	4293      	cmp	r3, r2
 8007912:	d100      	bne.n	8007916 <memset+0xa>
 8007914:	4770      	bx	lr
 8007916:	f803 1b01 	strb.w	r1, [r3], #1
 800791a:	e7f9      	b.n	8007910 <memset+0x4>

0800791c <__libc_init_array>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	4d0d      	ldr	r5, [pc, #52]	@ (8007954 <__libc_init_array+0x38>)
 8007920:	4c0d      	ldr	r4, [pc, #52]	@ (8007958 <__libc_init_array+0x3c>)
 8007922:	1b64      	subs	r4, r4, r5
 8007924:	10a4      	asrs	r4, r4, #2
 8007926:	2600      	movs	r6, #0
 8007928:	42a6      	cmp	r6, r4
 800792a:	d109      	bne.n	8007940 <__libc_init_array+0x24>
 800792c:	4d0b      	ldr	r5, [pc, #44]	@ (800795c <__libc_init_array+0x40>)
 800792e:	4c0c      	ldr	r4, [pc, #48]	@ (8007960 <__libc_init_array+0x44>)
 8007930:	f000 f818 	bl	8007964 <_init>
 8007934:	1b64      	subs	r4, r4, r5
 8007936:	10a4      	asrs	r4, r4, #2
 8007938:	2600      	movs	r6, #0
 800793a:	42a6      	cmp	r6, r4
 800793c:	d105      	bne.n	800794a <__libc_init_array+0x2e>
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	f855 3b04 	ldr.w	r3, [r5], #4
 8007944:	4798      	blx	r3
 8007946:	3601      	adds	r6, #1
 8007948:	e7ee      	b.n	8007928 <__libc_init_array+0xc>
 800794a:	f855 3b04 	ldr.w	r3, [r5], #4
 800794e:	4798      	blx	r3
 8007950:	3601      	adds	r6, #1
 8007952:	e7f2      	b.n	800793a <__libc_init_array+0x1e>
 8007954:	08007a3c 	.word	0x08007a3c
 8007958:	08007a3c 	.word	0x08007a3c
 800795c:	08007a3c 	.word	0x08007a3c
 8007960:	08007a40 	.word	0x08007a40

08007964 <_init>:
 8007964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007966:	bf00      	nop
 8007968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796a:	bc08      	pop	{r3}
 800796c:	469e      	mov	lr, r3
 800796e:	4770      	bx	lr

08007970 <_fini>:
 8007970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007972:	bf00      	nop
 8007974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007976:	bc08      	pop	{r3}
 8007978:	469e      	mov	lr, r3
 800797a:	4770      	bx	lr
