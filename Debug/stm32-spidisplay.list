
stm32-spidisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0d8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001484  0800b26c  0800b26c  0000c26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6f0  0800c6f0  0000e100  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c6f0  0800c6f0  0000d6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6f8  0800c6f8  0000e100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c6f8  0800c6f8  0000d6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c700  0800c700  0000d700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  0800c704  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d4  20000100  0800c804  0000e100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016d4  0800c804  0000e6d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acdb  00000000  00000000  0000e130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047b1  00000000  00000000  00028e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  0002d5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001106  00000000  00000000  0002ec20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c801  00000000  00000000  0002fd26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af6e  00000000  00000000  0004c527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093fcd  00000000  00000000  00067495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb462  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c7c  00000000  00000000  000fb4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00101124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000100 	.word	0x20000100
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800b254 	.word	0x0800b254

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000104 	.word	0x20000104
 80001d0:	0800b254 	.word	0x0800b254

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	4b17      	ldr	r3, [pc, #92]	@ (8000568 <MX_DMA_Init+0x68>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a16      	ldr	r2, [pc, #88]	@ (8000568 <MX_DMA_Init+0x68>)
 8000510:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_DMA_Init+0x68>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_DMA_Init+0x68>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <MX_DMA_Init+0x68>)
 800052c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <MX_DMA_Init+0x68>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200b      	movs	r0, #11
 8000544:	f002 fa65 	bl	8002a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000548:	200b      	movs	r0, #11
 800054a:	f002 fa7e 	bl	8002a4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	203b      	movs	r0, #59	@ 0x3b
 8000554:	f002 fa5d 	bl	8002a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000558:	203b      	movs	r0, #59	@ 0x3b
 800055a:	f002 fa76 	bl	8002a4a <HAL_NVIC_EnableIRQ>

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40023800 	.word	0x40023800

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	4b3d      	ldr	r3, [pc, #244]	@ (800067c <MX_GPIO_Init+0x110>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a3c      	ldr	r2, [pc, #240]	@ (800067c <MX_GPIO_Init+0x110>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b3a      	ldr	r3, [pc, #232]	@ (800067c <MX_GPIO_Init+0x110>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b36      	ldr	r3, [pc, #216]	@ (800067c <MX_GPIO_Init+0x110>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a35      	ldr	r2, [pc, #212]	@ (800067c <MX_GPIO_Init+0x110>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ae:	4b33      	ldr	r3, [pc, #204]	@ (800067c <MX_GPIO_Init+0x110>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b2f      	ldr	r3, [pc, #188]	@ (800067c <MX_GPIO_Init+0x110>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a2e      	ldr	r2, [pc, #184]	@ (800067c <MX_GPIO_Init+0x110>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <MX_GPIO_Init+0x110>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b28      	ldr	r3, [pc, #160]	@ (800067c <MX_GPIO_Init+0x110>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a27      	ldr	r2, [pc, #156]	@ (800067c <MX_GPIO_Init+0x110>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b25      	ldr	r3, [pc, #148]	@ (800067c <MX_GPIO_Init+0x110>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f8:	4821      	ldr	r0, [pc, #132]	@ (8000680 <MX_GPIO_Init+0x114>)
 80005fa:	f002 ff57 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
 8000602:	4820      	ldr	r0, [pc, #128]	@ (8000684 <MX_GPIO_Init+0x118>)
 8000604:	f002 ff52 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(chip_select_GPIO_Port, chip_select_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2108      	movs	r1, #8
 800060c:	481e      	ldr	r0, [pc, #120]	@ (8000688 <MX_GPIO_Init+0x11c>)
 800060e:	f002 ff4d 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, register_select_Pin|reset_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2130      	movs	r1, #48	@ 0x30
 8000616:	481c      	ldr	r0, [pc, #112]	@ (8000688 <MX_GPIO_Init+0x11c>)
 8000618:	f002 ff48 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800061c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	4812      	ldr	r0, [pc, #72]	@ (8000680 <MX_GPIO_Init+0x114>)
 8000636:	f002 fdb5 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800063a:	2310      	movs	r3, #16
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <MX_GPIO_Init+0x118>)
 8000652:	f002 fda7 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : chip_select_Pin register_select_Pin reset_Pin */
  GPIO_InitStruct.Pin = chip_select_Pin|register_select_Pin|reset_Pin;
 8000656:	2338      	movs	r3, #56	@ 0x38
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	4806      	ldr	r0, [pc, #24]	@ (8000688 <MX_GPIO_Init+0x11c>)
 800066e:	f002 fd99 	bl	80031a4 <HAL_GPIO_Init>

}
 8000672:	bf00      	nop
 8000674:	3728      	adds	r7, #40	@ 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40020800 	.word	0x40020800
 8000684:	40020000 	.word	0x40020000
 8000688:	40020400 	.word	0x40020400

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	f5ad 6d9c 	sub.w	sp, sp, #1248	@ 0x4e0
 8000692:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f002 f84c 	bl	8002730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f90e 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f7ff ff66 	bl	800056c <MX_GPIO_Init>
  MX_DMA_Init();
 80006a0:	f7ff ff2e 	bl	8000500 <MX_DMA_Init>
  MX_SPI1_Init();
 80006a4:	f000 fbb0 	bl	8000e08 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006a8:	f000 fbe6 	bl	8000e78 <MX_SPI2_Init>
  MX_TIM4_Init();
 80006ac:	f000 fd54 	bl	8001158 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80006b0:	f00a f85e 	bl	800a770 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < 5; i++) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 80006ba:	e016      	b.n	80006ea <main+0x5e>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c2:	4878      	ldr	r0, [pc, #480]	@ (80008a4 <main+0x218>)
 80006c4:	f002 fef2 	bl	80034ac <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80006c8:	2064      	movs	r0, #100	@ 0x64
 80006ca:	f002 f8a3 	bl	8002814 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006d4:	4873      	ldr	r0, [pc, #460]	@ (80008a4 <main+0x218>)
 80006d6:	f002 fee9 	bl	80034ac <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80006da:	2064      	movs	r0, #100	@ 0x64
 80006dc:	f002 f89a 	bl	8002814 <HAL_Delay>
  for (int i = 0; i < 5; i++) {
 80006e0:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 80006e4:	3301      	adds	r3, #1
 80006e6:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 80006ea:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	dde4      	ble.n	80006bc <main+0x30>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  resetScreen();
 80006f2:	f000 fedf 	bl	80014b4 <resetScreen>
  initializeScreen();
 80006f6:	f000 fefb 	bl	80014f0 <initializeScreen>

  char *uga = "uga motorsports";
 80006fa:	4b6b      	ldr	r3, [pc, #428]	@ (80008a8 <main+0x21c>)
 80006fc:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
  drawString(uga, font_FreeSans18pt7b, 240, 160, NO_FLIP_OBJECT | CENTER_OBJECT);
 8000700:	4b6a      	ldr	r3, [pc, #424]	@ (80008ac <main+0x220>)
 8000702:	6819      	ldr	r1, [r3, #0]
 8000704:	2302      	movs	r3, #2
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	23a0      	movs	r3, #160	@ 0xa0
 800070a:	22f0      	movs	r2, #240	@ 0xf0
 800070c:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	@ 0x4d0
 8000710:	f001 fa02 	bl	8001b18 <drawString>
  HAL_Delay(200);
 8000714:	20c8      	movs	r0, #200	@ 0xc8
 8000716:	f002 f87d 	bl	8002814 <HAL_Delay>
  drawString(uga, font_FreeSans18pt7b, 240, 160, FLIP_OBJECT | CENTER_OBJECT);
 800071a:	4b64      	ldr	r3, [pc, #400]	@ (80008ac <main+0x220>)
 800071c:	6819      	ldr	r1, [r3, #0]
 800071e:	2303      	movs	r3, #3
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	23a0      	movs	r3, #160	@ 0xa0
 8000724:	22f0      	movs	r2, #240	@ 0xf0
 8000726:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	@ 0x4d0
 800072a:	f001 f9f5 	bl	8001b18 <drawString>
  HAL_Delay(200);
 800072e:	20c8      	movs	r0, #200	@ 0xc8
 8000730:	f002 f870 	bl	8002814 <HAL_Delay>
  clearScreenfast(0x0000);
 8000734:	2000      	movs	r0, #0
 8000736:	f001 f891 	bl	800185c <clearScreenfast>
  initializeMCP2515();
 800073a:	f000 f92f 	bl	800099c <initializeMCP2515>
  uint8_t ledcolors[3 * 16];
  uint16_t ledbytes[(16 * 24) + 150];
  int G1[12] = {834, 1668, 2502, 3336, 4170, 5004, 5838, 6672, 7506, 8340,
 800073e:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000742:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 8000746:	4a5a      	ldr	r2, [pc, #360]	@ (80008b0 <main+0x224>)
 8000748:	461c      	mov	r4, r3
 800074a:	4615      	mov	r5, r2
 800074c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000754:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  9174, 10008};
  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 800075c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000760:	f507 6293 	add.w	r2, r7, #1176	@ 0x498
 8000764:	2100      	movs	r1, #0
 8000766:	4853      	ldr	r0, [pc, #332]	@ (80008b4 <main+0x228>)
 8000768:	f000 f9d0 	bl	8000b0c <shiftLightsInit>
  HAL_Delay(500);
 800076c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000770:	f002 f850 	bl	8002814 <HAL_Delay>
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8000774:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000778:	f507 6293 	add.w	r2, r7, #1176	@ 0x498
 800077c:	2100      	movs	r1, #0
 800077e:	484d      	ldr	r0, [pc, #308]	@ (80008b4 <main+0x228>)
 8000780:	f000 fada 	bl	8000d38 <startUp>
  clearScreen(0x0000);
 8000784:	2000      	movs	r0, #0
 8000786:	f000 ff8d 	bl	80016a4 <clearScreen>

  struct can_frame frame;

  while (1)
  {
	  int canresult = readMessage(&frame);
 800078a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f916 	bl	80009c0 <readMessage>
 8000794:	f8c7 04cc 	str.w	r0, [r7, #1228]	@ 0x4cc
	  if (canresult == 0) {
 8000798:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800079c:	2b00      	cmp	r3, #0
 800079e:	d171      	bne.n	8000884 <main+0x1f8>
		  if (frame.can_id == 1512) {
 80007a0:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80007a4:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 80007ae:	d139      	bne.n	8000824 <main+0x198>
			  uint16_t rpm = (((uint16_t)frame.data[2]) << 8) + frame.data[3];
 80007b0:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80007b4:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80007b8:	7a9b      	ldrb	r3, [r3, #10]
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	b29b      	uxth	r3, r3
 80007be:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80007c2:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 80007c6:	7ad2      	ldrb	r2, [r2, #11]
 80007c8:	4413      	add	r3, r2
 80007ca:	f8a7 34c8 	strh.w	r3, [r7, #1224]	@ 0x4c8
			  UpdateShiftLights(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes, rpm, G1);
 80007ce:	f8b7 34c8 	ldrh.w	r3, [r7, #1224]	@ 0x4c8
 80007d2:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80007d6:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 80007da:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80007de:	9201      	str	r2, [sp, #4]
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	4603      	mov	r3, r0
 80007e4:	460a      	mov	r2, r1
 80007e6:	2100      	movs	r1, #0
 80007e8:	4832      	ldr	r0, [pc, #200]	@ (80008b4 <main+0x228>)
 80007ea:	f000 fa1f 	bl	8000c2c <UpdateShiftLights>
			  char result[20];
			  itoa(rpm, (char*)(result), 10);
 80007ee:	f8b7 34c8 	ldrh.w	r3, [r7, #1224]	@ 0x4c8
 80007f2:	f107 0114 	add.w	r1, r7, #20
 80007f6:	220a      	movs	r2, #10
 80007f8:	4618      	mov	r0, r3
 80007fa:	f00a fcbb 	bl	800b174 <itoa>
			  drawRectangleFilled(180, 60, 140, 40, 0x0000);
 80007fe:	2300      	movs	r3, #0
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2328      	movs	r3, #40	@ 0x28
 8000804:	228c      	movs	r2, #140	@ 0x8c
 8000806:	213c      	movs	r1, #60	@ 0x3c
 8000808:	20b4      	movs	r0, #180	@ 0xb4
 800080a:	f001 f80b 	bl	8001824 <drawRectangleFilled>
			  drawString(result, font_FreeSans18pt7b, 30, 100, NO_FLIP_OBJECT);
 800080e:	4b27      	ldr	r3, [pc, #156]	@ (80008ac <main+0x220>)
 8000810:	6819      	ldr	r1, [r3, #0]
 8000812:	f107 0014 	add.w	r0, r7, #20
 8000816:	2300      	movs	r3, #0
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2364      	movs	r3, #100	@ 0x64
 800081c:	221e      	movs	r2, #30
 800081e:	f001 f97b 	bl	8001b18 <drawString>
 8000822:	e02f      	b.n	8000884 <main+0x1f8>
		  } else if (frame.can_id == 1513){
 8000824:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000828:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f240 52e9 	movw	r2, #1513	@ 0x5e9
 8000832:	4293      	cmp	r3, r2
 8000834:	d126      	bne.n	8000884 <main+0x1f8>
			  uint16_t temp = (((uint16_t)frame.data[4]) << 8) + frame.data[5];
 8000836:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 800083a:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 800083e:	7b1b      	ldrb	r3, [r3, #12]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b29b      	uxth	r3, r3
 8000844:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8000848:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 800084c:	7b52      	ldrb	r2, [r2, #13]
 800084e:	4413      	add	r3, r2
 8000850:	f8a7 34ca 	strh.w	r3, [r7, #1226]	@ 0x4ca
			  char result[20];
			  itoa(temp, result, 10);
 8000854:	f8b7 34ca 	ldrh.w	r3, [r7, #1226]	@ 0x4ca
 8000858:	4639      	mov	r1, r7
 800085a:	220a      	movs	r2, #10
 800085c:	4618      	mov	r0, r3
 800085e:	f00a fc89 	bl	800b174 <itoa>
			  drawRectangleFilled(180, 20, 140, 40, 0x0000);
 8000862:	2300      	movs	r3, #0
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2328      	movs	r3, #40	@ 0x28
 8000868:	228c      	movs	r2, #140	@ 0x8c
 800086a:	2114      	movs	r1, #20
 800086c:	20b4      	movs	r0, #180	@ 0xb4
 800086e:	f000 ffd9 	bl	8001824 <drawRectangleFilled>
			  drawString(result, font_FreeSans18pt7b, 30, 50, NO_FLIP_OBJECT);
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <main+0x220>)
 8000874:	6819      	ldr	r1, [r3, #0]
 8000876:	4638      	mov	r0, r7
 8000878:	2300      	movs	r3, #0
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2332      	movs	r3, #50	@ 0x32
 800087e:	221e      	movs	r2, #30
 8000880:	f001 f94a 	bl	8001b18 <drawString>
		  }
	  }


	  clearScreenfast(0x0000);
 8000884:	2000      	movs	r0, #0
 8000886:	f000 ffe9 	bl	800185c <clearScreenfast>
	  HAL_Delay(500);
 800088a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800088e:	f001 ffc1 	bl	8002814 <HAL_Delay>
	  clearScreenfast(0xF800);
 8000892:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000896:	f000 ffe1 	bl	800185c <clearScreenfast>
	  HAL_Delay(500);
 800089a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800089e:	f001 ffb9 	bl	8002814 <HAL_Delay>
  {
 80008a2:	e772      	b.n	800078a <main+0xfe>
 80008a4:	40020800 	.word	0x40020800
 80008a8:	0800b26c 	.word	0x0800b26c
 80008ac:	20000000 	.word	0x20000000
 80008b0:	0800b27c 	.word	0x0800b27c
 80008b4:	20000240 	.word	0x20000240

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	@ 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	2230      	movs	r2, #48	@ 0x30
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f00a fc98 	bl	800b1fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	4b29      	ldr	r3, [pc, #164]	@ (8000988 <SystemClock_Config+0xd0>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e4:	4a28      	ldr	r2, [pc, #160]	@ (8000988 <SystemClock_Config+0xd0>)
 80008e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ec:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <SystemClock_Config+0xd0>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b23      	ldr	r3, [pc, #140]	@ (800098c <SystemClock_Config+0xd4>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <SystemClock_Config+0xd4>)
 8000906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <SystemClock_Config+0xd4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800091c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000922:	2302      	movs	r3, #2
 8000924:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000926:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800092a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800092c:	2319      	movs	r3, #25
 800092e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000930:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000934:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000936:	2304      	movs	r3, #4
 8000938:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800093a:	2307      	movs	r3, #7
 800093c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	4618      	mov	r0, r3
 8000944:	f004 f81e 	bl	8004984 <HAL_RCC_OscConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800094e:	f000 f81f 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	230f      	movs	r3, #15
 8000954:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2302      	movs	r3, #2
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000962:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2102      	movs	r1, #2
 800096e:	4618      	mov	r0, r3
 8000970:	f004 fa80 	bl	8004e74 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800097a:	f000 f809 	bl	8000990 <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3750      	adds	r7, #80	@ 0x50
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <Error_Handler+0x8>

0800099c <initializeMCP2515>:
#include "spi.h"
#include "gpio.h"


MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	myMCP.reset();
 80009a0:	4806      	ldr	r0, [pc, #24]	@ (80009bc <initializeMCP2515+0x20>)
 80009a2:	f001 f985 	bl	8001cb0 <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 80009a6:	2202      	movs	r2, #2
 80009a8:	210e      	movs	r1, #14
 80009aa:	4804      	ldr	r0, [pc, #16]	@ (80009bc <initializeMCP2515+0x20>)
 80009ac:	f001 fb52 	bl	8002054 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 80009b0:	4802      	ldr	r0, [pc, #8]	@ (80009bc <initializeMCP2515+0x20>)
 80009b2:	f001 fb03 	bl	8001fbc <_ZN7MCP251513setNormalModeEv>
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000011c 	.word	0x2000011c

080009c0 <readMessage>:

int sendMessage(struct can_frame *frame) {
	return myMCP.sendMessage(frame);
}

int readMessage(struct can_frame *frame) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	4804      	ldr	r0, [pc, #16]	@ (80009dc <readMessage+0x1c>)
 80009cc:	f001 fe5a 	bl	8002684 <_ZN7MCP251511readMessageEP9can_frame>
 80009d0:	4603      	mov	r3, r0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000011c 	.word	0x2000011c

080009e0 <_Z41__static_initialization_and_destruction_0v>:
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af02      	add	r7, sp, #8
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 80009e6:	2310      	movs	r3, #16
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	4b04      	ldr	r3, [pc, #16]	@ (80009fc <_Z41__static_initialization_and_destruction_0v+0x1c>)
 80009ec:	220a      	movs	r2, #10
 80009ee:	4904      	ldr	r1, [pc, #16]	@ (8000a00 <_Z41__static_initialization_and_destruction_0v+0x20>)
 80009f0:	4804      	ldr	r0, [pc, #16]	@ (8000a04 <_Z41__static_initialization_and_destruction_0v+0x24>)
 80009f2:	f001 f8fd 	bl	8001bf0 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40020000 	.word	0x40020000
 8000a00:	20000188 	.word	0x20000188
 8000a04:	2000011c 	.word	0x2000011c

08000a08 <_GLOBAL__sub_I_myMCP>:
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	f7ff ffe8 	bl	80009e0 <_Z41__static_initialization_and_destruction_0v>
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <setColor>:
int datasentflag;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	461a      	mov	r2, r3
 8000a22:	460b      	mov	r3, r1
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	4613      	mov	r3, r2
 8000a28:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 8000a2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a38:	4413      	add	r3, r2
 8000a3a:	79fa      	ldrb	r2, [r7, #7]
 8000a3c:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	3301      	adds	r3, #1
 8000a42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a44:	4413      	add	r3, r2
 8000a46:	79ba      	ldrb	r2, [r7, #6]
 8000a48:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a50:	4413      	add	r3, r2
 8000a52:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000a56:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	61fb      	str	r3, [r7, #28]
 8000a5c:	e02a      	b.n	8000ab4 <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	e021      	b.n	8000aa8 <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a68:	4413      	add	r3, r2
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d009      	beq.n	8000a90 <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	00da      	lsls	r2, r3, #3
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	4413      	add	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a88:	4413      	add	r3, r2
 8000a8a:	2246      	movs	r2, #70	@ 0x46
 8000a8c:	801a      	strh	r2, [r3, #0]
 8000a8e:	e008      	b.n	8000aa2 <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	00da      	lsls	r2, r3, #3
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a9c:	4413      	add	r3, r2
 8000a9e:	2223      	movs	r2, #35	@ 0x23
 8000aa0:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	2b07      	cmp	r3, #7
 8000aac:	ddda      	ble.n	8000a64 <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	61fb      	str	r3, [r7, #28]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	69fa      	ldr	r2, [r7, #28]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	ddcf      	ble.n	8000a5e <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000abe:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	e008      	b.n	8000ad8 <setColor+0xc4>
    	ledbytes[i] = 0;
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000acc:	4413      	add	r3, r2
 8000ace:	2200      	movs	r2, #0
 8000ad0:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f240 2215 	movw	r2, #533	@ 0x215
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	ddf1      	ble.n	8000ac6 <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8000ae2:	f240 2316 	movw	r3, #534	@ 0x216
 8000ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f005 fb3c 	bl	8006168 <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 8000af0:	bf00      	nop
 8000af2:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <setColor+0xf4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0fb      	beq.n	8000af2 <setColor+0xde>
    datasentflag = 0;
 8000afa:	4b03      	ldr	r3, [pc, #12]	@ (8000b08 <setColor+0xf4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000012c 	.word	0x2000012c

08000b0c <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
 8000b1e:	e013      	b.n	8000b48 <shiftLightsInit+0x3c>
		ledcolors[i] = 0;
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 0;
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 0;
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3302      	adds	r3, #2
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3303      	adds	r3, #3
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b4c:	dde8      	ble.n	8000b20 <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
 8000b52:	e02a      	b.n	8000baa <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	e021      	b.n	8000b9e <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d009      	beq.n	8000b86 <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	00da      	lsls	r2, r3, #3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	4413      	add	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	2246      	movs	r2, #70	@ 0x46
 8000b82:	801a      	strh	r2, [r3, #0]
 8000b84:	e008      	b.n	8000b98 <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	00da      	lsls	r2, r3, #3
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	2223      	movs	r2, #35	@ 0x23
 8000b96:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	2b07      	cmp	r3, #7
 8000ba2:	ddda      	ble.n	8000b5a <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	2b2f      	cmp	r3, #47	@ 0x2f
 8000bae:	ddd1      	ble.n	8000b54 <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000bb0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	e008      	b.n	8000bca <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	f240 2215 	movw	r2, #533	@ 0x215
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	ddf1      	ble.n	8000bb8 <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8000bd4:	f240 2316 	movw	r3, #534	@ 0x216
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f005 fac3 	bl	8006168 <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 8000be2:	bf00      	nop
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <shiftLightsInit+0xf4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d0fb      	beq.n	8000be4 <shiftLightsInit+0xd8>
	datasentflag = 0;
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <shiftLightsInit+0xf4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000012c 	.word	0x2000012c

08000c04 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000c10:	f005 fc5a 	bl	80064c8 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000c14:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000240 	.word	0x20000240
 8000c28:	2000012c 	.word	0x2000012c

08000c2c <UpdateShiftLights>:


void UpdateShiftLights(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes, int current_rpm, int * RPM_thresholds) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	@ 0x28
 8000c30:	af04      	add	r7, sp, #16
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	603b      	str	r3, [r7, #0]
  for (int i = 2; i < 14; i++) {
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e024      	b.n	8000c8a <UpdateShiftLights+0x5e>
    if (current_rpm >= RPM_thresholds[i - 2]) {
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000c46:	3b02      	subs	r3, #2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c4c:	4413      	add	r3, r2
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6a3a      	ldr	r2, [r7, #32]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	db08      	blt.n	8000c68 <UpdateShiftLights+0x3c>
        // Turn on the shift light (use appropriate LED control function)
    	lightOn(htim, Channel,ledcolors, ledbytes, i);
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	68b9      	ldr	r1, [r7, #8]
 8000c60:	68f8      	ldr	r0, [r7, #12]
 8000c62:	f000 f81b 	bl	8000c9c <lightOn>
 8000c66:	e00d      	b.n	8000c84 <UpdateShiftLights+0x58>
    } else {
        // Turn off the shift light
    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	9303      	str	r3, [sp, #12]
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	9301      	str	r3, [sp, #4]
 8000c74:	2300      	movs	r3, #0
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f7ff fec8 	bl	8000a14 <setColor>
  for (int i = 2; i < 14; i++) {
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	3301      	adds	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	2b0d      	cmp	r3, #13
 8000c8e:	ddd7      	ble.n	8000c40 <UpdateShiftLights+0x14>
    }
  }
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <lightOn>:

void lightOn(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes,int index) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af04      	add	r7, sp, #16
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	603b      	str	r3, [r7, #0]
	if (index == 13) {
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	2b0d      	cmp	r3, #13
 8000cae:	d108      	bne.n	8000cc2 <lightOn+0x26>
		startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	481f      	ldr	r0, [pc, #124]	@ (8000d34 <lightOn+0x98>)
 8000cb8:	f000 f83e 	bl	8000d38 <startUp>
		HAL_Delay(5);
 8000cbc:	2005      	movs	r0, #5
 8000cbe:	f001 fda9 	bl	8002814 <HAL_Delay>
	}
	if (index < 6) {
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	2b05      	cmp	r3, #5
 8000cc6:	dc0e      	bgt.n	8000ce6 <lightOn+0x4a>
		setColor(htim, Channel, 255, 255, 0, ledcolors, ledbytes, index);
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	9303      	str	r3, [sp, #12]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	9302      	str	r3, [sp, #8]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	23ff      	movs	r3, #255	@ 0xff
 8000cda:	22ff      	movs	r2, #255	@ 0xff
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f7ff fe98 	bl	8000a14 <setColor>
	} else if (index < 10) {
		setColor(htim, Channel, 100, 255, 0, ledcolors, ledbytes, index);
	} else if (index < 14){
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	}
}
 8000ce4:	e022      	b.n	8000d2c <lightOn+0x90>
	} else if (index < 10) {
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	2b09      	cmp	r3, #9
 8000cea:	dc0e      	bgt.n	8000d0a <lightOn+0x6e>
		setColor(htim, Channel, 100, 255, 0, ledcolors, ledbytes, index);
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	9303      	str	r3, [sp, #12]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	9302      	str	r3, [sp, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	23ff      	movs	r3, #255	@ 0xff
 8000cfe:	2264      	movs	r2, #100	@ 0x64
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f7ff fe86 	bl	8000a14 <setColor>
}
 8000d08:	e010      	b.n	8000d2c <lightOn+0x90>
	} else if (index < 14){
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	2b0d      	cmp	r3, #13
 8000d0e:	dc0d      	bgt.n	8000d2c <lightOn+0x90>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	9303      	str	r3, [sp, #12]
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	23ff      	movs	r3, #255	@ 0xff
 8000d22:	2200      	movs	r2, #0
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f7ff fe74 	bl	8000a14 <setColor>
}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000240 	.word	0x20000240

08000d38 <startUp>:

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	@ 0x30
 8000d3c:	af04      	add	r7, sp, #16
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8000d46:	2307      	movs	r3, #7
 8000d48:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 6; i++) {
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	e026      	b.n	8000d9e <startUp+0x66>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle - i);
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	9303      	str	r3, [sp, #12]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	9302      	str	r3, [sp, #8]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	2300      	movs	r3, #0
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	23ff      	movs	r3, #255	@ 0xff
 8000d66:	2200      	movs	r2, #0
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff fe52 	bl	8000a14 <setColor>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle + i + 1);
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	4413      	add	r3, r2
 8000d76:	3301      	adds	r3, #1
 8000d78:	9303      	str	r3, [sp, #12]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	9302      	str	r3, [sp, #8]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	2300      	movs	r3, #0
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	23ff      	movs	r3, #255	@ 0xff
 8000d88:	2200      	movs	r2, #0
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f7ff fe41 	bl	8000a14 <setColor>
		HAL_Delay(20);
 8000d92:	2014      	movs	r0, #20
 8000d94:	f001 fd3e 	bl	8002814 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	2b05      	cmp	r3, #5
 8000da2:	ddd5      	ble.n	8000d50 <startUp+0x18>
	}
	for (int i = 0; i < 6; i++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	e026      	b.n	8000df8 <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	9303      	str	r3, [sp, #12]
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	9302      	str	r3, [sp, #8]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f7ff fe25 	bl	8000a14 <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	4413      	add	r3, r2
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	9303      	str	r3, [sp, #12]
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	9302      	str	r3, [sp, #8]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2300      	movs	r3, #0
 8000de2:	2200      	movs	r2, #0
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f7ff fe14 	bl	8000a14 <setColor>
		HAL_Delay(20);
 8000dec:	2014      	movs	r0, #20
 8000dee:	f001 fd11 	bl	8002814 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	3301      	adds	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	2b05      	cmp	r3, #5
 8000dfc:	ddd5      	ble.n	8000daa <startUp+0x72>
	}
}
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	3720      	adds	r7, #32
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <MX_SPI1_Init+0x68>)
 8000e0e:	4a19      	ldr	r2, [pc, #100]	@ (8000e74 <MX_SPI1_Init+0x6c>)
 8000e10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e12:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <MX_SPI1_Init+0x68>)
 8000e14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <MX_SPI1_Init+0x68>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <MX_SPI1_Init+0x68>)
 8000e22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <MX_SPI1_Init+0x68>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <MX_SPI1_Init+0x68>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <MX_SPI1_Init+0x68>)
 8000e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <MX_SPI1_Init+0x68>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <MX_SPI1_Init+0x68>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e48:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <MX_SPI1_Init+0x68>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <MX_SPI1_Init+0x68>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <MX_SPI1_Init+0x68>)
 8000e56:	220a      	movs	r2, #10
 8000e58:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_SPI1_Init+0x68>)
 8000e5c:	f004 f9c2 	bl	80051e4 <HAL_SPI_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000e66:	f7ff fd93 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000130 	.word	0x20000130
 8000e74:	40013000 	.word	0x40013000

08000e78 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e7c:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000e7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ee0 <MX_SPI2_Init+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e82:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000e84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ea8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000ec4:	220a      	movs	r2, #10
 8000ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ec8:	4804      	ldr	r0, [pc, #16]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000eca:	f004 f98b 	bl	80051e4 <HAL_SPI_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ed4:	f7ff fd5c 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000188 	.word	0x20000188
 8000ee0:	40003800 	.word	0x40003800

08000ee4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	@ 0x30
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a4a      	ldr	r2, [pc, #296]	@ (800102c <HAL_SPI_MspInit+0x148>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d15c      	bne.n	8000fc0 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	4b49      	ldr	r3, [pc, #292]	@ (8001030 <HAL_SPI_MspInit+0x14c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a48      	ldr	r2, [pc, #288]	@ (8001030 <HAL_SPI_MspInit+0x14c>)
 8000f10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b46      	ldr	r3, [pc, #280]	@ (8001030 <HAL_SPI_MspInit+0x14c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f1e:	61bb      	str	r3, [r7, #24]
 8000f20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	4b42      	ldr	r3, [pc, #264]	@ (8001030 <HAL_SPI_MspInit+0x14c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a41      	ldr	r2, [pc, #260]	@ (8001030 <HAL_SPI_MspInit+0x14c>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b3f      	ldr	r3, [pc, #252]	@ (8001030 <HAL_SPI_MspInit+0x14c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f3e:	23a0      	movs	r3, #160	@ 0xa0
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f4e:	2305      	movs	r3, #5
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4836      	ldr	r0, [pc, #216]	@ (8001034 <HAL_SPI_MspInit+0x150>)
 8000f5a:	f002 f923 	bl	80031a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000f5e:	4b36      	ldr	r3, [pc, #216]	@ (8001038 <HAL_SPI_MspInit+0x154>)
 8000f60:	4a36      	ldr	r2, [pc, #216]	@ (800103c <HAL_SPI_MspInit+0x158>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000f64:	4b34      	ldr	r3, [pc, #208]	@ (8001038 <HAL_SPI_MspInit+0x154>)
 8000f66:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000f6a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f6c:	4b32      	ldr	r3, [pc, #200]	@ (8001038 <HAL_SPI_MspInit+0x154>)
 8000f6e:	2240      	movs	r2, #64	@ 0x40
 8000f70:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f72:	4b31      	ldr	r3, [pc, #196]	@ (8001038 <HAL_SPI_MspInit+0x154>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f78:	4b2f      	ldr	r3, [pc, #188]	@ (8001038 <HAL_SPI_MspInit+0x154>)
 8000f7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f7e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f80:	4b2d      	ldr	r3, [pc, #180]	@ (8001038 <HAL_SPI_MspInit+0x154>)
 8000f82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f86:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f88:	4b2b      	ldr	r3, [pc, #172]	@ (8001038 <HAL_SPI_MspInit+0x154>)
 8000f8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f8e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f90:	4b29      	ldr	r3, [pc, #164]	@ (8001038 <HAL_SPI_MspInit+0x154>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f96:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <HAL_SPI_MspInit+0x154>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f9c:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <HAL_SPI_MspInit+0x154>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000fa2:	4825      	ldr	r0, [pc, #148]	@ (8001038 <HAL_SPI_MspInit+0x154>)
 8000fa4:	f001 fd6c 	bl	8002a80 <HAL_DMA_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000fae:	f7ff fcef 	bl	8000990 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a20      	ldr	r2, [pc, #128]	@ (8001038 <HAL_SPI_MspInit+0x154>)
 8000fb6:	649a      	str	r2, [r3, #72]	@ 0x48
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8001038 <HAL_SPI_MspInit+0x154>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000fbe:	e031      	b.n	8001024 <HAL_SPI_MspInit+0x140>
  else if(spiHandle->Instance==SPI2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8001040 <HAL_SPI_MspInit+0x15c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d12c      	bne.n	8001024 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <HAL_SPI_MspInit+0x14c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	4a17      	ldr	r2, [pc, #92]	@ (8001030 <HAL_SPI_MspInit+0x14c>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <HAL_SPI_MspInit+0x14c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <HAL_SPI_MspInit+0x14c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a10      	ldr	r2, [pc, #64]	@ (8001030 <HAL_SPI_MspInit+0x14c>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_SPI_MspInit+0x14c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001002:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001014:	2305      	movs	r3, #5
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4809      	ldr	r0, [pc, #36]	@ (8001044 <HAL_SPI_MspInit+0x160>)
 8001020:	f002 f8c0 	bl	80031a4 <HAL_GPIO_Init>
}
 8001024:	bf00      	nop
 8001026:	3730      	adds	r7, #48	@ 0x30
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40013000 	.word	0x40013000
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000
 8001038:	200001e0 	.word	0x200001e0
 800103c:	40026458 	.word	0x40026458
 8001040:	40003800 	.word	0x40003800
 8001044:	40020400 	.word	0x40020400

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <HAL_MspInit+0x4c>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	4a0f      	ldr	r2, [pc, #60]	@ (8001094 <HAL_MspInit+0x4c>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800105c:	6453      	str	r3, [r2, #68]	@ 0x44
 800105e:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <HAL_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <HAL_MspInit+0x4c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	4a08      	ldr	r2, [pc, #32]	@ (8001094 <HAL_MspInit+0x4c>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001078:	6413      	str	r3, [r2, #64]	@ 0x40
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <HAL_MspInit+0x4c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <NMI_Handler+0x4>

080010a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <MemManage_Handler+0x4>

080010b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <UsageFault_Handler+0x4>

080010c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ee:	f001 fb71 	bl	80027d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80010fc:	4802      	ldr	r0, [pc, #8]	@ (8001108 <DMA1_Stream0_IRQHandler+0x10>)
 80010fe:	f001 fde7 	bl	8002cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000288 	.word	0x20000288

0800110c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <DMA2_Stream3_IRQHandler+0x10>)
 8001112:	f001 fddd 	bl	8002cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001e0 	.word	0x200001e0

08001120 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <OTG_FS_IRQHandler+0x10>)
 8001126:	f002 fb1e 	bl	8003766 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000fd0 	.word	0x20000fd0

08001134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08e      	sub	sp, #56	@ 0x38
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	615a      	str	r2, [r3, #20]
 8001186:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001188:	4b2c      	ldr	r3, [pc, #176]	@ (800123c <MX_TIM4_Init+0xe4>)
 800118a:	4a2d      	ldr	r2, [pc, #180]	@ (8001240 <MX_TIM4_Init+0xe8>)
 800118c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800118e:	4b2b      	ldr	r3, [pc, #172]	@ (800123c <MX_TIM4_Init+0xe4>)
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b29      	ldr	r3, [pc, #164]	@ (800123c <MX_TIM4_Init+0xe4>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 800119a:	4b28      	ldr	r3, [pc, #160]	@ (800123c <MX_TIM4_Init+0xe4>)
 800119c:	2269      	movs	r2, #105	@ 0x69
 800119e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b26      	ldr	r3, [pc, #152]	@ (800123c <MX_TIM4_Init+0xe4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b25      	ldr	r3, [pc, #148]	@ (800123c <MX_TIM4_Init+0xe4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011ac:	4823      	ldr	r0, [pc, #140]	@ (800123c <MX_TIM4_Init+0xe4>)
 80011ae:	f004 ff33 	bl	8006018 <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80011b8:	f7ff fbea 	bl	8000990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011c6:	4619      	mov	r1, r3
 80011c8:	481c      	ldr	r0, [pc, #112]	@ (800123c <MX_TIM4_Init+0xe4>)
 80011ca:	f005 fb05 	bl	80067d8 <HAL_TIM_ConfigClockSource>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80011d4:	f7ff fbdc 	bl	8000990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011d8:	4818      	ldr	r0, [pc, #96]	@ (800123c <MX_TIM4_Init+0xe4>)
 80011da:	f004 ff6c 	bl	80060b6 <HAL_TIM_PWM_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80011e4:	f7ff fbd4 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011f0:	f107 0320 	add.w	r3, r7, #32
 80011f4:	4619      	mov	r1, r3
 80011f6:	4811      	ldr	r0, [pc, #68]	@ (800123c <MX_TIM4_Init+0xe4>)
 80011f8:	f005 ff72 	bl	80070e0 <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001202:	f7ff fbc5 	bl	8000990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001206:	2360      	movs	r3, #96	@ 0x60
 8001208:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	4619      	mov	r1, r3
 800121c:	4807      	ldr	r0, [pc, #28]	@ (800123c <MX_TIM4_Init+0xe4>)
 800121e:	f005 fa19 	bl	8006654 <HAL_TIM_PWM_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001228:	f7ff fbb2 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800122c:	4803      	ldr	r0, [pc, #12]	@ (800123c <MX_TIM4_Init+0xe4>)
 800122e:	f000 f85d 	bl	80012ec <HAL_TIM_MspPostInit>

}
 8001232:	bf00      	nop
 8001234:	3738      	adds	r7, #56	@ 0x38
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000240 	.word	0x20000240
 8001240:	40000800 	.word	0x40000800

08001244 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a22      	ldr	r2, [pc, #136]	@ (80012dc <HAL_TIM_Base_MspInit+0x98>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d13d      	bne.n	80012d2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <HAL_TIM_Base_MspInit+0x9c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	4a20      	ldr	r2, [pc, #128]	@ (80012e0 <HAL_TIM_Base_MspInit+0x9c>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6413      	str	r3, [r2, #64]	@ 0x40
 8001266:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <HAL_TIM_Base_MspInit+0x9c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <HAL_TIM_Base_MspInit+0xa0>)
 8001274:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <HAL_TIM_Base_MspInit+0xa4>)
 8001276:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <HAL_TIM_Base_MspInit+0xa0>)
 800127a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800127e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <HAL_TIM_Base_MspInit+0xa0>)
 8001282:	2240      	movs	r2, #64	@ 0x40
 8001284:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <HAL_TIM_Base_MspInit+0xa0>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_TIM_Base_MspInit+0xa0>)
 800128e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001292:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <HAL_TIM_Base_MspInit+0xa0>)
 8001296:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800129a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_TIM_Base_MspInit+0xa0>)
 800129e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012a2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <HAL_TIM_Base_MspInit+0xa0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <HAL_TIM_Base_MspInit+0xa0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <HAL_TIM_Base_MspInit+0xa0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80012b6:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <HAL_TIM_Base_MspInit+0xa0>)
 80012b8:	f001 fbe2 	bl	8002a80 <HAL_DMA_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80012c2:	f7ff fb65 	bl	8000990 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a06      	ldr	r2, [pc, #24]	@ (80012e4 <HAL_TIM_Base_MspInit+0xa0>)
 80012ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80012cc:	4a05      	ldr	r2, [pc, #20]	@ (80012e4 <HAL_TIM_Base_MspInit+0xa0>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40000800 	.word	0x40000800
 80012e0:	40023800 	.word	0x40023800
 80012e4:	20000288 	.word	0x20000288
 80012e8:	40026010 	.word	0x40026010

080012ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <HAL_TIM_MspPostInit+0x68>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d11d      	bne.n	800134a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_TIM_MspPostInit+0x6c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a10      	ldr	r2, [pc, #64]	@ (8001358 <HAL_TIM_MspPostInit+0x6c>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <HAL_TIM_MspPostInit+0x6c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800132a:	2340      	movs	r3, #64	@ 0x40
 800132c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800133a:	2302      	movs	r3, #2
 800133c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	@ (800135c <HAL_TIM_MspPostInit+0x70>)
 8001346:	f001 ff2d 	bl	80031a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40000800 	.word	0x40000800
 8001358:	40023800 	.word	0x40023800
 800135c:	40020400 	.word	0x40020400

08001360 <startTransaction>:
#include "gpio.h"
#include "spi.h"

#include "gfxfont.h"

void startTransaction() {
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2108      	movs	r1, #8
 8001368:	4802      	ldr	r0, [pc, #8]	@ (8001374 <startTransaction+0x14>)
 800136a:	f002 f89f 	bl	80034ac <HAL_GPIO_WritePin>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40020400 	.word	0x40020400

08001378 <endTransaction>:

void endTransaction() {
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2108      	movs	r1, #8
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <endTransaction+0x14>)
 8001382:	f002 f893 	bl	80034ac <HAL_GPIO_WritePin>
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40020400 	.word	0x40020400

08001390 <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	if (data) {
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2110      	movs	r1, #16
 80013a4:	4806      	ldr	r0, [pc, #24]	@ (80013c0 <dataOrRegister+0x30>)
 80013a6:	f002 f881 	bl	80034ac <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
	}
}
 80013aa:	e004      	b.n	80013b6 <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2110      	movs	r1, #16
 80013b0:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <dataOrRegister+0x30>)
 80013b2:	f002 f87b 	bl	80034ac <HAL_GPIO_WritePin>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40020400 	.word	0x40020400

080013c4 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 80013d2:	f7ff ffc5 	bl	8001360 <startTransaction>

	dataOrRegister(0);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff ffda 	bl	8001390 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 80013dc:	f107 010e 	add.w	r1, r7, #14
 80013e0:	230a      	movs	r3, #10
 80013e2:	2201      	movs	r2, #1
 80013e4:	480a      	ldr	r0, [pc, #40]	@ (8001410 <commandAndData+0x4c>)
 80013e6:	f003 ff86 	bl	80052f6 <HAL_SPI_Transmit>

	if (size) {
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d009      	beq.n	8001404 <commandAndData+0x40>
		dataOrRegister(1);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff ffcd 	bl	8001390 <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	230a      	movs	r3, #10
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	4804      	ldr	r0, [pc, #16]	@ (8001410 <commandAndData+0x4c>)
 8001400:	f003 ff79 	bl	80052f6 <HAL_SPI_Transmit>
	}

	endTransaction();
 8001404:	f7ff ffb8 	bl	8001378 <endTransaction>
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000130 	.word	0x20000130

08001414 <startCommand>:

void startCommand(uint16_t command) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 800141e:	f7ff ff9f 	bl	8001360 <startTransaction>
	dataOrRegister(0);
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff ffb4 	bl	8001390 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8001428:	1db9      	adds	r1, r7, #6
 800142a:	230a      	movs	r3, #10
 800142c:	2201      	movs	r2, #1
 800142e:	4803      	ldr	r0, [pc, #12]	@ (800143c <startCommand+0x28>)
 8001430:	f003 ff61 	bl	80052f6 <HAL_SPI_Transmit>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000130 	.word	0x20000130

08001440 <transmitRepeatedData>:

void transmitRepeatedData(uint16_t data16, unsigned int count) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	80fb      	strh	r3, [r7, #6]
	dataOrRegister(1);
 800144c:	2001      	movs	r0, #1
 800144e:	f7ff ff9f 	bl	8001390 <dataOrRegister>
	for (int i = 0; i < count; i++) {
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e008      	b.n	800146a <transmitRepeatedData+0x2a>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
 8001458:	1db9      	adds	r1, r7, #6
 800145a:	230a      	movs	r3, #10
 800145c:	2201      	movs	r2, #1
 800145e:	4807      	ldr	r0, [pc, #28]	@ (800147c <transmitRepeatedData+0x3c>)
 8001460:	f003 ff49 	bl	80052f6 <HAL_SPI_Transmit>
	for (int i = 0; i < count; i++) {
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3301      	adds	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d8f2      	bhi.n	8001458 <transmitRepeatedData+0x18>
	}
}
 8001472:	bf00      	nop
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000130 	.word	0x20000130

08001480 <transmitSingleData>:

void transmitSingleData(uint16_t data16) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
	dataOrRegister(1);
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff ff80 	bl	8001390 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
 8001490:	1db9      	adds	r1, r7, #6
 8001492:	230a      	movs	r3, #10
 8001494:	2201      	movs	r2, #1
 8001496:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <transmitSingleData+0x24>)
 8001498:	f003 ff2d 	bl	80052f6 <HAL_SPI_Transmit>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000130 	.word	0x20000130

080014a8 <endCommand>:

void endCommand() {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	endTransaction();
 80014ac:	f7ff ff64 	bl	8001378 <endTransaction>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <resetScreen>:

void resetScreen() {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2120      	movs	r1, #32
 80014bc:	480b      	ldr	r0, [pc, #44]	@ (80014ec <resetScreen+0x38>)
 80014be:	f001 fff5 	bl	80034ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80014c2:	2014      	movs	r0, #20
 80014c4:	f001 f9a6 	bl	8002814 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2120      	movs	r1, #32
 80014cc:	4807      	ldr	r0, [pc, #28]	@ (80014ec <resetScreen+0x38>)
 80014ce:	f001 ffed 	bl	80034ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80014d2:	2014      	movs	r0, #20
 80014d4:	f001 f99e 	bl	8002814 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80014d8:	2201      	movs	r2, #1
 80014da:	2120      	movs	r1, #32
 80014dc:	4803      	ldr	r0, [pc, #12]	@ (80014ec <resetScreen+0x38>)
 80014de:	f001 ffe5 	bl	80034ac <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80014e2:	2064      	movs	r0, #100	@ 0x64
 80014e4:	f001 f996 	bl	8002814 <HAL_Delay>
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40020400 	.word	0x40020400

080014f0 <initializeScreen>:

void initializeScreen() {
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b0a0      	sub	sp, #128	@ 0x80
 80014f4:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff ff62 	bl	80013c4 <commandAndData>
	commandAndData(0x11, NULL, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2011      	movs	r0, #17
 8001506:	f7ff ff5d 	bl	80013c4 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 800150a:	2355      	movs	r3, #85	@ 0x55
 800150c:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
		commandAndData(0x3A, data, sizeof(data));
 8001510:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001514:	2202      	movs	r2, #2
 8001516:	4619      	mov	r1, r3
 8001518:	203a      	movs	r0, #58	@ 0x3a
 800151a:	f7ff ff53 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 800151e:	4b5a      	ldr	r3, [pc, #360]	@ (8001688 <initializeScreen+0x198>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	67bb      	str	r3, [r7, #120]	@ 0x78
		commandAndData(0xC0, data, sizeof(data));
 8001524:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001528:	2204      	movs	r2, #4
 800152a:	4619      	mov	r1, r3
 800152c:	20c0      	movs	r0, #192	@ 0xc0
 800152e:	f7ff ff49 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8001532:	2345      	movs	r3, #69	@ 0x45
 8001534:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8001538:	2300      	movs	r3, #0
 800153a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		commandAndData(0xC1, data, sizeof(data));
 800153e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001542:	2204      	movs	r2, #4
 8001544:	4619      	mov	r1, r3
 8001546:	20c1      	movs	r0, #193	@ 0xc1
 8001548:	f7ff ff3c 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 800154c:	2333      	movs	r3, #51	@ 0x33
 800154e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
		commandAndData(0xC2, data, sizeof(data));
 8001552:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001556:	2202      	movs	r2, #2
 8001558:	4619      	mov	r1, r3
 800155a:	20c2      	movs	r0, #194	@ 0xc2
 800155c:	f7ff ff32 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8001560:	2300      	movs	r3, #0
 8001562:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8001566:	2328      	movs	r3, #40	@ 0x28
 8001568:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		commandAndData(0xC5, data, sizeof(data));
 800156c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001570:	2204      	movs	r2, #4
 8001572:	4619      	mov	r1, r3
 8001574:	20c5      	movs	r0, #197	@ 0xc5
 8001576:	f7ff ff25 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 800157a:	4b44      	ldr	r3, [pc, #272]	@ (800168c <initializeScreen+0x19c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xB1, data, sizeof(data));
 8001580:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001584:	2204      	movs	r2, #4
 8001586:	4619      	mov	r1, r3
 8001588:	20b1      	movs	r0, #177	@ 0xb1
 800158a:	f7ff ff1b 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 800158e:	2302      	movs	r3, #2
 8001590:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		commandAndData(0xB4, data, sizeof(data));
 8001594:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001598:	2202      	movs	r2, #2
 800159a:	4619      	mov	r1, r3
 800159c:	20b4      	movs	r0, #180	@ 0xb4
 800159e:	f7ff ff11 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 80015a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001690 <initializeScreen+0x1a0>)
 80015a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ac:	6018      	str	r0, [r3, #0]
 80015ae:	3304      	adds	r3, #4
 80015b0:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 80015b2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015b6:	2206      	movs	r2, #6
 80015b8:	4619      	mov	r1, r3
 80015ba:	20b6      	movs	r0, #182	@ 0xb6
 80015bc:	f7ff ff02 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 80015c0:	4b34      	ldr	r3, [pc, #208]	@ (8001694 <initializeScreen+0x1a4>)
 80015c2:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80015c6:	461d      	mov	r5, r3
 80015c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015d0:	c407      	stmia	r4!, {r0, r1, r2}
 80015d2:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 80015d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80015d8:	221e      	movs	r2, #30
 80015da:	4619      	mov	r1, r3
 80015dc:	20e0      	movs	r0, #224	@ 0xe0
 80015de:	f7ff fef1 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 80015e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001698 <initializeScreen+0x1a8>)
 80015e4:	f107 041c 	add.w	r4, r7, #28
 80015e8:	461d      	mov	r5, r3
 80015ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015f2:	c407      	stmia	r4!, {r0, r1, r2}
 80015f4:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	221e      	movs	r2, #30
 80015fc:	4619      	mov	r1, r3
 80015fe:	20e1      	movs	r0, #225	@ 0xe1
 8001600:	f7ff fee0 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8001604:	2300      	movs	r3, #0
 8001606:	833b      	strh	r3, [r7, #24]
 8001608:	2322      	movs	r3, #34	@ 0x22
 800160a:	837b      	strh	r3, [r7, #26]
		commandAndData(0xB6, data, sizeof(data));
 800160c:	f107 0318 	add.w	r3, r7, #24
 8001610:	2204      	movs	r2, #4
 8001612:	4619      	mov	r1, r3
 8001614:	20b6      	movs	r0, #182	@ 0xb6
 8001616:	f7ff fed5 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {0x0008};
 800161a:	2308      	movs	r3, #8
 800161c:	82bb      	strh	r3, [r7, #20]
		commandAndData(0x36, data, sizeof(data));
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	2202      	movs	r2, #2
 8001624:	4619      	mov	r1, r3
 8001626:	2036      	movs	r0, #54	@ 0x36
 8001628:	f7ff fecc 	bl	80013c4 <commandAndData>
	}
	{
		commandAndData(0x29, NULL, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2029      	movs	r0, #41	@ 0x29
 8001632:	f7ff fec7 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_WIDTH - 1) >> 8), (uint16_t)((SCREEN_WIDTH - 1) & 0xFF)};
 8001636:	4a19      	ldr	r2, [pc, #100]	@ (800169c <initializeScreen+0x1ac>)
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001640:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2A, data, sizeof(data));
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	2208      	movs	r2, #8
 800164a:	4619      	mov	r1, r3
 800164c:	202a      	movs	r0, #42	@ 0x2a
 800164e:	f7ff feb9 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_HEIGHT - 1) >> 8), (uint16_t)((SCREEN_HEIGHT - 1) & 0xFF)};
 8001652:	4a13      	ldr	r2, [pc, #76]	@ (80016a0 <initializeScreen+0x1b0>)
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800165a:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2B, data, sizeof(data));
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2208      	movs	r2, #8
 8001662:	4619      	mov	r1, r3
 8001664:	202b      	movs	r0, #43	@ 0x2b
 8001666:	f7ff fead 	bl	80013c4 <commandAndData>
	}
	{
		startCommand(0x2C);
 800166a:	202c      	movs	r0, #44	@ 0x2c
 800166c:	f7ff fed2 	bl	8001414 <startCommand>
		transmitRepeatedData(0x0000, 320 * 480);
 8001670:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff fee3 	bl	8001440 <transmitRepeatedData>
		endCommand();
 800167a:	f7ff ff15 	bl	80014a8 <endCommand>
	}
}
 800167e:	bf00      	nop
 8001680:	3780      	adds	r7, #128	@ 0x80
 8001682:	46bd      	mov	sp, r7
 8001684:	bdb0      	pop	{r4, r5, r7, pc}
 8001686:	bf00      	nop
 8001688:	0800b2ac 	.word	0x0800b2ac
 800168c:	0800b2b0 	.word	0x0800b2b0
 8001690:	0800b2b4 	.word	0x0800b2b4
 8001694:	0800b2bc 	.word	0x0800b2bc
 8001698:	0800b2dc 	.word	0x0800b2dc
 800169c:	0800b2fc 	.word	0x0800b2fc
 80016a0:	0800b304 	.word	0x0800b304

080016a4 <clearScreen>:

void clearScreen(uint16_t color) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_WIDTH - 1) >> 8), (uint16_t)((SCREEN_WIDTH - 1) & 0xFF)};
 80016ae:	4a15      	ldr	r2, [pc, #84]	@ (8001704 <clearScreen+0x60>)
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b8:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2A, data, sizeof(data));
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	2208      	movs	r2, #8
 80016c2:	4619      	mov	r1, r3
 80016c4:	202a      	movs	r0, #42	@ 0x2a
 80016c6:	f7ff fe7d 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_HEIGHT - 1) >> 8), (uint16_t)((SCREEN_HEIGHT - 1) & 0xFF)};
 80016ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001708 <clearScreen+0x64>)
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016d4:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2B, data, sizeof(data));
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	2208      	movs	r2, #8
 80016de:	4619      	mov	r1, r3
 80016e0:	202b      	movs	r0, #43	@ 0x2b
 80016e2:	f7ff fe6f 	bl	80013c4 <commandAndData>
	}
	{
		startCommand(0x2C);
 80016e6:	202c      	movs	r0, #44	@ 0x2c
 80016e8:	f7ff fe94 	bl	8001414 <startCommand>
		transmitRepeatedData(color, 320 * 480);
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fea4 	bl	8001440 <transmitRepeatedData>
		endCommand();
 80016f8:	f7ff fed6 	bl	80014a8 <endCommand>
	}
}
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	0800b2fc 	.word	0x0800b2fc
 8001708:	0800b304 	.word	0x0800b304

0800170c <modifySpace>:

/**
 * Final pixel in row/column is one less than x2/y2
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	4604      	mov	r4, r0
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4623      	mov	r3, r4
 800171c:	80fb      	strh	r3, [r7, #6]
 800171e:	4603      	mov	r3, r0
 8001720:	80bb      	strh	r3, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	807b      	strh	r3, [r7, #2]
 8001726:	4613      	mov	r3, r2
 8001728:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0xFF, y1 & 0xFF, (y2 >> 8) & 0xFF, y2 & 0xFF};
 800172a:	88bb      	ldrh	r3, [r7, #4]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	b29b      	uxth	r3, r3
 8001730:	823b      	strh	r3, [r7, #16]
 8001732:	88bb      	ldrh	r3, [r7, #4]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	b29b      	uxth	r3, r3
 8001738:	827b      	strh	r3, [r7, #18]
 800173a:	883b      	ldrh	r3, [r7, #0]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	b29b      	uxth	r3, r3
 8001740:	82bb      	strh	r3, [r7, #20]
 8001742:	883b      	ldrh	r3, [r7, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	b29b      	uxth	r3, r3
 8001748:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	2208      	movs	r2, #8
 8001750:	4619      	mov	r1, r3
 8001752:	202a      	movs	r0, #42	@ 0x2a
 8001754:	f7ff fe36 	bl	80013c4 <commandAndData>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0xFF, x1 & 0xFF, (x2 >> 8) & 0xFF, x2 & 0xFF};
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	b29b      	uxth	r3, r3
 800175e:	813b      	strh	r3, [r7, #8]
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	b29b      	uxth	r3, r3
 8001766:	817b      	strh	r3, [r7, #10]
 8001768:	887b      	ldrh	r3, [r7, #2]
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	b29b      	uxth	r3, r3
 800176e:	81bb      	strh	r3, [r7, #12]
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	b29b      	uxth	r3, r3
 8001776:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 8001778:	f107 0308 	add.w	r3, r7, #8
 800177c:	2208      	movs	r2, #8
 800177e:	4619      	mov	r1, r3
 8001780:	202b      	movs	r0, #43	@ 0x2b
 8001782:	f7ff fe1f 	bl	80013c4 <commandAndData>
	}
}
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}

0800178e <fillArea>:

/**
 * must be used in ocnjunction with modifySpace()
 */

void fillArea(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color) {
 800178e:	b590      	push	{r4, r7, lr}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	4604      	mov	r4, r0
 8001796:	4608      	mov	r0, r1
 8001798:	4611      	mov	r1, r2
 800179a:	461a      	mov	r2, r3
 800179c:	4623      	mov	r3, r4
 800179e:	80fb      	strh	r3, [r7, #6]
 80017a0:	4603      	mov	r3, r0
 80017a2:	80bb      	strh	r3, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]
 80017a8:	4613      	mov	r3, r2
 80017aa:	803b      	strh	r3, [r7, #0]
	modifySpace(x1, y1, x1 + length, y1 + height);
 80017ac:	88fa      	ldrh	r2, [r7, #6]
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	4413      	add	r3, r2
 80017b2:	b29c      	uxth	r4, r3
 80017b4:	88ba      	ldrh	r2, [r7, #4]
 80017b6:	883b      	ldrh	r3, [r7, #0]
 80017b8:	4413      	add	r3, r2
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	88b9      	ldrh	r1, [r7, #4]
 80017be:	88f8      	ldrh	r0, [r7, #6]
 80017c0:	4622      	mov	r2, r4
 80017c2:	f7ff ffa3 	bl	800170c <modifySpace>
	startCommand(0x2C);
 80017c6:	202c      	movs	r0, #44	@ 0x2c
 80017c8:	f7ff fe24 	bl	8001414 <startCommand>
	transmitRepeatedData(color, length * height);
 80017cc:	887b      	ldrh	r3, [r7, #2]
 80017ce:	883a      	ldrh	r2, [r7, #0]
 80017d0:	fb02 f303 	mul.w	r3, r2, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	8b3b      	ldrh	r3, [r7, #24]
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fe30 	bl	8001440 <transmitRepeatedData>
	endCommand();
 80017e0:	f7ff fe62 	bl	80014a8 <endCommand>
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}

080017ec <drawPoint>:

void drawVLine(uint16_t x1, uint16_t y1, uint16_t height, uint16_t color) {
	fillArea(x1, y1, 1, height, color);
}

void drawPoint(uint16_t x, uint16_t y, uint16_t color) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
 80017f6:	460b      	mov	r3, r1
 80017f8:	80bb      	strh	r3, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	807b      	strh	r3, [r7, #2]
	modifySpace(x, y, x, y);
 80017fe:	88bb      	ldrh	r3, [r7, #4]
 8001800:	88fa      	ldrh	r2, [r7, #6]
 8001802:	88b9      	ldrh	r1, [r7, #4]
 8001804:	88f8      	ldrh	r0, [r7, #6]
 8001806:	f7ff ff81 	bl	800170c <modifySpace>
	startCommand(0x2C);
 800180a:	202c      	movs	r0, #44	@ 0x2c
 800180c:	f7ff fe02 	bl	8001414 <startCommand>
	transmitSingleData(color);
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fe34 	bl	8001480 <transmitSingleData>
	endCommand();
 8001818:	f7ff fe46 	bl	80014a8 <endCommand>

}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <drawRectangleFilled>:


void drawRectangleFilled(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color) {
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	af02      	add	r7, sp, #8
 800182a:	4604      	mov	r4, r0
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4623      	mov	r3, r4
 8001834:	80fb      	strh	r3, [r7, #6]
 8001836:	4603      	mov	r3, r0
 8001838:	80bb      	strh	r3, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	807b      	strh	r3, [r7, #2]
 800183e:	4613      	mov	r3, r2
 8001840:	803b      	strh	r3, [r7, #0]
	fillArea(x1, y1, length, height, color);
 8001842:	883c      	ldrh	r4, [r7, #0]
 8001844:	887a      	ldrh	r2, [r7, #2]
 8001846:	88b9      	ldrh	r1, [r7, #4]
 8001848:	88f8      	ldrh	r0, [r7, #6]
 800184a:	8b3b      	ldrh	r3, [r7, #24]
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	4623      	mov	r3, r4
 8001850:	f7ff ff9d 	bl	800178e <fillArea>
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bd90      	pop	{r4, r7, pc}

0800185c <clearScreenfast>:
	drawHLine(x1, y1 + height, length, color);
}


uint8_t datasentflagspi = 0;
void clearScreenfast(uint16_t color) {
 800185c:	b580      	push	{r7, lr}
 800185e:	f5ad 4d16 	sub.w	sp, sp, #38400	@ 0x9600
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	4602      	mov	r2, r0
 8001868:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800186c:	f2a3 630a 	subw	r3, r3, #1546	@ 0x60a
 8001870:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[19200];
	for (int i = 0; i < 19200; i++) {
 8001872:	2300      	movs	r3, #0
 8001874:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 8001878:	f102 020c 	add.w	r2, r2, #12
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e01a      	b.n	80018b6 <clearScreenfast+0x5a>
		buffer1[i] = color;
 8001880:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 8001884:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 8001888:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 800188c:	f102 020c 	add.w	r2, r2, #12
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	f507 61c2 	add.w	r1, r7, #1552	@ 0x610
 8001896:	f2a1 610a 	subw	r1, r1, #1546	@ 0x60a
 800189a:	8809      	ldrh	r1, [r1, #0]
 800189c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 19200; i++) {
 80018a0:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 80018a4:	f103 030c 	add.w	r3, r3, #12
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 80018b0:	f102 020c 	add.w	r2, r2, #12
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 80018ba:	f103 030c 	add.w	r3, r3, #12
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 80018c4:	dbdc      	blt.n	8001880 <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 80018c6:	f240 133f 	movw	r3, #319	@ 0x13f
 80018ca:	f240 12df 	movw	r2, #479	@ 0x1df
 80018ce:	2100      	movs	r1, #0
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff ff1b 	bl	800170c <modifySpace>
	startCommand(0x2C);
 80018d6:	202c      	movs	r0, #44	@ 0x2c
 80018d8:	f7ff fd9c 	bl	8001414 <startCommand>
	dataOrRegister(1);
 80018dc:	2001      	movs	r0, #1
 80018de:	f7ff fd57 	bl	8001390 <dataOrRegister>
	for (int i = 0; i < 8; i++) {
 80018e2:	2300      	movs	r3, #0
 80018e4:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 80018e8:	f102 0208 	add.w	r2, r2, #8
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e01b      	b.n	8001928 <clearScreenfast+0xcc>
		HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)buffer1, 19200);
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	3b08      	subs	r3, #8
 80018f6:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80018fa:	4619      	mov	r1, r3
 80018fc:	4812      	ldr	r0, [pc, #72]	@ (8001948 <clearScreenfast+0xec>)
 80018fe:	f004 f901 	bl	8005b04 <HAL_SPI_Transmit_DMA>
		while (!datasentflagspi) {}
 8001902:	bf00      	nop
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <clearScreenfast+0xf0>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0fb      	beq.n	8001904 <clearScreenfast+0xa8>
		datasentflagspi = 0;
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <clearScreenfast+0xf0>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 8001912:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 8001916:	f103 0308 	add.w	r3, r3, #8
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 8001922:	f102 0208 	add.w	r2, r2, #8
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 800192c:	f103 0308 	add.w	r3, r3, #8
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b07      	cmp	r3, #7
 8001934:	dddc      	ble.n	80018f0 <clearScreenfast+0x94>
	}
	endCommand();
 8001936:	f7ff fdb7 	bl	80014a8 <endCommand>
}
 800193a:	bf00      	nop
 800193c:	f507 4716 	add.w	r7, r7, #38400	@ 0x9600
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000130 	.word	0x20000130
 800194c:	200002e8 	.word	0x200002e8

08001950 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a05      	ldr	r2, [pc, #20]	@ (8001974 <HAL_SPI_TxCpltCallback+0x24>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d102      	bne.n	8001968 <HAL_SPI_TxCpltCallback+0x18>
		datasentflagspi = 1;
 8001962:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <HAL_SPI_TxCpltCallback+0x28>)
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
	}
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40013000 	.word	0x40013000
 8001978:	200002e8 	.word	0x200002e8

0800197c <getStringCenter>:
			}
		}
	}
}

uint16_t getStringCenter(char *buffer, const GFXfont *font, uint16_t currentx) {
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	@ 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	4613      	mov	r3, r2
 8001988:	80fb      	strh	r3, [r7, #6]
	char *currentletter = buffer;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8001992:	e012      	b.n	80019ba <getStringCenter+0x3e>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80019a0:	3b20      	subs	r3, #32
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	791b      	ldrb	r3, [r3, #4]
 80019ac:	461a      	mov	r2, r3
 80019ae:	8b7b      	ldrh	r3, [r7, #26]
 80019b0:	4413      	add	r3, r2
 80019b2:	837b      	strh	r3, [r7, #26]
		currentletter++;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	3301      	adds	r3, #1
 80019b8:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1e8      	bne.n	8001994 <getStringCenter+0x18>
	}
	return currentx - (totallength / 2);
 80019c2:	8b7b      	ldrh	r3, [r7, #26]
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	88fa      	ldrh	r2, [r7, #6]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	b29b      	uxth	r3, r3
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	@ 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <drawChar>:

uint16_t drawChar(char letter, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t positioning) {
 80019da:	b580      	push	{r7, lr}
 80019dc:	b08a      	sub	sp, #40	@ 0x28
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	4611      	mov	r1, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	460b      	mov	r3, r1
 80019ec:	81bb      	strh	r3, [r7, #12]
 80019ee:	4613      	mov	r3, r2
 80019f0:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80019fc:	3b20      	subs	r3, #32
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4413      	add	r3, r2
 8001a02:	61fb      	str	r3, [r7, #28]
	int16_t width = toDraw->width, height = toDraw->height;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	789b      	ldrb	r3, [r3, #2]
 8001a08:	837b      	strh	r3, [r7, #26]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	78db      	ldrb	r3, [r3, #3]
 8001a0e:	833b      	strh	r3, [r7, #24]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	795b      	ldrb	r3, [r3, #5]
 8001a14:	75fb      	strb	r3, [r7, #23]
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	799b      	ldrb	r3, [r3, #6]
 8001a1a:	75bb      	strb	r3, [r7, #22]
	uint8_t *bitlist = font->bitmap;
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	613b      	str	r3, [r7, #16]
	uint16_t bo = toDraw->bitmapOffset;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t bits = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t bit = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	for (int16_t yy = 0; yy < height; yy++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001a38:	e062      	b.n	8001b00 <drawChar+0x126>
	  for (int16_t xx = 0; xx < width; xx++) {
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	843b      	strh	r3, [r7, #32]
 8001a3e:	e053      	b.n	8001ae8 <drawChar+0x10e>
		if (!(bit++ & 7)) {
 8001a40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d108      	bne.n	8001a64 <drawChar+0x8a>
		  bits = bitlist[bo++];
 8001a52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8001a58:	461a      	mov	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		}
		if (bits & 0b10000000) {
 8001a64:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da32      	bge.n	8001ad2 <drawChar+0xf8>
			if (positioning & FLIP_OBJECT) {
 8001a6c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d017      	beq.n	8001aa8 <drawChar+0xce>
				drawPoint((uint16_t)((int16_t)xpos + xo + xx), (uint16_t)((int16_t)ypos + yo + yy), 0xFFFF);
 8001a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	89bb      	ldrh	r3, [r7, #12]
 8001a80:	4413      	add	r3, r2
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	8c3b      	ldrh	r3, [r7, #32]
 8001a86:	4413      	add	r3, r2
 8001a88:	b298      	uxth	r0, r3
 8001a8a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	4413      	add	r3, r2
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001a98:	4413      	add	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f7ff fea3 	bl	80017ec <drawPoint>
 8001aa6:	e014      	b.n	8001ad2 <drawChar+0xf8>
			} else {
				drawPoint((uint16_t)((int16_t)xpos + width - xx), (uint16_t)((int16_t)ypos - yy - yo), 0xFFFF);
 8001aa8:	8b7a      	ldrh	r2, [r7, #26]
 8001aaa:	89bb      	ldrh	r3, [r7, #12]
 8001aac:	4413      	add	r3, r2
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	8c3b      	ldrh	r3, [r7, #32]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	b298      	uxth	r0, r3
 8001ab6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001ab8:	88fa      	ldrh	r2, [r7, #6]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff fe8d 	bl	80017ec <drawPoint>
			}
		}
		bits <<= 1;
 8001ad2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	  for (int16_t xx = 0; xx < width; xx++) {
 8001adc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	843b      	strh	r3, [r7, #32]
 8001ae8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001aec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dba5      	blt.n	8001a40 <drawChar+0x66>
	for (int16_t yy = 0; yy < height; yy++) {
 8001af4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3301      	adds	r3, #1
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001b00:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8001b04:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	db96      	blt.n	8001a3a <drawChar+0x60>
	  }
	}

	return toDraw->xAdvance;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	791b      	ldrb	r3, [r3, #4]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3728      	adds	r7, #40	@ 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <drawString>:

uint8_t drawString(char *buffer, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t positioning) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	@ 0x28
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	4611      	mov	r1, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	460b      	mov	r3, r1
 8001b28:	80fb      	strh	r3, [r7, #6]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 8001b2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <drawString+0x32>
		xpos = getStringCenter(buffer, font, xpos);
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	68b9      	ldr	r1, [r7, #8]
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f7ff ff1b 	bl	800197c <getStringCenter>
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
	}
	uint16_t xAdvance = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	83fb      	strh	r3, [r7, #30]
	if (positioning & FLIP_OBJECT) {
 8001b4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d01b      	beq.n	8001b92 <drawString+0x7a>
		char *currentChar = buffer;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	61bb      	str	r3, [r7, #24]
		while (*currentChar) {
 8001b5e:	e013      	b.n	8001b88 <drawString+0x70>
			xAdvance += drawChar(*currentChar, font, xpos + xAdvance, ypos, FLIP_OBJECT);
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	7818      	ldrb	r0, [r3, #0]
 8001b64:	88fa      	ldrh	r2, [r7, #6]
 8001b66:	8bfb      	ldrh	r3, [r7, #30]
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	88bb      	ldrh	r3, [r7, #4]
 8001b6e:	2101      	movs	r1, #1
 8001b70:	9100      	str	r1, [sp, #0]
 8001b72:	68b9      	ldr	r1, [r7, #8]
 8001b74:	f7ff ff31 	bl	80019da <drawChar>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	8bfb      	ldrh	r3, [r7, #30]
 8001b7e:	4413      	add	r3, r2
 8001b80:	83fb      	strh	r3, [r7, #30]
			currentChar++;
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61bb      	str	r3, [r7, #24]
		while (*currentChar) {
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1e7      	bne.n	8001b60 <drawString+0x48>
 8001b90:	e028      	b.n	8001be4 <drawString+0xcc>
		}
	} else {
		uint16_t buffersize = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	82fb      	strh	r3, [r7, #22]
		while (buffer[++buffersize]) {};
 8001b96:	bf00      	nop
 8001b98:	8afb      	ldrh	r3, [r7, #22]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	82fb      	strh	r3, [r7, #22]
 8001b9e:	8afb      	ldrh	r3, [r7, #22]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f6      	bne.n	8001b98 <drawString+0x80>
		for (int i = buffersize - 1; i >= 0; i--) {
 8001baa:	8afb      	ldrh	r3, [r7, #22]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	e015      	b.n	8001bde <drawString+0xc6>
			xAdvance += drawChar(buffer[i], font, xpos + xAdvance, ypos, NO_FLIP_OBJECT);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	7818      	ldrb	r0, [r3, #0]
 8001bba:	88fa      	ldrh	r2, [r7, #6]
 8001bbc:	8bfb      	ldrh	r3, [r7, #30]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	88bb      	ldrh	r3, [r7, #4]
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	9100      	str	r1, [sp, #0]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	f7ff ff06 	bl	80019da <drawChar>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	8bfb      	ldrh	r3, [r7, #30]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	83fb      	strh	r3, [r7, #30]
		for (int i = buffersize - 1; i >= 0; i--) {
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	dae6      	bge.n	8001bb2 <drawString+0x9a>
		}
	}
	return font->yAdvance;
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	7b1b      	ldrb	r3, [r3, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3720      	adds	r7, #32
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	7e3a      	ldrb	r2, [r7, #24]
 8001c08:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	605a      	str	r2, [r3, #4]
    endSPI();
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 f839 	bl	8001c8e <_ZN7MCP25156endSPIEv>
}
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	1cf9      	adds	r1, r7, #3
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f003 fb5a 	bl	80052f6 <HAL_SPI_Transmit>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f107 010f 	add.w	r1, r7, #15
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f003 fc8d 	bl	800557e <HAL_SPI_Receive>
	return retVal;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6898      	ldr	r0, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7b1b      	ldrb	r3, [r3, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	4619      	mov	r1, r3
 8001c82:	f001 fc13 	bl	80034ac <HAL_GPIO_WritePin>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6898      	ldr	r0, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7b1b      	ldrb	r3, [r3, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f001 fc03 	bl	80034ac <HAL_GPIO_WritePin>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08c      	sub	sp, #48	@ 0x30
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	startSPI();
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ffd8 	bl	8001c6e <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 8001cbe:	21c0      	movs	r1, #192	@ 0xc0
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ffb0 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
	endSPI();
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffe1 	bl	8001c8e <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	220e      	movs	r2, #14
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f009 fa91 	bl	800b1fc <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8001cda:	f107 0214 	add.w	r2, r7, #20
 8001cde:	230e      	movs	r3, #14
 8001ce0:	2130      	movs	r1, #48	@ 0x30
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8ec 	bl	8001ec0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8001ce8:	f107 0214 	add.w	r2, r7, #20
 8001cec:	230e      	movs	r3, #14
 8001cee:	2140      	movs	r1, #64	@ 0x40
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f8e5 	bl	8001ec0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8001cf6:	f107 0214 	add.w	r2, r7, #20
 8001cfa:	230e      	movs	r3, #14
 8001cfc:	2150      	movs	r1, #80	@ 0x50
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8de 	bl	8001ec0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2160      	movs	r1, #96	@ 0x60
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f8b9 	bl	8001e80 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2170      	movs	r1, #112	@ 0x70
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f8b4 	bl	8001e80 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 8001d18:	22a3      	movs	r2, #163	@ 0xa3
 8001d1a:	212b      	movs	r1, #43	@ 0x2b
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f8af 	bl	8001e80 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 8001d22:	2304      	movs	r3, #4
 8001d24:	2267      	movs	r2, #103	@ 0x67
 8001d26:	2160      	movs	r1, #96	@ 0x60
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f8f8 	bl	8001f1e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 8001d2e:	2301      	movs	r3, #1
 8001d30:	2267      	movs	r2, #103	@ 0x67
 8001d32:	2170      	movs	r1, #112	@ 0x70
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8f2 	bl	8001f1e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8001d3a:	4a29      	ldr	r2, [pc, #164]	@ (8001de0 <_ZN7MCP25155resetEv+0x130>)
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d44:	6018      	str	r0, [r3, #0]
 8001d46:	3304      	adds	r3, #4
 8001d48:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d4e:	e01e      	b.n	8001d8e <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 8001d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	bf0c      	ite	eq
 8001d56:	2301      	moveq	r3, #1
 8001d58:	2300      	movne	r3, #0
 8001d5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d64:	4413      	add	r3, r2
 8001d66:	7819      	ldrb	r1, [r3, #0]
 8001d68:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fbce 	bl	8002510 <_ZN7MCP25159setFilterENS_3RXFEbm>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 8001d7a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <_ZN7MCP25155resetEv+0xd8>
            return result;
 8001d82:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d86:	e027      	b.n	8001dd8 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 8001d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	dddd      	ble.n	8001d50 <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8001d94:	2300      	movs	r3, #0
 8001d96:	723b      	strb	r3, [r7, #8]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001da0:	e016      	b.n	8001dd0 <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 8001da2:	f107 0208 	add.w	r2, r7, #8
 8001da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da8:	4413      	add	r3, r2
 8001daa:	7819      	ldrb	r1, [r3, #0]
 8001dac:	2300      	movs	r3, #0
 8001dae:	2201      	movs	r2, #1
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fb79 	bl	80024a8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 8001dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <_ZN7MCP25155resetEv+0x11a>
            return result;
 8001dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dc8:	e006      	b.n	8001dd8 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 8001dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dcc:	3301      	adds	r3, #1
 8001dce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	dde5      	ble.n	8001da2 <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3730      	adds	r7, #48	@ 0x30
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	0800b30c 	.word	0x0800b30c

08001de4 <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	70fb      	strb	r3, [r7, #3]
    startSPI();
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff3c 	bl	8001c6e <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8001df6:	2103      	movs	r1, #3
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff14 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	4619      	mov	r1, r3
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ff0f 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff1e 	bl	8001c4a <_ZN7MCP25156SPI_RxEv>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff3b 	bl	8001c8e <_ZN7MCP25156endSPIEv>

    return ret;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 8001e22:	b590      	push	{r4, r7, lr}
 8001e24:	b087      	sub	sp, #28
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	460b      	mov	r3, r1
 8001e30:	72fb      	strb	r3, [r7, #11]
 8001e32:	4613      	mov	r3, r2
 8001e34:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff ff19 	bl	8001c6e <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8001e3c:	2103      	movs	r1, #3
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f7ff fef1 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001e44:	7afb      	ldrb	r3, [r7, #11]
 8001e46:	4619      	mov	r1, r3
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f7ff feec 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]
 8001e52:	e00a      	b.n	8001e6a <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	18d4      	adds	r4, r2, r3
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f7ff fef5 	bl	8001c4a <_ZN7MCP25156SPI_RxEv>
 8001e60:	4603      	mov	r3, r0
 8001e62:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	3301      	adds	r3, #1
 8001e68:	75fb      	strb	r3, [r7, #23]
 8001e6a:	7dfa      	ldrb	r2, [r7, #23]
 8001e6c:	7abb      	ldrb	r3, [r7, #10]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d3f0      	bcc.n	8001e54 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff ff0b 	bl	8001c8e <_ZN7MCP25156endSPIEv>
}
 8001e78:	bf00      	nop
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd90      	pop	{r4, r7, pc}

08001e80 <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff feec 	bl	8001c6e <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8001e96:	2102      	movs	r1, #2
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff fec4 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff febf 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 8001ea8:	78bb      	ldrb	r3, [r7, #2]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff feba 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff feeb 	bl	8001c8e <_ZN7MCP25156endSPIEv>
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	460b      	mov	r3, r1
 8001ece:	72fb      	strb	r3, [r7, #11]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7ff feca 	bl	8001c6e <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8001eda:	2102      	movs	r1, #2
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff fea2 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001ee2:	7afb      	ldrb	r3, [r7, #11]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f7ff fe9d 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8001eec:	2300      	movs	r3, #0
 8001eee:	75fb      	strb	r3, [r7, #23]
 8001ef0:	e00a      	b.n	8001f08 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	4619      	mov	r1, r3
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f7ff fe92 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	3301      	adds	r3, #1
 8001f06:	75fb      	strb	r3, [r7, #23]
 8001f08:	7dfa      	ldrb	r2, [r7, #23]
 8001f0a:	7abb      	ldrb	r3, [r7, #10]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d3f0      	bcc.n	8001ef2 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7ff febc 	bl	8001c8e <_ZN7MCP25156endSPIEv>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	4608      	mov	r0, r1
 8001f28:	4611      	mov	r1, r2
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	70fb      	strb	r3, [r7, #3]
 8001f30:	460b      	mov	r3, r1
 8001f32:	70bb      	strb	r3, [r7, #2]
 8001f34:	4613      	mov	r3, r2
 8001f36:	707b      	strb	r3, [r7, #1]
    startSPI();
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fe98 	bl	8001c6e <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 8001f3e:	2105      	movs	r1, #5
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff fe70 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff fe6b 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 8001f50:	78bb      	ldrb	r3, [r7, #2]
 8001f52:	4619      	mov	r1, r3
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fe66 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 8001f5a:	787b      	ldrb	r3, [r7, #1]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff fe61 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff fe92 	bl	8001c8e <_ZN7MCP25156endSPIEv>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
    startSPI();
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fe77 	bl	8001c6e <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 8001f80:	21a0      	movs	r1, #160	@ 0xa0
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fe4f 	bl	8001c26 <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fe5e 	bl	8001c4a <_ZN7MCP25156SPI_RxEv>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fe7b 	bl	8001c8e <_ZN7MCP25156endSPIEv>

    return i;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 8001faa:	2180      	movs	r1, #128	@ 0x80
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f812 	bl	8001fd6 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8001fb2:	4603      	mov	r3, r0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f805 	bl	8001fd6 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8001fcc:	4603      	mov	r3, r0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	22e0      	movs	r2, #224	@ 0xe0
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff98 	bl	8001f1e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 8001fee:	f000 fc05 	bl	80027fc <HAL_GetTick>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	330a      	adds	r3, #10
 8001ff6:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 8001ffc:	e013      	b.n	8002026 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 8001ffe:	210e      	movs	r1, #14
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff feef 	bl	8001de4 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8002006:	4603      	mov	r3, r0
 8002008:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	f023 031f 	bic.w	r3, r3, #31
 8002010:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	429a      	cmp	r2, r3
 8002018:	bf0c      	ite	eq
 800201a:	2301      	moveq	r3, #1
 800201c:	2300      	movne	r3, #0
 800201e:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10b      	bne.n	800203e <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 8002026:	f000 fbe9 	bl	80027fc <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4293      	cmp	r3, r2
 8002030:	bf8c      	ite	hi
 8002032:	2301      	movhi	r3, #1
 8002034:	2300      	movls	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e0      	bne.n	8001ffe <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 800203c:	e000      	b.n	8002040 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 800203e:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 800204a:	2301      	movs	r3, #1

}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
 8002060:	4613      	mov	r3, r2
 8002062:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff9c 	bl	8001fa2 <_ZN7MCP251513setConfigModeEv>
 800206a:	4603      	mov	r3, r0
 800206c:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 8002074:	7afb      	ldrb	r3, [r7, #11]
 8002076:	e1b5      	b.n	80023e4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 800207c:	78bb      	ldrb	r3, [r7, #2]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d009      	beq.n	8002096 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 8002082:	2b02      	cmp	r3, #2
 8002084:	f300 8193 	bgt.w	80023ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 811f 	beq.w	80022cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 800208e:	2b01      	cmp	r3, #1
 8002090:	f000 808e 	beq.w	80021b0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 8002094:	e18b      	b.n	80023ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	2b0f      	cmp	r3, #15
 800209a:	f200 8085 	bhi.w	80021a8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 800209e:	a201      	add	r2, pc, #4	@ (adr r2, 80020a4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 80020a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a4:	080020e5 	.word	0x080020e5
 80020a8:	080020f3 	.word	0x080020f3
 80020ac:	08002101 	.word	0x08002101
 80020b0:	0800210f 	.word	0x0800210f
 80020b4:	0800211d 	.word	0x0800211d
 80020b8:	0800212b 	.word	0x0800212b
 80020bc:	08002139 	.word	0x08002139
 80020c0:	08002147 	.word	0x08002147
 80020c4:	080021a9 	.word	0x080021a9
 80020c8:	080021a9 	.word	0x080021a9
 80020cc:	08002155 	.word	0x08002155
 80020d0:	08002163 	.word	0x08002163
 80020d4:	08002171 	.word	0x08002171
 80020d8:	0800217f 	.word	0x0800217f
 80020dc:	0800218d 	.word	0x0800218d
 80020e0:	0800219b 	.word	0x0800219b
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 80020e4:	231f      	movs	r3, #31
 80020e6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 80020e8:	23bf      	movs	r3, #191	@ 0xbf
 80020ea:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 80020ec:	2387      	movs	r3, #135	@ 0x87
 80020ee:	733b      	strb	r3, [r7, #12]
            break;
 80020f0:	e05d      	b.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 80020f2:	230f      	movs	r3, #15
 80020f4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 80020f6:	23bf      	movs	r3, #191	@ 0xbf
 80020f8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 80020fa:	2387      	movs	r3, #135	@ 0x87
 80020fc:	733b      	strb	r3, [r7, #12]
            break;
 80020fe:	e056      	b.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 8002100:	2307      	movs	r3, #7
 8002102:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 8002104:	23bf      	movs	r3, #191	@ 0xbf
 8002106:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 8002108:	2387      	movs	r3, #135	@ 0x87
 800210a:	733b      	strb	r3, [r7, #12]
            break;
 800210c:	e04f      	b.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 800210e:	2307      	movs	r3, #7
 8002110:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 8002112:	23a4      	movs	r3, #164	@ 0xa4
 8002114:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 8002116:	2384      	movs	r3, #132	@ 0x84
 8002118:	733b      	strb	r3, [r7, #12]
            break;
 800211a:	e048      	b.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 800211c:	2347      	movs	r3, #71	@ 0x47
 800211e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 8002120:	23e2      	movs	r3, #226	@ 0xe2
 8002122:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8002124:	2385      	movs	r3, #133	@ 0x85
 8002126:	733b      	strb	r3, [r7, #12]
            break;
 8002128:	e041      	b.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 800212a:	2303      	movs	r3, #3
 800212c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 800212e:	23bf      	movs	r3, #191	@ 0xbf
 8002130:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 8002132:	2387      	movs	r3, #135	@ 0x87
 8002134:	733b      	strb	r3, [r7, #12]
            break;
 8002136:	e03a      	b.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 8002138:	2303      	movs	r3, #3
 800213a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 800213c:	23b4      	movs	r3, #180	@ 0xb4
 800213e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8002140:	2386      	movs	r3, #134	@ 0x86
 8002142:	733b      	strb	r3, [r7, #12]
            break;
 8002144:	e033      	b.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 8002146:	2301      	movs	r3, #1
 8002148:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 800214a:	23bf      	movs	r3, #191	@ 0xbf
 800214c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 800214e:	2387      	movs	r3, #135	@ 0x87
 8002150:	733b      	strb	r3, [r7, #12]
            break;
 8002152:	e02c      	b.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8002154:	2301      	movs	r3, #1
 8002156:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 8002158:	23b4      	movs	r3, #180	@ 0xb4
 800215a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 800215c:	2386      	movs	r3, #134	@ 0x86
 800215e:	733b      	strb	r3, [r7, #12]
            break;
 8002160:	e025      	b.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 8002162:	2301      	movs	r3, #1
 8002164:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 8002166:	23b1      	movs	r3, #177	@ 0xb1
 8002168:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 800216a:	2385      	movs	r3, #133	@ 0x85
 800216c:	733b      	strb	r3, [r7, #12]
            break;
 800216e:	e01e      	b.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 8002170:	2300      	movs	r3, #0
 8002172:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 8002174:	23b4      	movs	r3, #180	@ 0xb4
 8002176:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 8002178:	2386      	movs	r3, #134	@ 0x86
 800217a:	733b      	strb	r3, [r7, #12]
            break;
 800217c:	e017      	b.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 800217e:	2300      	movs	r3, #0
 8002180:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 8002182:	23b1      	movs	r3, #177	@ 0xb1
 8002184:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 8002186:	2385      	movs	r3, #133	@ 0x85
 8002188:	733b      	strb	r3, [r7, #12]
            break;
 800218a:	e010      	b.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 800218c:	2300      	movs	r3, #0
 800218e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 8002190:	2390      	movs	r3, #144	@ 0x90
 8002192:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 8002194:	2382      	movs	r3, #130	@ 0x82
 8002196:	733b      	strb	r3, [r7, #12]
            break;
 8002198:	e009      	b.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 800219a:	2300      	movs	r3, #0
 800219c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 80021a2:	2380      	movs	r3, #128	@ 0x80
 80021a4:	733b      	strb	r3, [r7, #12]
            break;
 80021a6:	e002      	b.n	80021ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
            break;
 80021ac:	bf00      	nop
        }
        break;
 80021ae:	e101      	b.n	80023b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	2b0f      	cmp	r3, #15
 80021b4:	f200 8086 	bhi.w	80022c4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 80021b8:	a201      	add	r2, pc, #4	@ (adr r2, 80021c0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 80021ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021be:	bf00      	nop
 80021c0:	08002201 	.word	0x08002201
 80021c4:	0800220f 	.word	0x0800220f
 80021c8:	0800221d 	.word	0x0800221d
 80021cc:	080022c5 	.word	0x080022c5
 80021d0:	0800222b 	.word	0x0800222b
 80021d4:	08002239 	.word	0x08002239
 80021d8:	08002247 	.word	0x08002247
 80021dc:	08002255 	.word	0x08002255
 80021e0:	08002263 	.word	0x08002263
 80021e4:	080022c5 	.word	0x080022c5
 80021e8:	08002271 	.word	0x08002271
 80021ec:	0800227f 	.word	0x0800227f
 80021f0:	0800228d 	.word	0x0800228d
 80021f4:	0800229b 	.word	0x0800229b
 80021f8:	080022a9 	.word	0x080022a9
 80021fc:	080022b7 	.word	0x080022b7
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 8002200:	233f      	movs	r3, #63	@ 0x3f
 8002202:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 8002204:	23ff      	movs	r3, #255	@ 0xff
 8002206:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 8002208:	2387      	movs	r3, #135	@ 0x87
 800220a:	733b      	strb	r3, [r7, #12]
            break;
 800220c:	e05d      	b.n	80022ca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 800220e:	231f      	movs	r3, #31
 8002210:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 8002212:	23ff      	movs	r3, #255	@ 0xff
 8002214:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 8002216:	2387      	movs	r3, #135	@ 0x87
 8002218:	733b      	strb	r3, [r7, #12]
            break;
 800221a:	e056      	b.n	80022ca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 800221c:	230f      	movs	r3, #15
 800221e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8002220:	23ff      	movs	r3, #255	@ 0xff
 8002222:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8002224:	2387      	movs	r3, #135	@ 0x87
 8002226:	733b      	strb	r3, [r7, #12]
            break;
 8002228:	e04f      	b.n	80022ca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 800222a:	234e      	movs	r3, #78	@ 0x4e
 800222c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 800222e:	23f1      	movs	r3, #241	@ 0xf1
 8002230:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 8002232:	2385      	movs	r3, #133	@ 0x85
 8002234:	733b      	strb	r3, [r7, #12]
            break;
 8002236:	e048      	b.n	80022ca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 8002238:	2307      	movs	r3, #7
 800223a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 800223c:	23ff      	movs	r3, #255	@ 0xff
 800223e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8002240:	2387      	movs	r3, #135	@ 0x87
 8002242:	733b      	strb	r3, [r7, #12]
            break;
 8002244:	e041      	b.n	80022ca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 8002246:	2307      	movs	r3, #7
 8002248:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 800224a:	23fa      	movs	r3, #250	@ 0xfa
 800224c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 800224e:	2387      	movs	r3, #135	@ 0x87
 8002250:	733b      	strb	r3, [r7, #12]
            break;
 8002252:	e03a      	b.n	80022ca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8002254:	2303      	movs	r3, #3
 8002256:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 8002258:	23ff      	movs	r3, #255	@ 0xff
 800225a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 800225c:	2387      	movs	r3, #135	@ 0x87
 800225e:	733b      	strb	r3, [r7, #12]
            break;
 8002260:	e033      	b.n	80022ca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 8002262:	2303      	movs	r3, #3
 8002264:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 8002266:	23be      	movs	r3, #190	@ 0xbe
 8002268:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 800226a:	2307      	movs	r3, #7
 800226c:	733b      	strb	r3, [r7, #12]
            break;
 800226e:	e02c      	b.n	80022ca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 8002270:	2303      	movs	r3, #3
 8002272:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 8002274:	23fa      	movs	r3, #250	@ 0xfa
 8002276:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 8002278:	2387      	movs	r3, #135	@ 0x87
 800227a:	733b      	strb	r3, [r7, #12]
            break;
 800227c:	e025      	b.n	80022ca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 800227e:	2303      	movs	r3, #3
 8002280:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 8002282:	23f0      	movs	r3, #240	@ 0xf0
 8002284:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 8002286:	2386      	movs	r3, #134	@ 0x86
 8002288:	733b      	strb	r3, [r7, #12]
            break;
 800228a:	e01e      	b.n	80022ca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 800228c:	2301      	movs	r3, #1
 800228e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 8002290:	23fa      	movs	r3, #250	@ 0xfa
 8002292:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 8002294:	2387      	movs	r3, #135	@ 0x87
 8002296:	733b      	strb	r3, [r7, #12]
            break;
 8002298:	e017      	b.n	80022ca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 800229a:	2341      	movs	r3, #65	@ 0x41
 800229c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 800229e:	23f1      	movs	r3, #241	@ 0xf1
 80022a0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 80022a2:	2385      	movs	r3, #133	@ 0x85
 80022a4:	733b      	strb	r3, [r7, #12]
            break;
 80022a6:	e010      	b.n	80022ca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 80022ac:	23f0      	movs	r3, #240	@ 0xf0
 80022ae:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 80022b0:	2386      	movs	r3, #134	@ 0x86
 80022b2:	733b      	strb	r3, [r7, #12]
            break;
 80022b4:	e009      	b.n	80022ca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 80022b6:	2300      	movs	r3, #0
 80022b8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 80022ba:	23d0      	movs	r3, #208	@ 0xd0
 80022bc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 80022be:	2382      	movs	r3, #130	@ 0x82
 80022c0:	733b      	strb	r3, [r7, #12]
            break;
 80022c2:	e002      	b.n	80022ca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]
            break;
 80022c8:	bf00      	nop
        }
        break;
 80022ca:	e073      	b.n	80023b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	3b04      	subs	r3, #4
 80022d0:	2b0b      	cmp	r3, #11
 80022d2:	d868      	bhi.n	80023a6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 80022d4:	a201      	add	r2, pc, #4	@ (adr r2, 80022dc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 80022d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022da:	bf00      	nop
 80022dc:	0800230d 	.word	0x0800230d
 80022e0:	0800231b 	.word	0x0800231b
 80022e4:	08002329 	.word	0x08002329
 80022e8:	08002337 	.word	0x08002337
 80022ec:	08002345 	.word	0x08002345
 80022f0:	080023a7 	.word	0x080023a7
 80022f4:	08002353 	.word	0x08002353
 80022f8:	08002361 	.word	0x08002361
 80022fc:	0800236f 	.word	0x0800236f
 8002300:	0800237d 	.word	0x0800237d
 8002304:	0800238b 	.word	0x0800238b
 8002308:	08002399 	.word	0x08002399
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 800230c:	230b      	movs	r3, #11
 800230e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 8002310:	23ff      	movs	r3, #255	@ 0xff
 8002312:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 8002314:	2387      	movs	r3, #135	@ 0x87
 8002316:	733b      	strb	r3, [r7, #12]
	    break;
 8002318:	e048      	b.n	80023ac <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 800231a:	2309      	movs	r3, #9
 800231c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 800231e:	23ff      	movs	r3, #255	@ 0xff
 8002320:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 8002322:	2387      	movs	r3, #135	@ 0x87
 8002324:	733b      	strb	r3, [r7, #12]
            break;
 8002326:	e041      	b.n	80023ac <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 8002328:	2309      	movs	r3, #9
 800232a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 800232c:	23fa      	movs	r3, #250	@ 0xfa
 800232e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8002330:	2387      	movs	r3, #135	@ 0x87
 8002332:	733b      	strb	r3, [r7, #12]
            break;
 8002334:	e03a      	b.n	80023ac <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 8002336:	2304      	movs	r3, #4
 8002338:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 800233a:	23ff      	movs	r3, #255	@ 0xff
 800233c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 800233e:	2387      	movs	r3, #135	@ 0x87
 8002340:	733b      	strb	r3, [r7, #12]
            break;
 8002342:	e033      	b.n	80023ac <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8002344:	2304      	movs	r3, #4
 8002346:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 8002348:	23fe      	movs	r3, #254	@ 0xfe
 800234a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 800234c:	2387      	movs	r3, #135	@ 0x87
 800234e:	733b      	strb	r3, [r7, #12]
	    break;
 8002350:	e02c      	b.n	80023ac <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 8002352:	2304      	movs	r3, #4
 8002354:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 8002356:	23fa      	movs	r3, #250	@ 0xfa
 8002358:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 800235a:	2387      	movs	r3, #135	@ 0x87
 800235c:	733b      	strb	r3, [r7, #12]
            break;
 800235e:	e025      	b.n	80023ac <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 8002360:	2303      	movs	r3, #3
 8002362:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 8002364:	23fa      	movs	r3, #250	@ 0xfa
 8002366:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 8002368:	2387      	movs	r3, #135	@ 0x87
 800236a:	733b      	strb	r3, [r7, #12]
            break;
 800236c:	e01e      	b.n	80023ac <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 800236e:	2301      	movs	r3, #1
 8002370:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 8002372:	23ff      	movs	r3, #255	@ 0xff
 8002374:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 8002376:	2387      	movs	r3, #135	@ 0x87
 8002378:	733b      	strb	r3, [r7, #12]
            break;
 800237a:	e017      	b.n	80023ac <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 800237c:	2341      	movs	r3, #65	@ 0x41
 800237e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 8002380:	23fb      	movs	r3, #251	@ 0xfb
 8002382:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 8002384:	2386      	movs	r3, #134	@ 0x86
 8002386:	733b      	strb	r3, [r7, #12]
            break;
 8002388:	e010      	b.n	80023ac <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 800238a:	2300      	movs	r3, #0
 800238c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 800238e:	23fa      	movs	r3, #250	@ 0xfa
 8002390:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 8002392:	2387      	movs	r3, #135	@ 0x87
 8002394:	733b      	strb	r3, [r7, #12]
            break;
 8002396:	e009      	b.n	80023ac <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 8002398:	2300      	movs	r3, #0
 800239a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 800239c:	23d9      	movs	r3, #217	@ 0xd9
 800239e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 80023a0:	2382      	movs	r3, #130	@ 0x82
 80023a2:	733b      	strb	r3, [r7, #12]
            break;
 80023a4:	e002      	b.n	80023ac <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]
            break;
 80023aa:	bf00      	nop
        }
        break;
 80023ac:	e002      	b.n	80023b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
        break;
 80023b2:	bf00      	nop
    }

    if (set) {
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d013      	beq.n	80023e2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 80023ba:	7bbb      	ldrb	r3, [r7, #14]
 80023bc:	461a      	mov	r2, r3
 80023be:	212a      	movs	r1, #42	@ 0x2a
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff fd5d 	bl	8001e80 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 80023c6:	7b7b      	ldrb	r3, [r7, #13]
 80023c8:	461a      	mov	r2, r3
 80023ca:	2129      	movs	r1, #41	@ 0x29
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff fd57 	bl	8001e80 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 80023d2:	7b3b      	ldrb	r3, [r7, #12]
 80023d4:	461a      	mov	r2, r3
 80023d6:	2128      	movs	r1, #40	@ 0x28
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff fd51 	bl	8001e80 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e000      	b.n	80023e4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 80023e2:	2301      	movs	r3, #1
    }
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d035      	beq.n	8002472 <_ZN7MCP25159prepareIdEPhbm+0x86>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3303      	adds	r3, #3
 800240a:	8afa      	ldrh	r2, [r7, #22]
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 8002410:	8afb      	ldrh	r3, [r7, #22]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	b29a      	uxth	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	3302      	adds	r3, #2
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8002424:	8afb      	ldrh	r3, [r7, #22]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	3301      	adds	r3, #1
 800242c:	f002 0203 	and.w	r2, r2, #3
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	3301      	adds	r3, #1
 8002438:	7819      	ldrb	r1, [r3, #0]
 800243a:	8afb      	ldrh	r3, [r7, #22]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f023 031f 	bic.w	r3, r3, #31
 8002446:	b2da      	uxtb	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	3301      	adds	r3, #1
 800244c:	440a      	add	r2, r1
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	3301      	adds	r3, #1
 8002456:	781a      	ldrb	r2, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	3301      	adds	r3, #1
 800245c:	f042 0208 	orr.w	r2, r2, #8
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 8002464:	8afb      	ldrh	r3, [r7, #22]
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	b29b      	uxth	r3, r3
 800246a:	b2da      	uxtb	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 8002470:	e014      	b.n	800249c <_ZN7MCP25159prepareIdEPhbm+0xb0>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 8002472:	8afb      	ldrh	r3, [r7, #22]
 8002474:	08db      	lsrs	r3, r3, #3
 8002476:	b29b      	uxth	r3, r3
 8002478:	b2da      	uxtb	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 800247e:	8afb      	ldrh	r3, [r7, #22]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3301      	adds	r3, #1
 8002486:	0152      	lsls	r2, r2, #5
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	3303      	adds	r3, #3
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	3302      	adds	r3, #2
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
}
 800249c:	bf00      	nop
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	460b      	mov	r3, r1
 80024b4:	72fb      	strb	r3, [r7, #11]
 80024b6:	4613      	mov	r3, r2
 80024b8:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f7ff fd71 	bl	8001fa2 <_ZN7MCP251513setConfigModeEv>
 80024c0:	4603      	mov	r3, r0
 80024c2:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 80024c4:	7dbb      	ldrb	r3, [r7, #22]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 80024ca:	7dbb      	ldrb	r3, [r7, #22]
 80024cc:	e01c      	b.n	8002508 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80024ce:	7aba      	ldrb	r2, [r7, #10]
 80024d0:	f107 0110 	add.w	r1, r7, #16
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f7ff ff88 	bl	80023ec <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 80024dc:	7afb      	ldrb	r3, [r7, #11]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d003      	beq.n	80024ee <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 80024e6:	e005      	b.n	80024f4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 80024e8:	2320      	movs	r3, #32
 80024ea:	75fb      	strb	r3, [r7, #23]
 80024ec:	e004      	b.n	80024f8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 80024ee:	2324      	movs	r3, #36	@ 0x24
 80024f0:	75fb      	strb	r3, [r7, #23]
 80024f2:	e001      	b.n	80024f8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e007      	b.n	8002508 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 80024f8:	f107 0210 	add.w	r2, r7, #16
 80024fc:	7df9      	ldrb	r1, [r7, #23]
 80024fe:	2304      	movs	r3, #4
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f7ff fcdd 	bl	8001ec0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	72fb      	strb	r3, [r7, #11]
 800251e:	4613      	mov	r3, r2
 8002520:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff fd3d 	bl	8001fa2 <_ZN7MCP251513setConfigModeEv>
 8002528:	4603      	mov	r3, r0
 800252a:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 800252c:	7dbb      	ldrb	r3, [r7, #22]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 8002532:	7dbb      	ldrb	r3, [r7, #22]
 8002534:	e035      	b.n	80025a2 <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 8002536:	7afb      	ldrb	r3, [r7, #11]
 8002538:	2b05      	cmp	r3, #5
 800253a:	d821      	bhi.n	8002580 <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 800253c:	a201      	add	r2, pc, #4	@ (adr r2, 8002544 <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 800253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002542:	bf00      	nop
 8002544:	0800255d 	.word	0x0800255d
 8002548:	08002563 	.word	0x08002563
 800254c:	08002569 	.word	0x08002569
 8002550:	0800256f 	.word	0x0800256f
 8002554:	08002575 	.word	0x08002575
 8002558:	0800257b 	.word	0x0800257b
        case RXF0: reg = MCP_RXF0SIDH; break;
 800255c:	2300      	movs	r3, #0
 800255e:	75fb      	strb	r3, [r7, #23]
 8002560:	e010      	b.n	8002584 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 8002562:	2304      	movs	r3, #4
 8002564:	75fb      	strb	r3, [r7, #23]
 8002566:	e00d      	b.n	8002584 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 8002568:	2308      	movs	r3, #8
 800256a:	75fb      	strb	r3, [r7, #23]
 800256c:	e00a      	b.n	8002584 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 800256e:	2310      	movs	r3, #16
 8002570:	75fb      	strb	r3, [r7, #23]
 8002572:	e007      	b.n	8002584 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 8002574:	2314      	movs	r3, #20
 8002576:	75fb      	strb	r3, [r7, #23]
 8002578:	e004      	b.n	8002584 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 800257a:	2318      	movs	r3, #24
 800257c:	75fb      	strb	r3, [r7, #23]
 800257e:	e001      	b.n	8002584 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 8002580:	2301      	movs	r3, #1
 8002582:	e00e      	b.n	80025a2 <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8002584:	7aba      	ldrb	r2, [r7, #10]
 8002586:	f107 0110 	add.w	r1, r7, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f7ff ff2d 	bl	80023ec <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 8002592:	f107 0210 	add.w	r2, r7, #16
 8002596:	7df9      	ldrb	r1, [r7, #23]
 8002598:	2304      	movs	r3, #4
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f7ff fc90 	bl	8001ec0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop

080025ac <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

    return ERROR_ALLTXBUSY;
}

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	460b      	mov	r3, r1
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 80025ba:	7afb      	ldrb	r3, [r7, #11]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4a30      	ldr	r2, [pc, #192]	@ (8002680 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 80025c0:	4413      	add	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	7859      	ldrb	r1, [r3, #1]
 80025c8:	f107 0210 	add.w	r2, r7, #16
 80025cc:	2305      	movs	r3, #5
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7ff fc27 	bl	8001e22 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 80025d4:	7c3b      	ldrb	r3, [r7, #16]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	7c7a      	ldrb	r2, [r7, #17]
 80025da:	0952      	lsrs	r2, r2, #5
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	4413      	add	r3, r2
 80025e0:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 80025e2:	7c7b      	ldrb	r3, [r7, #17]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d014      	beq.n	8002616 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	009a      	lsls	r2, r3, #2
 80025f0:	7c7b      	ldrb	r3, [r7, #17]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	7cba      	ldrb	r2, [r7, #18]
 8002600:	4413      	add	r3, r2
 8002602:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	7cfa      	ldrb	r2, [r7, #19]
 800260a:	4413      	add	r3, r2
 800260c:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002614:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 8002616:	7d3b      	ldrb	r3, [r7, #20]
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 800261e:	7dfb      	ldrb	r3, [r7, #23]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d901      	bls.n	8002628 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 8002624:	2301      	movs	r3, #1
 8002626:	e027      	b.n	8002678 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7ff fbd8 	bl	8001de4 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8002634:	4603      	mov	r3, r0
 8002636:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 8002638:	7dbb      	ldrb	r3, [r7, #22]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002648:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	7dfa      	ldrb	r2, [r7, #23]
 8002654:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	7899      	ldrb	r1, [r3, #2]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f103 0208 	add.w	r2, r3, #8
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f7ff fbdd 	bl	8001e22 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	78da      	ldrb	r2, [r3, #3]
 800266c:	2300      	movs	r3, #0
 800266e:	212c      	movs	r1, #44	@ 0x2c
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7ff fc54 	bl	8001f1e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3720      	adds	r7, #32
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	0800c6b8 	.word	0x0800c6b8

08002684 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff fc6f 	bl	8001f72 <_ZN7MCP25159getStatusEv>
 8002694:	4603      	mov	r3, r0
 8002696:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 8002698:	7bbb      	ldrb	r3, [r7, #14]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	2100      	movs	r1, #0
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ff80 	bl	80025ac <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	e00e      	b.n	80026d0 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 80026b2:	7bbb      	ldrb	r3, [r7, #14]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	2101      	movs	r1, #1
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff73 	bl	80025ac <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 80026c6:	4603      	mov	r3, r0
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	e001      	b.n	80026d0 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 80026cc:	2305      	movs	r3, #5
 80026ce:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002714 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026e0:	f7fe fd28 	bl	8001134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026e4:	480c      	ldr	r0, [pc, #48]	@ (8002718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026e6:	490d      	ldr	r1, [pc, #52]	@ (800271c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ec:	e002      	b.n	80026f4 <LoopCopyDataInit>

080026ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f2:	3304      	adds	r3, #4

080026f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f8:	d3f9      	bcc.n	80026ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002700:	e001      	b.n	8002706 <LoopFillZerobss>

08002702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002704:	3204      	adds	r2, #4

08002706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002708:	d3fb      	bcc.n	8002702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800270a:	f008 fd7f 	bl	800b20c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800270e:	f7fd ffbd 	bl	800068c <main>
  bx  lr    
 8002712:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002714:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800271c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002720:	0800c704 	.word	0x0800c704
  ldr r2, =_sbss
 8002724:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002728:	200016d4 	.word	0x200016d4

0800272c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800272c:	e7fe      	b.n	800272c <ADC_IRQHandler>
	...

08002730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002734:	4b0e      	ldr	r3, [pc, #56]	@ (8002770 <HAL_Init+0x40>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0d      	ldr	r2, [pc, #52]	@ (8002770 <HAL_Init+0x40>)
 800273a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800273e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002740:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <HAL_Init+0x40>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0a      	ldr	r2, [pc, #40]	@ (8002770 <HAL_Init+0x40>)
 8002746:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800274a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800274c:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <HAL_Init+0x40>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a07      	ldr	r2, [pc, #28]	@ (8002770 <HAL_Init+0x40>)
 8002752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002758:	2003      	movs	r0, #3
 800275a:	f000 f94f 	bl	80029fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800275e:	200f      	movs	r0, #15
 8002760:	f000 f808 	bl	8002774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002764:	f7fe fc70 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023c00 	.word	0x40023c00

08002774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800277c:	4b12      	ldr	r3, [pc, #72]	@ (80027c8 <HAL_InitTick+0x54>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b12      	ldr	r3, [pc, #72]	@ (80027cc <HAL_InitTick+0x58>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4619      	mov	r1, r3
 8002786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800278a:	fbb3 f3f1 	udiv	r3, r3, r1
 800278e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f967 	bl	8002a66 <HAL_SYSTICK_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e00e      	b.n	80027c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b0f      	cmp	r3, #15
 80027a6:	d80a      	bhi.n	80027be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a8:	2200      	movs	r2, #0
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027b0:	f000 f92f 	bl	8002a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b4:	4a06      	ldr	r2, [pc, #24]	@ (80027d0 <HAL_InitTick+0x5c>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e000      	b.n	80027c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000004 	.word	0x20000004
 80027cc:	2000000c 	.word	0x2000000c
 80027d0:	20000008 	.word	0x20000008

080027d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_IncTick+0x20>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_IncTick+0x24>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	4a04      	ldr	r2, [pc, #16]	@ (80027f8 <HAL_IncTick+0x24>)
 80027e6:	6013      	str	r3, [r2, #0]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	2000000c 	.word	0x2000000c
 80027f8:	200002ec 	.word	0x200002ec

080027fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002800:	4b03      	ldr	r3, [pc, #12]	@ (8002810 <HAL_GetTick+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	200002ec 	.word	0x200002ec

08002814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff ffee 	bl	80027fc <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800282c:	d005      	beq.n	800283a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282e:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <HAL_Delay+0x44>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800283a:	bf00      	nop
 800283c:	f7ff ffde 	bl	80027fc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d8f7      	bhi.n	800283c <HAL_Delay+0x28>
  {
  }
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000000c 	.word	0x2000000c

0800285c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800286c:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002878:	4013      	ands	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002884:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800288c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288e:	4a04      	ldr	r2, [pc, #16]	@ (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	60d3      	str	r3, [r2, #12]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a8:	4b04      	ldr	r3, [pc, #16]	@ (80028bc <__NVIC_GetPriorityGrouping+0x18>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	f003 0307 	and.w	r3, r3, #7
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	db0b      	blt.n	80028ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	4907      	ldr	r1, [pc, #28]	@ (80028f8 <__NVIC_EnableIRQ+0x38>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	2001      	movs	r0, #1
 80028e2:	fa00 f202 	lsl.w	r2, r0, r2
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000e100 	.word	0xe000e100

080028fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	6039      	str	r1, [r7, #0]
 8002906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	2b00      	cmp	r3, #0
 800290e:	db0a      	blt.n	8002926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	490c      	ldr	r1, [pc, #48]	@ (8002948 <__NVIC_SetPriority+0x4c>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	0112      	lsls	r2, r2, #4
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	440b      	add	r3, r1
 8002920:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002924:	e00a      	b.n	800293c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4908      	ldr	r1, [pc, #32]	@ (800294c <__NVIC_SetPriority+0x50>)
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	3b04      	subs	r3, #4
 8002934:	0112      	lsls	r2, r2, #4
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	440b      	add	r3, r1
 800293a:	761a      	strb	r2, [r3, #24]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000e100 	.word	0xe000e100
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002950:	b480      	push	{r7}
 8002952:	b089      	sub	sp, #36	@ 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f1c3 0307 	rsb	r3, r3, #7
 800296a:	2b04      	cmp	r3, #4
 800296c:	bf28      	it	cs
 800296e:	2304      	movcs	r3, #4
 8002970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3304      	adds	r3, #4
 8002976:	2b06      	cmp	r3, #6
 8002978:	d902      	bls.n	8002980 <NVIC_EncodePriority+0x30>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3b03      	subs	r3, #3
 800297e:	e000      	b.n	8002982 <NVIC_EncodePriority+0x32>
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	401a      	ands	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002998:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	43d9      	mvns	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	4313      	orrs	r3, r2
         );
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3724      	adds	r7, #36	@ 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029c8:	d301      	bcc.n	80029ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00f      	b.n	80029ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ce:	4a0a      	ldr	r2, [pc, #40]	@ (80029f8 <SysTick_Config+0x40>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d6:	210f      	movs	r1, #15
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029dc:	f7ff ff8e 	bl	80028fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e0:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <SysTick_Config+0x40>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e6:	4b04      	ldr	r3, [pc, #16]	@ (80029f8 <SysTick_Config+0x40>)
 80029e8:	2207      	movs	r2, #7
 80029ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	e000e010 	.word	0xe000e010

080029fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ff29 	bl	800285c <__NVIC_SetPriorityGrouping>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a24:	f7ff ff3e 	bl	80028a4 <__NVIC_GetPriorityGrouping>
 8002a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	6978      	ldr	r0, [r7, #20]
 8002a30:	f7ff ff8e 	bl	8002950 <NVIC_EncodePriority>
 8002a34:	4602      	mov	r2, r0
 8002a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff5d 	bl	80028fc <__NVIC_SetPriority>
}
 8002a42:	bf00      	nop
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff31 	bl	80028c0 <__NVIC_EnableIRQ>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ffa2 	bl	80029b8 <SysTick_Config>
 8002a74:	4603      	mov	r3, r0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a8c:	f7ff feb6 	bl	80027fc <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e099      	b.n	8002bd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002abc:	e00f      	b.n	8002ade <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002abe:	f7ff fe9d 	bl	80027fc <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d908      	bls.n	8002ade <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e078      	b.n	8002bd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e8      	bne.n	8002abe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4b38      	ldr	r3, [pc, #224]	@ (8002bd8 <HAL_DMA_Init+0x158>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d107      	bne.n	8002b48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b40:	4313      	orrs	r3, r2
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f023 0307 	bic.w	r3, r3, #7
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d117      	bne.n	8002ba2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00e      	beq.n	8002ba2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fa91 	bl	80030ac <DMA_CheckFifoParam>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2240      	movs	r2, #64	@ 0x40
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e016      	b.n	8002bd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fa48 	bl	8003040 <DMA_CalcBaseAndBitshift>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb8:	223f      	movs	r2, #63	@ 0x3f
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	f010803f 	.word	0xf010803f

08002bdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_DMA_Start_IT+0x26>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e040      	b.n	8002c84 <HAL_DMA_Start_IT+0xa8>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d12f      	bne.n	8002c76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f9da 	bl	8002fe4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c34:	223f      	movs	r2, #63	@ 0x3f
 8002c36:	409a      	lsls	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0216 	orr.w	r2, r2, #22
 8002c4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0208 	orr.w	r2, r2, #8
 8002c62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	e005      	b.n	8002c82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d004      	beq.n	8002caa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2280      	movs	r2, #128	@ 0x80
 8002ca4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00c      	b.n	8002cc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2205      	movs	r2, #5
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cdc:	4b8e      	ldr	r3, [pc, #568]	@ (8002f18 <HAL_DMA_IRQHandler+0x248>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a8e      	ldr	r2, [pc, #568]	@ (8002f1c <HAL_DMA_IRQHandler+0x24c>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0a9b      	lsrs	r3, r3, #10
 8002ce8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d01a      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d013      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d28:	2208      	movs	r2, #8
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d40:	2201      	movs	r2, #1
 8002d42:	409a      	lsls	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d012      	beq.n	8002d72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5e:	2201      	movs	r2, #1
 8002d60:	409a      	lsls	r2, r3
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6a:	f043 0202 	orr.w	r2, r3, #2
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d76:	2204      	movs	r2, #4
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d012      	beq.n	8002da8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00b      	beq.n	8002da8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d94:	2204      	movs	r2, #4
 8002d96:	409a      	lsls	r2, r3
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da0:	f043 0204 	orr.w	r2, r3, #4
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dac:	2210      	movs	r2, #16
 8002dae:	409a      	lsls	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d043      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d03c      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dca:	2210      	movs	r2, #16
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d018      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d108      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d024      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	4798      	blx	r3
 8002dfe:	e01f      	b.n	8002e40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01b      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4798      	blx	r3
 8002e10:	e016      	b.n	8002e40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d107      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0208 	bic.w	r2, r2, #8
 8002e2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e44:	2220      	movs	r2, #32
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 808f 	beq.w	8002f70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8087 	beq.w	8002f70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e66:	2220      	movs	r2, #32
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d136      	bne.n	8002ee8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0216 	bic.w	r2, r2, #22
 8002e88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_DMA_IRQHandler+0x1da>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0208 	bic.w	r2, r2, #8
 8002eb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ebe:	223f      	movs	r2, #63	@ 0x3f
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d07e      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
        }
        return;
 8002ee6:	e079      	b.n	8002fdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01d      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10d      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d031      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4798      	blx	r3
 8002f14:	e02c      	b.n	8002f70 <HAL_DMA_IRQHandler+0x2a0>
 8002f16:	bf00      	nop
 8002f18:	20000004 	.word	0x20000004
 8002f1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d023      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
 8002f30:	e01e      	b.n	8002f70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10f      	bne.n	8002f60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0210 	bic.w	r2, r2, #16
 8002f4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d032      	beq.n	8002fde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d022      	beq.n	8002fca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2205      	movs	r2, #5
 8002f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d307      	bcc.n	8002fb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f2      	bne.n	8002f9c <HAL_DMA_IRQHandler+0x2cc>
 8002fb6:	e000      	b.n	8002fba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
 8002fda:	e000      	b.n	8002fde <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fdc:	bf00      	nop
    }
  }
}
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003000:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b40      	cmp	r3, #64	@ 0x40
 8003010:	d108      	bne.n	8003024 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003022:	e007      	b.n	8003034 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	60da      	str	r2, [r3, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3b10      	subs	r3, #16
 8003050:	4a14      	ldr	r2, [pc, #80]	@ (80030a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800305a:	4a13      	ldr	r2, [pc, #76]	@ (80030a8 <DMA_CalcBaseAndBitshift+0x68>)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d909      	bls.n	8003082 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	1d1a      	adds	r2, r3, #4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003080:	e007      	b.n	8003092 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800308a:	f023 0303 	bic.w	r3, r3, #3
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	aaaaaaab 	.word	0xaaaaaaab
 80030a8:	0800c6c0 	.word	0x0800c6c0

080030ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11f      	bne.n	8003106 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d856      	bhi.n	800317a <DMA_CheckFifoParam+0xce>
 80030cc:	a201      	add	r2, pc, #4	@ (adr r2, 80030d4 <DMA_CheckFifoParam+0x28>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	080030e5 	.word	0x080030e5
 80030d8:	080030f7 	.word	0x080030f7
 80030dc:	080030e5 	.word	0x080030e5
 80030e0:	0800317b 	.word	0x0800317b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d046      	beq.n	800317e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f4:	e043      	b.n	800317e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030fe:	d140      	bne.n	8003182 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003104:	e03d      	b.n	8003182 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800310e:	d121      	bne.n	8003154 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d837      	bhi.n	8003186 <DMA_CheckFifoParam+0xda>
 8003116:	a201      	add	r2, pc, #4	@ (adr r2, 800311c <DMA_CheckFifoParam+0x70>)
 8003118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311c:	0800312d 	.word	0x0800312d
 8003120:	08003133 	.word	0x08003133
 8003124:	0800312d 	.word	0x0800312d
 8003128:	08003145 	.word	0x08003145
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
      break;
 8003130:	e030      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003136:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d025      	beq.n	800318a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003142:	e022      	b.n	800318a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003148:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800314c:	d11f      	bne.n	800318e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003152:	e01c      	b.n	800318e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d903      	bls.n	8003162 <DMA_CheckFifoParam+0xb6>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d003      	beq.n	8003168 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003160:	e018      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
      break;
 8003166:	e015      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00e      	beq.n	8003192 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      break;
 8003178:	e00b      	b.n	8003192 <DMA_CheckFifoParam+0xe6>
      break;
 800317a:	bf00      	nop
 800317c:	e00a      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 800317e:	bf00      	nop
 8003180:	e008      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 8003182:	bf00      	nop
 8003184:	e006      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 8003186:	bf00      	nop
 8003188:	e004      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 800318a:	bf00      	nop
 800318c:	e002      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;   
 800318e:	bf00      	nop
 8003190:	e000      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 8003192:	bf00      	nop
    }
  } 
  
  return status; 
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop

080031a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b089      	sub	sp, #36	@ 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	e159      	b.n	8003474 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c0:	2201      	movs	r2, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4013      	ands	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	429a      	cmp	r2, r3
 80031da:	f040 8148 	bne.w	800346e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d005      	beq.n	80031f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d130      	bne.n	8003258 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800322c:	2201      	movs	r2, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 0201 	and.w	r2, r3, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b03      	cmp	r3, #3
 8003262:	d017      	beq.n	8003294 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d123      	bne.n	80032e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	08da      	lsrs	r2, r3, #3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3208      	adds	r2, #8
 80032a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	220f      	movs	r2, #15
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	08da      	lsrs	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3208      	adds	r2, #8
 80032e2:	69b9      	ldr	r1, [r7, #24]
 80032e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	2203      	movs	r2, #3
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0203 	and.w	r2, r3, #3
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80a2 	beq.w	800346e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	4b57      	ldr	r3, [pc, #348]	@ (800348c <HAL_GPIO_Init+0x2e8>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	4a56      	ldr	r2, [pc, #344]	@ (800348c <HAL_GPIO_Init+0x2e8>)
 8003334:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003338:	6453      	str	r3, [r2, #68]	@ 0x44
 800333a:	4b54      	ldr	r3, [pc, #336]	@ (800348c <HAL_GPIO_Init+0x2e8>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003346:	4a52      	ldr	r2, [pc, #328]	@ (8003490 <HAL_GPIO_Init+0x2ec>)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3302      	adds	r3, #2
 800334e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	220f      	movs	r2, #15
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a49      	ldr	r2, [pc, #292]	@ (8003494 <HAL_GPIO_Init+0x2f0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d019      	beq.n	80033a6 <HAL_GPIO_Init+0x202>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a48      	ldr	r2, [pc, #288]	@ (8003498 <HAL_GPIO_Init+0x2f4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <HAL_GPIO_Init+0x1fe>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a47      	ldr	r2, [pc, #284]	@ (800349c <HAL_GPIO_Init+0x2f8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00d      	beq.n	800339e <HAL_GPIO_Init+0x1fa>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a46      	ldr	r2, [pc, #280]	@ (80034a0 <HAL_GPIO_Init+0x2fc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <HAL_GPIO_Init+0x1f6>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a45      	ldr	r2, [pc, #276]	@ (80034a4 <HAL_GPIO_Init+0x300>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d101      	bne.n	8003396 <HAL_GPIO_Init+0x1f2>
 8003392:	2304      	movs	r3, #4
 8003394:	e008      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 8003396:	2307      	movs	r3, #7
 8003398:	e006      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 800339a:	2303      	movs	r3, #3
 800339c:	e004      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 800339e:	2302      	movs	r3, #2
 80033a0:	e002      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 80033a6:	2300      	movs	r3, #0
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	f002 0203 	and.w	r2, r2, #3
 80033ae:	0092      	lsls	r2, r2, #2
 80033b0:	4093      	lsls	r3, r2
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033b8:	4935      	ldr	r1, [pc, #212]	@ (8003490 <HAL_GPIO_Init+0x2ec>)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	3302      	adds	r3, #2
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033c6:	4b38      	ldr	r3, [pc, #224]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ea:	4a2f      	ldr	r2, [pc, #188]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033f0:	4b2d      	ldr	r3, [pc, #180]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003414:	4a24      	ldr	r2, [pc, #144]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800341a:	4b23      	ldr	r3, [pc, #140]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800343e:	4a1a      	ldr	r2, [pc, #104]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003444:	4b18      	ldr	r3, [pc, #96]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003468:	4a0f      	ldr	r2, [pc, #60]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3301      	adds	r3, #1
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b0f      	cmp	r3, #15
 8003478:	f67f aea2 	bls.w	80031c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	3724      	adds	r7, #36	@ 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	40013800 	.word	0x40013800
 8003494:	40020000 	.word	0x40020000
 8003498:	40020400 	.word	0x40020400
 800349c:	40020800 	.word	0x40020800
 80034a0:	40020c00 	.word	0x40020c00
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40013c00 	.word	0x40013c00

080034ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	807b      	strh	r3, [r7, #2]
 80034b8:	4613      	mov	r3, r2
 80034ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034bc:	787b      	ldrb	r3, [r7, #1]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034c2:	887a      	ldrh	r2, [r7, #2]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034c8:	e003      	b.n	80034d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ca:	887b      	ldrh	r3, [r7, #2]
 80034cc:	041a      	lsls	r2, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	619a      	str	r2, [r3, #24]
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b086      	sub	sp, #24
 80034e2:	af02      	add	r7, sp, #8
 80034e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e101      	b.n	80036f4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f007 fb10 	bl	800ab30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2203      	movs	r2, #3
 8003514:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800351e:	d102      	bne.n	8003526 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f003 ff5d 	bl	80073ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	7c1a      	ldrb	r2, [r3, #16]
 8003538:	f88d 2000 	strb.w	r2, [sp]
 800353c:	3304      	adds	r3, #4
 800353e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003540:	f003 fe3c 	bl	80071bc <USB_CoreInit>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2202      	movs	r2, #2
 800354e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e0ce      	b.n	80036f4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f003 ff55 	bl	800740c <USB_SetCurrentMode>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0bf      	b.n	80036f4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	e04a      	b.n	8003610 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	3315      	adds	r3, #21
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3314      	adds	r3, #20
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	b298      	uxth	r0, r3
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	332e      	adds	r3, #46	@ 0x2e
 80035b6:	4602      	mov	r2, r0
 80035b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	3318      	adds	r3, #24
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	331c      	adds	r3, #28
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	3320      	adds	r3, #32
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3324      	adds	r3, #36	@ 0x24
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	3301      	adds	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	791b      	ldrb	r3, [r3, #4]
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	429a      	cmp	r2, r3
 8003618:	d3af      	bcc.n	800357a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	e044      	b.n	80036aa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003636:	7bfa      	ldrb	r2, [r7, #15]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	3301      	adds	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	791b      	ldrb	r3, [r3, #4]
 80036ae:	7bfa      	ldrb	r2, [r7, #15]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d3b5      	bcc.n	8003620 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7c1a      	ldrb	r2, [r3, #16]
 80036bc:	f88d 2000 	strb.w	r2, [sp]
 80036c0:	3304      	adds	r3, #4
 80036c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036c4:	f003 feee 	bl	80074a4 <USB_DevInit>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00c      	b.n	80036f4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f004 ff38 	bl	8008562 <USB_DevDisconnect>

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_PCD_Start+0x1c>
 8003714:	2302      	movs	r3, #2
 8003716:	e022      	b.n	800375e <HAL_PCD_Start+0x62>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003738:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f003 fe3f 	bl	80073c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f004 fee6 	bl	8008520 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003766:	b590      	push	{r4, r7, lr}
 8003768:	b08d      	sub	sp, #52	@ 0x34
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f004 ffa4 	bl	80086ca <USB_GetMode>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	f040 848c 	bne.w	80040a2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f004 ff08 	bl	80085a4 <USB_ReadInterrupts>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8482 	beq.w	80040a0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f004 fef5 	bl	80085a4 <USB_ReadInterrupts>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d107      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f002 0202 	and.w	r2, r2, #2
 80037d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f004 fee3 	bl	80085a4 <USB_ReadInterrupts>
 80037de:	4603      	mov	r3, r0
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	d161      	bne.n	80038ac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0210 	bic.w	r2, r2, #16
 80037f6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 020f 	and.w	r2, r3, #15
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	4413      	add	r3, r2
 8003814:	3304      	adds	r3, #4
 8003816:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800381e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003822:	d124      	bne.n	800386e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d035      	beq.n	800389c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800383a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800383e:	b29b      	uxth	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	6a38      	ldr	r0, [r7, #32]
 8003844:	f004 fd1a 	bl	800827c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	091b      	lsrs	r3, r3, #4
 8003850:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003854:	441a      	add	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003866:	441a      	add	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	615a      	str	r2, [r3, #20]
 800386c:	e016      	b.n	800389c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003874:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003878:	d110      	bne.n	800389c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003880:	2208      	movs	r2, #8
 8003882:	4619      	mov	r1, r3
 8003884:	6a38      	ldr	r0, [r7, #32]
 8003886:	f004 fcf9 	bl	800827c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003896:	441a      	add	r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0210 	orr.w	r2, r2, #16
 80038aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f004 fe77 	bl	80085a4 <USB_ReadInterrupts>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038c0:	f040 80a7 	bne.w	8003a12 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f004 fe7c 	bl	80085ca <USB_ReadDevAllOutEpInterrupt>
 80038d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80038d4:	e099      	b.n	8003a0a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 808e 	beq.w	80039fe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f004 fea0 	bl	8008632 <USB_ReadDevOutEPInterrupt>
 80038f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00c      	beq.n	8003918 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390a:	461a      	mov	r2, r3
 800390c:	2301      	movs	r3, #1
 800390e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003910:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fea4 	bl	8004660 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00c      	beq.n	800393c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800392e:	461a      	mov	r2, r3
 8003930:	2308      	movs	r3, #8
 8003932:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003934:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 ff7a 	bl	8004830 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003952:	461a      	mov	r2, r3
 8003954:	2310      	movs	r3, #16
 8003956:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d030      	beq.n	80039c4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396a:	2b80      	cmp	r3, #128	@ 0x80
 800396c:	d109      	bne.n	8003982 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800397c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003980:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	4413      	add	r3, r2
 8003994:	3304      	adds	r3, #4
 8003996:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	78db      	ldrb	r3, [r3, #3]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d108      	bne.n	80039b2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2200      	movs	r2, #0
 80039a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	4619      	mov	r1, r3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f007 f9bb 	bl	800ad28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039be:	461a      	mov	r2, r3
 80039c0:	2302      	movs	r3, #2
 80039c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039da:	461a      	mov	r2, r3
 80039dc:	2320      	movs	r3, #32
 80039de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f6:	461a      	mov	r2, r3
 80039f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	3301      	adds	r3, #1
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f47f af62 	bne.w	80038d6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f004 fdc4 	bl	80085a4 <USB_ReadInterrupts>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a26:	f040 80db 	bne.w	8003be0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f004 fde5 	bl	80085fe <USB_ReadDevAllInEpInterrupt>
 8003a34:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003a3a:	e0cd      	b.n	8003bd8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80c2 	beq.w	8003bcc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f004 fe0b 	bl	800866e <USB_ReadDevInEPInterrupt>
 8003a58:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d057      	beq.n	8003b14 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69f9      	ldr	r1, [r7, #28]
 8003a80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a84:	4013      	ands	r3, r2
 8003a86:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a94:	461a      	mov	r2, r3
 8003a96:	2301      	movs	r3, #1
 8003a98:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	799b      	ldrb	r3, [r3, #6]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d132      	bne.n	8003b08 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	3320      	adds	r3, #32
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4403      	add	r3, r0
 8003ac2:	331c      	adds	r3, #28
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4419      	add	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4403      	add	r3, r0
 8003ad6:	3320      	adds	r3, #32
 8003ad8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d113      	bne.n	8003b08 <HAL_PCD_IRQHandler+0x3a2>
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	3324      	adds	r3, #36	@ 0x24
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d108      	bne.n	8003b08 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b00:	461a      	mov	r2, r3
 8003b02:	2101      	movs	r1, #1
 8003b04:	f004 fe12 	bl	800872c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f007 f88f 	bl	800ac32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d008      	beq.n	8003b4c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b46:	461a      	mov	r2, r3
 8003b48:	2310      	movs	r3, #16
 8003b4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b62:	461a      	mov	r2, r3
 8003b64:	2340      	movs	r3, #64	@ 0x40
 8003b66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d023      	beq.n	8003bba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b74:	6a38      	ldr	r0, [r7, #32]
 8003b76:	f003 fdf9 	bl	800776c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	3310      	adds	r3, #16
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	78db      	ldrb	r3, [r3, #3]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d108      	bne.n	8003ba8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f007 f8d2 	bl	800ad4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fcbd 	bl	8004546 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	3301      	adds	r3, #1
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd4:	085b      	lsrs	r3, r3, #1
 8003bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f47f af2e 	bne.w	8003a3c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f004 fcdd 	bl	80085a4 <USB_ReadInterrupts>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bf4:	d122      	bne.n	8003c3c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d108      	bne.n	8003c26 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fea4 	bl	800496c <HAL_PCDEx_LPM_Callback>
 8003c24:	e002      	b.n	8003c2c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f007 f870 	bl	800ad0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f004 fcaf 	bl	80085a4 <USB_ReadInterrupts>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c50:	d112      	bne.n	8003c78 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d102      	bne.n	8003c68 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f007 f82c 	bl	800acc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003c76:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f004 fc91 	bl	80085a4 <USB_ReadInterrupts>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c8c:	f040 80b7 	bne.w	8003dfe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2110      	movs	r1, #16
 8003caa:	4618      	mov	r0, r3
 8003cac:	f003 fd5e 	bl	800776c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cb4:	e046      	b.n	8003d44 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cc8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ce4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ce8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cfc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d0e:	0151      	lsls	r1, r2, #5
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	440a      	add	r2, r1
 8003d14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d2e:	0151      	lsls	r1, r2, #5
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	440a      	add	r2, r1
 8003d34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d38:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d3c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d40:	3301      	adds	r3, #1
 8003d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	791b      	ldrb	r3, [r3, #4]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d3b2      	bcc.n	8003cb6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d5e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003d62:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	7bdb      	ldrb	r3, [r3, #15]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d016      	beq.n	8003d9a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d7c:	f043 030b 	orr.w	r3, r3, #11
 8003d80:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d92:	f043 030b 	orr.w	r3, r3, #11
 8003d96:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d98:	e015      	b.n	8003dc6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003da8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003dac:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003db0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dc0:	f043 030b 	orr.w	r3, r3, #11
 8003dc4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dd4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003dd8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003de8:	461a      	mov	r2, r3
 8003dea:	f004 fc9f 	bl	800872c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f004 fbce 	bl	80085a4 <USB_ReadInterrupts>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e12:	d123      	bne.n	8003e5c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f004 fc64 	bl	80086e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f003 fd1b 	bl	800785e <USB_GetDevSpeed>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681c      	ldr	r4, [r3, #0]
 8003e34:	f001 f9ca 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 8003e38:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4620      	mov	r0, r4
 8003e42:	f003 fa1f 	bl	8007284 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f006 ff1b 	bl	800ac82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003e5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f004 fb9f 	bl	80085a4 <USB_ReadInterrupts>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d10a      	bne.n	8003e86 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f006 fef8 	bl	800ac66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f002 0208 	and.w	r2, r2, #8
 8003e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f004 fb8a 	bl	80085a4 <USB_ReadInterrupts>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e96:	2b80      	cmp	r3, #128	@ 0x80
 8003e98:	d123      	bne.n	8003ee2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eaa:	e014      	b.n	8003ed6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d105      	bne.n	8003ed0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	4619      	mov	r1, r3
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fb0a 	bl	80044e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	791b      	ldrb	r3, [r3, #4]
 8003eda:	461a      	mov	r2, r3
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d3e4      	bcc.n	8003eac <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f004 fb5c 	bl	80085a4 <USB_ReadInterrupts>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ef6:	d13c      	bne.n	8003f72 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ef8:	2301      	movs	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003efc:	e02b      	b.n	8003f56 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3318      	adds	r3, #24
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d115      	bne.n	8003f50 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	da12      	bge.n	8003f50 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	3317      	adds	r3, #23
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 faca 	bl	80044e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	3301      	adds	r3, #1
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	791b      	ldrb	r3, [r3, #4]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d3cd      	bcc.n	8003efe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f004 fb14 	bl	80085a4 <USB_ReadInterrupts>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f86:	d156      	bne.n	8004036 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f88:	2301      	movs	r3, #1
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8c:	e045      	b.n	800401a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d12e      	bne.n	8004014 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fb6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	da2b      	bge.n	8004014 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003fc8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d121      	bne.n	8004014 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	69fa      	ldr	r2, [r7, #28]
 8004008:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800400c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004010:	6053      	str	r3, [r2, #4]
            break;
 8004012:	e008      	b.n	8004026 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	3301      	adds	r3, #1
 8004018:	627b      	str	r3, [r7, #36]	@ 0x24
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	791b      	ldrb	r3, [r3, #4]
 800401e:	461a      	mov	r2, r3
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	4293      	cmp	r3, r2
 8004024:	d3b3      	bcc.n	8003f8e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004034:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f004 fab2 	bl	80085a4 <USB_ReadInterrupts>
 8004040:	4603      	mov	r3, r0
 8004042:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800404a:	d10a      	bne.n	8004062 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f006 fe8f 	bl	800ad70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004060:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f004 fa9c 	bl	80085a4 <USB_ReadInterrupts>
 800406c:	4603      	mov	r3, r0
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b04      	cmp	r3, #4
 8004074:	d115      	bne.n	80040a2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f006 fe7f 	bl	800ad8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6859      	ldr	r1, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	e000      	b.n	80040a2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80040a0:	bf00      	nop
    }
  }
}
 80040a2:	3734      	adds	r7, #52	@ 0x34
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd90      	pop	{r4, r7, pc}

080040a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_PCD_SetAddress+0x1a>
 80040be:	2302      	movs	r3, #2
 80040c0:	e012      	b.n	80040e8 <HAL_PCD_SetAddress+0x40>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	78fa      	ldrb	r2, [r7, #3]
 80040d6:	4611      	mov	r1, r2
 80040d8:	4618      	mov	r0, r3
 80040da:	f004 f9fb 	bl	80084d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	4608      	mov	r0, r1
 80040fa:	4611      	mov	r1, r2
 80040fc:	461a      	mov	r2, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	70fb      	strb	r3, [r7, #3]
 8004102:	460b      	mov	r3, r1
 8004104:	803b      	strh	r3, [r7, #0]
 8004106:	4613      	mov	r3, r2
 8004108:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800410e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004112:	2b00      	cmp	r3, #0
 8004114:	da0f      	bge.n	8004136 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	f003 020f 	and.w	r2, r3, #15
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	3310      	adds	r3, #16
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	3304      	adds	r3, #4
 800412c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	705a      	strb	r2, [r3, #1]
 8004134:	e00f      	b.n	8004156 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004136:	78fb      	ldrb	r3, [r7, #3]
 8004138:	f003 020f 	and.w	r2, r3, #15
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	4413      	add	r3, r2
 800414c:	3304      	adds	r3, #4
 800414e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	b2da      	uxtb	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004162:	883b      	ldrh	r3, [r7, #0]
 8004164:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	78ba      	ldrb	r2, [r7, #2]
 8004170:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	785b      	ldrb	r3, [r3, #1]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004184:	78bb      	ldrb	r3, [r7, #2]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d102      	bne.n	8004190 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_PCD_EP_Open+0xae>
 800419a:	2302      	movs	r3, #2
 800419c:	e00e      	b.n	80041bc <HAL_PCD_EP_Open+0xcc>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68f9      	ldr	r1, [r7, #12]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f003 fb7b 	bl	80078a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80041ba:	7afb      	ldrb	r3, [r7, #11]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	da0f      	bge.n	80041f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	f003 020f 	and.w	r2, r3, #15
 80041de:	4613      	mov	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	3310      	adds	r3, #16
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	4413      	add	r3, r2
 80041ec:	3304      	adds	r3, #4
 80041ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	705a      	strb	r2, [r3, #1]
 80041f6:	e00f      	b.n	8004218 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	f003 020f 	and.w	r2, r3, #15
 80041fe:	4613      	mov	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	3304      	adds	r3, #4
 8004210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	b2da      	uxtb	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_PCD_EP_Close+0x6e>
 800422e:	2302      	movs	r3, #2
 8004230:	e00e      	b.n	8004250 <HAL_PCD_EP_Close+0x8c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68f9      	ldr	r1, [r7, #12]
 8004240:	4618      	mov	r0, r3
 8004242:	f003 fbb9 	bl	80079b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	460b      	mov	r3, r1
 8004266:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004268:	7afb      	ldrb	r3, [r7, #11]
 800426a:	f003 020f 	and.w	r2, r3, #15
 800426e:	4613      	mov	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4413      	add	r3, r2
 800427e:	3304      	adds	r3, #4
 8004280:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2200      	movs	r2, #0
 8004292:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2200      	movs	r2, #0
 8004298:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800429a:	7afb      	ldrb	r3, [r7, #11]
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	799b      	ldrb	r3, [r3, #6]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d102      	bne.n	80042b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6818      	ldr	r0, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	799b      	ldrb	r3, [r3, #6]
 80042bc:	461a      	mov	r2, r3
 80042be:	6979      	ldr	r1, [r7, #20]
 80042c0:	f003 fc56 	bl	8007b70 <USB_EPStartXfer>

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	460b      	mov	r3, r1
 80042d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	f003 020f 	and.w	r2, r3, #15
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80042f0:	681b      	ldr	r3, [r3, #0]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b086      	sub	sp, #24
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	460b      	mov	r3, r1
 800430c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800430e:	7afb      	ldrb	r3, [r7, #11]
 8004310:	f003 020f 	and.w	r2, r3, #15
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	3310      	adds	r3, #16
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4413      	add	r3, r2
 8004322:	3304      	adds	r3, #4
 8004324:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2200      	movs	r2, #0
 8004336:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2201      	movs	r2, #1
 800433c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800433e:	7afb      	ldrb	r3, [r7, #11]
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	b2da      	uxtb	r2, r3
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	799b      	ldrb	r3, [r3, #6]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d102      	bne.n	8004358 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	799b      	ldrb	r3, [r3, #6]
 8004360:	461a      	mov	r2, r3
 8004362:	6979      	ldr	r1, [r7, #20]
 8004364:	f003 fc04 	bl	8007b70 <USB_EPStartXfer>

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	7912      	ldrb	r2, [r2, #4]
 8004388:	4293      	cmp	r3, r2
 800438a:	d901      	bls.n	8004390 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e04f      	b.n	8004430 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004394:	2b00      	cmp	r3, #0
 8004396:	da0f      	bge.n	80043b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	f003 020f 	and.w	r2, r3, #15
 800439e:	4613      	mov	r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	3310      	adds	r3, #16
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	4413      	add	r3, r2
 80043ac:	3304      	adds	r3, #4
 80043ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	705a      	strb	r2, [r3, #1]
 80043b6:	e00d      	b.n	80043d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	4613      	mov	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	4413      	add	r3, r2
 80043ca:	3304      	adds	r3, #4
 80043cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_PCD_EP_SetStall+0x82>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e01d      	b.n	8004430 <HAL_PCD_EP_SetStall+0xbe>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68f9      	ldr	r1, [r7, #12]
 8004402:	4618      	mov	r0, r3
 8004404:	f003 ff92 	bl	800832c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7999      	ldrb	r1, [r3, #6]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004420:	461a      	mov	r2, r3
 8004422:	f004 f983 	bl	800872c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	7912      	ldrb	r2, [r2, #4]
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e042      	b.n	80044dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004456:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800445a:	2b00      	cmp	r3, #0
 800445c:	da0f      	bge.n	800447e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	f003 020f 	and.w	r2, r3, #15
 8004464:	4613      	mov	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	3310      	adds	r3, #16
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	3304      	adds	r3, #4
 8004474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	705a      	strb	r2, [r3, #1]
 800447c:	e00f      	b.n	800449e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4413      	add	r3, r2
 8004494:	3304      	adds	r3, #4
 8004496:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_PCD_EP_ClrStall+0x86>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e00e      	b.n	80044dc <HAL_PCD_EP_ClrStall+0xa4>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68f9      	ldr	r1, [r7, #12]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f003 ff9b 	bl	8008408 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80044f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	da0c      	bge.n	8004512 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	f003 020f 	and.w	r2, r3, #15
 80044fe:	4613      	mov	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	3310      	adds	r3, #16
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4413      	add	r3, r2
 800450c:	3304      	adds	r3, #4
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	e00c      	b.n	800452c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004512:	78fb      	ldrb	r3, [r7, #3]
 8004514:	f003 020f 	and.w	r2, r3, #15
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	4413      	add	r3, r2
 8004528:	3304      	adds	r3, #4
 800452a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68f9      	ldr	r1, [r7, #12]
 8004532:	4618      	mov	r0, r3
 8004534:	f003 fdba 	bl	80080ac <USB_EPStopXfer>
 8004538:	4603      	mov	r3, r0
 800453a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800453c:	7afb      	ldrb	r3, [r7, #11]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b08a      	sub	sp, #40	@ 0x28
 800454a:	af02      	add	r7, sp, #8
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	3310      	adds	r3, #16
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	4413      	add	r3, r2
 800456a:	3304      	adds	r3, #4
 800456c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	429a      	cmp	r2, r3
 8004578:	d901      	bls.n	800457e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e06b      	b.n	8004656 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	429a      	cmp	r2, r3
 8004592:	d902      	bls.n	800459a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3303      	adds	r3, #3
 800459e:	089b      	lsrs	r3, r3, #2
 80045a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045a2:	e02a      	b.n	80045fa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d902      	bls.n	80045c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	3303      	adds	r3, #3
 80045c4:	089b      	lsrs	r3, r3, #2
 80045c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68d9      	ldr	r1, [r3, #12]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	4603      	mov	r3, r0
 80045dc:	6978      	ldr	r0, [r7, #20]
 80045de:	f003 fe0f 	bl	8008200 <USB_WritePacket>

    ep->xfer_buff  += len;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	441a      	add	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	441a      	add	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	429a      	cmp	r2, r3
 800460e:	d809      	bhi.n	8004624 <PCD_WriteEmptyTxFifo+0xde>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004618:	429a      	cmp	r2, r3
 800461a:	d203      	bcs.n	8004624 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1bf      	bne.n	80045a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	429a      	cmp	r2, r3
 800462e:	d811      	bhi.n	8004654 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	2201      	movs	r2, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004644:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	43db      	mvns	r3, r3
 800464a:	6939      	ldr	r1, [r7, #16]
 800464c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004650:	4013      	ands	r3, r2
 8004652:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	333c      	adds	r3, #60	@ 0x3c
 8004678:	3304      	adds	r3, #4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	799b      	ldrb	r3, [r3, #6]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d17b      	bne.n	800478e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d015      	beq.n	80046cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	4a61      	ldr	r2, [pc, #388]	@ (8004828 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	f240 80b9 	bls.w	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80b3 	beq.w	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c2:	461a      	mov	r2, r3
 80046c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046c8:	6093      	str	r3, [r2, #8]
 80046ca:	e0a7      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e2:	461a      	mov	r2, r3
 80046e4:	2320      	movs	r3, #32
 80046e6:	6093      	str	r3, [r2, #8]
 80046e8:	e098      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f040 8093 	bne.w	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004828 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d90f      	bls.n	800471e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004714:	461a      	mov	r2, r3
 8004716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800471a:	6093      	str	r3, [r2, #8]
 800471c:	e07e      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	3304      	adds	r3, #4
 8004732:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1a      	ldr	r2, [r3, #32]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	0159      	lsls	r1, r3, #5
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	440b      	add	r3, r1
 8004740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d114      	bne.n	8004780 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004768:	461a      	mov	r2, r3
 800476a:	2101      	movs	r1, #1
 800476c:	f003 ffde 	bl	800872c <USB_EP0_OutStart>
 8004770:	e006      	b.n	8004780 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	441a      	add	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f006 fa38 	bl	800abfc <HAL_PCD_DataOutStageCallback>
 800478c:	e046      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	4a26      	ldr	r2, [pc, #152]	@ (800482c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d124      	bne.n	80047e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ac:	461a      	mov	r2, r3
 80047ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047b2:	6093      	str	r3, [r2, #8]
 80047b4:	e032      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047cc:	461a      	mov	r2, r3
 80047ce:	2320      	movs	r3, #32
 80047d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f006 fa0f 	bl	800abfc <HAL_PCD_DataOutStageCallback>
 80047de:	e01d      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d114      	bne.n	8004810 <PCD_EP_OutXfrComplete_int+0x1b0>
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d108      	bne.n	8004810 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004808:	461a      	mov	r2, r3
 800480a:	2100      	movs	r1, #0
 800480c:	f003 ff8e 	bl	800872c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f006 f9f0 	bl	800abfc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	4f54300a 	.word	0x4f54300a
 800482c:	4f54310a 	.word	0x4f54310a

08004830 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	333c      	adds	r3, #60	@ 0x3c
 8004848:	3304      	adds	r3, #4
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4a15      	ldr	r2, [pc, #84]	@ (80048b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d90e      	bls.n	8004884 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800486c:	2b00      	cmp	r3, #0
 800486e:	d009      	beq.n	8004884 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800487c:	461a      	mov	r2, r3
 800487e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004882:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f006 f9a7 	bl	800abd8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a0a      	ldr	r2, [pc, #40]	@ (80048b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d90c      	bls.n	80048ac <PCD_EP_OutSetupPacket_int+0x7c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	799b      	ldrb	r3, [r3, #6]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d108      	bne.n	80048ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048a4:	461a      	mov	r2, r3
 80048a6:	2101      	movs	r1, #1
 80048a8:	f003 ff40 	bl	800872c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	4f54300a 	.word	0x4f54300a

080048bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]
 80048c8:	4613      	mov	r3, r2
 80048ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d107      	bne.n	80048ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048da:	883b      	ldrh	r3, [r7, #0]
 80048dc:	0419      	lsls	r1, r3, #16
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80048e8:	e028      	b.n	800493c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	0c1b      	lsrs	r3, r3, #16
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4413      	add	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048f8:	2300      	movs	r3, #0
 80048fa:	73fb      	strb	r3, [r7, #15]
 80048fc:	e00d      	b.n	800491a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	3340      	adds	r3, #64	@ 0x40
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	4413      	add	r3, r2
 8004912:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	3301      	adds	r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
 800491a:	7bfa      	ldrb	r2, [r7, #15]
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	3b01      	subs	r3, #1
 8004920:	429a      	cmp	r2, r3
 8004922:	d3ec      	bcc.n	80048fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004924:	883b      	ldrh	r3, [r7, #0]
 8004926:	0418      	lsls	r0, r3, #16
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6819      	ldr	r1, [r3, #0]
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	3b01      	subs	r3, #1
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	4302      	orrs	r2, r0
 8004934:	3340      	adds	r3, #64	@ 0x40
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	460b      	mov	r3, r1
 8004954:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	887a      	ldrh	r2, [r7, #2]
 800495c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e267      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d075      	beq.n	8004a8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049a2:	4b88      	ldr	r3, [pc, #544]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d00c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ae:	4b85      	ldr	r3, [pc, #532]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d112      	bne.n	80049e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ba:	4b82      	ldr	r3, [pc, #520]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049c6:	d10b      	bne.n	80049e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	4b7e      	ldr	r3, [pc, #504]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d05b      	beq.n	8004a8c <HAL_RCC_OscConfig+0x108>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d157      	bne.n	8004a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e242      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e8:	d106      	bne.n	80049f8 <HAL_RCC_OscConfig+0x74>
 80049ea:	4b76      	ldr	r3, [pc, #472]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a75      	ldr	r2, [pc, #468]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e01d      	b.n	8004a34 <HAL_RCC_OscConfig+0xb0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a00:	d10c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x98>
 8004a02:	4b70      	ldr	r3, [pc, #448]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a6f      	ldr	r2, [pc, #444]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a6c      	ldr	r2, [pc, #432]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e00b      	b.n	8004a34 <HAL_RCC_OscConfig+0xb0>
 8004a1c:	4b69      	ldr	r3, [pc, #420]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a68      	ldr	r2, [pc, #416]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	4b66      	ldr	r3, [pc, #408]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a65      	ldr	r2, [pc, #404]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d013      	beq.n	8004a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fd fede 	bl	80027fc <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a44:	f7fd feda 	bl	80027fc <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	@ 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e207      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a56:	4b5b      	ldr	r3, [pc, #364]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0xc0>
 8004a62:	e014      	b.n	8004a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a64:	f7fd feca 	bl	80027fc <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a6c:	f7fd fec6 	bl	80027fc <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b64      	cmp	r3, #100	@ 0x64
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e1f3      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7e:	4b51      	ldr	r3, [pc, #324]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0xe8>
 8004a8a:	e000      	b.n	8004a8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d063      	beq.n	8004b62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00b      	beq.n	8004abe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aa6:	4b47      	ldr	r3, [pc, #284]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d11c      	bne.n	8004aec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ab2:	4b44      	ldr	r3, [pc, #272]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d116      	bne.n	8004aec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004abe:	4b41      	ldr	r3, [pc, #260]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x152>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d001      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e1c7      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4937      	ldr	r1, [pc, #220]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aea:	e03a      	b.n	8004b62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d020      	beq.n	8004b36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af4:	4b34      	ldr	r3, [pc, #208]	@ (8004bc8 <HAL_RCC_OscConfig+0x244>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afa:	f7fd fe7f 	bl	80027fc <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b02:	f7fd fe7b 	bl	80027fc <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e1a8      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b14:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b20:	4b28      	ldr	r3, [pc, #160]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4925      	ldr	r1, [pc, #148]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	600b      	str	r3, [r1, #0]
 8004b34:	e015      	b.n	8004b62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b36:	4b24      	ldr	r3, [pc, #144]	@ (8004bc8 <HAL_RCC_OscConfig+0x244>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3c:	f7fd fe5e 	bl	80027fc <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b44:	f7fd fe5a 	bl	80027fc <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e187      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b56:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d036      	beq.n	8004bdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d016      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b76:	4b15      	ldr	r3, [pc, #84]	@ (8004bcc <HAL_RCC_OscConfig+0x248>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7c:	f7fd fe3e 	bl	80027fc <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b84:	f7fd fe3a 	bl	80027fc <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e167      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b96:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0x200>
 8004ba2:	e01b      	b.n	8004bdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ba4:	4b09      	ldr	r3, [pc, #36]	@ (8004bcc <HAL_RCC_OscConfig+0x248>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004baa:	f7fd fe27 	bl	80027fc <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb0:	e00e      	b.n	8004bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb2:	f7fd fe23 	bl	80027fc <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d907      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e150      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	42470000 	.word	0x42470000
 8004bcc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd0:	4b88      	ldr	r3, [pc, #544]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1ea      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8097 	beq.w	8004d18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bea:	2300      	movs	r3, #0
 8004bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bee:	4b81      	ldr	r3, [pc, #516]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	4b7d      	ldr	r3, [pc, #500]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	4a7c      	ldr	r2, [pc, #496]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c0a:	4b7a      	ldr	r3, [pc, #488]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c16:	2301      	movs	r3, #1
 8004c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1a:	4b77      	ldr	r3, [pc, #476]	@ (8004df8 <HAL_RCC_OscConfig+0x474>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d118      	bne.n	8004c58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c26:	4b74      	ldr	r3, [pc, #464]	@ (8004df8 <HAL_RCC_OscConfig+0x474>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a73      	ldr	r2, [pc, #460]	@ (8004df8 <HAL_RCC_OscConfig+0x474>)
 8004c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c32:	f7fd fde3 	bl	80027fc <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3a:	f7fd fddf 	bl	80027fc <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e10c      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8004df8 <HAL_RCC_OscConfig+0x474>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d106      	bne.n	8004c6e <HAL_RCC_OscConfig+0x2ea>
 8004c60:	4b64      	ldr	r3, [pc, #400]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c64:	4a63      	ldr	r2, [pc, #396]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c6c:	e01c      	b.n	8004ca8 <HAL_RCC_OscConfig+0x324>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b05      	cmp	r3, #5
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x30c>
 8004c76:	4b5f      	ldr	r3, [pc, #380]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7a:	4a5e      	ldr	r2, [pc, #376]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	f043 0304 	orr.w	r3, r3, #4
 8004c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c82:	4b5c      	ldr	r3, [pc, #368]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c86:	4a5b      	ldr	r2, [pc, #364]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c8e:	e00b      	b.n	8004ca8 <HAL_RCC_OscConfig+0x324>
 8004c90:	4b58      	ldr	r3, [pc, #352]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c94:	4a57      	ldr	r2, [pc, #348]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c9c:	4b55      	ldr	r3, [pc, #340]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca0:	4a54      	ldr	r2, [pc, #336]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	f023 0304 	bic.w	r3, r3, #4
 8004ca6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d015      	beq.n	8004cdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb0:	f7fd fda4 	bl	80027fc <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb8:	f7fd fda0 	bl	80027fc <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e0cb      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cce:	4b49      	ldr	r3, [pc, #292]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0ee      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x334>
 8004cda:	e014      	b.n	8004d06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cdc:	f7fd fd8e 	bl	80027fc <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce2:	e00a      	b.n	8004cfa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce4:	f7fd fd8a 	bl	80027fc <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e0b5      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1ee      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d105      	bne.n	8004d18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d0c:	4b39      	ldr	r3, [pc, #228]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	4a38      	ldr	r2, [pc, #224]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80a1 	beq.w	8004e64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d22:	4b34      	ldr	r3, [pc, #208]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d05c      	beq.n	8004de8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d141      	bne.n	8004dba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d36:	4b31      	ldr	r3, [pc, #196]	@ (8004dfc <HAL_RCC_OscConfig+0x478>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3c:	f7fd fd5e 	bl	80027fc <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fd fd5a 	bl	80027fc <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e087      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d56:	4b27      	ldr	r3, [pc, #156]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69da      	ldr	r2, [r3, #28]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	019b      	lsls	r3, r3, #6
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d78:	085b      	lsrs	r3, r3, #1
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	041b      	lsls	r3, r3, #16
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	061b      	lsls	r3, r3, #24
 8004d86:	491b      	ldr	r1, [pc, #108]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dfc <HAL_RCC_OscConfig+0x478>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d92:	f7fd fd33 	bl	80027fc <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9a:	f7fd fd2f 	bl	80027fc <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e05c      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dac:	4b11      	ldr	r3, [pc, #68]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x416>
 8004db8:	e054      	b.n	8004e64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dba:	4b10      	ldr	r3, [pc, #64]	@ (8004dfc <HAL_RCC_OscConfig+0x478>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fd fd1c 	bl	80027fc <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc8:	f7fd fd18 	bl	80027fc <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e045      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dda:	4b06      	ldr	r3, [pc, #24]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x444>
 8004de6:	e03d      	b.n	8004e64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d107      	bne.n	8004e00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e038      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
 8004df4:	40023800 	.word	0x40023800
 8004df8:	40007000 	.word	0x40007000
 8004dfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e00:	4b1b      	ldr	r3, [pc, #108]	@ (8004e70 <HAL_RCC_OscConfig+0x4ec>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d028      	beq.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d121      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d11a      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e30:	4013      	ands	r3, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d111      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d107      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800

08004e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0cc      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e88:	4b68      	ldr	r3, [pc, #416]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d90c      	bls.n	8004eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e96:	4b65      	ldr	r3, [pc, #404]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9e:	4b63      	ldr	r3, [pc, #396]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0b8      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d020      	beq.n	8004efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ec8:	4b59      	ldr	r3, [pc, #356]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	4a58      	ldr	r2, [pc, #352]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ed2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ee0:	4b53      	ldr	r3, [pc, #332]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4a52      	ldr	r2, [pc, #328]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eec:	4b50      	ldr	r3, [pc, #320]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	494d      	ldr	r1, [pc, #308]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d044      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d107      	bne.n	8004f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f12:	4b47      	ldr	r3, [pc, #284]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d119      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e07f      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d003      	beq.n	8004f32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d107      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f32:	4b3f      	ldr	r3, [pc, #252]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e06f      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f42:	4b3b      	ldr	r3, [pc, #236]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e067      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f52:	4b37      	ldr	r3, [pc, #220]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f023 0203 	bic.w	r2, r3, #3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	4934      	ldr	r1, [pc, #208]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f64:	f7fd fc4a 	bl	80027fc <HAL_GetTick>
 8004f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6a:	e00a      	b.n	8004f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f6c:	f7fd fc46 	bl	80027fc <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e04f      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f82:	4b2b      	ldr	r3, [pc, #172]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 020c 	and.w	r2, r3, #12
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d1eb      	bne.n	8004f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f94:	4b25      	ldr	r3, [pc, #148]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d20c      	bcs.n	8004fbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa2:	4b22      	ldr	r3, [pc, #136]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004faa:	4b20      	ldr	r3, [pc, #128]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d001      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e032      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fc8:	4b19      	ldr	r3, [pc, #100]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4916      	ldr	r1, [pc, #88]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fe6:	4b12      	ldr	r3, [pc, #72]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	490e      	ldr	r1, [pc, #56]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ffa:	f000 f821 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 8004ffe:	4602      	mov	r2, r0
 8005000:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	091b      	lsrs	r3, r3, #4
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	490a      	ldr	r1, [pc, #40]	@ (8005034 <HAL_RCC_ClockConfig+0x1c0>)
 800500c:	5ccb      	ldrb	r3, [r1, r3]
 800500e:	fa22 f303 	lsr.w	r3, r2, r3
 8005012:	4a09      	ldr	r2, [pc, #36]	@ (8005038 <HAL_RCC_ClockConfig+0x1c4>)
 8005014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005016:	4b09      	ldr	r3, [pc, #36]	@ (800503c <HAL_RCC_ClockConfig+0x1c8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7fd fbaa 	bl	8002774 <HAL_InitTick>

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40023c00 	.word	0x40023c00
 8005030:	40023800 	.word	0x40023800
 8005034:	0800c6a8 	.word	0x0800c6a8
 8005038:	20000004 	.word	0x20000004
 800503c:	20000008 	.word	0x20000008

08005040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005044:	b090      	sub	sp, #64	@ 0x40
 8005046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005058:	4b59      	ldr	r3, [pc, #356]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 030c 	and.w	r3, r3, #12
 8005060:	2b08      	cmp	r3, #8
 8005062:	d00d      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x40>
 8005064:	2b08      	cmp	r3, #8
 8005066:	f200 80a1 	bhi.w	80051ac <HAL_RCC_GetSysClockFreq+0x16c>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_RCC_GetSysClockFreq+0x34>
 800506e:	2b04      	cmp	r3, #4
 8005070:	d003      	beq.n	800507a <HAL_RCC_GetSysClockFreq+0x3a>
 8005072:	e09b      	b.n	80051ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005074:	4b53      	ldr	r3, [pc, #332]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005076:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005078:	e09b      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800507a:	4b53      	ldr	r3, [pc, #332]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800507c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800507e:	e098      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005080:	4b4f      	ldr	r3, [pc, #316]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005088:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800508a:	4b4d      	ldr	r3, [pc, #308]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d028      	beq.n	80050e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005096:	4b4a      	ldr	r3, [pc, #296]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	099b      	lsrs	r3, r3, #6
 800509c:	2200      	movs	r2, #0
 800509e:	623b      	str	r3, [r7, #32]
 80050a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050a8:	2100      	movs	r1, #0
 80050aa:	4b47      	ldr	r3, [pc, #284]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80050ac:	fb03 f201 	mul.w	r2, r3, r1
 80050b0:	2300      	movs	r3, #0
 80050b2:	fb00 f303 	mul.w	r3, r0, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	4a43      	ldr	r2, [pc, #268]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80050ba:	fba0 1202 	umull	r1, r2, r0, r2
 80050be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050c0:	460a      	mov	r2, r1
 80050c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80050c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050c6:	4413      	add	r3, r2
 80050c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050cc:	2200      	movs	r2, #0
 80050ce:	61bb      	str	r3, [r7, #24]
 80050d0:	61fa      	str	r2, [r7, #28]
 80050d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80050da:	f7fb f87b 	bl	80001d4 <__aeabi_uldivmod>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	4613      	mov	r3, r2
 80050e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050e6:	e053      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050e8:	4b35      	ldr	r3, [pc, #212]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	099b      	lsrs	r3, r3, #6
 80050ee:	2200      	movs	r2, #0
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	617a      	str	r2, [r7, #20]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80050fa:	f04f 0b00 	mov.w	fp, #0
 80050fe:	4652      	mov	r2, sl
 8005100:	465b      	mov	r3, fp
 8005102:	f04f 0000 	mov.w	r0, #0
 8005106:	f04f 0100 	mov.w	r1, #0
 800510a:	0159      	lsls	r1, r3, #5
 800510c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005110:	0150      	lsls	r0, r2, #5
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	ebb2 080a 	subs.w	r8, r2, sl
 800511a:	eb63 090b 	sbc.w	r9, r3, fp
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800512a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800512e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005132:	ebb2 0408 	subs.w	r4, r2, r8
 8005136:	eb63 0509 	sbc.w	r5, r3, r9
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	00eb      	lsls	r3, r5, #3
 8005144:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005148:	00e2      	lsls	r2, r4, #3
 800514a:	4614      	mov	r4, r2
 800514c:	461d      	mov	r5, r3
 800514e:	eb14 030a 	adds.w	r3, r4, sl
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	eb45 030b 	adc.w	r3, r5, fp
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005166:	4629      	mov	r1, r5
 8005168:	028b      	lsls	r3, r1, #10
 800516a:	4621      	mov	r1, r4
 800516c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005170:	4621      	mov	r1, r4
 8005172:	028a      	lsls	r2, r1, #10
 8005174:	4610      	mov	r0, r2
 8005176:	4619      	mov	r1, r3
 8005178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517a:	2200      	movs	r2, #0
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	60fa      	str	r2, [r7, #12]
 8005180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005184:	f7fb f826 	bl	80001d4 <__aeabi_uldivmod>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4613      	mov	r3, r2
 800518e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005190:	4b0b      	ldr	r3, [pc, #44]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	3301      	adds	r3, #1
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80051a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80051a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051aa:	e002      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051ac:	4b05      	ldr	r3, [pc, #20]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80051ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3740      	adds	r7, #64	@ 0x40
 80051b8:	46bd      	mov	sp, r7
 80051ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051be:	bf00      	nop
 80051c0:	40023800 	.word	0x40023800
 80051c4:	00f42400 	.word	0x00f42400
 80051c8:	017d7840 	.word	0x017d7840

080051cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051d0:	4b03      	ldr	r3, [pc, #12]	@ (80051e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80051d2:	681b      	ldr	r3, [r3, #0]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	20000004 	.word	0x20000004

080051e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e07b      	b.n	80052ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d108      	bne.n	8005210 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005206:	d009      	beq.n	800521c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	61da      	str	r2, [r3, #28]
 800520e:	e005      	b.n	800521c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fb fe54 	bl	8000ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005252:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a0:	ea42 0103 	orr.w	r1, r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	0c1b      	lsrs	r3, r3, #16
 80052ba:	f003 0104 	and.w	r1, r3, #4
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	f003 0210 	and.w	r2, r3, #16
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69da      	ldr	r2, [r3, #28]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b088      	sub	sp, #32
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005306:	f7fd fa79 	bl	80027fc <HAL_GetTick>
 800530a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	d001      	beq.n	8005320 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800531c:	2302      	movs	r3, #2
 800531e:	e12a      	b.n	8005576 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_SPI_Transmit+0x36>
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e122      	b.n	8005576 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_SPI_Transmit+0x48>
 800533a:	2302      	movs	r3, #2
 800533c:	e11b      	b.n	8005576 <HAL_SPI_Transmit+0x280>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2203      	movs	r2, #3
 800534a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	88fa      	ldrh	r2, [r7, #6]
 800535e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800538c:	d10f      	bne.n	80053ae <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800539c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b8:	2b40      	cmp	r3, #64	@ 0x40
 80053ba:	d007      	beq.n	80053cc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053d4:	d152      	bne.n	800547c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <HAL_SPI_Transmit+0xee>
 80053de:	8b7b      	ldrh	r3, [r7, #26]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d145      	bne.n	8005470 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e8:	881a      	ldrh	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f4:	1c9a      	adds	r2, r3, #2
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005408:	e032      	b.n	8005470 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b02      	cmp	r3, #2
 8005416:	d112      	bne.n	800543e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541c:	881a      	ldrh	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005428:	1c9a      	adds	r2, r3, #2
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800543c:	e018      	b.n	8005470 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800543e:	f7fd f9dd 	bl	80027fc <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d803      	bhi.n	8005456 <HAL_SPI_Transmit+0x160>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005454:	d102      	bne.n	800545c <HAL_SPI_Transmit+0x166>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d109      	bne.n	8005470 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e082      	b.n	8005576 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005474:	b29b      	uxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1c7      	bne.n	800540a <HAL_SPI_Transmit+0x114>
 800547a:	e053      	b.n	8005524 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <HAL_SPI_Transmit+0x194>
 8005484:	8b7b      	ldrh	r3, [r7, #26]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d147      	bne.n	800551a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	330c      	adds	r3, #12
 8005494:	7812      	ldrb	r2, [r2, #0]
 8005496:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054b0:	e033      	b.n	800551a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d113      	bne.n	80054e8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	330c      	adds	r3, #12
 80054ca:	7812      	ldrb	r2, [r2, #0]
 80054cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80054e6:	e018      	b.n	800551a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e8:	f7fd f988 	bl	80027fc <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d803      	bhi.n	8005500 <HAL_SPI_Transmit+0x20a>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054fe:	d102      	bne.n	8005506 <HAL_SPI_Transmit+0x210>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e02d      	b.n	8005576 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1c6      	bne.n	80054b2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fd21 	bl	8005f70 <SPI_EndRxTxTransaction>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2220      	movs	r2, #32
 8005538:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005574:	2300      	movs	r3, #0
  }
}
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b088      	sub	sp, #32
 8005582:	af02      	add	r7, sp, #8
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	4613      	mov	r3, r2
 800558c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d001      	beq.n	800559e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800559a:	2302      	movs	r3, #2
 800559c:	e104      	b.n	80057a8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055a6:	d112      	bne.n	80055ce <HAL_SPI_Receive+0x50>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10e      	bne.n	80055ce <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2204      	movs	r2, #4
 80055b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055b8:	88fa      	ldrh	r2, [r7, #6]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	4613      	mov	r3, r2
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f8f3 	bl	80057b0 <HAL_SPI_TransmitReceive>
 80055ca:	4603      	mov	r3, r0
 80055cc:	e0ec      	b.n	80057a8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055ce:	f7fd f915 	bl	80027fc <HAL_GetTick>
 80055d2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_SPI_Receive+0x62>
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0e1      	b.n	80057a8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_SPI_Receive+0x74>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e0da      	b.n	80057a8 <HAL_SPI_Receive+0x22a>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2204      	movs	r2, #4
 80055fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	88fa      	ldrh	r2, [r7, #6]
 8005612:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	88fa      	ldrh	r2, [r7, #6]
 8005618:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005640:	d10f      	bne.n	8005662 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005650:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005660:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800566c:	2b40      	cmp	r3, #64	@ 0x40
 800566e:	d007      	beq.n	8005680 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800567e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d170      	bne.n	800576a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005688:	e035      	b.n	80056f6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b01      	cmp	r3, #1
 8005696:	d115      	bne.n	80056c4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f103 020c 	add.w	r2, r3, #12
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a4:	7812      	ldrb	r2, [r2, #0]
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056c2:	e018      	b.n	80056f6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056c4:	f7fd f89a 	bl	80027fc <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d803      	bhi.n	80056dc <HAL_SPI_Receive+0x15e>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056da:	d102      	bne.n	80056e2 <HAL_SPI_Receive+0x164>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e058      	b.n	80057a8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1c4      	bne.n	800568a <HAL_SPI_Receive+0x10c>
 8005700:	e038      	b.n	8005774 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b01      	cmp	r3, #1
 800570e:	d113      	bne.n	8005738 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571a:	b292      	uxth	r2, r2
 800571c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005722:	1c9a      	adds	r2, r3, #2
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005736:	e018      	b.n	800576a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005738:	f7fd f860 	bl	80027fc <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d803      	bhi.n	8005750 <HAL_SPI_Receive+0x1d2>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800574e:	d102      	bne.n	8005756 <HAL_SPI_Receive+0x1d8>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e01e      	b.n	80057a8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1c6      	bne.n	8005702 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	6839      	ldr	r1, [r7, #0]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fb93 	bl	8005ea4 <SPI_EndRxTransaction>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80057a6:	2300      	movs	r3, #0
  }
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08a      	sub	sp, #40	@ 0x28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057be:	2301      	movs	r3, #1
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057c2:	f7fd f81b 	bl	80027fc <HAL_GetTick>
 80057c6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057ce:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80057d6:	887b      	ldrh	r3, [r7, #2]
 80057d8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057da:	7ffb      	ldrb	r3, [r7, #31]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d00c      	beq.n	80057fa <HAL_SPI_TransmitReceive+0x4a>
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057e6:	d106      	bne.n	80057f6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d102      	bne.n	80057f6 <HAL_SPI_TransmitReceive+0x46>
 80057f0:	7ffb      	ldrb	r3, [r7, #31]
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d001      	beq.n	80057fa <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80057f6:	2302      	movs	r3, #2
 80057f8:	e17f      	b.n	8005afa <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d005      	beq.n	800580c <HAL_SPI_TransmitReceive+0x5c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <HAL_SPI_TransmitReceive+0x5c>
 8005806:	887b      	ldrh	r3, [r7, #2]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e174      	b.n	8005afa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_SPI_TransmitReceive+0x6e>
 800581a:	2302      	movs	r3, #2
 800581c:	e16d      	b.n	8005afa <HAL_SPI_TransmitReceive+0x34a>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b04      	cmp	r3, #4
 8005830:	d003      	beq.n	800583a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2205      	movs	r2, #5
 8005836:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	887a      	ldrh	r2, [r7, #2]
 800584a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	887a      	ldrh	r2, [r7, #2]
 800585c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	887a      	ldrh	r2, [r7, #2]
 8005862:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587a:	2b40      	cmp	r3, #64	@ 0x40
 800587c:	d007      	beq.n	800588e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800588c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005896:	d17e      	bne.n	8005996 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_SPI_TransmitReceive+0xf6>
 80058a0:	8afb      	ldrh	r3, [r7, #22]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d16c      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058aa:	881a      	ldrh	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	1c9a      	adds	r2, r3, #2
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058ca:	e059      	b.n	8005980 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d11b      	bne.n	8005912 <HAL_SPI_TransmitReceive+0x162>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d016      	beq.n	8005912 <HAL_SPI_TransmitReceive+0x162>
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d113      	bne.n	8005912 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ee:	881a      	ldrh	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fa:	1c9a      	adds	r2, r3, #2
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	d119      	bne.n	8005954 <HAL_SPI_TransmitReceive+0x1a4>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d014      	beq.n	8005954 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005934:	b292      	uxth	r2, r2
 8005936:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593c:	1c9a      	adds	r2, r3, #2
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005950:	2301      	movs	r3, #1
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005954:	f7fc ff52 	bl	80027fc <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005960:	429a      	cmp	r2, r3
 8005962:	d80d      	bhi.n	8005980 <HAL_SPI_TransmitReceive+0x1d0>
 8005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005966:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800596a:	d009      	beq.n	8005980 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e0bc      	b.n	8005afa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1a0      	bne.n	80058cc <HAL_SPI_TransmitReceive+0x11c>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d19b      	bne.n	80058cc <HAL_SPI_TransmitReceive+0x11c>
 8005994:	e082      	b.n	8005a9c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_SPI_TransmitReceive+0x1f4>
 800599e:	8afb      	ldrh	r3, [r7, #22]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d171      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	330c      	adds	r3, #12
 80059ae:	7812      	ldrb	r2, [r2, #0]
 80059b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ca:	e05d      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d11c      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x264>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d017      	beq.n	8005a14 <HAL_SPI_TransmitReceive+0x264>
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d114      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	330c      	adds	r3, #12
 80059f4:	7812      	ldrb	r2, [r2, #0]
 80059f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d119      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x2a6>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d014      	beq.n	8005a56 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a52:	2301      	movs	r3, #1
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a56:	f7fc fed1 	bl	80027fc <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d803      	bhi.n	8005a6e <HAL_SPI_TransmitReceive+0x2be>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a6c:	d102      	bne.n	8005a74 <HAL_SPI_TransmitReceive+0x2c4>
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d109      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e038      	b.n	8005afa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d19c      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x21c>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d197      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a9c:	6a3a      	ldr	r2, [r7, #32]
 8005a9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 fa65 	bl	8005f70 <SPI_EndRxTxTransaction>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e01d      	b.n	8005afa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10a      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005af8:	2300      	movs	r3, #0
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3728      	adds	r7, #40	@ 0x28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d001      	beq.n	8005b22 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e097      	b.n	8005c52 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_SPI_Transmit_DMA+0x2a>
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e08f      	b.n	8005c52 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_SPI_Transmit_DMA+0x3c>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e088      	b.n	8005c52 <HAL_SPI_Transmit_DMA+0x14e>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2203      	movs	r2, #3
 8005b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	88fa      	ldrh	r2, [r7, #6]
 8005b60:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	88fa      	ldrh	r2, [r7, #6]
 8005b66:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b8e:	d10f      	bne.n	8005bb0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb4:	4a29      	ldr	r2, [pc, #164]	@ (8005c5c <HAL_SPI_Transmit_DMA+0x158>)
 8005bb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bbc:	4a28      	ldr	r2, [pc, #160]	@ (8005c60 <HAL_SPI_Transmit_DMA+0x15c>)
 8005bbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc4:	4a27      	ldr	r2, [pc, #156]	@ (8005c64 <HAL_SPI_Transmit_DMA+0x160>)
 8005bc6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bcc:	2200      	movs	r2, #0
 8005bce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd8:	4619      	mov	r1, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005be6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005be8:	f7fc fff8 	bl	8002bdc <HAL_DMA_Start_IT>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf6:	f043 0210 	orr.w	r2, r3, #16
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e023      	b.n	8005c52 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c14:	2b40      	cmp	r3, #64	@ 0x40
 8005c16:	d007      	beq.n	8005c28 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c26:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0220 	orr.w	r2, r2, #32
 8005c3e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0202 	orr.w	r2, r2, #2
 8005c4e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	08005d39 	.word	0x08005d39
 8005c60:	08005c91 	.word	0x08005c91
 8005c64:	08005d55 	.word	0x08005d55

08005c68 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c9e:	f7fc fdad 	bl	80027fc <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cb2:	d03b      	beq.n	8005d2c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0220 	bic.w	r2, r2, #32
 8005cc2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0202 	bic.w	r2, r2, #2
 8005cd2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	2164      	movs	r1, #100	@ 0x64
 8005cd8:	6978      	ldr	r0, [r7, #20]
 8005cda:	f000 f949 	bl	8005f70 <SPI_EndRxTxTransaction>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce8:	f043 0220 	orr.w	r2, r3, #32
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10a      	bne.n	8005d0e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2200      	movs	r2, #0
 8005d12:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005d24:	6978      	ldr	r0, [r7, #20]
 8005d26:	f7ff ffa9 	bl	8005c7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005d2a:	e002      	b.n	8005d32 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005d2c:	6978      	ldr	r0, [r7, #20]
 8005d2e:	f7fb fe0f 	bl	8001950 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f7ff ff8e 	bl	8005c68 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0203 	bic.w	r2, r2, #3
 8005d70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d76:	f043 0210 	orr.w	r2, r3, #16
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7ff ff78 	bl	8005c7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	4613      	mov	r3, r2
 8005da2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005da4:	f7fc fd2a 	bl	80027fc <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dac:	1a9b      	subs	r3, r3, r2
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	4413      	add	r3, r2
 8005db2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005db4:	f7fc fd22 	bl	80027fc <HAL_GetTick>
 8005db8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dba:	4b39      	ldr	r3, [pc, #228]	@ (8005ea0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	015b      	lsls	r3, r3, #5
 8005dc0:	0d1b      	lsrs	r3, r3, #20
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	fb02 f303 	mul.w	r3, r2, r3
 8005dc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dca:	e054      	b.n	8005e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dd2:	d050      	beq.n	8005e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dd4:	f7fc fd12 	bl	80027fc <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	69fa      	ldr	r2, [r7, #28]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d902      	bls.n	8005dea <SPI_WaitFlagStateUntilTimeout+0x56>
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d13d      	bne.n	8005e66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005df8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e02:	d111      	bne.n	8005e28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e0c:	d004      	beq.n	8005e18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e16:	d107      	bne.n	8005e28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e30:	d10f      	bne.n	8005e52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e017      	b.n	8005e96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	bf0c      	ite	eq
 8005e86:	2301      	moveq	r3, #1
 8005e88:	2300      	movne	r3, #0
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d19b      	bne.n	8005dcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3720      	adds	r7, #32
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20000004 	.word	0x20000004

08005ea4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af02      	add	r7, sp, #8
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005eb8:	d111      	bne.n	8005ede <SPI_EndRxTransaction+0x3a>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ec2:	d004      	beq.n	8005ece <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ecc:	d107      	bne.n	8005ede <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005edc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ee6:	d12a      	bne.n	8005f3e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ef0:	d012      	beq.n	8005f18 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2180      	movs	r1, #128	@ 0x80
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f7ff ff49 	bl	8005d94 <SPI_WaitFlagStateUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d02d      	beq.n	8005f64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0c:	f043 0220 	orr.w	r2, r3, #32
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e026      	b.n	8005f66 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2101      	movs	r1, #1
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f7ff ff36 	bl	8005d94 <SPI_WaitFlagStateUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01a      	beq.n	8005f64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f32:	f043 0220 	orr.w	r2, r3, #32
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e013      	b.n	8005f66 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2200      	movs	r2, #0
 8005f46:	2101      	movs	r1, #1
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f7ff ff23 	bl	8005d94 <SPI_WaitFlagStateUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d007      	beq.n	8005f64 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f58:	f043 0220 	orr.w	r2, r3, #32
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e000      	b.n	8005f66 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2201      	movs	r2, #1
 8005f84:	2102      	movs	r1, #2
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff ff04 	bl	8005d94 <SPI_WaitFlagStateUntilTimeout>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d007      	beq.n	8005fa2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f96:	f043 0220 	orr.w	r2, r3, #32
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e032      	b.n	8006008 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8006010 <SPI_EndRxTxTransaction+0xa0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8006014 <SPI_EndRxTxTransaction+0xa4>)
 8005fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fac:	0d5b      	lsrs	r3, r3, #21
 8005fae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005fb2:	fb02 f303 	mul.w	r3, r2, r3
 8005fb6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fc0:	d112      	bne.n	8005fe8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2180      	movs	r1, #128	@ 0x80
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff fee1 	bl	8005d94 <SPI_WaitFlagStateUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d016      	beq.n	8006006 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fdc:	f043 0220 	orr.w	r2, r3, #32
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e00f      	b.n	8006008 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ffe:	2b80      	cmp	r3, #128	@ 0x80
 8006000:	d0f2      	beq.n	8005fe8 <SPI_EndRxTxTransaction+0x78>
 8006002:	e000      	b.n	8006006 <SPI_EndRxTxTransaction+0x96>
        break;
 8006004:	bf00      	nop
  }

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000004 	.word	0x20000004
 8006014:	165e9f81 	.word	0x165e9f81

08006018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e041      	b.n	80060ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7fb f900 	bl	8001244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3304      	adds	r3, #4
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f000 fd6a 	bl	8006b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e041      	b.n	800614c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d106      	bne.n	80060e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f839 	bl	8006154 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2202      	movs	r2, #2
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3304      	adds	r3, #4
 80060f2:	4619      	mov	r1, r3
 80060f4:	4610      	mov	r0, r2
 80060f6:	f000 fd1b 	bl	8006b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d109      	bne.n	8006194 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	bf0c      	ite	eq
 800618c:	2301      	moveq	r3, #1
 800618e:	2300      	movne	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	e022      	b.n	80061da <HAL_TIM_PWM_Start_DMA+0x72>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b04      	cmp	r3, #4
 8006198:	d109      	bne.n	80061ae <HAL_TIM_PWM_Start_DMA+0x46>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	bf0c      	ite	eq
 80061a6:	2301      	moveq	r3, #1
 80061a8:	2300      	movne	r3, #0
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	e015      	b.n	80061da <HAL_TIM_PWM_Start_DMA+0x72>
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d109      	bne.n	80061c8 <HAL_TIM_PWM_Start_DMA+0x60>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	bf0c      	ite	eq
 80061c0:	2301      	moveq	r3, #1
 80061c2:	2300      	movne	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e008      	b.n	80061da <HAL_TIM_PWM_Start_DMA+0x72>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	bf0c      	ite	eq
 80061d4:	2301      	moveq	r3, #1
 80061d6:	2300      	movne	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80061de:	2302      	movs	r3, #2
 80061e0:	e15d      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d109      	bne.n	80061fc <HAL_TIM_PWM_Start_DMA+0x94>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	bf0c      	ite	eq
 80061f4:	2301      	moveq	r3, #1
 80061f6:	2300      	movne	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	e022      	b.n	8006242 <HAL_TIM_PWM_Start_DMA+0xda>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d109      	bne.n	8006216 <HAL_TIM_PWM_Start_DMA+0xae>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b01      	cmp	r3, #1
 800620c:	bf0c      	ite	eq
 800620e:	2301      	moveq	r3, #1
 8006210:	2300      	movne	r3, #0
 8006212:	b2db      	uxtb	r3, r3
 8006214:	e015      	b.n	8006242 <HAL_TIM_PWM_Start_DMA+0xda>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b08      	cmp	r3, #8
 800621a:	d109      	bne.n	8006230 <HAL_TIM_PWM_Start_DMA+0xc8>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b01      	cmp	r3, #1
 8006226:	bf0c      	ite	eq
 8006228:	2301      	moveq	r3, #1
 800622a:	2300      	movne	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	e008      	b.n	8006242 <HAL_TIM_PWM_Start_DMA+0xda>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b01      	cmp	r3, #1
 800623a:	bf0c      	ite	eq
 800623c:	2301      	moveq	r3, #1
 800623e:	2300      	movne	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d024      	beq.n	8006290 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <HAL_TIM_PWM_Start_DMA+0xea>
 800624c:	887b      	ldrh	r3, [r7, #2]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e123      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d104      	bne.n	8006266 <HAL_TIM_PWM_Start_DMA+0xfe>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006264:	e016      	b.n	8006294 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b04      	cmp	r3, #4
 800626a:	d104      	bne.n	8006276 <HAL_TIM_PWM_Start_DMA+0x10e>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006274:	e00e      	b.n	8006294 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2b08      	cmp	r3, #8
 800627a:	d104      	bne.n	8006286 <HAL_TIM_PWM_Start_DMA+0x11e>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006284:	e006      	b.n	8006294 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2202      	movs	r2, #2
 800628a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800628e:	e001      	b.n	8006294 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e104      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b0c      	cmp	r3, #12
 8006298:	f200 80ae 	bhi.w	80063f8 <HAL_TIM_PWM_Start_DMA+0x290>
 800629c:	a201      	add	r2, pc, #4	@ (adr r2, 80062a4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800629e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a2:	bf00      	nop
 80062a4:	080062d9 	.word	0x080062d9
 80062a8:	080063f9 	.word	0x080063f9
 80062ac:	080063f9 	.word	0x080063f9
 80062b0:	080063f9 	.word	0x080063f9
 80062b4:	08006321 	.word	0x08006321
 80062b8:	080063f9 	.word	0x080063f9
 80062bc:	080063f9 	.word	0x080063f9
 80062c0:	080063f9 	.word	0x080063f9
 80062c4:	08006369 	.word	0x08006369
 80062c8:	080063f9 	.word	0x080063f9
 80062cc:	080063f9 	.word	0x080063f9
 80062d0:	080063f9 	.word	0x080063f9
 80062d4:	080063b1 	.word	0x080063b1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062dc:	4a72      	ldr	r2, [pc, #456]	@ (80064a8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80062de:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	4a71      	ldr	r2, [pc, #452]	@ (80064ac <HAL_TIM_PWM_Start_DMA+0x344>)
 80062e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ec:	4a70      	ldr	r2, [pc, #448]	@ (80064b0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80062ee:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3334      	adds	r3, #52	@ 0x34
 80062fc:	461a      	mov	r2, r3
 80062fe:	887b      	ldrh	r3, [r7, #2]
 8006300:	f7fc fc6c 	bl	8002bdc <HAL_DMA_Start_IT>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e0c7      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800631c:	60da      	str	r2, [r3, #12]
      break;
 800631e:	e06e      	b.n	80063fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006324:	4a60      	ldr	r2, [pc, #384]	@ (80064a8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006326:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632c:	4a5f      	ldr	r2, [pc, #380]	@ (80064ac <HAL_TIM_PWM_Start_DMA+0x344>)
 800632e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006334:	4a5e      	ldr	r2, [pc, #376]	@ (80064b0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006336:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3338      	adds	r3, #56	@ 0x38
 8006344:	461a      	mov	r2, r3
 8006346:	887b      	ldrh	r3, [r7, #2]
 8006348:	f7fc fc48 	bl	8002bdc <HAL_DMA_Start_IT>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e0a3      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006364:	60da      	str	r2, [r3, #12]
      break;
 8006366:	e04a      	b.n	80063fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	4a4e      	ldr	r2, [pc, #312]	@ (80064a8 <HAL_TIM_PWM_Start_DMA+0x340>)
 800636e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006374:	4a4d      	ldr	r2, [pc, #308]	@ (80064ac <HAL_TIM_PWM_Start_DMA+0x344>)
 8006376:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637c:	4a4c      	ldr	r2, [pc, #304]	@ (80064b0 <HAL_TIM_PWM_Start_DMA+0x348>)
 800637e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	333c      	adds	r3, #60	@ 0x3c
 800638c:	461a      	mov	r2, r3
 800638e:	887b      	ldrh	r3, [r7, #2]
 8006390:	f7fc fc24 	bl	8002bdc <HAL_DMA_Start_IT>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e07f      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063ac:	60da      	str	r2, [r3, #12]
      break;
 80063ae:	e026      	b.n	80063fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b4:	4a3c      	ldr	r2, [pc, #240]	@ (80064a8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80063b6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063bc:	4a3b      	ldr	r2, [pc, #236]	@ (80064ac <HAL_TIM_PWM_Start_DMA+0x344>)
 80063be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c4:	4a3a      	ldr	r2, [pc, #232]	@ (80064b0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80063c6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3340      	adds	r3, #64	@ 0x40
 80063d4:	461a      	mov	r2, r3
 80063d6:	887b      	ldrh	r3, [r7, #2]
 80063d8:	f7fc fc00 	bl	8002bdc <HAL_DMA_Start_IT>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e05b      	b.n	800649e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80063f4:	60da      	str	r2, [r3, #12]
      break;
 80063f6:	e002      	b.n	80063fe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	75fb      	strb	r3, [r7, #23]
      break;
 80063fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80063fe:	7dfb      	ldrb	r3, [r7, #23]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d14b      	bne.n	800649c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2201      	movs	r2, #1
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fe41 	bl	8007094 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a27      	ldr	r2, [pc, #156]	@ (80064b4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d107      	bne.n	800642c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800642a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a20      	ldr	r2, [pc, #128]	@ (80064b4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d018      	beq.n	8006468 <HAL_TIM_PWM_Start_DMA+0x300>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800643e:	d013      	beq.n	8006468 <HAL_TIM_PWM_Start_DMA+0x300>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1c      	ldr	r2, [pc, #112]	@ (80064b8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00e      	beq.n	8006468 <HAL_TIM_PWM_Start_DMA+0x300>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a1b      	ldr	r2, [pc, #108]	@ (80064bc <HAL_TIM_PWM_Start_DMA+0x354>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d009      	beq.n	8006468 <HAL_TIM_PWM_Start_DMA+0x300>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a19      	ldr	r2, [pc, #100]	@ (80064c0 <HAL_TIM_PWM_Start_DMA+0x358>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d004      	beq.n	8006468 <HAL_TIM_PWM_Start_DMA+0x300>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a18      	ldr	r2, [pc, #96]	@ (80064c4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d111      	bne.n	800648c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2b06      	cmp	r3, #6
 8006478:	d010      	beq.n	800649c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0201 	orr.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800648a:	e007      	b.n	800649c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800649c:	7dfb      	ldrb	r3, [r7, #23]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	08006a21 	.word	0x08006a21
 80064ac:	08006ac9 	.word	0x08006ac9
 80064b0:	0800698f 	.word	0x0800698f
 80064b4:	40010000 	.word	0x40010000
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000c00 	.word	0x40000c00
 80064c4:	40014000 	.word	0x40014000

080064c8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b0c      	cmp	r3, #12
 80064da:	d855      	bhi.n	8006588 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80064dc:	a201      	add	r2, pc, #4	@ (adr r2, 80064e4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	08006519 	.word	0x08006519
 80064e8:	08006589 	.word	0x08006589
 80064ec:	08006589 	.word	0x08006589
 80064f0:	08006589 	.word	0x08006589
 80064f4:	08006535 	.word	0x08006535
 80064f8:	08006589 	.word	0x08006589
 80064fc:	08006589 	.word	0x08006589
 8006500:	08006589 	.word	0x08006589
 8006504:	08006551 	.word	0x08006551
 8006508:	08006589 	.word	0x08006589
 800650c:	08006589 	.word	0x08006589
 8006510:	08006589 	.word	0x08006589
 8006514:	0800656d 	.word	0x0800656d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006526:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652c:	4618      	mov	r0, r3
 800652e:	f7fc fbad 	bl	8002c8c <HAL_DMA_Abort_IT>
      break;
 8006532:	e02c      	b.n	800658e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006542:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006548:	4618      	mov	r0, r3
 800654a:	f7fc fb9f 	bl	8002c8c <HAL_DMA_Abort_IT>
      break;
 800654e:	e01e      	b.n	800658e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800655e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006564:	4618      	mov	r0, r3
 8006566:	f7fc fb91 	bl	8002c8c <HAL_DMA_Abort_IT>
      break;
 800656a:	e010      	b.n	800658e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800657a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006580:	4618      	mov	r0, r3
 8006582:	f7fc fb83 	bl	8002c8c <HAL_DMA_Abort_IT>
      break;
 8006586:	e002      	b.n	800658e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	73fb      	strb	r3, [r7, #15]
      break;
 800658c:	bf00      	nop
  }

  if (status == HAL_OK)
 800658e:	7bfb      	ldrb	r3, [r7, #15]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d157      	bne.n	8006644 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2200      	movs	r2, #0
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fd79 	bl	8007094 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006650 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d117      	bne.n	80065dc <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6a1a      	ldr	r2, [r3, #32]
 80065b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80065b6:	4013      	ands	r3, r2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10f      	bne.n	80065dc <HAL_TIM_PWM_Stop_DMA+0x114>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6a1a      	ldr	r2, [r3, #32]
 80065c2:	f240 4344 	movw	r3, #1092	@ 0x444
 80065c6:	4013      	ands	r3, r2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d107      	bne.n	80065dc <HAL_TIM_PWM_Stop_DMA+0x114>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065da:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6a1a      	ldr	r2, [r3, #32]
 80065e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10f      	bne.n	800660c <HAL_TIM_PWM_Stop_DMA+0x144>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a1a      	ldr	r2, [r3, #32]
 80065f2:	f240 4344 	movw	r3, #1092	@ 0x444
 80065f6:	4013      	ands	r3, r2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d107      	bne.n	800660c <HAL_TIM_PWM_Stop_DMA+0x144>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d104      	bne.n	800661c <HAL_TIM_PWM_Stop_DMA+0x154>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800661a:	e013      	b.n	8006644 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b04      	cmp	r3, #4
 8006620:	d104      	bne.n	800662c <HAL_TIM_PWM_Stop_DMA+0x164>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800662a:	e00b      	b.n	8006644 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b08      	cmp	r3, #8
 8006630:	d104      	bne.n	800663c <HAL_TIM_PWM_Stop_DMA+0x174>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800663a:	e003      	b.n	8006644 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8006644:	7bfb      	ldrb	r3, [r7, #15]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40010000 	.word	0x40010000

08006654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800666e:	2302      	movs	r3, #2
 8006670:	e0ae      	b.n	80067d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b0c      	cmp	r3, #12
 800667e:	f200 809f 	bhi.w	80067c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006682:	a201      	add	r2, pc, #4	@ (adr r2, 8006688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006688:	080066bd 	.word	0x080066bd
 800668c:	080067c1 	.word	0x080067c1
 8006690:	080067c1 	.word	0x080067c1
 8006694:	080067c1 	.word	0x080067c1
 8006698:	080066fd 	.word	0x080066fd
 800669c:	080067c1 	.word	0x080067c1
 80066a0:	080067c1 	.word	0x080067c1
 80066a4:	080067c1 	.word	0x080067c1
 80066a8:	0800673f 	.word	0x0800673f
 80066ac:	080067c1 	.word	0x080067c1
 80066b0:	080067c1 	.word	0x080067c1
 80066b4:	080067c1 	.word	0x080067c1
 80066b8:	0800677f 	.word	0x0800677f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68b9      	ldr	r1, [r7, #8]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fac0 	bl	8006c48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699a      	ldr	r2, [r3, #24]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0208 	orr.w	r2, r2, #8
 80066d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0204 	bic.w	r2, r2, #4
 80066e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6999      	ldr	r1, [r3, #24]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	691a      	ldr	r2, [r3, #16]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	619a      	str	r2, [r3, #24]
      break;
 80066fa:	e064      	b.n	80067c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fb06 	bl	8006d14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6999      	ldr	r1, [r3, #24]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	021a      	lsls	r2, r3, #8
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	619a      	str	r2, [r3, #24]
      break;
 800673c:	e043      	b.n	80067c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68b9      	ldr	r1, [r7, #8]
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fb51 	bl	8006dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69da      	ldr	r2, [r3, #28]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f042 0208 	orr.w	r2, r2, #8
 8006758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 0204 	bic.w	r2, r2, #4
 8006768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69d9      	ldr	r1, [r3, #28]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	691a      	ldr	r2, [r3, #16]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	61da      	str	r2, [r3, #28]
      break;
 800677c:	e023      	b.n	80067c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fb9b 	bl	8006ec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69da      	ldr	r2, [r3, #28]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69da      	ldr	r2, [r3, #28]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69d9      	ldr	r1, [r3, #28]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	021a      	lsls	r2, r3, #8
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	61da      	str	r2, [r3, #28]
      break;
 80067be:	e002      	b.n	80067c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	75fb      	strb	r3, [r7, #23]
      break;
 80067c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_TIM_ConfigClockSource+0x1c>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e0b4      	b.n	800695e <HAL_TIM_ConfigClockSource+0x186>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800681a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800682c:	d03e      	beq.n	80068ac <HAL_TIM_ConfigClockSource+0xd4>
 800682e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006832:	f200 8087 	bhi.w	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800683a:	f000 8086 	beq.w	800694a <HAL_TIM_ConfigClockSource+0x172>
 800683e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006842:	d87f      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006844:	2b70      	cmp	r3, #112	@ 0x70
 8006846:	d01a      	beq.n	800687e <HAL_TIM_ConfigClockSource+0xa6>
 8006848:	2b70      	cmp	r3, #112	@ 0x70
 800684a:	d87b      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 800684c:	2b60      	cmp	r3, #96	@ 0x60
 800684e:	d050      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x11a>
 8006850:	2b60      	cmp	r3, #96	@ 0x60
 8006852:	d877      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006854:	2b50      	cmp	r3, #80	@ 0x50
 8006856:	d03c      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0xfa>
 8006858:	2b50      	cmp	r3, #80	@ 0x50
 800685a:	d873      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 800685c:	2b40      	cmp	r3, #64	@ 0x40
 800685e:	d058      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0x13a>
 8006860:	2b40      	cmp	r3, #64	@ 0x40
 8006862:	d86f      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006864:	2b30      	cmp	r3, #48	@ 0x30
 8006866:	d064      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 8006868:	2b30      	cmp	r3, #48	@ 0x30
 800686a:	d86b      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 800686c:	2b20      	cmp	r3, #32
 800686e:	d060      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 8006870:	2b20      	cmp	r3, #32
 8006872:	d867      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d05c      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 8006878:	2b10      	cmp	r3, #16
 800687a:	d05a      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 800687c:	e062      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800688e:	f000 fbe1 	bl	8007054 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	609a      	str	r2, [r3, #8]
      break;
 80068aa:	e04f      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068bc:	f000 fbca 	bl	8007054 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068ce:	609a      	str	r2, [r3, #8]
      break;
 80068d0:	e03c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068de:	461a      	mov	r2, r3
 80068e0:	f000 fb3e 	bl	8006f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2150      	movs	r1, #80	@ 0x50
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fb97 	bl	800701e <TIM_ITRx_SetConfig>
      break;
 80068f0:	e02c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068fe:	461a      	mov	r2, r3
 8006900:	f000 fb5d 	bl	8006fbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2160      	movs	r1, #96	@ 0x60
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fb87 	bl	800701e <TIM_ITRx_SetConfig>
      break;
 8006910:	e01c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800691e:	461a      	mov	r2, r3
 8006920:	f000 fb1e 	bl	8006f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2140      	movs	r1, #64	@ 0x40
 800692a:	4618      	mov	r0, r3
 800692c:	f000 fb77 	bl	800701e <TIM_ITRx_SetConfig>
      break;
 8006930:	e00c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4619      	mov	r1, r3
 800693c:	4610      	mov	r0, r2
 800693e:	f000 fb6e 	bl	800701e <TIM_ITRx_SetConfig>
      break;
 8006942:	e003      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	73fb      	strb	r3, [r7, #15]
      break;
 8006948:	e000      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800694a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800696e:	bf00      	nop
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d107      	bne.n	80069b6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069b4:	e02a      	b.n	8006a0c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d107      	bne.n	80069d0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2202      	movs	r2, #2
 80069c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069ce:	e01d      	b.n	8006a0c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d107      	bne.n	80069ea <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2204      	movs	r2, #4
 80069de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069e8:	e010      	b.n	8006a0c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d107      	bne.n	8006a04 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2208      	movs	r2, #8
 80069f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a02:	e003      	b.n	8006a0c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f7ff ffb4 	bl	800697a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	771a      	strb	r2, [r3, #28]
}
 8006a18:	bf00      	nop
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d10b      	bne.n	8006a50 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d136      	bne.n	8006ab4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a4e:	e031      	b.n	8006ab4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d10b      	bne.n	8006a72 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d125      	bne.n	8006ab4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a70:	e020      	b.n	8006ab4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d10b      	bne.n	8006a94 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2204      	movs	r2, #4
 8006a80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d114      	bne.n	8006ab4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a92:	e00f      	b.n	8006ab4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d10a      	bne.n	8006ab4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d103      	bne.n	8006ab4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f7fa f8a5 	bl	8000c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	771a      	strb	r2, [r3, #28]
}
 8006ac0:	bf00      	nop
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d103      	bne.n	8006ae8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	771a      	strb	r2, [r3, #28]
 8006ae6:	e019      	b.n	8006b1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d103      	bne.n	8006afa <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2202      	movs	r2, #2
 8006af6:	771a      	strb	r2, [r3, #28]
 8006af8:	e010      	b.n	8006b1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d103      	bne.n	8006b0c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2204      	movs	r2, #4
 8006b08:	771a      	strb	r2, [r3, #28]
 8006b0a:	e007      	b.n	8006b1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d102      	bne.n	8006b1c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2208      	movs	r2, #8
 8006b1a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f7ff ff22 	bl	8006966 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	771a      	strb	r2, [r3, #28]
}
 8006b28:	bf00      	nop
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a3a      	ldr	r2, [pc, #232]	@ (8006c2c <TIM_Base_SetConfig+0xfc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00f      	beq.n	8006b68 <TIM_Base_SetConfig+0x38>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b4e:	d00b      	beq.n	8006b68 <TIM_Base_SetConfig+0x38>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a37      	ldr	r2, [pc, #220]	@ (8006c30 <TIM_Base_SetConfig+0x100>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d007      	beq.n	8006b68 <TIM_Base_SetConfig+0x38>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a36      	ldr	r2, [pc, #216]	@ (8006c34 <TIM_Base_SetConfig+0x104>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d003      	beq.n	8006b68 <TIM_Base_SetConfig+0x38>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a35      	ldr	r2, [pc, #212]	@ (8006c38 <TIM_Base_SetConfig+0x108>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d108      	bne.n	8006b7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8006c2c <TIM_Base_SetConfig+0xfc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d01b      	beq.n	8006bba <TIM_Base_SetConfig+0x8a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b88:	d017      	beq.n	8006bba <TIM_Base_SetConfig+0x8a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a28      	ldr	r2, [pc, #160]	@ (8006c30 <TIM_Base_SetConfig+0x100>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d013      	beq.n	8006bba <TIM_Base_SetConfig+0x8a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a27      	ldr	r2, [pc, #156]	@ (8006c34 <TIM_Base_SetConfig+0x104>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00f      	beq.n	8006bba <TIM_Base_SetConfig+0x8a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a26      	ldr	r2, [pc, #152]	@ (8006c38 <TIM_Base_SetConfig+0x108>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00b      	beq.n	8006bba <TIM_Base_SetConfig+0x8a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a25      	ldr	r2, [pc, #148]	@ (8006c3c <TIM_Base_SetConfig+0x10c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d007      	beq.n	8006bba <TIM_Base_SetConfig+0x8a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a24      	ldr	r2, [pc, #144]	@ (8006c40 <TIM_Base_SetConfig+0x110>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d003      	beq.n	8006bba <TIM_Base_SetConfig+0x8a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a23      	ldr	r2, [pc, #140]	@ (8006c44 <TIM_Base_SetConfig+0x114>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d108      	bne.n	8006bcc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8006c2c <TIM_Base_SetConfig+0xfc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d103      	bne.n	8006c00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	691a      	ldr	r2, [r3, #16]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d105      	bne.n	8006c1e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f023 0201 	bic.w	r2, r3, #1
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	611a      	str	r2, [r3, #16]
  }
}
 8006c1e:	bf00      	nop
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	40010000 	.word	0x40010000
 8006c30:	40000400 	.word	0x40000400
 8006c34:	40000800 	.word	0x40000800
 8006c38:	40000c00 	.word	0x40000c00
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40014400 	.word	0x40014400
 8006c44:	40014800 	.word	0x40014800

08006c48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	f023 0201 	bic.w	r2, r3, #1
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0303 	bic.w	r3, r3, #3
 8006c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f023 0302 	bic.w	r3, r3, #2
 8006c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8006d10 <TIM_OC1_SetConfig+0xc8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d10c      	bne.n	8006cbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f023 0308 	bic.w	r3, r3, #8
 8006caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f023 0304 	bic.w	r3, r3, #4
 8006cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a13      	ldr	r2, [pc, #76]	@ (8006d10 <TIM_OC1_SetConfig+0xc8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d111      	bne.n	8006cea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	621a      	str	r2, [r3, #32]
}
 8006d04:	bf00      	nop
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	40010000 	.word	0x40010000

08006d14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	f023 0210 	bic.w	r2, r3, #16
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	021b      	lsls	r3, r3, #8
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f023 0320 	bic.w	r3, r3, #32
 8006d5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8006de8 <TIM_OC2_SetConfig+0xd4>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d10d      	bne.n	8006d90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	011b      	lsls	r3, r3, #4
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a15      	ldr	r2, [pc, #84]	@ (8006de8 <TIM_OC2_SetConfig+0xd4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d113      	bne.n	8006dc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006da6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40010000 	.word	0x40010000

08006dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0303 	bic.w	r3, r3, #3
 8006e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	021b      	lsls	r3, r3, #8
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a1d      	ldr	r2, [pc, #116]	@ (8006ebc <TIM_OC3_SetConfig+0xd0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d10d      	bne.n	8006e66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	021b      	lsls	r3, r3, #8
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a14      	ldr	r2, [pc, #80]	@ (8006ebc <TIM_OC3_SetConfig+0xd0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d113      	bne.n	8006e96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	621a      	str	r2, [r3, #32]
}
 8006eb0:	bf00      	nop
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	40010000 	.word	0x40010000

08006ec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	031b      	lsls	r3, r3, #12
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a10      	ldr	r2, [pc, #64]	@ (8006f5c <TIM_OC4_SetConfig+0x9c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d109      	bne.n	8006f34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	019b      	lsls	r3, r3, #6
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	621a      	str	r2, [r3, #32]
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	40010000 	.word	0x40010000

08006f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	f023 0201 	bic.w	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f023 030a 	bic.w	r3, r3, #10
 8006f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	621a      	str	r2, [r3, #32]
}
 8006fb2:	bf00      	nop
 8006fb4:	371c      	adds	r7, #28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b087      	sub	sp, #28
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	f023 0210 	bic.w	r2, r3, #16
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	031b      	lsls	r3, r3, #12
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ffa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	621a      	str	r2, [r3, #32]
}
 8007012:	bf00      	nop
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800701e:	b480      	push	{r7}
 8007020:	b085      	sub	sp, #20
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4313      	orrs	r3, r2
 800703c:	f043 0307 	orr.w	r3, r3, #7
 8007040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	609a      	str	r2, [r3, #8]
}
 8007048:	bf00      	nop
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800706e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	021a      	lsls	r2, r3, #8
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	431a      	orrs	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	4313      	orrs	r3, r2
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	609a      	str	r2, [r3, #8]
}
 8007088:	bf00      	nop
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f003 031f 	and.w	r3, r3, #31
 80070a6:	2201      	movs	r2, #1
 80070a8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a1a      	ldr	r2, [r3, #32]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	43db      	mvns	r3, r3
 80070b6:	401a      	ands	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6a1a      	ldr	r2, [r3, #32]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	fa01 f303 	lsl.w	r3, r1, r3
 80070cc:	431a      	orrs	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	621a      	str	r2, [r3, #32]
}
 80070d2:	bf00      	nop
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
	...

080070e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d101      	bne.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070f4:	2302      	movs	r3, #2
 80070f6:	e050      	b.n	800719a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800711e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a1c      	ldr	r2, [pc, #112]	@ (80071a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d018      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007144:	d013      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a18      	ldr	r2, [pc, #96]	@ (80071ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00e      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a16      	ldr	r2, [pc, #88]	@ (80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d009      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a15      	ldr	r2, [pc, #84]	@ (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d004      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a13      	ldr	r2, [pc, #76]	@ (80071b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d10c      	bne.n	8007188 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	4313      	orrs	r3, r2
 800717e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40010000 	.word	0x40010000
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40000800 	.word	0x40000800
 80071b4:	40000c00 	.word	0x40000c00
 80071b8:	40014000 	.word	0x40014000

080071bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071bc:	b084      	sub	sp, #16
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	f107 001c 	add.w	r0, r7, #28
 80071ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d123      	bne.n	800721e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80071ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007202:	2b01      	cmp	r3, #1
 8007204:	d105      	bne.n	8007212 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f001 fae8 	bl	80087e8 <USB_CoreReset>
 8007218:	4603      	mov	r3, r0
 800721a:	73fb      	strb	r3, [r7, #15]
 800721c:	e01b      	b.n	8007256 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 fadc 	bl	80087e8 <USB_CoreReset>
 8007230:	4603      	mov	r3, r0
 8007232:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007234:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007238:	2b00      	cmp	r3, #0
 800723a:	d106      	bne.n	800724a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007240:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	639a      	str	r2, [r3, #56]	@ 0x38
 8007248:	e005      	b.n	8007256 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007256:	7fbb      	ldrb	r3, [r7, #30]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d10b      	bne.n	8007274 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f043 0206 	orr.w	r2, r3, #6
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f043 0220 	orr.w	r2, r3, #32
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007280:	b004      	add	sp, #16
 8007282:	4770      	bx	lr

08007284 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d165      	bne.n	8007364 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	4a41      	ldr	r2, [pc, #260]	@ (80073a0 <USB_SetTurnaroundTime+0x11c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d906      	bls.n	80072ae <USB_SetTurnaroundTime+0x2a>
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	4a40      	ldr	r2, [pc, #256]	@ (80073a4 <USB_SetTurnaroundTime+0x120>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d202      	bcs.n	80072ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80072a8:	230f      	movs	r3, #15
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	e062      	b.n	8007374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	4a3c      	ldr	r2, [pc, #240]	@ (80073a4 <USB_SetTurnaroundTime+0x120>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d306      	bcc.n	80072c4 <USB_SetTurnaroundTime+0x40>
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	4a3b      	ldr	r2, [pc, #236]	@ (80073a8 <USB_SetTurnaroundTime+0x124>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d202      	bcs.n	80072c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80072be:	230e      	movs	r3, #14
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	e057      	b.n	8007374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	4a38      	ldr	r2, [pc, #224]	@ (80073a8 <USB_SetTurnaroundTime+0x124>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d306      	bcc.n	80072da <USB_SetTurnaroundTime+0x56>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	4a37      	ldr	r2, [pc, #220]	@ (80073ac <USB_SetTurnaroundTime+0x128>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d202      	bcs.n	80072da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80072d4:	230d      	movs	r3, #13
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	e04c      	b.n	8007374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	4a33      	ldr	r2, [pc, #204]	@ (80073ac <USB_SetTurnaroundTime+0x128>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d306      	bcc.n	80072f0 <USB_SetTurnaroundTime+0x6c>
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	4a32      	ldr	r2, [pc, #200]	@ (80073b0 <USB_SetTurnaroundTime+0x12c>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d802      	bhi.n	80072f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80072ea:	230c      	movs	r3, #12
 80072ec:	617b      	str	r3, [r7, #20]
 80072ee:	e041      	b.n	8007374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4a2f      	ldr	r2, [pc, #188]	@ (80073b0 <USB_SetTurnaroundTime+0x12c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d906      	bls.n	8007306 <USB_SetTurnaroundTime+0x82>
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4a2e      	ldr	r2, [pc, #184]	@ (80073b4 <USB_SetTurnaroundTime+0x130>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d802      	bhi.n	8007306 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007300:	230b      	movs	r3, #11
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	e036      	b.n	8007374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	4a2a      	ldr	r2, [pc, #168]	@ (80073b4 <USB_SetTurnaroundTime+0x130>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d906      	bls.n	800731c <USB_SetTurnaroundTime+0x98>
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	4a29      	ldr	r2, [pc, #164]	@ (80073b8 <USB_SetTurnaroundTime+0x134>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d802      	bhi.n	800731c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007316:	230a      	movs	r3, #10
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	e02b      	b.n	8007374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	4a26      	ldr	r2, [pc, #152]	@ (80073b8 <USB_SetTurnaroundTime+0x134>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d906      	bls.n	8007332 <USB_SetTurnaroundTime+0xae>
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4a25      	ldr	r2, [pc, #148]	@ (80073bc <USB_SetTurnaroundTime+0x138>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d202      	bcs.n	8007332 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800732c:	2309      	movs	r3, #9
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	e020      	b.n	8007374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	4a21      	ldr	r2, [pc, #132]	@ (80073bc <USB_SetTurnaroundTime+0x138>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d306      	bcc.n	8007348 <USB_SetTurnaroundTime+0xc4>
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	4a20      	ldr	r2, [pc, #128]	@ (80073c0 <USB_SetTurnaroundTime+0x13c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d802      	bhi.n	8007348 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007342:	2308      	movs	r3, #8
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	e015      	b.n	8007374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4a1d      	ldr	r2, [pc, #116]	@ (80073c0 <USB_SetTurnaroundTime+0x13c>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d906      	bls.n	800735e <USB_SetTurnaroundTime+0xda>
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	4a1c      	ldr	r2, [pc, #112]	@ (80073c4 <USB_SetTurnaroundTime+0x140>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d202      	bcs.n	800735e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007358:	2307      	movs	r3, #7
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	e00a      	b.n	8007374 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800735e:	2306      	movs	r3, #6
 8007360:	617b      	str	r3, [r7, #20]
 8007362:	e007      	b.n	8007374 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007364:	79fb      	ldrb	r3, [r7, #7]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d102      	bne.n	8007370 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800736a:	2309      	movs	r3, #9
 800736c:	617b      	str	r3, [r7, #20]
 800736e:	e001      	b.n	8007374 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007370:	2309      	movs	r3, #9
 8007372:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	029b      	lsls	r3, r3, #10
 8007388:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800738c:	431a      	orrs	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	371c      	adds	r7, #28
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	00d8acbf 	.word	0x00d8acbf
 80073a4:	00e4e1c0 	.word	0x00e4e1c0
 80073a8:	00f42400 	.word	0x00f42400
 80073ac:	01067380 	.word	0x01067380
 80073b0:	011a499f 	.word	0x011a499f
 80073b4:	01312cff 	.word	0x01312cff
 80073b8:	014ca43f 	.word	0x014ca43f
 80073bc:	016e3600 	.word	0x016e3600
 80073c0:	01a6ab1f 	.word	0x01a6ab1f
 80073c4:	01e84800 	.word	0x01e84800

080073c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f043 0201 	orr.w	r2, r3, #1
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f023 0201 	bic.w	r2, r3, #1
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d115      	bne.n	800745a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800743a:	200a      	movs	r0, #10
 800743c:	f7fb f9ea 	bl	8002814 <HAL_Delay>
      ms += 10U;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	330a      	adds	r3, #10
 8007444:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 f93f 	bl	80086ca <USB_GetMode>
 800744c:	4603      	mov	r3, r0
 800744e:	2b01      	cmp	r3, #1
 8007450:	d01e      	beq.n	8007490 <USB_SetCurrentMode+0x84>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2bc7      	cmp	r3, #199	@ 0xc7
 8007456:	d9f0      	bls.n	800743a <USB_SetCurrentMode+0x2e>
 8007458:	e01a      	b.n	8007490 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800745a:	78fb      	ldrb	r3, [r7, #3]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d115      	bne.n	800748c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800746c:	200a      	movs	r0, #10
 800746e:	f7fb f9d1 	bl	8002814 <HAL_Delay>
      ms += 10U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	330a      	adds	r3, #10
 8007476:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f001 f926 	bl	80086ca <USB_GetMode>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <USB_SetCurrentMode+0x84>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2bc7      	cmp	r3, #199	@ 0xc7
 8007488:	d9f0      	bls.n	800746c <USB_SetCurrentMode+0x60>
 800748a:	e001      	b.n	8007490 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e005      	b.n	800749c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2bc8      	cmp	r3, #200	@ 0xc8
 8007494:	d101      	bne.n	800749a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074a4:	b084      	sub	sp, #16
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b086      	sub	sp, #24
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80074b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80074be:	2300      	movs	r3, #0
 80074c0:	613b      	str	r3, [r7, #16]
 80074c2:	e009      	b.n	80074d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	3340      	adds	r3, #64	@ 0x40
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	2200      	movs	r2, #0
 80074d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	3301      	adds	r3, #1
 80074d6:	613b      	str	r3, [r7, #16]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2b0e      	cmp	r3, #14
 80074dc:	d9f2      	bls.n	80074c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d11c      	bne.n	8007520 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074f4:	f043 0302 	orr.w	r3, r3, #2
 80074f8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007516:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	639a      	str	r2, [r3, #56]	@ 0x38
 800751e:	e00b      	b.n	8007538 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007524:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007530:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800753e:	461a      	mov	r2, r3
 8007540:	2300      	movs	r3, #0
 8007542:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007544:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007548:	2b01      	cmp	r3, #1
 800754a:	d10d      	bne.n	8007568 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800754c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007550:	2b00      	cmp	r3, #0
 8007552:	d104      	bne.n	800755e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007554:	2100      	movs	r1, #0
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f968 	bl	800782c <USB_SetDevSpeed>
 800755c:	e008      	b.n	8007570 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800755e:	2101      	movs	r1, #1
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f963 	bl	800782c <USB_SetDevSpeed>
 8007566:	e003      	b.n	8007570 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007568:	2103      	movs	r1, #3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f95e 	bl	800782c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007570:	2110      	movs	r1, #16
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f8fa 	bl	800776c <USB_FlushTxFifo>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f924 	bl	80077d0 <USB_FlushRxFifo>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007598:	461a      	mov	r2, r3
 800759a:	2300      	movs	r3, #0
 800759c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075a4:	461a      	mov	r2, r3
 80075a6:	2300      	movs	r3, #0
 80075a8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b0:	461a      	mov	r2, r3
 80075b2:	2300      	movs	r3, #0
 80075b4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075b6:	2300      	movs	r3, #0
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	e043      	b.n	8007644 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075d2:	d118      	bne.n	8007606 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10a      	bne.n	80075f0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e6:	461a      	mov	r2, r3
 80075e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	e013      	b.n	8007618 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fc:	461a      	mov	r2, r3
 80075fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007602:	6013      	str	r3, [r2, #0]
 8007604:	e008      	b.n	8007618 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4413      	add	r3, r2
 800760e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007612:	461a      	mov	r2, r3
 8007614:	2300      	movs	r3, #0
 8007616:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007624:	461a      	mov	r2, r3
 8007626:	2300      	movs	r3, #0
 8007628:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007636:	461a      	mov	r2, r3
 8007638:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800763c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	3301      	adds	r3, #1
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007648:	461a      	mov	r2, r3
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	4293      	cmp	r3, r2
 800764e:	d3b5      	bcc.n	80075bc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007650:	2300      	movs	r3, #0
 8007652:	613b      	str	r3, [r7, #16]
 8007654:	e043      	b.n	80076de <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007668:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800766c:	d118      	bne.n	80076a0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10a      	bne.n	800768a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007680:	461a      	mov	r2, r3
 8007682:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	e013      	b.n	80076b2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007696:	461a      	mov	r2, r3
 8007698:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	e008      	b.n	80076b2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ac:	461a      	mov	r2, r3
 80076ae:	2300      	movs	r3, #0
 80076b0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076be:	461a      	mov	r2, r3
 80076c0:	2300      	movs	r3, #0
 80076c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d0:	461a      	mov	r2, r3
 80076d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80076d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	3301      	adds	r3, #1
 80076dc:	613b      	str	r3, [r7, #16]
 80076de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80076e2:	461a      	mov	r2, r3
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d3b5      	bcc.n	8007656 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076fc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800770a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800770c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	f043 0210 	orr.w	r2, r3, #16
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	699a      	ldr	r2, [r3, #24]
 8007724:	4b10      	ldr	r3, [pc, #64]	@ (8007768 <USB_DevInit+0x2c4>)
 8007726:	4313      	orrs	r3, r2
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800772c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007730:	2b00      	cmp	r3, #0
 8007732:	d005      	beq.n	8007740 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	f043 0208 	orr.w	r2, r3, #8
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007740:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007744:	2b01      	cmp	r3, #1
 8007746:	d107      	bne.n	8007758 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007750:	f043 0304 	orr.w	r3, r3, #4
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007758:	7dfb      	ldrb	r3, [r7, #23]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007764:	b004      	add	sp, #16
 8007766:	4770      	bx	lr
 8007768:	803c3800 	.word	0x803c3800

0800776c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3301      	adds	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007786:	d901      	bls.n	800778c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e01b      	b.n	80077c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	daf2      	bge.n	800777a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	019b      	lsls	r3, r3, #6
 800779c:	f043 0220 	orr.w	r2, r3, #32
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3301      	adds	r3, #1
 80077a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077b0:	d901      	bls.n	80077b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e006      	b.n	80077c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f003 0320 	and.w	r3, r3, #32
 80077be:	2b20      	cmp	r3, #32
 80077c0:	d0f0      	beq.n	80077a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3301      	adds	r3, #1
 80077e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077e8:	d901      	bls.n	80077ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e018      	b.n	8007820 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	daf2      	bge.n	80077dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2210      	movs	r2, #16
 80077fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3301      	adds	r3, #1
 8007804:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800780c:	d901      	bls.n	8007812 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e006      	b.n	8007820 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	f003 0310 	and.w	r3, r3, #16
 800781a:	2b10      	cmp	r3, #16
 800781c:	d0f0      	beq.n	8007800 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	68f9      	ldr	r1, [r7, #12]
 8007848:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800784c:	4313      	orrs	r3, r2
 800784e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800785e:	b480      	push	{r7}
 8007860:	b087      	sub	sp, #28
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f003 0306 	and.w	r3, r3, #6
 8007876:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d102      	bne.n	8007884 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800787e:	2300      	movs	r3, #0
 8007880:	75fb      	strb	r3, [r7, #23]
 8007882:	e00a      	b.n	800789a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d002      	beq.n	8007890 <USB_GetDevSpeed+0x32>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b06      	cmp	r3, #6
 800788e:	d102      	bne.n	8007896 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007890:	2302      	movs	r3, #2
 8007892:	75fb      	strb	r3, [r7, #23]
 8007894:	e001      	b.n	800789a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007896:	230f      	movs	r3, #15
 8007898:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800789a:	7dfb      	ldrb	r3, [r7, #23]
}
 800789c:	4618      	mov	r0, r3
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	785b      	ldrb	r3, [r3, #1]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d13a      	bne.n	800793a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ca:	69da      	ldr	r2, [r3, #28]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f003 030f 	and.w	r3, r3, #15
 80078d4:	2101      	movs	r1, #1
 80078d6:	fa01 f303 	lsl.w	r3, r1, r3
 80078da:	b29b      	uxth	r3, r3
 80078dc:	68f9      	ldr	r1, [r7, #12]
 80078de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078e2:	4313      	orrs	r3, r2
 80078e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d155      	bne.n	80079a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	791b      	ldrb	r3, [r3, #4]
 8007916:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007918:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	059b      	lsls	r3, r3, #22
 800791e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007920:	4313      	orrs	r3, r2
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	0151      	lsls	r1, r2, #5
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	440a      	add	r2, r1
 800792a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800792e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007932:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007936:	6013      	str	r3, [r2, #0]
 8007938:	e036      	b.n	80079a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007940:	69da      	ldr	r2, [r3, #28]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	f003 030f 	and.w	r3, r3, #15
 800794a:	2101      	movs	r1, #1
 800794c:	fa01 f303 	lsl.w	r3, r1, r3
 8007950:	041b      	lsls	r3, r3, #16
 8007952:	68f9      	ldr	r1, [r7, #12]
 8007954:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007958:	4313      	orrs	r3, r2
 800795a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d11a      	bne.n	80079a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	791b      	ldrb	r3, [r3, #4]
 800798c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800798e:	430b      	orrs	r3, r1
 8007990:	4313      	orrs	r3, r2
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	0151      	lsls	r1, r2, #5
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	440a      	add	r2, r1
 800799a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800799e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
	...

080079b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d161      	bne.n	8007a98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079ea:	d11f      	bne.n	8007a2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	0151      	lsls	r1, r2, #5
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	440a      	add	r2, r1
 8007a02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a06:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	43db      	mvns	r3, r3
 8007a46:	68f9      	ldr	r1, [r7, #12]
 8007a48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a56:	69da      	ldr	r2, [r3, #28]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	f003 030f 	and.w	r3, r3, #15
 8007a60:	2101      	movs	r1, #1
 8007a62:	fa01 f303 	lsl.w	r3, r1, r3
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	43db      	mvns	r3, r3
 8007a6a:	68f9      	ldr	r1, [r7, #12]
 8007a6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a70:	4013      	ands	r3, r2
 8007a72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	0159      	lsls	r1, r3, #5
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	440b      	add	r3, r1
 8007a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4b35      	ldr	r3, [pc, #212]	@ (8007b68 <USB_DeactivateEndpoint+0x1b0>)
 8007a92:	4013      	ands	r3, r2
 8007a94:	600b      	str	r3, [r1, #0]
 8007a96:	e060      	b.n	8007b5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007aae:	d11f      	bne.n	8007af0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	0151      	lsls	r1, r2, #5
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	440a      	add	r2, r1
 8007ac6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007aca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ace:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	0151      	lsls	r1, r2, #5
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007aea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007aee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007af6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	f003 030f 	and.w	r3, r3, #15
 8007b00:	2101      	movs	r1, #1
 8007b02:	fa01 f303 	lsl.w	r3, r1, r3
 8007b06:	041b      	lsls	r3, r3, #16
 8007b08:	43db      	mvns	r3, r3
 8007b0a:	68f9      	ldr	r1, [r7, #12]
 8007b0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b10:	4013      	ands	r3, r2
 8007b12:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b1a:	69da      	ldr	r2, [r3, #28]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	f003 030f 	and.w	r3, r3, #15
 8007b24:	2101      	movs	r1, #1
 8007b26:	fa01 f303 	lsl.w	r3, r1, r3
 8007b2a:	041b      	lsls	r3, r3, #16
 8007b2c:	43db      	mvns	r3, r3
 8007b2e:	68f9      	ldr	r1, [r7, #12]
 8007b30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b34:	4013      	ands	r3, r2
 8007b36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	0159      	lsls	r1, r3, #5
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	440b      	add	r3, r1
 8007b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b52:	4619      	mov	r1, r3
 8007b54:	4b05      	ldr	r3, [pc, #20]	@ (8007b6c <USB_DeactivateEndpoint+0x1b4>)
 8007b56:	4013      	ands	r3, r2
 8007b58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	ec337800 	.word	0xec337800
 8007b6c:	eff37800 	.word	0xeff37800

08007b70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08a      	sub	sp, #40	@ 0x28
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	785b      	ldrb	r3, [r3, #1]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	f040 817f 	bne.w	8007e90 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d132      	bne.n	8007c00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bb4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007bb8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007bbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	0151      	lsls	r1, r2, #5
 8007bd0:	69fa      	ldr	r2, [r7, #28]
 8007bd2:	440a      	add	r2, r1
 8007bd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	0151      	lsls	r1, r2, #5
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	440a      	add	r2, r1
 8007bf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bf8:	0cdb      	lsrs	r3, r3, #19
 8007bfa:	04db      	lsls	r3, r3, #19
 8007bfc:	6113      	str	r3, [r2, #16]
 8007bfe:	e097      	b.n	8007d30 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	0151      	lsls	r1, r2, #5
 8007c12:	69fa      	ldr	r2, [r7, #28]
 8007c14:	440a      	add	r2, r1
 8007c16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c1a:	0cdb      	lsrs	r3, r3, #19
 8007c1c:	04db      	lsls	r3, r3, #19
 8007c1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	0151      	lsls	r1, r2, #5
 8007c32:	69fa      	ldr	r2, [r7, #28]
 8007c34:	440a      	add	r2, r1
 8007c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c3a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c3e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c42:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d11a      	bne.n	8007c80 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	691a      	ldr	r2, [r3, #16]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d903      	bls.n	8007c5e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	0151      	lsls	r1, r2, #5
 8007c70:	69fa      	ldr	r2, [r7, #28]
 8007c72:	440a      	add	r2, r1
 8007c74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c7c:	6113      	str	r3, [r2, #16]
 8007c7e:	e044      	b.n	8007d0a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	691a      	ldr	r2, [r3, #16]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	4413      	add	r3, r2
 8007c8a:	1e5a      	subs	r2, r3, #1
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c94:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	8afb      	ldrh	r3, [r7, #22]
 8007ca6:	04d9      	lsls	r1, r3, #19
 8007ca8:	4ba4      	ldr	r3, [pc, #656]	@ (8007f3c <USB_EPStartXfer+0x3cc>)
 8007caa:	400b      	ands	r3, r1
 8007cac:	69b9      	ldr	r1, [r7, #24]
 8007cae:	0148      	lsls	r0, r1, #5
 8007cb0:	69f9      	ldr	r1, [r7, #28]
 8007cb2:	4401      	add	r1, r0
 8007cb4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	791b      	ldrb	r3, [r3, #4]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d122      	bne.n	8007d0a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	0151      	lsls	r1, r2, #5
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	440a      	add	r2, r1
 8007cda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cde:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007ce2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf0:	691a      	ldr	r2, [r3, #16]
 8007cf2:	8afb      	ldrh	r3, [r7, #22]
 8007cf4:	075b      	lsls	r3, r3, #29
 8007cf6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007cfa:	69b9      	ldr	r1, [r7, #24]
 8007cfc:	0148      	lsls	r0, r1, #5
 8007cfe:	69f9      	ldr	r1, [r7, #28]
 8007d00:	4401      	add	r1, r0
 8007d02:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007d06:	4313      	orrs	r3, r2
 8007d08:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d16:	691a      	ldr	r2, [r3, #16]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d20:	69b9      	ldr	r1, [r7, #24]
 8007d22:	0148      	lsls	r0, r1, #5
 8007d24:	69f9      	ldr	r1, [r7, #28]
 8007d26:	4401      	add	r1, r0
 8007d28:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d14b      	bne.n	8007dce <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d009      	beq.n	8007d52 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	791b      	ldrb	r3, [r3, #4]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d128      	bne.n	8007dac <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d110      	bne.n	8007d8c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	0151      	lsls	r1, r2, #5
 8007d7c:	69fa      	ldr	r2, [r7, #28]
 8007d7e:	440a      	add	r2, r1
 8007d80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d88:	6013      	str	r3, [r2, #0]
 8007d8a:	e00f      	b.n	8007dac <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	0151      	lsls	r1, r2, #5
 8007d9e:	69fa      	ldr	r2, [r7, #28]
 8007da0:	440a      	add	r2, r1
 8007da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007daa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	0151      	lsls	r1, r2, #5
 8007dbe:	69fa      	ldr	r2, [r7, #28]
 8007dc0:	440a      	add	r2, r1
 8007dc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dc6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	e166      	b.n	800809c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	0151      	lsls	r1, r2, #5
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	440a      	add	r2, r1
 8007de4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007de8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007dec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	791b      	ldrb	r3, [r3, #4]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d015      	beq.n	8007e22 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 814e 	beq.w	800809c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	f003 030f 	and.w	r3, r3, #15
 8007e10:	2101      	movs	r1, #1
 8007e12:	fa01 f303 	lsl.w	r3, r1, r3
 8007e16:	69f9      	ldr	r1, [r7, #28]
 8007e18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007e20:	e13c      	b.n	800809c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d110      	bne.n	8007e54 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	0151      	lsls	r1, r2, #5
 8007e44:	69fa      	ldr	r2, [r7, #28]
 8007e46:	440a      	add	r2, r1
 8007e48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	e00f      	b.n	8007e74 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	0151      	lsls	r1, r2, #5
 8007e66:	69fa      	ldr	r2, [r7, #28]
 8007e68:	440a      	add	r2, r1
 8007e6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e72:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	68d9      	ldr	r1, [r3, #12]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	781a      	ldrb	r2, [r3, #0]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	b298      	uxth	r0, r3
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	4603      	mov	r3, r0
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 f9b9 	bl	8008200 <USB_WritePacket>
 8007e8e:	e105      	b.n	800809c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	0151      	lsls	r1, r2, #5
 8007ea2:	69fa      	ldr	r2, [r7, #28]
 8007ea4:	440a      	add	r2, r1
 8007ea6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eaa:	0cdb      	lsrs	r3, r3, #19
 8007eac:	04db      	lsls	r3, r3, #19
 8007eae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	0151      	lsls	r1, r2, #5
 8007ec2:	69fa      	ldr	r2, [r7, #28]
 8007ec4:	440a      	add	r2, r1
 8007ec6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007ece:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007ed2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d132      	bne.n	8007f40 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	689a      	ldr	r2, [r3, #8]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	689a      	ldr	r2, [r3, #8]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007efe:	691a      	ldr	r2, [r3, #16]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f08:	69b9      	ldr	r1, [r7, #24]
 8007f0a:	0148      	lsls	r0, r1, #5
 8007f0c:	69f9      	ldr	r1, [r7, #28]
 8007f0e:	4401      	add	r1, r0
 8007f10:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f14:	4313      	orrs	r3, r2
 8007f16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	0151      	lsls	r1, r2, #5
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	440a      	add	r2, r1
 8007f2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f36:	6113      	str	r3, [r2, #16]
 8007f38:	e062      	b.n	8008000 <USB_EPStartXfer+0x490>
 8007f3a:	bf00      	nop
 8007f3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d123      	bne.n	8007f90 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f54:	691a      	ldr	r2, [r3, #16]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f5e:	69b9      	ldr	r1, [r7, #24]
 8007f60:	0148      	lsls	r0, r1, #5
 8007f62:	69f9      	ldr	r1, [r7, #28]
 8007f64:	4401      	add	r1, r0
 8007f66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	0151      	lsls	r1, r2, #5
 8007f80:	69fa      	ldr	r2, [r7, #28]
 8007f82:	440a      	add	r2, r1
 8007f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f8c:	6113      	str	r3, [r2, #16]
 8007f8e:	e037      	b.n	8008000 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	4413      	add	r3, r2
 8007f9a:	1e5a      	subs	r2, r3, #1
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	8afa      	ldrh	r2, [r7, #22]
 8007fac:	fb03 f202 	mul.w	r2, r3, r2
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fc0:	691a      	ldr	r2, [r3, #16]
 8007fc2:	8afb      	ldrh	r3, [r7, #22]
 8007fc4:	04d9      	lsls	r1, r3, #19
 8007fc6:	4b38      	ldr	r3, [pc, #224]	@ (80080a8 <USB_EPStartXfer+0x538>)
 8007fc8:	400b      	ands	r3, r1
 8007fca:	69b9      	ldr	r1, [r7, #24]
 8007fcc:	0148      	lsls	r0, r1, #5
 8007fce:	69f9      	ldr	r1, [r7, #28]
 8007fd0:	4401      	add	r1, r0
 8007fd2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	6a1b      	ldr	r3, [r3, #32]
 8007fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ff0:	69b9      	ldr	r1, [r7, #24]
 8007ff2:	0148      	lsls	r0, r1, #5
 8007ff4:	69f9      	ldr	r1, [r7, #28]
 8007ff6:	4401      	add	r1, r0
 8007ff8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008000:	79fb      	ldrb	r3, [r7, #7]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d10d      	bne.n	8008022 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d009      	beq.n	8008022 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	68d9      	ldr	r1, [r3, #12]
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800801e:	460a      	mov	r2, r1
 8008020:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	791b      	ldrb	r3, [r3, #4]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d128      	bne.n	800807c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008036:	2b00      	cmp	r3, #0
 8008038:	d110      	bne.n	800805c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	0151      	lsls	r1, r2, #5
 800804c:	69fa      	ldr	r2, [r7, #28]
 800804e:	440a      	add	r2, r1
 8008050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008054:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	e00f      	b.n	800807c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	440a      	add	r2, r1
 8008072:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800807a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	0151      	lsls	r1, r2, #5
 800808e:	69fa      	ldr	r2, [r7, #28]
 8008090:	440a      	add	r2, r1
 8008092:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008096:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800809a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3720      	adds	r7, #32
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	1ff80000 	.word	0x1ff80000

080080ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d14a      	bne.n	8008160 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080e2:	f040 8086 	bne.w	80081f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	7812      	ldrb	r2, [r2, #0]
 80080fa:	0151      	lsls	r1, r2, #5
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	440a      	add	r2, r1
 8008100:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008104:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008108:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	7812      	ldrb	r2, [r2, #0]
 800811e:	0151      	lsls	r1, r2, #5
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	440a      	add	r2, r1
 8008124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008128:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800812c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3301      	adds	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f242 7210 	movw	r2, #10000	@ 0x2710
 800813a:	4293      	cmp	r3, r2
 800813c:	d902      	bls.n	8008144 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	75fb      	strb	r3, [r7, #23]
          break;
 8008142:	e056      	b.n	80081f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008158:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800815c:	d0e7      	beq.n	800812e <USB_EPStopXfer+0x82>
 800815e:	e048      	b.n	80081f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008178:	d13b      	bne.n	80081f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	7812      	ldrb	r2, [r2, #0]
 800818e:	0151      	lsls	r1, r2, #5
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	440a      	add	r2, r1
 8008194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008198:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800819c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	7812      	ldrb	r2, [r2, #0]
 80081b2:	0151      	lsls	r1, r2, #5
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	440a      	add	r2, r1
 80081b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3301      	adds	r3, #1
 80081c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d902      	bls.n	80081d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	75fb      	strb	r3, [r7, #23]
          break;
 80081d6:	e00c      	b.n	80081f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081f0:	d0e7      	beq.n	80081c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	371c      	adds	r7, #28
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008200:	b480      	push	{r7}
 8008202:	b089      	sub	sp, #36	@ 0x24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4611      	mov	r1, r2
 800820c:	461a      	mov	r2, r3
 800820e:	460b      	mov	r3, r1
 8008210:	71fb      	strb	r3, [r7, #7]
 8008212:	4613      	mov	r3, r2
 8008214:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800821e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008222:	2b00      	cmp	r3, #0
 8008224:	d123      	bne.n	800826e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008226:	88bb      	ldrh	r3, [r7, #4]
 8008228:	3303      	adds	r3, #3
 800822a:	089b      	lsrs	r3, r3, #2
 800822c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800822e:	2300      	movs	r3, #0
 8008230:	61bb      	str	r3, [r7, #24]
 8008232:	e018      	b.n	8008266 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	031a      	lsls	r2, r3, #12
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	4413      	add	r3, r2
 800823c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008240:	461a      	mov	r2, r3
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	3301      	adds	r3, #1
 800824c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	3301      	adds	r3, #1
 8008252:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	3301      	adds	r3, #1
 8008258:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	3301      	adds	r3, #1
 800825e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	3301      	adds	r3, #1
 8008264:	61bb      	str	r3, [r7, #24]
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	429a      	cmp	r2, r3
 800826c:	d3e2      	bcc.n	8008234 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3724      	adds	r7, #36	@ 0x24
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800827c:	b480      	push	{r7}
 800827e:	b08b      	sub	sp, #44	@ 0x2c
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	4613      	mov	r3, r2
 8008288:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	089b      	lsrs	r3, r3, #2
 8008296:	b29b      	uxth	r3, r3
 8008298:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800829a:	88fb      	ldrh	r3, [r7, #6]
 800829c:	f003 0303 	and.w	r3, r3, #3
 80082a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80082a2:	2300      	movs	r3, #0
 80082a4:	623b      	str	r3, [r7, #32]
 80082a6:	e014      	b.n	80082d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	3301      	adds	r3, #1
 80082b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082bc:	3301      	adds	r3, #1
 80082be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80082c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c2:	3301      	adds	r3, #1
 80082c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80082c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c8:	3301      	adds	r3, #1
 80082ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	3301      	adds	r3, #1
 80082d0:	623b      	str	r3, [r7, #32]
 80082d2:	6a3a      	ldr	r2, [r7, #32]
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d3e6      	bcc.n	80082a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80082da:	8bfb      	ldrh	r3, [r7, #30]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d01e      	beq.n	800831e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082ea:	461a      	mov	r2, r3
 80082ec:	f107 0310 	add.w	r3, r7, #16
 80082f0:	6812      	ldr	r2, [r2, #0]
 80082f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	6a3b      	ldr	r3, [r7, #32]
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008300:	b2da      	uxtb	r2, r3
 8008302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008304:	701a      	strb	r2, [r3, #0]
      i++;
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	3301      	adds	r3, #1
 800830a:	623b      	str	r3, [r7, #32]
      pDest++;
 800830c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830e:	3301      	adds	r3, #1
 8008310:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008312:	8bfb      	ldrh	r3, [r7, #30]
 8008314:	3b01      	subs	r3, #1
 8008316:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008318:	8bfb      	ldrh	r3, [r7, #30]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1ea      	bne.n	80082f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800831e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008320:	4618      	mov	r0, r3
 8008322:	372c      	adds	r7, #44	@ 0x2c
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	785b      	ldrb	r3, [r3, #1]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d12c      	bne.n	80083a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	db12      	blt.n	8008380 <USB_EPSetStall+0x54>
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00f      	beq.n	8008380 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	0151      	lsls	r1, r2, #5
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	440a      	add	r2, r1
 8008376:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800837a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800837e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	015a      	lsls	r2, r3, #5
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4413      	add	r3, r2
 8008388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	0151      	lsls	r1, r2, #5
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	440a      	add	r2, r1
 8008396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800839a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	e02b      	b.n	80083fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	db12      	blt.n	80083da <USB_EPSetStall+0xae>
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00f      	beq.n	80083da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	0151      	lsls	r1, r2, #5
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	440a      	add	r2, r1
 80083d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80083d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	0151      	lsls	r1, r2, #5
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	440a      	add	r2, r1
 80083f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80083f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	785b      	ldrb	r3, [r3, #1]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d128      	bne.n	8008476 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	0151      	lsls	r1, r2, #5
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	440a      	add	r2, r1
 800843a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800843e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008442:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	791b      	ldrb	r3, [r3, #4]
 8008448:	2b03      	cmp	r3, #3
 800844a:	d003      	beq.n	8008454 <USB_EPClearStall+0x4c>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	791b      	ldrb	r3, [r3, #4]
 8008450:	2b02      	cmp	r3, #2
 8008452:	d138      	bne.n	80084c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	0151      	lsls	r1, r2, #5
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	440a      	add	r2, r1
 800846a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800846e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	e027      	b.n	80084c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	0151      	lsls	r1, r2, #5
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	440a      	add	r2, r1
 800848c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008490:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008494:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	791b      	ldrb	r3, [r3, #4]
 800849a:	2b03      	cmp	r3, #3
 800849c:	d003      	beq.n	80084a6 <USB_EPClearStall+0x9e>
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	791b      	ldrb	r3, [r3, #4]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d10f      	bne.n	80084c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	0151      	lsls	r1, r2, #5
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	440a      	add	r2, r1
 80084bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80084f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008508:	68f9      	ldr	r1, [r7, #12]
 800850a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800850e:	4313      	orrs	r3, r2
 8008510:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800853a:	f023 0303 	bic.w	r3, r3, #3
 800853e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800854e:	f023 0302 	bic.w	r3, r3, #2
 8008552:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008562:	b480      	push	{r7}
 8008564:	b085      	sub	sp, #20
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800857c:	f023 0303 	bic.w	r3, r3, #3
 8008580:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008590:	f043 0302 	orr.w	r3, r3, #2
 8008594:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	4013      	ands	r3, r2
 80085ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80085bc:	68fb      	ldr	r3, [r7, #12]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b085      	sub	sp, #20
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	4013      	ands	r3, r2
 80085ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	0c1b      	lsrs	r3, r3, #16
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80085fe:	b480      	push	{r7}
 8008600:	b085      	sub	sp, #20
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	4013      	ands	r3, r2
 8008620:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	b29b      	uxth	r3, r3
}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	460b      	mov	r3, r1
 800863c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008642:	78fb      	ldrb	r3, [r7, #3]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	4413      	add	r3, r2
 800864a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	4013      	ands	r3, r2
 800865e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008660:	68bb      	ldr	r3, [r7, #8]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800866e:	b480      	push	{r7}
 8008670:	b087      	sub	sp, #28
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800868e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008690:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008692:	78fb      	ldrb	r3, [r7, #3]
 8008694:	f003 030f 	and.w	r3, r3, #15
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	fa22 f303 	lsr.w	r3, r2, r3
 800869e:	01db      	lsls	r3, r3, #7
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80086a8:	78fb      	ldrb	r3, [r7, #3]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	4013      	ands	r3, r2
 80086ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086bc:	68bb      	ldr	r3, [r7, #8]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b083      	sub	sp, #12
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	f003 0301 	and.w	r3, r3, #1
}
 80086da:	4618      	mov	r0, r3
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b085      	sub	sp, #20
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008700:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008704:	f023 0307 	bic.w	r3, r3, #7
 8008708:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800871c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	460b      	mov	r3, r1
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	333c      	adds	r3, #60	@ 0x3c
 8008742:	3304      	adds	r3, #4
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	4a26      	ldr	r2, [pc, #152]	@ (80087e4 <USB_EP0_OutStart+0xb8>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d90a      	bls.n	8008766 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800875c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008760:	d101      	bne.n	8008766 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	e037      	b.n	80087d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800876c:	461a      	mov	r2, r3
 800876e:	2300      	movs	r3, #0
 8008770:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008780:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008794:	f043 0318 	orr.w	r3, r3, #24
 8008798:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087a8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80087ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80087ae:	7afb      	ldrb	r3, [r7, #11]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d10f      	bne.n	80087d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ba:	461a      	mov	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087ce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80087d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	371c      	adds	r7, #28
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	4f54300a 	.word	0x4f54300a

080087e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	3301      	adds	r3, #1
 80087f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008800:	d901      	bls.n	8008806 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e01b      	b.n	800883e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	daf2      	bge.n	80087f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800880e:	2300      	movs	r3, #0
 8008810:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	f043 0201 	orr.w	r2, r3, #1
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3301      	adds	r3, #1
 8008822:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800882a:	d901      	bls.n	8008830 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e006      	b.n	800883e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b01      	cmp	r3, #1
 800883a:	d0f0      	beq.n	800881e <USB_CoreReset+0x36>

  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
	...

0800884c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008858:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800885c:	f002 fc2e 	bl	800b0bc <USBD_static_malloc>
 8008860:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d109      	bne.n	800887c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	32b0      	adds	r2, #176	@ 0xb0
 8008872:	2100      	movs	r1, #0
 8008874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008878:	2302      	movs	r3, #2
 800887a:	e0d4      	b.n	8008a26 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800887c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008880:	2100      	movs	r1, #0
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f002 fcba 	bl	800b1fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	32b0      	adds	r2, #176	@ 0xb0
 8008892:	68f9      	ldr	r1, [r7, #12]
 8008894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	32b0      	adds	r2, #176	@ 0xb0
 80088a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	7c1b      	ldrb	r3, [r3, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d138      	bne.n	8008926 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088b4:	4b5e      	ldr	r3, [pc, #376]	@ (8008a30 <USBD_CDC_Init+0x1e4>)
 80088b6:	7819      	ldrb	r1, [r3, #0]
 80088b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088bc:	2202      	movs	r2, #2
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f002 fad9 	bl	800ae76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80088c4:	4b5a      	ldr	r3, [pc, #360]	@ (8008a30 <USBD_CDC_Init+0x1e4>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	f003 020f 	and.w	r2, r3, #15
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	440b      	add	r3, r1
 80088d8:	3324      	adds	r3, #36	@ 0x24
 80088da:	2201      	movs	r2, #1
 80088dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80088de:	4b55      	ldr	r3, [pc, #340]	@ (8008a34 <USBD_CDC_Init+0x1e8>)
 80088e0:	7819      	ldrb	r1, [r3, #0]
 80088e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088e6:	2202      	movs	r2, #2
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f002 fac4 	bl	800ae76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088ee:	4b51      	ldr	r3, [pc, #324]	@ (8008a34 <USBD_CDC_Init+0x1e8>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	f003 020f 	and.w	r2, r3, #15
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	4613      	mov	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	440b      	add	r3, r1
 8008902:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008906:	2201      	movs	r2, #1
 8008908:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800890a:	4b4b      	ldr	r3, [pc, #300]	@ (8008a38 <USBD_CDC_Init+0x1ec>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	f003 020f 	and.w	r2, r3, #15
 8008912:	6879      	ldr	r1, [r7, #4]
 8008914:	4613      	mov	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	440b      	add	r3, r1
 800891e:	3326      	adds	r3, #38	@ 0x26
 8008920:	2210      	movs	r2, #16
 8008922:	801a      	strh	r2, [r3, #0]
 8008924:	e035      	b.n	8008992 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008926:	4b42      	ldr	r3, [pc, #264]	@ (8008a30 <USBD_CDC_Init+0x1e4>)
 8008928:	7819      	ldrb	r1, [r3, #0]
 800892a:	2340      	movs	r3, #64	@ 0x40
 800892c:	2202      	movs	r2, #2
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f002 faa1 	bl	800ae76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008934:	4b3e      	ldr	r3, [pc, #248]	@ (8008a30 <USBD_CDC_Init+0x1e4>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	f003 020f 	and.w	r2, r3, #15
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	440b      	add	r3, r1
 8008948:	3324      	adds	r3, #36	@ 0x24
 800894a:	2201      	movs	r2, #1
 800894c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800894e:	4b39      	ldr	r3, [pc, #228]	@ (8008a34 <USBD_CDC_Init+0x1e8>)
 8008950:	7819      	ldrb	r1, [r3, #0]
 8008952:	2340      	movs	r3, #64	@ 0x40
 8008954:	2202      	movs	r2, #2
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f002 fa8d 	bl	800ae76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800895c:	4b35      	ldr	r3, [pc, #212]	@ (8008a34 <USBD_CDC_Init+0x1e8>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	f003 020f 	and.w	r2, r3, #15
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008974:	2201      	movs	r2, #1
 8008976:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008978:	4b2f      	ldr	r3, [pc, #188]	@ (8008a38 <USBD_CDC_Init+0x1ec>)
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	f003 020f 	and.w	r2, r3, #15
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	4613      	mov	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	440b      	add	r3, r1
 800898c:	3326      	adds	r3, #38	@ 0x26
 800898e:	2210      	movs	r2, #16
 8008990:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008992:	4b29      	ldr	r3, [pc, #164]	@ (8008a38 <USBD_CDC_Init+0x1ec>)
 8008994:	7819      	ldrb	r1, [r3, #0]
 8008996:	2308      	movs	r3, #8
 8008998:	2203      	movs	r2, #3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f002 fa6b 	bl	800ae76 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80089a0:	4b25      	ldr	r3, [pc, #148]	@ (8008a38 <USBD_CDC_Init+0x1ec>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	f003 020f 	and.w	r2, r3, #15
 80089a8:	6879      	ldr	r1, [r7, #4]
 80089aa:	4613      	mov	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	440b      	add	r3, r1
 80089b4:	3324      	adds	r3, #36	@ 0x24
 80089b6:	2201      	movs	r2, #1
 80089b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	33b0      	adds	r3, #176	@ 0xb0
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80089f0:	2302      	movs	r3, #2
 80089f2:	e018      	b.n	8008a26 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	7c1b      	ldrb	r3, [r3, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10a      	bne.n	8008a12 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008a34 <USBD_CDC_Init+0x1e8>)
 80089fe:	7819      	ldrb	r1, [r3, #0]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f002 fb22 	bl	800b054 <USBD_LL_PrepareReceive>
 8008a10:	e008      	b.n	8008a24 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a12:	4b08      	ldr	r3, [pc, #32]	@ (8008a34 <USBD_CDC_Init+0x1e8>)
 8008a14:	7819      	ldrb	r1, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a1c:	2340      	movs	r3, #64	@ 0x40
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f002 fb18 	bl	800b054 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	20000097 	.word	0x20000097
 8008a34:	20000098 	.word	0x20000098
 8008a38:	20000099 	.word	0x20000099

08008a3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008a48:	4b3a      	ldr	r3, [pc, #232]	@ (8008b34 <USBD_CDC_DeInit+0xf8>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f002 fa37 	bl	800aec2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008a54:	4b37      	ldr	r3, [pc, #220]	@ (8008b34 <USBD_CDC_DeInit+0xf8>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	f003 020f 	and.w	r2, r3, #15
 8008a5c:	6879      	ldr	r1, [r7, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	440b      	add	r3, r1
 8008a68:	3324      	adds	r3, #36	@ 0x24
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008a6e:	4b32      	ldr	r3, [pc, #200]	@ (8008b38 <USBD_CDC_DeInit+0xfc>)
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f002 fa24 	bl	800aec2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8008b38 <USBD_CDC_DeInit+0xfc>)
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	f003 020f 	and.w	r2, r3, #15
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	4613      	mov	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	440b      	add	r3, r1
 8008a8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a92:	2200      	movs	r2, #0
 8008a94:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008a96:	4b29      	ldr	r3, [pc, #164]	@ (8008b3c <USBD_CDC_DeInit+0x100>)
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f002 fa10 	bl	800aec2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008aa2:	4b26      	ldr	r3, [pc, #152]	@ (8008b3c <USBD_CDC_DeInit+0x100>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	f003 020f 	and.w	r2, r3, #15
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	440b      	add	r3, r1
 8008ab6:	3324      	adds	r3, #36	@ 0x24
 8008ab8:	2200      	movs	r2, #0
 8008aba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008abc:	4b1f      	ldr	r3, [pc, #124]	@ (8008b3c <USBD_CDC_DeInit+0x100>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	f003 020f 	and.w	r2, r3, #15
 8008ac4:	6879      	ldr	r1, [r7, #4]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	440b      	add	r3, r1
 8008ad0:	3326      	adds	r3, #38	@ 0x26
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	32b0      	adds	r2, #176	@ 0xb0
 8008ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d01f      	beq.n	8008b28 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	33b0      	adds	r3, #176	@ 0xb0
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	32b0      	adds	r2, #176	@ 0xb0
 8008b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f002 fae4 	bl	800b0d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	32b0      	adds	r2, #176	@ 0xb0
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20000097 	.word	0x20000097
 8008b38:	20000098 	.word	0x20000098
 8008b3c:	20000099 	.word	0x20000099

08008b40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	32b0      	adds	r2, #176	@ 0xb0
 8008b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d101      	bne.n	8008b70 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e0bf      	b.n	8008cf0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d050      	beq.n	8008c1e <USBD_CDC_Setup+0xde>
 8008b7c:	2b20      	cmp	r3, #32
 8008b7e:	f040 80af 	bne.w	8008ce0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	88db      	ldrh	r3, [r3, #6]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d03a      	beq.n	8008c00 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	b25b      	sxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	da1b      	bge.n	8008bcc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	33b0      	adds	r3, #176	@ 0xb0
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008baa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	88d2      	ldrh	r2, [r2, #6]
 8008bb0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	88db      	ldrh	r3, [r3, #6]
 8008bb6:	2b07      	cmp	r3, #7
 8008bb8:	bf28      	it	cs
 8008bba:	2307      	movcs	r3, #7
 8008bbc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	89fa      	ldrh	r2, [r7, #14]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 fd53 	bl	800a670 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008bca:	e090      	b.n	8008cee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	785a      	ldrb	r2, [r3, #1]
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	88db      	ldrh	r3, [r3, #6]
 8008bda:	2b3f      	cmp	r3, #63	@ 0x3f
 8008bdc:	d803      	bhi.n	8008be6 <USBD_CDC_Setup+0xa6>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	88db      	ldrh	r3, [r3, #6]
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	e000      	b.n	8008be8 <USBD_CDC_Setup+0xa8>
 8008be6:	2240      	movs	r2, #64	@ 0x40
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008bee:	6939      	ldr	r1, [r7, #16]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f001 fd65 	bl	800a6c8 <USBD_CtlPrepareRx>
      break;
 8008bfe:	e076      	b.n	8008cee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	33b0      	adds	r3, #176	@ 0xb0
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	7850      	ldrb	r0, [r2, #1]
 8008c16:	2200      	movs	r2, #0
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	4798      	blx	r3
      break;
 8008c1c:	e067      	b.n	8008cee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	785b      	ldrb	r3, [r3, #1]
 8008c22:	2b0b      	cmp	r3, #11
 8008c24:	d851      	bhi.n	8008cca <USBD_CDC_Setup+0x18a>
 8008c26:	a201      	add	r2, pc, #4	@ (adr r2, 8008c2c <USBD_CDC_Setup+0xec>)
 8008c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2c:	08008c5d 	.word	0x08008c5d
 8008c30:	08008cd9 	.word	0x08008cd9
 8008c34:	08008ccb 	.word	0x08008ccb
 8008c38:	08008ccb 	.word	0x08008ccb
 8008c3c:	08008ccb 	.word	0x08008ccb
 8008c40:	08008ccb 	.word	0x08008ccb
 8008c44:	08008ccb 	.word	0x08008ccb
 8008c48:	08008ccb 	.word	0x08008ccb
 8008c4c:	08008ccb 	.word	0x08008ccb
 8008c50:	08008ccb 	.word	0x08008ccb
 8008c54:	08008c87 	.word	0x08008c87
 8008c58:	08008cb1 	.word	0x08008cb1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d107      	bne.n	8008c78 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008c68:	f107 030a 	add.w	r3, r7, #10
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f001 fcfd 	bl	800a670 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c76:	e032      	b.n	8008cde <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 fc7b 	bl	800a576 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c80:	2303      	movs	r3, #3
 8008c82:	75fb      	strb	r3, [r7, #23]
          break;
 8008c84:	e02b      	b.n	8008cde <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d107      	bne.n	8008ca2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c92:	f107 030d 	add.w	r3, r7, #13
 8008c96:	2201      	movs	r2, #1
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 fce8 	bl	800a670 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ca0:	e01d      	b.n	8008cde <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f001 fc66 	bl	800a576 <USBD_CtlError>
            ret = USBD_FAIL;
 8008caa:	2303      	movs	r3, #3
 8008cac:	75fb      	strb	r3, [r7, #23]
          break;
 8008cae:	e016      	b.n	8008cde <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d00f      	beq.n	8008cdc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f001 fc59 	bl	800a576 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008cc8:	e008      	b.n	8008cdc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 fc52 	bl	800a576 <USBD_CtlError>
          ret = USBD_FAIL;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	75fb      	strb	r3, [r7, #23]
          break;
 8008cd6:	e002      	b.n	8008cde <USBD_CDC_Setup+0x19e>
          break;
 8008cd8:	bf00      	nop
 8008cda:	e008      	b.n	8008cee <USBD_CDC_Setup+0x1ae>
          break;
 8008cdc:	bf00      	nop
      }
      break;
 8008cde:	e006      	b.n	8008cee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f001 fc47 	bl	800a576 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	75fb      	strb	r3, [r7, #23]
      break;
 8008cec:	bf00      	nop
  }

  return (uint8_t)ret;
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3718      	adds	r7, #24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	32b0      	adds	r2, #176	@ 0xb0
 8008d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e065      	b.n	8008dee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	32b0      	adds	r2, #176	@ 0xb0
 8008d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d32:	78fb      	ldrb	r3, [r7, #3]
 8008d34:	f003 020f 	and.w	r2, r3, #15
 8008d38:	6879      	ldr	r1, [r7, #4]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	3318      	adds	r3, #24
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d02f      	beq.n	8008dac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008d4c:	78fb      	ldrb	r3, [r7, #3]
 8008d4e:	f003 020f 	and.w	r2, r3, #15
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	4613      	mov	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	440b      	add	r3, r1
 8008d5e:	3318      	adds	r3, #24
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	78fb      	ldrb	r3, [r7, #3]
 8008d64:	f003 010f 	and.w	r1, r3, #15
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	00db      	lsls	r3, r3, #3
 8008d6e:	440b      	add	r3, r1
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4403      	add	r3, r0
 8008d74:	331c      	adds	r3, #28
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d7c:	fb01 f303 	mul.w	r3, r1, r3
 8008d80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d112      	bne.n	8008dac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008d86:	78fb      	ldrb	r3, [r7, #3]
 8008d88:	f003 020f 	and.w	r2, r3, #15
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	440b      	add	r3, r1
 8008d98:	3318      	adds	r3, #24
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d9e:	78f9      	ldrb	r1, [r7, #3]
 8008da0:	2300      	movs	r3, #0
 8008da2:	2200      	movs	r2, #0
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f002 f934 	bl	800b012 <USBD_LL_Transmit>
 8008daa:	e01f      	b.n	8008dec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	33b0      	adds	r3, #176	@ 0xb0
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d010      	beq.n	8008dec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	33b0      	adds	r3, #176	@ 0xb0
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008de8:	78fa      	ldrb	r2, [r7, #3]
 8008dea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	32b0      	adds	r2, #176	@ 0xb0
 8008e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	32b0      	adds	r2, #176	@ 0xb0
 8008e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e01a      	b.n	8008e5e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e28:	78fb      	ldrb	r3, [r7, #3]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f002 f932 	bl	800b096 <USBD_LL_GetRxDataSize>
 8008e32:	4602      	mov	r2, r0
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	33b0      	adds	r3, #176	@ 0xb0
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008e58:	4611      	mov	r1, r2
 8008e5a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	32b0      	adds	r2, #176	@ 0xb0
 8008e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e024      	b.n	8008ed2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	33b0      	adds	r3, #176	@ 0xb0
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d019      	beq.n	8008ed0 <USBD_CDC_EP0_RxReady+0x6a>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008ea2:	2bff      	cmp	r3, #255	@ 0xff
 8008ea4:	d014      	beq.n	8008ed0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	33b0      	adds	r3, #176	@ 0xb0
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008ebe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ec6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	22ff      	movs	r2, #255	@ 0xff
 8008ecc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ee4:	2182      	movs	r1, #130	@ 0x82
 8008ee6:	4818      	ldr	r0, [pc, #96]	@ (8008f48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ee8:	f000 fd0f 	bl	800990a <USBD_GetEpDesc>
 8008eec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008eee:	2101      	movs	r1, #1
 8008ef0:	4815      	ldr	r0, [pc, #84]	@ (8008f48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ef2:	f000 fd0a 	bl	800990a <USBD_GetEpDesc>
 8008ef6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ef8:	2181      	movs	r1, #129	@ 0x81
 8008efa:	4813      	ldr	r0, [pc, #76]	@ (8008f48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008efc:	f000 fd05 	bl	800990a <USBD_GetEpDesc>
 8008f00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	2210      	movs	r2, #16
 8008f0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d006      	beq.n	8008f22 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f1c:	711a      	strb	r2, [r3, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d006      	beq.n	8008f36 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f30:	711a      	strb	r2, [r3, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2243      	movs	r2, #67	@ 0x43
 8008f3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f3c:	4b02      	ldr	r3, [pc, #8]	@ (8008f48 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20000054 	.word	0x20000054

08008f4c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f54:	2182      	movs	r1, #130	@ 0x82
 8008f56:	4818      	ldr	r0, [pc, #96]	@ (8008fb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f58:	f000 fcd7 	bl	800990a <USBD_GetEpDesc>
 8008f5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f5e:	2101      	movs	r1, #1
 8008f60:	4815      	ldr	r0, [pc, #84]	@ (8008fb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f62:	f000 fcd2 	bl	800990a <USBD_GetEpDesc>
 8008f66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f68:	2181      	movs	r1, #129	@ 0x81
 8008f6a:	4813      	ldr	r0, [pc, #76]	@ (8008fb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f6c:	f000 fccd 	bl	800990a <USBD_GetEpDesc>
 8008f70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	2210      	movs	r2, #16
 8008f7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d006      	beq.n	8008f92 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	2200      	movs	r2, #0
 8008f88:	711a      	strb	r2, [r3, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f042 0202 	orr.w	r2, r2, #2
 8008f90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d006      	beq.n	8008fa6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	711a      	strb	r2, [r3, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f042 0202 	orr.w	r2, r2, #2
 8008fa4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2243      	movs	r2, #67	@ 0x43
 8008faa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008fac:	4b02      	ldr	r3, [pc, #8]	@ (8008fb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20000054 	.word	0x20000054

08008fbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fc4:	2182      	movs	r1, #130	@ 0x82
 8008fc6:	4818      	ldr	r0, [pc, #96]	@ (8009028 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fc8:	f000 fc9f 	bl	800990a <USBD_GetEpDesc>
 8008fcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fce:	2101      	movs	r1, #1
 8008fd0:	4815      	ldr	r0, [pc, #84]	@ (8009028 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fd2:	f000 fc9a 	bl	800990a <USBD_GetEpDesc>
 8008fd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fd8:	2181      	movs	r1, #129	@ 0x81
 8008fda:	4813      	ldr	r0, [pc, #76]	@ (8009028 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fdc:	f000 fc95 	bl	800990a <USBD_GetEpDesc>
 8008fe0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2210      	movs	r2, #16
 8008fec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d006      	beq.n	8009002 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ffc:	711a      	strb	r2, [r3, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d006      	beq.n	8009016 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009010:	711a      	strb	r2, [r3, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2243      	movs	r2, #67	@ 0x43
 800901a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800901c:	4b02      	ldr	r3, [pc, #8]	@ (8009028 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800901e:	4618      	mov	r0, r3
 8009020:	3718      	adds	r7, #24
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20000054 	.word	0x20000054

0800902c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	220a      	movs	r2, #10
 8009038:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800903a:	4b03      	ldr	r3, [pc, #12]	@ (8009048 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800903c:	4618      	mov	r0, r3
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	20000010 	.word	0x20000010

0800904c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d101      	bne.n	8009060 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800905c:	2303      	movs	r3, #3
 800905e:	e009      	b.n	8009074 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	33b0      	adds	r3, #176	@ 0xb0
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009080:	b480      	push	{r7}
 8009082:	b087      	sub	sp, #28
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	32b0      	adds	r2, #176	@ 0xb0
 8009096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e008      	b.n	80090b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	371c      	adds	r7, #28
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	32b0      	adds	r2, #176	@ 0xb0
 80090d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e004      	b.n	80090f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
	...

08009100 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	32b0      	adds	r2, #176	@ 0xb0
 8009112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009116:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	32b0      	adds	r2, #176	@ 0xb0
 8009122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800912a:	2303      	movs	r3, #3
 800912c:	e018      	b.n	8009160 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	7c1b      	ldrb	r3, [r3, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10a      	bne.n	800914c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009136:	4b0c      	ldr	r3, [pc, #48]	@ (8009168 <USBD_CDC_ReceivePacket+0x68>)
 8009138:	7819      	ldrb	r1, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009140:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f001 ff85 	bl	800b054 <USBD_LL_PrepareReceive>
 800914a:	e008      	b.n	800915e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800914c:	4b06      	ldr	r3, [pc, #24]	@ (8009168 <USBD_CDC_ReceivePacket+0x68>)
 800914e:	7819      	ldrb	r1, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009156:	2340      	movs	r3, #64	@ 0x40
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f001 ff7b 	bl	800b054 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20000098 	.word	0x20000098

0800916c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	4613      	mov	r3, r2
 8009178:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009180:	2303      	movs	r3, #3
 8009182:	e01f      	b.n	80091c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d003      	beq.n	80091aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	79fa      	ldrb	r2, [r7, #7]
 80091b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f001 fdf5 	bl	800ada8 <USBD_LL_Init>
 80091be:	4603      	mov	r3, r0
 80091c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d101      	bne.n	80091e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e025      	b.n	8009230 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	32ae      	adds	r2, #174	@ 0xae
 80091f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00f      	beq.n	8009220 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	32ae      	adds	r2, #174	@ 0xae
 800920a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009210:	f107 020e 	add.w	r2, r7, #14
 8009214:	4610      	mov	r0, r2
 8009216:	4798      	blx	r3
 8009218:	4602      	mov	r2, r0
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 fdfd 	bl	800ae40 <USBD_LL_Start>
 8009246:	4603      	mov	r3, r0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009258:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800925a:	4618      	mov	r0, r3
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	460b      	mov	r3, r1
 8009270:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800927c:	2b00      	cmp	r3, #0
 800927e:	d009      	beq.n	8009294 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	78fa      	ldrb	r2, [r7, #3]
 800928a:	4611      	mov	r1, r2
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	4798      	blx	r3
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009294:	7bfb      	ldrb	r3, [r7, #15]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	460b      	mov	r3, r1
 80092a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	78fa      	ldrb	r2, [r7, #3]
 80092b8:	4611      	mov	r1, r2
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	4798      	blx	r3
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80092c4:	2303      	movs	r3, #3
 80092c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f001 f90c 	bl	800a502 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80092f8:	461a      	mov	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009306:	f003 031f 	and.w	r3, r3, #31
 800930a:	2b02      	cmp	r3, #2
 800930c:	d01a      	beq.n	8009344 <USBD_LL_SetupStage+0x72>
 800930e:	2b02      	cmp	r3, #2
 8009310:	d822      	bhi.n	8009358 <USBD_LL_SetupStage+0x86>
 8009312:	2b00      	cmp	r3, #0
 8009314:	d002      	beq.n	800931c <USBD_LL_SetupStage+0x4a>
 8009316:	2b01      	cmp	r3, #1
 8009318:	d00a      	beq.n	8009330 <USBD_LL_SetupStage+0x5e>
 800931a:	e01d      	b.n	8009358 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fb63 	bl	80099f0 <USBD_StdDevReq>
 800932a:	4603      	mov	r3, r0
 800932c:	73fb      	strb	r3, [r7, #15]
      break;
 800932e:	e020      	b.n	8009372 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fbcb 	bl	8009ad4 <USBD_StdItfReq>
 800933e:	4603      	mov	r3, r0
 8009340:	73fb      	strb	r3, [r7, #15]
      break;
 8009342:	e016      	b.n	8009372 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fc2d 	bl	8009bac <USBD_StdEPReq>
 8009352:	4603      	mov	r3, r0
 8009354:	73fb      	strb	r3, [r7, #15]
      break;
 8009356:	e00c      	b.n	8009372 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800935e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009362:	b2db      	uxtb	r3, r3
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 fdca 	bl	800af00 <USBD_LL_StallEP>
 800936c:	4603      	mov	r3, r0
 800936e:	73fb      	strb	r3, [r7, #15]
      break;
 8009370:	bf00      	nop
  }

  return ret;
 8009372:	7bfb      	ldrb	r3, [r7, #15]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	460b      	mov	r3, r1
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800938e:	7afb      	ldrb	r3, [r7, #11]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d16e      	bne.n	8009472 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800939a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	f040 8098 	bne.w	80094d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d913      	bls.n	80093dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	1ad2      	subs	r2, r2, r3
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	68da      	ldr	r2, [r3, #12]
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	4293      	cmp	r3, r2
 80093cc:	bf28      	it	cs
 80093ce:	4613      	movcs	r3, r2
 80093d0:	461a      	mov	r2, r3
 80093d2:	6879      	ldr	r1, [r7, #4]
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f001 f994 	bl	800a702 <USBD_CtlContinueRx>
 80093da:	e07d      	b.n	80094d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80093e2:	f003 031f 	and.w	r3, r3, #31
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d014      	beq.n	8009414 <USBD_LL_DataOutStage+0x98>
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d81d      	bhi.n	800942a <USBD_LL_DataOutStage+0xae>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d002      	beq.n	80093f8 <USBD_LL_DataOutStage+0x7c>
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d003      	beq.n	80093fe <USBD_LL_DataOutStage+0x82>
 80093f6:	e018      	b.n	800942a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80093f8:	2300      	movs	r3, #0
 80093fa:	75bb      	strb	r3, [r7, #22]
            break;
 80093fc:	e018      	b.n	8009430 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009404:	b2db      	uxtb	r3, r3
 8009406:	4619      	mov	r1, r3
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 fa64 	bl	80098d6 <USBD_CoreFindIF>
 800940e:	4603      	mov	r3, r0
 8009410:	75bb      	strb	r3, [r7, #22]
            break;
 8009412:	e00d      	b.n	8009430 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800941a:	b2db      	uxtb	r3, r3
 800941c:	4619      	mov	r1, r3
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f000 fa66 	bl	80098f0 <USBD_CoreFindEP>
 8009424:	4603      	mov	r3, r0
 8009426:	75bb      	strb	r3, [r7, #22]
            break;
 8009428:	e002      	b.n	8009430 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	75bb      	strb	r3, [r7, #22]
            break;
 800942e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009430:	7dbb      	ldrb	r3, [r7, #22]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d119      	bne.n	800946a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b03      	cmp	r3, #3
 8009440:	d113      	bne.n	800946a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009442:	7dba      	ldrb	r2, [r7, #22]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	32ae      	adds	r2, #174	@ 0xae
 8009448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00b      	beq.n	800946a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009452:	7dba      	ldrb	r2, [r7, #22]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800945a:	7dba      	ldrb	r2, [r7, #22]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	32ae      	adds	r2, #174	@ 0xae
 8009460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f001 f95a 	bl	800a724 <USBD_CtlSendStatus>
 8009470:	e032      	b.n	80094d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009472:	7afb      	ldrb	r3, [r7, #11]
 8009474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009478:	b2db      	uxtb	r3, r3
 800947a:	4619      	mov	r1, r3
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 fa37 	bl	80098f0 <USBD_CoreFindEP>
 8009482:	4603      	mov	r3, r0
 8009484:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009486:	7dbb      	ldrb	r3, [r7, #22]
 8009488:	2bff      	cmp	r3, #255	@ 0xff
 800948a:	d025      	beq.n	80094d8 <USBD_LL_DataOutStage+0x15c>
 800948c:	7dbb      	ldrb	r3, [r7, #22]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d122      	bne.n	80094d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b03      	cmp	r3, #3
 800949c:	d117      	bne.n	80094ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800949e:	7dba      	ldrb	r2, [r7, #22]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	32ae      	adds	r2, #174	@ 0xae
 80094a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00f      	beq.n	80094ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80094ae:	7dba      	ldrb	r2, [r7, #22]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80094b6:	7dba      	ldrb	r2, [r7, #22]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	32ae      	adds	r2, #174	@ 0xae
 80094bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	7afa      	ldrb	r2, [r7, #11]
 80094c4:	4611      	mov	r1, r2
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	4798      	blx	r3
 80094ca:	4603      	mov	r3, r0
 80094cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	e000      	b.n	80094da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b086      	sub	sp, #24
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	60f8      	str	r0, [r7, #12]
 80094ea:	460b      	mov	r3, r1
 80094ec:	607a      	str	r2, [r7, #4]
 80094ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80094f0:	7afb      	ldrb	r3, [r7, #11]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d16f      	bne.n	80095d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3314      	adds	r3, #20
 80094fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009502:	2b02      	cmp	r3, #2
 8009504:	d15a      	bne.n	80095bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	689a      	ldr	r2, [r3, #8]
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	429a      	cmp	r2, r3
 8009510:	d914      	bls.n	800953c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	689a      	ldr	r2, [r3, #8]
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	1ad2      	subs	r2, r2, r3
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	461a      	mov	r2, r3
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f001 f8bc 	bl	800a6a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800952e:	2300      	movs	r3, #0
 8009530:	2200      	movs	r2, #0
 8009532:	2100      	movs	r1, #0
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f001 fd8d 	bl	800b054 <USBD_LL_PrepareReceive>
 800953a:	e03f      	b.n	80095bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	68da      	ldr	r2, [r3, #12]
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	429a      	cmp	r2, r3
 8009546:	d11c      	bne.n	8009582 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009550:	429a      	cmp	r2, r3
 8009552:	d316      	bcc.n	8009582 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800955e:	429a      	cmp	r2, r3
 8009560:	d20f      	bcs.n	8009582 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009562:	2200      	movs	r2, #0
 8009564:	2100      	movs	r1, #0
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f001 f89d 	bl	800a6a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009574:	2300      	movs	r3, #0
 8009576:	2200      	movs	r2, #0
 8009578:	2100      	movs	r1, #0
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f001 fd6a 	bl	800b054 <USBD_LL_PrepareReceive>
 8009580:	e01c      	b.n	80095bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b03      	cmp	r3, #3
 800958c:	d10f      	bne.n	80095ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d009      	beq.n	80095ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095ae:	2180      	movs	r1, #128	@ 0x80
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f001 fca5 	bl	800af00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f001 f8c7 	bl	800a74a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d03a      	beq.n	800963c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f7ff fe42 	bl	8009250 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80095d4:	e032      	b.n	800963c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80095d6:	7afb      	ldrb	r3, [r7, #11]
 80095d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	4619      	mov	r1, r3
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 f985 	bl	80098f0 <USBD_CoreFindEP>
 80095e6:	4603      	mov	r3, r0
 80095e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
 80095ec:	2bff      	cmp	r3, #255	@ 0xff
 80095ee:	d025      	beq.n	800963c <USBD_LL_DataInStage+0x15a>
 80095f0:	7dfb      	ldrb	r3, [r7, #23]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d122      	bne.n	800963c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b03      	cmp	r3, #3
 8009600:	d11c      	bne.n	800963c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009602:	7dfa      	ldrb	r2, [r7, #23]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	32ae      	adds	r2, #174	@ 0xae
 8009608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d014      	beq.n	800963c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009612:	7dfa      	ldrb	r2, [r7, #23]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800961a:	7dfa      	ldrb	r2, [r7, #23]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	32ae      	adds	r2, #174	@ 0xae
 8009620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	7afa      	ldrb	r2, [r7, #11]
 8009628:	4611      	mov	r1, r2
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	4798      	blx	r3
 800962e:	4603      	mov	r3, r0
 8009630:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009632:	7dbb      	ldrb	r3, [r7, #22]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009638:	7dbb      	ldrb	r3, [r7, #22]
 800963a:	e000      	b.n	800963e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800967e:	2b00      	cmp	r3, #0
 8009680:	d014      	beq.n	80096ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00e      	beq.n	80096ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	6852      	ldr	r2, [r2, #4]
 800969a:	b2d2      	uxtb	r2, r2
 800969c:	4611      	mov	r1, r2
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	4798      	blx	r3
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80096a8:	2303      	movs	r3, #3
 80096aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096ac:	2340      	movs	r3, #64	@ 0x40
 80096ae:	2200      	movs	r2, #0
 80096b0:	2100      	movs	r1, #0
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f001 fbdf 	bl	800ae76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2240      	movs	r2, #64	@ 0x40
 80096c4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096c8:	2340      	movs	r3, #64	@ 0x40
 80096ca:	2200      	movs	r2, #0
 80096cc:	2180      	movs	r1, #128	@ 0x80
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f001 fbd1 	bl	800ae76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2240      	movs	r2, #64	@ 0x40
 80096de:	621a      	str	r2, [r3, #32]

  return ret;
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	460b      	mov	r3, r1
 80096f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	78fa      	ldrb	r2, [r7, #3]
 80096fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800970a:	b480      	push	{r7}
 800970c:	b083      	sub	sp, #12
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b04      	cmp	r3, #4
 800971c:	d006      	beq.n	800972c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009724:	b2da      	uxtb	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2204      	movs	r2, #4
 8009730:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009742:	b480      	push	{r7}
 8009744:	b083      	sub	sp, #12
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b04      	cmp	r3, #4
 8009754:	d106      	bne.n	8009764 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800975c:	b2da      	uxtb	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b03      	cmp	r3, #3
 8009784:	d110      	bne.n	80097a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009796:	69db      	ldr	r3, [r3, #28]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d005      	beq.n	80097a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	460b      	mov	r3, r1
 80097bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	32ae      	adds	r2, #174	@ 0xae
 80097c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e01c      	b.n	800980e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2b03      	cmp	r3, #3
 80097de:	d115      	bne.n	800980c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	32ae      	adds	r2, #174	@ 0xae
 80097ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ee:	6a1b      	ldr	r3, [r3, #32]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00b      	beq.n	800980c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	32ae      	adds	r2, #174	@ 0xae
 80097fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	78fa      	ldrb	r2, [r7, #3]
 8009806:	4611      	mov	r1, r2
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b082      	sub	sp, #8
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	460b      	mov	r3, r1
 8009820:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	32ae      	adds	r2, #174	@ 0xae
 800982c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d101      	bne.n	8009838 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009834:	2303      	movs	r3, #3
 8009836:	e01c      	b.n	8009872 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b03      	cmp	r3, #3
 8009842:	d115      	bne.n	8009870 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	32ae      	adds	r2, #174	@ 0xae
 800984e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	32ae      	adds	r2, #174	@ 0xae
 8009862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009868:	78fa      	ldrb	r2, [r7, #3]
 800986a:	4611      	mov	r1, r2
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800987a:	b480      	push	{r7}
 800987c:	b083      	sub	sp, #12
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00e      	beq.n	80098cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	6852      	ldr	r2, [r2, #4]
 80098ba:	b2d2      	uxtb	r2, r2
 80098bc:	4611      	mov	r1, r2
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	4798      	blx	r3
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80098c8:	2303      	movs	r3, #3
 80098ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098d6:	b480      	push	{r7}
 80098d8:	b083      	sub	sp, #12
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	460b      	mov	r3, r1
 80098e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098fe:	4618      	mov	r0, r3
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b086      	sub	sp, #24
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	460b      	mov	r3, r1
 8009914:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800991e:	2300      	movs	r3, #0
 8009920:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	885b      	ldrh	r3, [r3, #2]
 8009926:	b29b      	uxth	r3, r3
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	7812      	ldrb	r2, [r2, #0]
 800992c:	4293      	cmp	r3, r2
 800992e:	d91f      	bls.n	8009970 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009936:	e013      	b.n	8009960 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009938:	f107 030a 	add.w	r3, r7, #10
 800993c:	4619      	mov	r1, r3
 800993e:	6978      	ldr	r0, [r7, #20]
 8009940:	f000 f81b 	bl	800997a <USBD_GetNextDesc>
 8009944:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	785b      	ldrb	r3, [r3, #1]
 800994a:	2b05      	cmp	r3, #5
 800994c:	d108      	bne.n	8009960 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	789b      	ldrb	r3, [r3, #2]
 8009956:	78fa      	ldrb	r2, [r7, #3]
 8009958:	429a      	cmp	r2, r3
 800995a:	d008      	beq.n	800996e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800995c:	2300      	movs	r3, #0
 800995e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	885b      	ldrh	r3, [r3, #2]
 8009964:	b29a      	uxth	r2, r3
 8009966:	897b      	ldrh	r3, [r7, #10]
 8009968:	429a      	cmp	r2, r3
 800996a:	d8e5      	bhi.n	8009938 <USBD_GetEpDesc+0x2e>
 800996c:	e000      	b.n	8009970 <USBD_GetEpDesc+0x66>
          break;
 800996e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009970:	693b      	ldr	r3, [r7, #16]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3718      	adds	r7, #24
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800997a:	b480      	push	{r7}
 800997c:	b085      	sub	sp, #20
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	881b      	ldrh	r3, [r3, #0]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	7812      	ldrb	r2, [r2, #0]
 8009990:	4413      	add	r3, r2
 8009992:	b29a      	uxth	r2, r3
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	461a      	mov	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4413      	add	r3, r2
 80099a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80099a4:	68fb      	ldr	r3, [r7, #12]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b087      	sub	sp, #28
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	3301      	adds	r3, #1
 80099c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80099d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80099d4:	021b      	lsls	r3, r3, #8
 80099d6:	b21a      	sxth	r2, r3
 80099d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099dc:	4313      	orrs	r3, r2
 80099de:	b21b      	sxth	r3, r3
 80099e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80099e2:	89fb      	ldrh	r3, [r7, #14]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	371c      	adds	r7, #28
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a06:	2b40      	cmp	r3, #64	@ 0x40
 8009a08:	d005      	beq.n	8009a16 <USBD_StdDevReq+0x26>
 8009a0a:	2b40      	cmp	r3, #64	@ 0x40
 8009a0c:	d857      	bhi.n	8009abe <USBD_StdDevReq+0xce>
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00f      	beq.n	8009a32 <USBD_StdDevReq+0x42>
 8009a12:	2b20      	cmp	r3, #32
 8009a14:	d153      	bne.n	8009abe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	32ae      	adds	r2, #174	@ 0xae
 8009a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	4798      	blx	r3
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a30:	e04a      	b.n	8009ac8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	785b      	ldrb	r3, [r3, #1]
 8009a36:	2b09      	cmp	r3, #9
 8009a38:	d83b      	bhi.n	8009ab2 <USBD_StdDevReq+0xc2>
 8009a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a40 <USBD_StdDevReq+0x50>)
 8009a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a40:	08009a95 	.word	0x08009a95
 8009a44:	08009aa9 	.word	0x08009aa9
 8009a48:	08009ab3 	.word	0x08009ab3
 8009a4c:	08009a9f 	.word	0x08009a9f
 8009a50:	08009ab3 	.word	0x08009ab3
 8009a54:	08009a73 	.word	0x08009a73
 8009a58:	08009a69 	.word	0x08009a69
 8009a5c:	08009ab3 	.word	0x08009ab3
 8009a60:	08009a8b 	.word	0x08009a8b
 8009a64:	08009a7d 	.word	0x08009a7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fa3c 	bl	8009ee8 <USBD_GetDescriptor>
          break;
 8009a70:	e024      	b.n	8009abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fba1 	bl	800a1bc <USBD_SetAddress>
          break;
 8009a7a:	e01f      	b.n	8009abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fbe0 	bl	800a244 <USBD_SetConfig>
 8009a84:	4603      	mov	r3, r0
 8009a86:	73fb      	strb	r3, [r7, #15]
          break;
 8009a88:	e018      	b.n	8009abc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fc83 	bl	800a398 <USBD_GetConfig>
          break;
 8009a92:	e013      	b.n	8009abc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fcb4 	bl	800a404 <USBD_GetStatus>
          break;
 8009a9c:	e00e      	b.n	8009abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fce3 	bl	800a46c <USBD_SetFeature>
          break;
 8009aa6:	e009      	b.n	8009abc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fd07 	bl	800a4be <USBD_ClrFeature>
          break;
 8009ab0:	e004      	b.n	8009abc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fd5e 	bl	800a576 <USBD_CtlError>
          break;
 8009aba:	bf00      	nop
      }
      break;
 8009abc:	e004      	b.n	8009ac8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009abe:	6839      	ldr	r1, [r7, #0]
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fd58 	bl	800a576 <USBD_CtlError>
      break;
 8009ac6:	bf00      	nop
  }

  return ret;
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop

08009ad4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009aea:	2b40      	cmp	r3, #64	@ 0x40
 8009aec:	d005      	beq.n	8009afa <USBD_StdItfReq+0x26>
 8009aee:	2b40      	cmp	r3, #64	@ 0x40
 8009af0:	d852      	bhi.n	8009b98 <USBD_StdItfReq+0xc4>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <USBD_StdItfReq+0x26>
 8009af6:	2b20      	cmp	r3, #32
 8009af8:	d14e      	bne.n	8009b98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	3b01      	subs	r3, #1
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d840      	bhi.n	8009b8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	889b      	ldrh	r3, [r3, #4]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d836      	bhi.n	8009b80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	889b      	ldrh	r3, [r3, #4]
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff fedb 	bl	80098d6 <USBD_CoreFindIF>
 8009b20:	4603      	mov	r3, r0
 8009b22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	2bff      	cmp	r3, #255	@ 0xff
 8009b28:	d01d      	beq.n	8009b66 <USBD_StdItfReq+0x92>
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d11a      	bne.n	8009b66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009b30:	7bba      	ldrb	r2, [r7, #14]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	32ae      	adds	r2, #174	@ 0xae
 8009b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00f      	beq.n	8009b60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009b40:	7bba      	ldrb	r2, [r7, #14]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b48:	7bba      	ldrb	r2, [r7, #14]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	32ae      	adds	r2, #174	@ 0xae
 8009b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	4798      	blx	r3
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b5e:	e004      	b.n	8009b6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009b60:	2303      	movs	r3, #3
 8009b62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b64:	e001      	b.n	8009b6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009b66:	2303      	movs	r3, #3
 8009b68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	88db      	ldrh	r3, [r3, #6]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d110      	bne.n	8009b94 <USBD_StdItfReq+0xc0>
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10d      	bne.n	8009b94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fdd3 	bl	800a724 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b7e:	e009      	b.n	8009b94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fcf7 	bl	800a576 <USBD_CtlError>
          break;
 8009b88:	e004      	b.n	8009b94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fcf2 	bl	800a576 <USBD_CtlError>
          break;
 8009b92:	e000      	b.n	8009b96 <USBD_StdItfReq+0xc2>
          break;
 8009b94:	bf00      	nop
      }
      break;
 8009b96:	e004      	b.n	8009ba2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 fceb 	bl	800a576 <USBD_CtlError>
      break;
 8009ba0:	bf00      	nop
  }

  return ret;
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	889b      	ldrh	r3, [r3, #4]
 8009bbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bc8:	2b40      	cmp	r3, #64	@ 0x40
 8009bca:	d007      	beq.n	8009bdc <USBD_StdEPReq+0x30>
 8009bcc:	2b40      	cmp	r3, #64	@ 0x40
 8009bce:	f200 817f 	bhi.w	8009ed0 <USBD_StdEPReq+0x324>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d02a      	beq.n	8009c2c <USBD_StdEPReq+0x80>
 8009bd6:	2b20      	cmp	r3, #32
 8009bd8:	f040 817a 	bne.w	8009ed0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009bdc:	7bbb      	ldrb	r3, [r7, #14]
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7ff fe85 	bl	80098f0 <USBD_CoreFindEP>
 8009be6:	4603      	mov	r3, r0
 8009be8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bea:	7b7b      	ldrb	r3, [r7, #13]
 8009bec:	2bff      	cmp	r3, #255	@ 0xff
 8009bee:	f000 8174 	beq.w	8009eda <USBD_StdEPReq+0x32e>
 8009bf2:	7b7b      	ldrb	r3, [r7, #13]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f040 8170 	bne.w	8009eda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009bfa:	7b7a      	ldrb	r2, [r7, #13]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009c02:	7b7a      	ldrb	r2, [r7, #13]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	32ae      	adds	r2, #174	@ 0xae
 8009c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f000 8163 	beq.w	8009eda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c14:	7b7a      	ldrb	r2, [r7, #13]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	32ae      	adds	r2, #174	@ 0xae
 8009c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	4798      	blx	r3
 8009c26:	4603      	mov	r3, r0
 8009c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c2a:	e156      	b.n	8009eda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	785b      	ldrb	r3, [r3, #1]
 8009c30:	2b03      	cmp	r3, #3
 8009c32:	d008      	beq.n	8009c46 <USBD_StdEPReq+0x9a>
 8009c34:	2b03      	cmp	r3, #3
 8009c36:	f300 8145 	bgt.w	8009ec4 <USBD_StdEPReq+0x318>
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f000 809b 	beq.w	8009d76 <USBD_StdEPReq+0x1ca>
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d03c      	beq.n	8009cbe <USBD_StdEPReq+0x112>
 8009c44:	e13e      	b.n	8009ec4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d002      	beq.n	8009c58 <USBD_StdEPReq+0xac>
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	d016      	beq.n	8009c84 <USBD_StdEPReq+0xd8>
 8009c56:	e02c      	b.n	8009cb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00d      	beq.n	8009c7a <USBD_StdEPReq+0xce>
 8009c5e:	7bbb      	ldrb	r3, [r7, #14]
 8009c60:	2b80      	cmp	r3, #128	@ 0x80
 8009c62:	d00a      	beq.n	8009c7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c64:	7bbb      	ldrb	r3, [r7, #14]
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f001 f949 	bl	800af00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c6e:	2180      	movs	r1, #128	@ 0x80
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 f945 	bl	800af00 <USBD_LL_StallEP>
 8009c76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c78:	e020      	b.n	8009cbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fc7a 	bl	800a576 <USBD_CtlError>
              break;
 8009c82:	e01b      	b.n	8009cbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	885b      	ldrh	r3, [r3, #2]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10e      	bne.n	8009caa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00b      	beq.n	8009caa <USBD_StdEPReq+0xfe>
 8009c92:	7bbb      	ldrb	r3, [r7, #14]
 8009c94:	2b80      	cmp	r3, #128	@ 0x80
 8009c96:	d008      	beq.n	8009caa <USBD_StdEPReq+0xfe>
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	88db      	ldrh	r3, [r3, #6]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d104      	bne.n	8009caa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 f92b 	bl	800af00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fd3a 	bl	800a724 <USBD_CtlSendStatus>

              break;
 8009cb0:	e004      	b.n	8009cbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fc5e 	bl	800a576 <USBD_CtlError>
              break;
 8009cba:	bf00      	nop
          }
          break;
 8009cbc:	e107      	b.n	8009ece <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d002      	beq.n	8009cd0 <USBD_StdEPReq+0x124>
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d016      	beq.n	8009cfc <USBD_StdEPReq+0x150>
 8009cce:	e04b      	b.n	8009d68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00d      	beq.n	8009cf2 <USBD_StdEPReq+0x146>
 8009cd6:	7bbb      	ldrb	r3, [r7, #14]
 8009cd8:	2b80      	cmp	r3, #128	@ 0x80
 8009cda:	d00a      	beq.n	8009cf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f001 f90d 	bl	800af00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ce6:	2180      	movs	r1, #128	@ 0x80
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f001 f909 	bl	800af00 <USBD_LL_StallEP>
 8009cee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cf0:	e040      	b.n	8009d74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fc3e 	bl	800a576 <USBD_CtlError>
              break;
 8009cfa:	e03b      	b.n	8009d74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	885b      	ldrh	r3, [r3, #2]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d136      	bne.n	8009d72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d04:	7bbb      	ldrb	r3, [r7, #14]
 8009d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d004      	beq.n	8009d18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f001 f913 	bl	800af3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fd03 	bl	800a724 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d1e:	7bbb      	ldrb	r3, [r7, #14]
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7ff fde4 	bl	80098f0 <USBD_CoreFindEP>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d2c:	7b7b      	ldrb	r3, [r7, #13]
 8009d2e:	2bff      	cmp	r3, #255	@ 0xff
 8009d30:	d01f      	beq.n	8009d72 <USBD_StdEPReq+0x1c6>
 8009d32:	7b7b      	ldrb	r3, [r7, #13]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d11c      	bne.n	8009d72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009d38:	7b7a      	ldrb	r2, [r7, #13]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009d40:	7b7a      	ldrb	r2, [r7, #13]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	32ae      	adds	r2, #174	@ 0xae
 8009d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d010      	beq.n	8009d72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d50:	7b7a      	ldrb	r2, [r7, #13]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	32ae      	adds	r2, #174	@ 0xae
 8009d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	4798      	blx	r3
 8009d62:	4603      	mov	r3, r0
 8009d64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009d66:	e004      	b.n	8009d72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fc03 	bl	800a576 <USBD_CtlError>
              break;
 8009d70:	e000      	b.n	8009d74 <USBD_StdEPReq+0x1c8>
              break;
 8009d72:	bf00      	nop
          }
          break;
 8009d74:	e0ab      	b.n	8009ece <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d002      	beq.n	8009d88 <USBD_StdEPReq+0x1dc>
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d032      	beq.n	8009dec <USBD_StdEPReq+0x240>
 8009d86:	e097      	b.n	8009eb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d88:	7bbb      	ldrb	r3, [r7, #14]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d007      	beq.n	8009d9e <USBD_StdEPReq+0x1f2>
 8009d8e:	7bbb      	ldrb	r3, [r7, #14]
 8009d90:	2b80      	cmp	r3, #128	@ 0x80
 8009d92:	d004      	beq.n	8009d9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fbed 	bl	800a576 <USBD_CtlError>
                break;
 8009d9c:	e091      	b.n	8009ec2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	da0b      	bge.n	8009dbe <USBD_StdEPReq+0x212>
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
 8009da8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009dac:	4613      	mov	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	3310      	adds	r3, #16
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	4413      	add	r3, r2
 8009dba:	3304      	adds	r3, #4
 8009dbc:	e00b      	b.n	8009dd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
 8009dc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2202      	movs	r2, #2
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fc43 	bl	800a670 <USBD_CtlSendData>
              break;
 8009dea:	e06a      	b.n	8009ec2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	da11      	bge.n	8009e18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
 8009df6:	f003 020f 	and.w	r2, r3, #15
 8009dfa:	6879      	ldr	r1, [r7, #4]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4413      	add	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	440b      	add	r3, r1
 8009e06:	3324      	adds	r3, #36	@ 0x24
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d117      	bne.n	8009e3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fbb0 	bl	800a576 <USBD_CtlError>
                  break;
 8009e16:	e054      	b.n	8009ec2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
 8009e1a:	f003 020f 	and.w	r2, r3, #15
 8009e1e:	6879      	ldr	r1, [r7, #4]
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	440b      	add	r3, r1
 8009e2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d104      	bne.n	8009e3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fb9d 	bl	800a576 <USBD_CtlError>
                  break;
 8009e3c:	e041      	b.n	8009ec2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	da0b      	bge.n	8009e5e <USBD_StdEPReq+0x2b2>
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	3310      	adds	r3, #16
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	4413      	add	r3, r2
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	e00b      	b.n	8009e76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e64:	4613      	mov	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	4413      	add	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	4413      	add	r3, r2
 8009e74:	3304      	adds	r3, #4
 8009e76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e78:	7bbb      	ldrb	r3, [r7, #14]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d002      	beq.n	8009e84 <USBD_StdEPReq+0x2d8>
 8009e7e:	7bbb      	ldrb	r3, [r7, #14]
 8009e80:	2b80      	cmp	r3, #128	@ 0x80
 8009e82:	d103      	bne.n	8009e8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2200      	movs	r2, #0
 8009e88:	601a      	str	r2, [r3, #0]
 8009e8a:	e00e      	b.n	8009eaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f001 f873 	bl	800af7c <USBD_LL_IsStallEP>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d003      	beq.n	8009ea4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	e002      	b.n	8009eaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	2202      	movs	r2, #2
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 fbdd 	bl	800a670 <USBD_CtlSendData>
              break;
 8009eb6:	e004      	b.n	8009ec2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fb5b 	bl	800a576 <USBD_CtlError>
              break;
 8009ec0:	bf00      	nop
          }
          break;
 8009ec2:	e004      	b.n	8009ece <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fb55 	bl	800a576 <USBD_CtlError>
          break;
 8009ecc:	bf00      	nop
      }
      break;
 8009ece:	e005      	b.n	8009edc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fb4f 	bl	800a576 <USBD_CtlError>
      break;
 8009ed8:	e000      	b.n	8009edc <USBD_StdEPReq+0x330>
      break;
 8009eda:	bf00      	nop
  }

  return ret;
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
	...

08009ee8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009efa:	2300      	movs	r3, #0
 8009efc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	885b      	ldrh	r3, [r3, #2]
 8009f02:	0a1b      	lsrs	r3, r3, #8
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	3b01      	subs	r3, #1
 8009f08:	2b06      	cmp	r3, #6
 8009f0a:	f200 8128 	bhi.w	800a15e <USBD_GetDescriptor+0x276>
 8009f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f14 <USBD_GetDescriptor+0x2c>)
 8009f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f14:	08009f31 	.word	0x08009f31
 8009f18:	08009f49 	.word	0x08009f49
 8009f1c:	08009f89 	.word	0x08009f89
 8009f20:	0800a15f 	.word	0x0800a15f
 8009f24:	0800a15f 	.word	0x0800a15f
 8009f28:	0800a0ff 	.word	0x0800a0ff
 8009f2c:	0800a12b 	.word	0x0800a12b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	7c12      	ldrb	r2, [r2, #16]
 8009f3c:	f107 0108 	add.w	r1, r7, #8
 8009f40:	4610      	mov	r0, r2
 8009f42:	4798      	blx	r3
 8009f44:	60f8      	str	r0, [r7, #12]
      break;
 8009f46:	e112      	b.n	800a16e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	7c1b      	ldrb	r3, [r3, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10d      	bne.n	8009f6c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f58:	f107 0208 	add.w	r2, r7, #8
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	4798      	blx	r3
 8009f60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	3301      	adds	r3, #1
 8009f66:	2202      	movs	r2, #2
 8009f68:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f6a:	e100      	b.n	800a16e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f74:	f107 0208 	add.w	r2, r7, #8
 8009f78:	4610      	mov	r0, r2
 8009f7a:	4798      	blx	r3
 8009f7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	3301      	adds	r3, #1
 8009f82:	2202      	movs	r2, #2
 8009f84:	701a      	strb	r2, [r3, #0]
      break;
 8009f86:	e0f2      	b.n	800a16e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	885b      	ldrh	r3, [r3, #2]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b05      	cmp	r3, #5
 8009f90:	f200 80ac 	bhi.w	800a0ec <USBD_GetDescriptor+0x204>
 8009f94:	a201      	add	r2, pc, #4	@ (adr r2, 8009f9c <USBD_GetDescriptor+0xb4>)
 8009f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9a:	bf00      	nop
 8009f9c:	08009fb5 	.word	0x08009fb5
 8009fa0:	08009fe9 	.word	0x08009fe9
 8009fa4:	0800a01d 	.word	0x0800a01d
 8009fa8:	0800a051 	.word	0x0800a051
 8009fac:	0800a085 	.word	0x0800a085
 8009fb0:	0800a0b9 	.word	0x0800a0b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00b      	beq.n	8009fd8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	7c12      	ldrb	r2, [r2, #16]
 8009fcc:	f107 0108 	add.w	r1, r7, #8
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	4798      	blx	r3
 8009fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fd6:	e091      	b.n	800a0fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 facb 	bl	800a576 <USBD_CtlError>
            err++;
 8009fe0:	7afb      	ldrb	r3, [r7, #11]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fe6:	e089      	b.n	800a0fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00b      	beq.n	800a00c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	7c12      	ldrb	r2, [r2, #16]
 800a000:	f107 0108 	add.w	r1, r7, #8
 800a004:	4610      	mov	r0, r2
 800a006:	4798      	blx	r3
 800a008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a00a:	e077      	b.n	800a0fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fab1 	bl	800a576 <USBD_CtlError>
            err++;
 800a014:	7afb      	ldrb	r3, [r7, #11]
 800a016:	3301      	adds	r3, #1
 800a018:	72fb      	strb	r3, [r7, #11]
          break;
 800a01a:	e06f      	b.n	800a0fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00b      	beq.n	800a040 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	7c12      	ldrb	r2, [r2, #16]
 800a034:	f107 0108 	add.w	r1, r7, #8
 800a038:	4610      	mov	r0, r2
 800a03a:	4798      	blx	r3
 800a03c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a03e:	e05d      	b.n	800a0fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a040:	6839      	ldr	r1, [r7, #0]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fa97 	bl	800a576 <USBD_CtlError>
            err++;
 800a048:	7afb      	ldrb	r3, [r7, #11]
 800a04a:	3301      	adds	r3, #1
 800a04c:	72fb      	strb	r3, [r7, #11]
          break;
 800a04e:	e055      	b.n	800a0fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00b      	beq.n	800a074 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	7c12      	ldrb	r2, [r2, #16]
 800a068:	f107 0108 	add.w	r1, r7, #8
 800a06c:	4610      	mov	r0, r2
 800a06e:	4798      	blx	r3
 800a070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a072:	e043      	b.n	800a0fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a074:	6839      	ldr	r1, [r7, #0]
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fa7d 	bl	800a576 <USBD_CtlError>
            err++;
 800a07c:	7afb      	ldrb	r3, [r7, #11]
 800a07e:	3301      	adds	r3, #1
 800a080:	72fb      	strb	r3, [r7, #11]
          break;
 800a082:	e03b      	b.n	800a0fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00b      	beq.n	800a0a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	7c12      	ldrb	r2, [r2, #16]
 800a09c:	f107 0108 	add.w	r1, r7, #8
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	4798      	blx	r3
 800a0a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0a6:	e029      	b.n	800a0fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fa63 	bl	800a576 <USBD_CtlError>
            err++;
 800a0b0:	7afb      	ldrb	r3, [r7, #11]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0b6:	e021      	b.n	800a0fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00b      	beq.n	800a0dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ca:	699b      	ldr	r3, [r3, #24]
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	7c12      	ldrb	r2, [r2, #16]
 800a0d0:	f107 0108 	add.w	r1, r7, #8
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	4798      	blx	r3
 800a0d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0da:	e00f      	b.n	800a0fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 fa49 	bl	800a576 <USBD_CtlError>
            err++;
 800a0e4:	7afb      	ldrb	r3, [r7, #11]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ea:	e007      	b.n	800a0fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a0ec:	6839      	ldr	r1, [r7, #0]
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fa41 	bl	800a576 <USBD_CtlError>
          err++;
 800a0f4:	7afb      	ldrb	r3, [r7, #11]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a0fa:	bf00      	nop
      }
      break;
 800a0fc:	e037      	b.n	800a16e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	7c1b      	ldrb	r3, [r3, #16]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d109      	bne.n	800a11a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a10c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a10e:	f107 0208 	add.w	r2, r7, #8
 800a112:	4610      	mov	r0, r2
 800a114:	4798      	blx	r3
 800a116:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a118:	e029      	b.n	800a16e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a11a:	6839      	ldr	r1, [r7, #0]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fa2a 	bl	800a576 <USBD_CtlError>
        err++;
 800a122:	7afb      	ldrb	r3, [r7, #11]
 800a124:	3301      	adds	r3, #1
 800a126:	72fb      	strb	r3, [r7, #11]
      break;
 800a128:	e021      	b.n	800a16e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	7c1b      	ldrb	r3, [r3, #16]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10d      	bne.n	800a14e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a13a:	f107 0208 	add.w	r2, r7, #8
 800a13e:	4610      	mov	r0, r2
 800a140:	4798      	blx	r3
 800a142:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	3301      	adds	r3, #1
 800a148:	2207      	movs	r2, #7
 800a14a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a14c:	e00f      	b.n	800a16e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fa10 	bl	800a576 <USBD_CtlError>
        err++;
 800a156:	7afb      	ldrb	r3, [r7, #11]
 800a158:	3301      	adds	r3, #1
 800a15a:	72fb      	strb	r3, [r7, #11]
      break;
 800a15c:	e007      	b.n	800a16e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a15e:	6839      	ldr	r1, [r7, #0]
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fa08 	bl	800a576 <USBD_CtlError>
      err++;
 800a166:	7afb      	ldrb	r3, [r7, #11]
 800a168:	3301      	adds	r3, #1
 800a16a:	72fb      	strb	r3, [r7, #11]
      break;
 800a16c:	bf00      	nop
  }

  if (err != 0U)
 800a16e:	7afb      	ldrb	r3, [r7, #11]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d11e      	bne.n	800a1b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	88db      	ldrh	r3, [r3, #6]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d016      	beq.n	800a1aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a17c:	893b      	ldrh	r3, [r7, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00e      	beq.n	800a1a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	88da      	ldrh	r2, [r3, #6]
 800a186:	893b      	ldrh	r3, [r7, #8]
 800a188:	4293      	cmp	r3, r2
 800a18a:	bf28      	it	cs
 800a18c:	4613      	movcs	r3, r2
 800a18e:	b29b      	uxth	r3, r3
 800a190:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a192:	893b      	ldrh	r3, [r7, #8]
 800a194:	461a      	mov	r2, r3
 800a196:	68f9      	ldr	r1, [r7, #12]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fa69 	bl	800a670 <USBD_CtlSendData>
 800a19e:	e009      	b.n	800a1b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f9e7 	bl	800a576 <USBD_CtlError>
 800a1a8:	e004      	b.n	800a1b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 faba 	bl	800a724 <USBD_CtlSendStatus>
 800a1b0:	e000      	b.n	800a1b4 <USBD_GetDescriptor+0x2cc>
    return;
 800a1b2:	bf00      	nop
  }
}
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop

0800a1bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	889b      	ldrh	r3, [r3, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d131      	bne.n	800a232 <USBD_SetAddress+0x76>
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	88db      	ldrh	r3, [r3, #6]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d12d      	bne.n	800a232 <USBD_SetAddress+0x76>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	885b      	ldrh	r3, [r3, #2]
 800a1da:	2b7f      	cmp	r3, #127	@ 0x7f
 800a1dc:	d829      	bhi.n	800a232 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	885b      	ldrh	r3, [r3, #2]
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	d104      	bne.n	800a200 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f9bc 	bl	800a576 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1fe:	e01d      	b.n	800a23c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	7bfa      	ldrb	r2, [r7, #15]
 800a204:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a208:	7bfb      	ldrb	r3, [r7, #15]
 800a20a:	4619      	mov	r1, r3
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fee1 	bl	800afd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fa86 	bl	800a724 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a218:	7bfb      	ldrb	r3, [r7, #15]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d004      	beq.n	800a228 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2202      	movs	r2, #2
 800a222:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a226:	e009      	b.n	800a23c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a230:	e004      	b.n	800a23c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a232:	6839      	ldr	r1, [r7, #0]
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f99e 	bl	800a576 <USBD_CtlError>
  }
}
 800a23a:	bf00      	nop
 800a23c:	bf00      	nop
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	885b      	ldrh	r3, [r3, #2]
 800a256:	b2da      	uxtb	r2, r3
 800a258:	4b4e      	ldr	r3, [pc, #312]	@ (800a394 <USBD_SetConfig+0x150>)
 800a25a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a25c:	4b4d      	ldr	r3, [pc, #308]	@ (800a394 <USBD_SetConfig+0x150>)
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d905      	bls.n	800a270 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f985 	bl	800a576 <USBD_CtlError>
    return USBD_FAIL;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e08c      	b.n	800a38a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a276:	b2db      	uxtb	r3, r3
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d002      	beq.n	800a282 <USBD_SetConfig+0x3e>
 800a27c:	2b03      	cmp	r3, #3
 800a27e:	d029      	beq.n	800a2d4 <USBD_SetConfig+0x90>
 800a280:	e075      	b.n	800a36e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a282:	4b44      	ldr	r3, [pc, #272]	@ (800a394 <USBD_SetConfig+0x150>)
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d020      	beq.n	800a2cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a28a:	4b42      	ldr	r3, [pc, #264]	@ (800a394 <USBD_SetConfig+0x150>)
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	461a      	mov	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a294:	4b3f      	ldr	r3, [pc, #252]	@ (800a394 <USBD_SetConfig+0x150>)
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	4619      	mov	r1, r3
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f7fe ffe3 	bl	8009266 <USBD_SetClassConfig>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d008      	beq.n	800a2bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f962 	bl	800a576 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2ba:	e065      	b.n	800a388 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fa31 	bl	800a724 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2203      	movs	r2, #3
 800a2c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a2ca:	e05d      	b.n	800a388 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fa29 	bl	800a724 <USBD_CtlSendStatus>
      break;
 800a2d2:	e059      	b.n	800a388 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a2d4:	4b2f      	ldr	r3, [pc, #188]	@ (800a394 <USBD_SetConfig+0x150>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d112      	bne.n	800a302 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a2e4:	4b2b      	ldr	r3, [pc, #172]	@ (800a394 <USBD_SetConfig+0x150>)
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2ee:	4b29      	ldr	r3, [pc, #164]	@ (800a394 <USBD_SetConfig+0x150>)
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f7fe ffd2 	bl	800929e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fa12 	bl	800a724 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a300:	e042      	b.n	800a388 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a302:	4b24      	ldr	r3, [pc, #144]	@ (800a394 <USBD_SetConfig+0x150>)
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	461a      	mov	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d02a      	beq.n	800a366 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	b2db      	uxtb	r3, r3
 800a316:	4619      	mov	r1, r3
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f7fe ffc0 	bl	800929e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a31e:	4b1d      	ldr	r3, [pc, #116]	@ (800a394 <USBD_SetConfig+0x150>)
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a328:	4b1a      	ldr	r3, [pc, #104]	@ (800a394 <USBD_SetConfig+0x150>)
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7fe ff99 	bl	8009266 <USBD_SetClassConfig>
 800a334:	4603      	mov	r3, r0
 800a336:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a338:	7bfb      	ldrb	r3, [r7, #15]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00f      	beq.n	800a35e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f918 	bl	800a576 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7fe ffa5 	bl	800929e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2202      	movs	r2, #2
 800a358:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a35c:	e014      	b.n	800a388 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f9e0 	bl	800a724 <USBD_CtlSendStatus>
      break;
 800a364:	e010      	b.n	800a388 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f9dc 	bl	800a724 <USBD_CtlSendStatus>
      break;
 800a36c:	e00c      	b.n	800a388 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a36e:	6839      	ldr	r1, [r7, #0]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 f900 	bl	800a576 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a376:	4b07      	ldr	r3, [pc, #28]	@ (800a394 <USBD_SetConfig+0x150>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7fe ff8e 	bl	800929e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a382:	2303      	movs	r3, #3
 800a384:	73fb      	strb	r3, [r7, #15]
      break;
 800a386:	bf00      	nop
  }

  return ret;
 800a388:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	200002f0 	.word	0x200002f0

0800a398 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	88db      	ldrh	r3, [r3, #6]
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d004      	beq.n	800a3b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f8e2 	bl	800a576 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3b2:	e023      	b.n	800a3fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	dc02      	bgt.n	800a3c6 <USBD_GetConfig+0x2e>
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	dc03      	bgt.n	800a3cc <USBD_GetConfig+0x34>
 800a3c4:	e015      	b.n	800a3f2 <USBD_GetConfig+0x5a>
 800a3c6:	2b03      	cmp	r3, #3
 800a3c8:	d00b      	beq.n	800a3e2 <USBD_GetConfig+0x4a>
 800a3ca:	e012      	b.n	800a3f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	3308      	adds	r3, #8
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	4619      	mov	r1, r3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f948 	bl	800a670 <USBD_CtlSendData>
        break;
 800a3e0:	e00c      	b.n	800a3fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f940 	bl	800a670 <USBD_CtlSendData>
        break;
 800a3f0:	e004      	b.n	800a3fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f8be 	bl	800a576 <USBD_CtlError>
        break;
 800a3fa:	bf00      	nop
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a414:	b2db      	uxtb	r3, r3
 800a416:	3b01      	subs	r3, #1
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d81e      	bhi.n	800a45a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	88db      	ldrh	r3, [r3, #6]
 800a420:	2b02      	cmp	r3, #2
 800a422:	d004      	beq.n	800a42e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f8a5 	bl	800a576 <USBD_CtlError>
        break;
 800a42c:	e01a      	b.n	800a464 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2201      	movs	r2, #1
 800a432:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d005      	beq.n	800a44a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	f043 0202 	orr.w	r2, r3, #2
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	330c      	adds	r3, #12
 800a44e:	2202      	movs	r2, #2
 800a450:	4619      	mov	r1, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 f90c 	bl	800a670 <USBD_CtlSendData>
      break;
 800a458:	e004      	b.n	800a464 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a45a:	6839      	ldr	r1, [r7, #0]
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 f88a 	bl	800a576 <USBD_CtlError>
      break;
 800a462:	bf00      	nop
  }
}
 800a464:	bf00      	nop
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	885b      	ldrh	r3, [r3, #2]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d107      	bne.n	800a48e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2201      	movs	r2, #1
 800a482:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f94c 	bl	800a724 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a48c:	e013      	b.n	800a4b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	885b      	ldrh	r3, [r3, #2]
 800a492:	2b02      	cmp	r3, #2
 800a494:	d10b      	bne.n	800a4ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	889b      	ldrh	r3, [r3, #4]
 800a49a:	0a1b      	lsrs	r3, r3, #8
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f93c 	bl	800a724 <USBD_CtlSendStatus>
}
 800a4ac:	e003      	b.n	800a4b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a4ae:	6839      	ldr	r1, [r7, #0]
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f860 	bl	800a576 <USBD_CtlError>
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d80b      	bhi.n	800a4ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	885b      	ldrh	r3, [r3, #2]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d10c      	bne.n	800a4f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f91c 	bl	800a724 <USBD_CtlSendStatus>
      }
      break;
 800a4ec:	e004      	b.n	800a4f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f840 	bl	800a576 <USBD_CtlError>
      break;
 800a4f6:	e000      	b.n	800a4fa <USBD_ClrFeature+0x3c>
      break;
 800a4f8:	bf00      	nop
  }
}
 800a4fa:	bf00      	nop
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	781a      	ldrb	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3301      	adds	r3, #1
 800a51c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	781a      	ldrb	r2, [r3, #0]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	3301      	adds	r3, #1
 800a52a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f7ff fa40 	bl	80099b2 <SWAPBYTE>
 800a532:	4603      	mov	r3, r0
 800a534:	461a      	mov	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	3301      	adds	r3, #1
 800a53e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	3301      	adds	r3, #1
 800a544:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f7ff fa33 	bl	80099b2 <SWAPBYTE>
 800a54c:	4603      	mov	r3, r0
 800a54e:	461a      	mov	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	3301      	adds	r3, #1
 800a558:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	3301      	adds	r3, #1
 800a55e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f7ff fa26 	bl	80099b2 <SWAPBYTE>
 800a566:	4603      	mov	r3, r0
 800a568:	461a      	mov	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	80da      	strh	r2, [r3, #6]
}
 800a56e:	bf00      	nop
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b082      	sub	sp, #8
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a580:	2180      	movs	r1, #128	@ 0x80
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fcbc 	bl	800af00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a588:	2100      	movs	r1, #0
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fcb8 	bl	800af00 <USBD_LL_StallEP>
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d042      	beq.n	800a634 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a5b2:	6938      	ldr	r0, [r7, #16]
 800a5b4:	f000 f842 	bl	800a63c <USBD_GetLen>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5c2:	d808      	bhi.n	800a5d6 <USBD_GetString+0x3e>
 800a5c4:	6938      	ldr	r0, [r7, #16]
 800a5c6:	f000 f839 	bl	800a63c <USBD_GetLen>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	005b      	lsls	r3, r3, #1
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	e001      	b.n	800a5da <USBD_GetString+0x42>
 800a5d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	7812      	ldrb	r2, [r2, #0]
 800a5e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5ea:	7dfb      	ldrb	r3, [r7, #23]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	68ba      	ldr	r2, [r7, #8]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	2203      	movs	r2, #3
 800a5f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5fa:	7dfb      	ldrb	r3, [r7, #23]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a600:	e013      	b.n	800a62a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a602:	7dfb      	ldrb	r3, [r7, #23]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	4413      	add	r3, r2
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	7812      	ldrb	r2, [r2, #0]
 800a60c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	3301      	adds	r3, #1
 800a612:	613b      	str	r3, [r7, #16]
    idx++;
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	3301      	adds	r3, #1
 800a618:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	4413      	add	r3, r2
 800a620:	2200      	movs	r2, #0
 800a622:	701a      	strb	r2, [r3, #0]
    idx++;
 800a624:	7dfb      	ldrb	r3, [r7, #23]
 800a626:	3301      	adds	r3, #1
 800a628:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1e7      	bne.n	800a602 <USBD_GetString+0x6a>
 800a632:	e000      	b.n	800a636 <USBD_GetString+0x9e>
    return;
 800a634:	bf00      	nop
  }
}
 800a636:	3718      	adds	r7, #24
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a644:	2300      	movs	r3, #0
 800a646:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a64c:	e005      	b.n	800a65a <USBD_GetLen+0x1e>
  {
    len++;
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	3301      	adds	r3, #1
 800a652:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	3301      	adds	r3, #1
 800a658:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1f5      	bne.n	800a64e <USBD_GetLen+0x12>
  }

  return len;
 800a662:	7bfb      	ldrb	r3, [r7, #15]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2202      	movs	r2, #2
 800a680:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	2100      	movs	r1, #0
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f000 fcbb 	bl	800b012 <USBD_LL_Transmit>

  return USBD_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b084      	sub	sp, #16
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	60f8      	str	r0, [r7, #12]
 800a6ae:	60b9      	str	r1, [r7, #8]
 800a6b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f000 fcaa 	bl	800b012 <USBD_LL_Transmit>

  return USBD_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2203      	movs	r2, #3
 800a6d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 fcae 	bl	800b054 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	60f8      	str	r0, [r7, #12]
 800a70a:	60b9      	str	r1, [r7, #8]
 800a70c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	2100      	movs	r1, #0
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f000 fc9d 	bl	800b054 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2204      	movs	r2, #4
 800a730:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a734:	2300      	movs	r3, #0
 800a736:	2200      	movs	r2, #0
 800a738:	2100      	movs	r1, #0
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fc69 	bl	800b012 <USBD_LL_Transmit>

  return USBD_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b082      	sub	sp, #8
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2205      	movs	r2, #5
 800a756:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a75a:	2300      	movs	r3, #0
 800a75c:	2200      	movs	r2, #0
 800a75e:	2100      	movs	r1, #0
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fc77 	bl	800b054 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a774:	2200      	movs	r2, #0
 800a776:	4912      	ldr	r1, [pc, #72]	@ (800a7c0 <MX_USB_DEVICE_Init+0x50>)
 800a778:	4812      	ldr	r0, [pc, #72]	@ (800a7c4 <MX_USB_DEVICE_Init+0x54>)
 800a77a:	f7fe fcf7 	bl	800916c <USBD_Init>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a784:	f7f6 f904 	bl	8000990 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a788:	490f      	ldr	r1, [pc, #60]	@ (800a7c8 <MX_USB_DEVICE_Init+0x58>)
 800a78a:	480e      	ldr	r0, [pc, #56]	@ (800a7c4 <MX_USB_DEVICE_Init+0x54>)
 800a78c:	f7fe fd1e 	bl	80091cc <USBD_RegisterClass>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a796:	f7f6 f8fb 	bl	8000990 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a79a:	490c      	ldr	r1, [pc, #48]	@ (800a7cc <MX_USB_DEVICE_Init+0x5c>)
 800a79c:	4809      	ldr	r0, [pc, #36]	@ (800a7c4 <MX_USB_DEVICE_Init+0x54>)
 800a79e:	f7fe fc55 	bl	800904c <USBD_CDC_RegisterInterface>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a7a8:	f7f6 f8f2 	bl	8000990 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a7ac:	4805      	ldr	r0, [pc, #20]	@ (800a7c4 <MX_USB_DEVICE_Init+0x54>)
 800a7ae:	f7fe fd43 	bl	8009238 <USBD_Start>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a7b8:	f7f6 f8ea 	bl	8000990 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7bc:	bf00      	nop
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	200000b0 	.word	0x200000b0
 800a7c4:	200002f4 	.word	0x200002f4
 800a7c8:	2000001c 	.word	0x2000001c
 800a7cc:	2000009c 	.word	0x2000009c

0800a7d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	4905      	ldr	r1, [pc, #20]	@ (800a7ec <CDC_Init_FS+0x1c>)
 800a7d8:	4805      	ldr	r0, [pc, #20]	@ (800a7f0 <CDC_Init_FS+0x20>)
 800a7da:	f7fe fc51 	bl	8009080 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a7de:	4905      	ldr	r1, [pc, #20]	@ (800a7f4 <CDC_Init_FS+0x24>)
 800a7e0:	4803      	ldr	r0, [pc, #12]	@ (800a7f0 <CDC_Init_FS+0x20>)
 800a7e2:	f7fe fc6f 	bl	80090c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a7e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	200009d0 	.word	0x200009d0
 800a7f0:	200002f4 	.word	0x200002f4
 800a7f4:	200005d0 	.word	0x200005d0

0800a7f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a7fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	4603      	mov	r3, r0
 800a810:	6039      	str	r1, [r7, #0]
 800a812:	71fb      	strb	r3, [r7, #7]
 800a814:	4613      	mov	r3, r2
 800a816:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a818:	79fb      	ldrb	r3, [r7, #7]
 800a81a:	2b23      	cmp	r3, #35	@ 0x23
 800a81c:	d84a      	bhi.n	800a8b4 <CDC_Control_FS+0xac>
 800a81e:	a201      	add	r2, pc, #4	@ (adr r2, 800a824 <CDC_Control_FS+0x1c>)
 800a820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a824:	0800a8b5 	.word	0x0800a8b5
 800a828:	0800a8b5 	.word	0x0800a8b5
 800a82c:	0800a8b5 	.word	0x0800a8b5
 800a830:	0800a8b5 	.word	0x0800a8b5
 800a834:	0800a8b5 	.word	0x0800a8b5
 800a838:	0800a8b5 	.word	0x0800a8b5
 800a83c:	0800a8b5 	.word	0x0800a8b5
 800a840:	0800a8b5 	.word	0x0800a8b5
 800a844:	0800a8b5 	.word	0x0800a8b5
 800a848:	0800a8b5 	.word	0x0800a8b5
 800a84c:	0800a8b5 	.word	0x0800a8b5
 800a850:	0800a8b5 	.word	0x0800a8b5
 800a854:	0800a8b5 	.word	0x0800a8b5
 800a858:	0800a8b5 	.word	0x0800a8b5
 800a85c:	0800a8b5 	.word	0x0800a8b5
 800a860:	0800a8b5 	.word	0x0800a8b5
 800a864:	0800a8b5 	.word	0x0800a8b5
 800a868:	0800a8b5 	.word	0x0800a8b5
 800a86c:	0800a8b5 	.word	0x0800a8b5
 800a870:	0800a8b5 	.word	0x0800a8b5
 800a874:	0800a8b5 	.word	0x0800a8b5
 800a878:	0800a8b5 	.word	0x0800a8b5
 800a87c:	0800a8b5 	.word	0x0800a8b5
 800a880:	0800a8b5 	.word	0x0800a8b5
 800a884:	0800a8b5 	.word	0x0800a8b5
 800a888:	0800a8b5 	.word	0x0800a8b5
 800a88c:	0800a8b5 	.word	0x0800a8b5
 800a890:	0800a8b5 	.word	0x0800a8b5
 800a894:	0800a8b5 	.word	0x0800a8b5
 800a898:	0800a8b5 	.word	0x0800a8b5
 800a89c:	0800a8b5 	.word	0x0800a8b5
 800a8a0:	0800a8b5 	.word	0x0800a8b5
 800a8a4:	0800a8b5 	.word	0x0800a8b5
 800a8a8:	0800a8b5 	.word	0x0800a8b5
 800a8ac:	0800a8b5 	.word	0x0800a8b5
 800a8b0:	0800a8b5 	.word	0x0800a8b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a8b4:	bf00      	nop
  }

  return (USBD_OK);
 800a8b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a8ce:	6879      	ldr	r1, [r7, #4]
 800a8d0:	4805      	ldr	r0, [pc, #20]	@ (800a8e8 <CDC_Receive_FS+0x24>)
 800a8d2:	f7fe fbf7 	bl	80090c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a8d6:	4804      	ldr	r0, [pc, #16]	@ (800a8e8 <CDC_Receive_FS+0x24>)
 800a8d8:	f7fe fc12 	bl	8009100 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a8dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	200002f4 	.word	0x200002f4

0800a8ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a8fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a902:	4618      	mov	r0, r3
 800a904:	371c      	adds	r7, #28
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
	...

0800a910 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	4603      	mov	r3, r0
 800a918:	6039      	str	r1, [r7, #0]
 800a91a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2212      	movs	r2, #18
 800a920:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a922:	4b03      	ldr	r3, [pc, #12]	@ (800a930 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a924:	4618      	mov	r0, r3
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	200000cc 	.word	0x200000cc

0800a934 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	4603      	mov	r3, r0
 800a93c:	6039      	str	r1, [r7, #0]
 800a93e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	2204      	movs	r2, #4
 800a944:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a946:	4b03      	ldr	r3, [pc, #12]	@ (800a954 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a948:	4618      	mov	r0, r3
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	200000e0 	.word	0x200000e0

0800a958 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	6039      	str	r1, [r7, #0]
 800a962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a964:	79fb      	ldrb	r3, [r7, #7]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d105      	bne.n	800a976 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	4907      	ldr	r1, [pc, #28]	@ (800a98c <USBD_FS_ProductStrDescriptor+0x34>)
 800a96e:	4808      	ldr	r0, [pc, #32]	@ (800a990 <USBD_FS_ProductStrDescriptor+0x38>)
 800a970:	f7ff fe12 	bl	800a598 <USBD_GetString>
 800a974:	e004      	b.n	800a980 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	4904      	ldr	r1, [pc, #16]	@ (800a98c <USBD_FS_ProductStrDescriptor+0x34>)
 800a97a:	4805      	ldr	r0, [pc, #20]	@ (800a990 <USBD_FS_ProductStrDescriptor+0x38>)
 800a97c:	f7ff fe0c 	bl	800a598 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a980:	4b02      	ldr	r3, [pc, #8]	@ (800a98c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a982:	4618      	mov	r0, r3
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	20000dd0 	.word	0x20000dd0
 800a990:	0800b318 	.word	0x0800b318

0800a994 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	4603      	mov	r3, r0
 800a99c:	6039      	str	r1, [r7, #0]
 800a99e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	4904      	ldr	r1, [pc, #16]	@ (800a9b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a9a4:	4804      	ldr	r0, [pc, #16]	@ (800a9b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a9a6:	f7ff fdf7 	bl	800a598 <USBD_GetString>
  return USBD_StrDesc;
 800a9aa:	4b02      	ldr	r3, [pc, #8]	@ (800a9b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	20000dd0 	.word	0x20000dd0
 800a9b8:	0800b330 	.word	0x0800b330

0800a9bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	6039      	str	r1, [r7, #0]
 800a9c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	221a      	movs	r2, #26
 800a9cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a9ce:	f000 f843 	bl	800aa58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a9d2:	4b02      	ldr	r3, [pc, #8]	@ (800a9dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	200000e4 	.word	0x200000e4

0800a9e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	6039      	str	r1, [r7, #0]
 800a9ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a9ec:	79fb      	ldrb	r3, [r7, #7]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d105      	bne.n	800a9fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	4907      	ldr	r1, [pc, #28]	@ (800aa14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9f6:	4808      	ldr	r0, [pc, #32]	@ (800aa18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9f8:	f7ff fdce 	bl	800a598 <USBD_GetString>
 800a9fc:	e004      	b.n	800aa08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	4904      	ldr	r1, [pc, #16]	@ (800aa14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa02:	4805      	ldr	r0, [pc, #20]	@ (800aa18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa04:	f7ff fdc8 	bl	800a598 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa08:	4b02      	ldr	r3, [pc, #8]	@ (800aa14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	20000dd0 	.word	0x20000dd0
 800aa18:	0800b344 	.word	0x0800b344

0800aa1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	6039      	str	r1, [r7, #0]
 800aa26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa28:	79fb      	ldrb	r3, [r7, #7]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d105      	bne.n	800aa3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	4907      	ldr	r1, [pc, #28]	@ (800aa50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa32:	4808      	ldr	r0, [pc, #32]	@ (800aa54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa34:	f7ff fdb0 	bl	800a598 <USBD_GetString>
 800aa38:	e004      	b.n	800aa44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	4904      	ldr	r1, [pc, #16]	@ (800aa50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa3e:	4805      	ldr	r0, [pc, #20]	@ (800aa54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa40:	f7ff fdaa 	bl	800a598 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa44:	4b02      	ldr	r3, [pc, #8]	@ (800aa50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20000dd0 	.word	0x20000dd0
 800aa54:	0800b350 	.word	0x0800b350

0800aa58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa5e:	4b0f      	ldr	r3, [pc, #60]	@ (800aa9c <Get_SerialNum+0x44>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa64:	4b0e      	ldr	r3, [pc, #56]	@ (800aaa0 <Get_SerialNum+0x48>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa6a:	4b0e      	ldr	r3, [pc, #56]	@ (800aaa4 <Get_SerialNum+0x4c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4413      	add	r3, r2
 800aa76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d009      	beq.n	800aa92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa7e:	2208      	movs	r2, #8
 800aa80:	4909      	ldr	r1, [pc, #36]	@ (800aaa8 <Get_SerialNum+0x50>)
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f000 f814 	bl	800aab0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa88:	2204      	movs	r2, #4
 800aa8a:	4908      	ldr	r1, [pc, #32]	@ (800aaac <Get_SerialNum+0x54>)
 800aa8c:	68b8      	ldr	r0, [r7, #8]
 800aa8e:	f000 f80f 	bl	800aab0 <IntToUnicode>
  }
}
 800aa92:	bf00      	nop
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	1fff7a10 	.word	0x1fff7a10
 800aaa0:	1fff7a14 	.word	0x1fff7a14
 800aaa4:	1fff7a18 	.word	0x1fff7a18
 800aaa8:	200000e6 	.word	0x200000e6
 800aaac:	200000f6 	.word	0x200000f6

0800aab0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b087      	sub	sp, #28
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	4613      	mov	r3, r2
 800aabc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aac2:	2300      	movs	r3, #0
 800aac4:	75fb      	strb	r3, [r7, #23]
 800aac6:	e027      	b.n	800ab18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	0f1b      	lsrs	r3, r3, #28
 800aacc:	2b09      	cmp	r3, #9
 800aace:	d80b      	bhi.n	800aae8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	0f1b      	lsrs	r3, r3, #28
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
 800aad8:	005b      	lsls	r3, r3, #1
 800aada:	4619      	mov	r1, r3
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	440b      	add	r3, r1
 800aae0:	3230      	adds	r2, #48	@ 0x30
 800aae2:	b2d2      	uxtb	r2, r2
 800aae4:	701a      	strb	r2, [r3, #0]
 800aae6:	e00a      	b.n	800aafe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	0f1b      	lsrs	r3, r3, #28
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	7dfb      	ldrb	r3, [r7, #23]
 800aaf0:	005b      	lsls	r3, r3, #1
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	440b      	add	r3, r1
 800aaf8:	3237      	adds	r2, #55	@ 0x37
 800aafa:	b2d2      	uxtb	r2, r2
 800aafc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	011b      	lsls	r3, r3, #4
 800ab02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab04:	7dfb      	ldrb	r3, [r7, #23]
 800ab06:	005b      	lsls	r3, r3, #1
 800ab08:	3301      	adds	r3, #1
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	2200      	movs	r2, #0
 800ab10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab12:	7dfb      	ldrb	r3, [r7, #23]
 800ab14:	3301      	adds	r3, #1
 800ab16:	75fb      	strb	r3, [r7, #23]
 800ab18:	7dfa      	ldrb	r2, [r7, #23]
 800ab1a:	79fb      	ldrb	r3, [r7, #7]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d3d3      	bcc.n	800aac8 <IntToUnicode+0x18>
  }
}
 800ab20:	bf00      	nop
 800ab22:	bf00      	nop
 800ab24:	371c      	adds	r7, #28
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
	...

0800ab30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b08a      	sub	sp, #40	@ 0x28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab38:	f107 0314 	add.w	r3, r7, #20
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]
 800ab40:	605a      	str	r2, [r3, #4]
 800ab42:	609a      	str	r2, [r3, #8]
 800ab44:	60da      	str	r2, [r3, #12]
 800ab46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab50:	d13a      	bne.n	800abc8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab52:	2300      	movs	r3, #0
 800ab54:	613b      	str	r3, [r7, #16]
 800ab56:	4b1e      	ldr	r3, [pc, #120]	@ (800abd0 <HAL_PCD_MspInit+0xa0>)
 800ab58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab5a:	4a1d      	ldr	r2, [pc, #116]	@ (800abd0 <HAL_PCD_MspInit+0xa0>)
 800ab5c:	f043 0301 	orr.w	r3, r3, #1
 800ab60:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab62:	4b1b      	ldr	r3, [pc, #108]	@ (800abd0 <HAL_PCD_MspInit+0xa0>)
 800ab64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab66:	f003 0301 	and.w	r3, r3, #1
 800ab6a:	613b      	str	r3, [r7, #16]
 800ab6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ab6e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ab72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab74:	2302      	movs	r3, #2
 800ab76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ab80:	230a      	movs	r3, #10
 800ab82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab84:	f107 0314 	add.w	r3, r7, #20
 800ab88:	4619      	mov	r1, r3
 800ab8a:	4812      	ldr	r0, [pc, #72]	@ (800abd4 <HAL_PCD_MspInit+0xa4>)
 800ab8c:	f7f8 fb0a 	bl	80031a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab90:	4b0f      	ldr	r3, [pc, #60]	@ (800abd0 <HAL_PCD_MspInit+0xa0>)
 800ab92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab94:	4a0e      	ldr	r2, [pc, #56]	@ (800abd0 <HAL_PCD_MspInit+0xa0>)
 800ab96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab9a:	6353      	str	r3, [r2, #52]	@ 0x34
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	60fb      	str	r3, [r7, #12]
 800aba0:	4b0b      	ldr	r3, [pc, #44]	@ (800abd0 <HAL_PCD_MspInit+0xa0>)
 800aba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aba4:	4a0a      	ldr	r2, [pc, #40]	@ (800abd0 <HAL_PCD_MspInit+0xa0>)
 800aba6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800abaa:	6453      	str	r3, [r2, #68]	@ 0x44
 800abac:	4b08      	ldr	r3, [pc, #32]	@ (800abd0 <HAL_PCD_MspInit+0xa0>)
 800abae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abb4:	60fb      	str	r3, [r7, #12]
 800abb6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800abb8:	2200      	movs	r2, #0
 800abba:	2100      	movs	r1, #0
 800abbc:	2043      	movs	r0, #67	@ 0x43
 800abbe:	f7f7 ff28 	bl	8002a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800abc2:	2043      	movs	r0, #67	@ 0x43
 800abc4:	f7f7 ff41 	bl	8002a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800abc8:	bf00      	nop
 800abca:	3728      	adds	r7, #40	@ 0x28
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	40023800 	.word	0x40023800
 800abd4:	40020000 	.word	0x40020000

0800abd8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800abec:	4619      	mov	r1, r3
 800abee:	4610      	mov	r0, r2
 800abf0:	f7fe fb6f 	bl	80092d2 <USBD_LL_SetupStage>
}
 800abf4:	bf00      	nop
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	460b      	mov	r3, r1
 800ac06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ac0e:	78fa      	ldrb	r2, [r7, #3]
 800ac10:	6879      	ldr	r1, [r7, #4]
 800ac12:	4613      	mov	r3, r2
 800ac14:	00db      	lsls	r3, r3, #3
 800ac16:	4413      	add	r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	440b      	add	r3, r1
 800ac1c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	78fb      	ldrb	r3, [r7, #3]
 800ac24:	4619      	mov	r1, r3
 800ac26:	f7fe fba9 	bl	800937c <USBD_LL_DataOutStage>
}
 800ac2a:	bf00      	nop
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b082      	sub	sp, #8
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ac44:	78fa      	ldrb	r2, [r7, #3]
 800ac46:	6879      	ldr	r1, [r7, #4]
 800ac48:	4613      	mov	r3, r2
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	4413      	add	r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	440b      	add	r3, r1
 800ac52:	3320      	adds	r3, #32
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	78fb      	ldrb	r3, [r7, #3]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	f7fe fc42 	bl	80094e2 <USBD_LL_DataInStage>
}
 800ac5e:	bf00      	nop
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b082      	sub	sp, #8
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7fe fd7c 	bl	8009772 <USBD_LL_SOF>
}
 800ac7a:	bf00      	nop
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b084      	sub	sp, #16
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	79db      	ldrb	r3, [r3, #7]
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d001      	beq.n	800ac9a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ac96:	f7f5 fe7b 	bl	8000990 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aca0:	7bfa      	ldrb	r2, [r7, #15]
 800aca2:	4611      	mov	r1, r2
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fe fd20 	bl	80096ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fe fcc8 	bl	8009646 <USBD_LL_Reset>
}
 800acb6:	bf00      	nop
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
	...

0800acc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fe fd1b 	bl	800970a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	6812      	ldr	r2, [r2, #0]
 800ace2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ace6:	f043 0301 	orr.w	r3, r3, #1
 800acea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	7adb      	ldrb	r3, [r3, #11]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d005      	beq.n	800ad00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800acf4:	4b04      	ldr	r3, [pc, #16]	@ (800ad08 <HAL_PCD_SuspendCallback+0x48>)
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	4a03      	ldr	r2, [pc, #12]	@ (800ad08 <HAL_PCD_SuspendCallback+0x48>)
 800acfa:	f043 0306 	orr.w	r3, r3, #6
 800acfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad00:	bf00      	nop
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	e000ed00 	.word	0xe000ed00

0800ad0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fe fd11 	bl	8009742 <USBD_LL_Resume>
}
 800ad20:	bf00      	nop
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad3a:	78fa      	ldrb	r2, [r7, #3]
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fe fd69 	bl	8009816 <USBD_LL_IsoOUTIncomplete>
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	460b      	mov	r3, r1
 800ad56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad5e:	78fa      	ldrb	r2, [r7, #3]
 800ad60:	4611      	mov	r1, r2
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe fd25 	bl	80097b2 <USBD_LL_IsoINIncomplete>
}
 800ad68:	bf00      	nop
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fe fd7b 	bl	800987a <USBD_LL_DevConnected>
}
 800ad84:	bf00      	nop
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fe fd78 	bl	8009890 <USBD_LL_DevDisconnected>
}
 800ada0:	bf00      	nop
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d13c      	bne.n	800ae32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800adb8:	4a20      	ldr	r2, [pc, #128]	@ (800ae3c <USBD_LL_Init+0x94>)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a1e      	ldr	r2, [pc, #120]	@ (800ae3c <USBD_LL_Init+0x94>)
 800adc4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800adc8:	4b1c      	ldr	r3, [pc, #112]	@ (800ae3c <USBD_LL_Init+0x94>)
 800adca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800adce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800add0:	4b1a      	ldr	r3, [pc, #104]	@ (800ae3c <USBD_LL_Init+0x94>)
 800add2:	2204      	movs	r2, #4
 800add4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800add6:	4b19      	ldr	r3, [pc, #100]	@ (800ae3c <USBD_LL_Init+0x94>)
 800add8:	2202      	movs	r2, #2
 800adda:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800addc:	4b17      	ldr	r3, [pc, #92]	@ (800ae3c <USBD_LL_Init+0x94>)
 800adde:	2200      	movs	r2, #0
 800ade0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ade2:	4b16      	ldr	r3, [pc, #88]	@ (800ae3c <USBD_LL_Init+0x94>)
 800ade4:	2202      	movs	r2, #2
 800ade6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ade8:	4b14      	ldr	r3, [pc, #80]	@ (800ae3c <USBD_LL_Init+0x94>)
 800adea:	2200      	movs	r2, #0
 800adec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800adee:	4b13      	ldr	r3, [pc, #76]	@ (800ae3c <USBD_LL_Init+0x94>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800adf4:	4b11      	ldr	r3, [pc, #68]	@ (800ae3c <USBD_LL_Init+0x94>)
 800adf6:	2200      	movs	r2, #0
 800adf8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800adfa:	4b10      	ldr	r3, [pc, #64]	@ (800ae3c <USBD_LL_Init+0x94>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ae00:	4b0e      	ldr	r3, [pc, #56]	@ (800ae3c <USBD_LL_Init+0x94>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ae06:	480d      	ldr	r0, [pc, #52]	@ (800ae3c <USBD_LL_Init+0x94>)
 800ae08:	f7f8 fb69 	bl	80034de <HAL_PCD_Init>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ae12:	f7f5 fdbd 	bl	8000990 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ae16:	2180      	movs	r1, #128	@ 0x80
 800ae18:	4808      	ldr	r0, [pc, #32]	@ (800ae3c <USBD_LL_Init+0x94>)
 800ae1a:	f7f9 fd96 	bl	800494a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ae1e:	2240      	movs	r2, #64	@ 0x40
 800ae20:	2100      	movs	r1, #0
 800ae22:	4806      	ldr	r0, [pc, #24]	@ (800ae3c <USBD_LL_Init+0x94>)
 800ae24:	f7f9 fd4a 	bl	80048bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ae28:	2280      	movs	r2, #128	@ 0x80
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	4803      	ldr	r0, [pc, #12]	@ (800ae3c <USBD_LL_Init+0x94>)
 800ae2e:	f7f9 fd45 	bl	80048bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	20000fd0 	.word	0x20000fd0

0800ae40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7f8 fc50 	bl	80036fc <HAL_PCD_Start>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 f942 	bl	800b0ec <USBD_Get_USB_Status>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b084      	sub	sp, #16
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	4608      	mov	r0, r1
 800ae80:	4611      	mov	r1, r2
 800ae82:	461a      	mov	r2, r3
 800ae84:	4603      	mov	r3, r0
 800ae86:	70fb      	strb	r3, [r7, #3]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	70bb      	strb	r3, [r7, #2]
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae9e:	78bb      	ldrb	r3, [r7, #2]
 800aea0:	883a      	ldrh	r2, [r7, #0]
 800aea2:	78f9      	ldrb	r1, [r7, #3]
 800aea4:	f7f9 f924 	bl	80040f0 <HAL_PCD_EP_Open>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f000 f91c 	bl	800b0ec <USBD_Get_USB_Status>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
 800aeca:	460b      	mov	r3, r1
 800aecc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aece:	2300      	movs	r3, #0
 800aed0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aedc:	78fa      	ldrb	r2, [r7, #3]
 800aede:	4611      	mov	r1, r2
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7f9 f96f 	bl	80041c4 <HAL_PCD_EP_Close>
 800aee6:	4603      	mov	r3, r0
 800aee8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeea:	7bfb      	ldrb	r3, [r7, #15]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 f8fd 	bl	800b0ec <USBD_Get_USB_Status>
 800aef2:	4603      	mov	r3, r0
 800aef4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aef6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	460b      	mov	r3, r1
 800af0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af10:	2300      	movs	r3, #0
 800af12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af1a:	78fa      	ldrb	r2, [r7, #3]
 800af1c:	4611      	mov	r1, r2
 800af1e:	4618      	mov	r0, r3
 800af20:	f7f9 fa27 	bl	8004372 <HAL_PCD_EP_SetStall>
 800af24:	4603      	mov	r3, r0
 800af26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af28:	7bfb      	ldrb	r3, [r7, #15]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 f8de 	bl	800b0ec <USBD_Get_USB_Status>
 800af30:	4603      	mov	r3, r0
 800af32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af34:	7bbb      	ldrb	r3, [r7, #14]
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b084      	sub	sp, #16
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
 800af46:	460b      	mov	r3, r1
 800af48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af58:	78fa      	ldrb	r2, [r7, #3]
 800af5a:	4611      	mov	r1, r2
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7f9 fa6b 	bl	8004438 <HAL_PCD_EP_ClrStall>
 800af62:	4603      	mov	r3, r0
 800af64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af66:	7bfb      	ldrb	r3, [r7, #15]
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 f8bf 	bl	800b0ec <USBD_Get_USB_Status>
 800af6e:	4603      	mov	r3, r0
 800af70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af72:	7bbb      	ldrb	r3, [r7, #14]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	460b      	mov	r3, r1
 800af86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af94:	2b00      	cmp	r3, #0
 800af96:	da0b      	bge.n	800afb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af98:	78fb      	ldrb	r3, [r7, #3]
 800af9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af9e:	68f9      	ldr	r1, [r7, #12]
 800afa0:	4613      	mov	r3, r2
 800afa2:	00db      	lsls	r3, r3, #3
 800afa4:	4413      	add	r3, r2
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	440b      	add	r3, r1
 800afaa:	3316      	adds	r3, #22
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	e00b      	b.n	800afc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afb6:	68f9      	ldr	r1, [r7, #12]
 800afb8:	4613      	mov	r3, r2
 800afba:	00db      	lsls	r3, r3, #3
 800afbc:	4413      	add	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	440b      	add	r3, r1
 800afc2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800afc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3714      	adds	r7, #20
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	460b      	mov	r3, r1
 800afde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe0:	2300      	movs	r3, #0
 800afe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afee:	78fa      	ldrb	r2, [r7, #3]
 800aff0:	4611      	mov	r1, r2
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7f9 f858 	bl	80040a8 <HAL_PCD_SetAddress>
 800aff8:	4603      	mov	r3, r0
 800affa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800affc:	7bfb      	ldrb	r3, [r7, #15]
 800affe:	4618      	mov	r0, r3
 800b000:	f000 f874 	bl	800b0ec <USBD_Get_USB_Status>
 800b004:	4603      	mov	r3, r0
 800b006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b008:	7bbb      	ldrb	r3, [r7, #14]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b086      	sub	sp, #24
 800b016:	af00      	add	r7, sp, #0
 800b018:	60f8      	str	r0, [r7, #12]
 800b01a:	607a      	str	r2, [r7, #4]
 800b01c:	603b      	str	r3, [r7, #0]
 800b01e:	460b      	mov	r3, r1
 800b020:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b030:	7af9      	ldrb	r1, [r7, #11]
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	f7f9 f962 	bl	80042fe <HAL_PCD_EP_Transmit>
 800b03a:	4603      	mov	r3, r0
 800b03c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b03e:	7dfb      	ldrb	r3, [r7, #23]
 800b040:	4618      	mov	r0, r3
 800b042:	f000 f853 	bl	800b0ec <USBD_Get_USB_Status>
 800b046:	4603      	mov	r3, r0
 800b048:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b04a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	607a      	str	r2, [r7, #4]
 800b05e:	603b      	str	r3, [r7, #0]
 800b060:	460b      	mov	r3, r1
 800b062:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b068:	2300      	movs	r3, #0
 800b06a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b072:	7af9      	ldrb	r1, [r7, #11]
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	f7f9 f8ee 	bl	8004258 <HAL_PCD_EP_Receive>
 800b07c:	4603      	mov	r3, r0
 800b07e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b080:	7dfb      	ldrb	r3, [r7, #23]
 800b082:	4618      	mov	r0, r3
 800b084:	f000 f832 	bl	800b0ec <USBD_Get_USB_Status>
 800b088:	4603      	mov	r3, r0
 800b08a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b08c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b082      	sub	sp, #8
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	460b      	mov	r3, r1
 800b0a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0a8:	78fa      	ldrb	r2, [r7, #3]
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7f9 f90e 	bl	80042ce <HAL_PCD_EP_GetRxCount>
 800b0b2:	4603      	mov	r3, r0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b0c4:	4b03      	ldr	r3, [pc, #12]	@ (800b0d4 <USBD_static_malloc+0x18>)
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	370c      	adds	r7, #12
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	200014b4 	.word	0x200014b4

0800b0d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]

}
 800b0e0:	bf00      	nop
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0fa:	79fb      	ldrb	r3, [r7, #7]
 800b0fc:	2b03      	cmp	r3, #3
 800b0fe:	d817      	bhi.n	800b130 <USBD_Get_USB_Status+0x44>
 800b100:	a201      	add	r2, pc, #4	@ (adr r2, 800b108 <USBD_Get_USB_Status+0x1c>)
 800b102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b106:	bf00      	nop
 800b108:	0800b119 	.word	0x0800b119
 800b10c:	0800b11f 	.word	0x0800b11f
 800b110:	0800b125 	.word	0x0800b125
 800b114:	0800b12b 	.word	0x0800b12b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b118:	2300      	movs	r3, #0
 800b11a:	73fb      	strb	r3, [r7, #15]
    break;
 800b11c:	e00b      	b.n	800b136 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b11e:	2303      	movs	r3, #3
 800b120:	73fb      	strb	r3, [r7, #15]
    break;
 800b122:	e008      	b.n	800b136 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b124:	2301      	movs	r3, #1
 800b126:	73fb      	strb	r3, [r7, #15]
    break;
 800b128:	e005      	b.n	800b136 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b12a:	2303      	movs	r3, #3
 800b12c:	73fb      	strb	r3, [r7, #15]
    break;
 800b12e:	e002      	b.n	800b136 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b130:	2303      	movs	r3, #3
 800b132:	73fb      	strb	r3, [r7, #15]
    break;
 800b134:	bf00      	nop
  }
  return usb_status;
 800b136:	7bfb      	ldrb	r3, [r7, #15]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3714      	adds	r7, #20
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <__itoa>:
 800b144:	1e93      	subs	r3, r2, #2
 800b146:	2b22      	cmp	r3, #34	@ 0x22
 800b148:	b510      	push	{r4, lr}
 800b14a:	460c      	mov	r4, r1
 800b14c:	d904      	bls.n	800b158 <__itoa+0x14>
 800b14e:	2300      	movs	r3, #0
 800b150:	700b      	strb	r3, [r1, #0]
 800b152:	461c      	mov	r4, r3
 800b154:	4620      	mov	r0, r4
 800b156:	bd10      	pop	{r4, pc}
 800b158:	2a0a      	cmp	r2, #10
 800b15a:	d109      	bne.n	800b170 <__itoa+0x2c>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	da07      	bge.n	800b170 <__itoa+0x2c>
 800b160:	232d      	movs	r3, #45	@ 0x2d
 800b162:	700b      	strb	r3, [r1, #0]
 800b164:	4240      	negs	r0, r0
 800b166:	2101      	movs	r1, #1
 800b168:	4421      	add	r1, r4
 800b16a:	f000 f805 	bl	800b178 <__utoa>
 800b16e:	e7f1      	b.n	800b154 <__itoa+0x10>
 800b170:	2100      	movs	r1, #0
 800b172:	e7f9      	b.n	800b168 <__itoa+0x24>

0800b174 <itoa>:
 800b174:	f7ff bfe6 	b.w	800b144 <__itoa>

0800b178 <__utoa>:
 800b178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b17a:	4c1f      	ldr	r4, [pc, #124]	@ (800b1f8 <__utoa+0x80>)
 800b17c:	b08b      	sub	sp, #44	@ 0x2c
 800b17e:	4605      	mov	r5, r0
 800b180:	460b      	mov	r3, r1
 800b182:	466e      	mov	r6, sp
 800b184:	f104 0c20 	add.w	ip, r4, #32
 800b188:	6820      	ldr	r0, [r4, #0]
 800b18a:	6861      	ldr	r1, [r4, #4]
 800b18c:	4637      	mov	r7, r6
 800b18e:	c703      	stmia	r7!, {r0, r1}
 800b190:	3408      	adds	r4, #8
 800b192:	4564      	cmp	r4, ip
 800b194:	463e      	mov	r6, r7
 800b196:	d1f7      	bne.n	800b188 <__utoa+0x10>
 800b198:	7921      	ldrb	r1, [r4, #4]
 800b19a:	7139      	strb	r1, [r7, #4]
 800b19c:	1e91      	subs	r1, r2, #2
 800b19e:	6820      	ldr	r0, [r4, #0]
 800b1a0:	6038      	str	r0, [r7, #0]
 800b1a2:	2922      	cmp	r1, #34	@ 0x22
 800b1a4:	f04f 0100 	mov.w	r1, #0
 800b1a8:	d904      	bls.n	800b1b4 <__utoa+0x3c>
 800b1aa:	7019      	strb	r1, [r3, #0]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	b00b      	add	sp, #44	@ 0x2c
 800b1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1b4:	1e58      	subs	r0, r3, #1
 800b1b6:	4684      	mov	ip, r0
 800b1b8:	fbb5 f7f2 	udiv	r7, r5, r2
 800b1bc:	fb02 5617 	mls	r6, r2, r7, r5
 800b1c0:	3628      	adds	r6, #40	@ 0x28
 800b1c2:	446e      	add	r6, sp
 800b1c4:	460c      	mov	r4, r1
 800b1c6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b1ca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b1ce:	462e      	mov	r6, r5
 800b1d0:	42b2      	cmp	r2, r6
 800b1d2:	f101 0101 	add.w	r1, r1, #1
 800b1d6:	463d      	mov	r5, r7
 800b1d8:	d9ee      	bls.n	800b1b8 <__utoa+0x40>
 800b1da:	2200      	movs	r2, #0
 800b1dc:	545a      	strb	r2, [r3, r1]
 800b1de:	1919      	adds	r1, r3, r4
 800b1e0:	1aa5      	subs	r5, r4, r2
 800b1e2:	42aa      	cmp	r2, r5
 800b1e4:	dae3      	bge.n	800b1ae <__utoa+0x36>
 800b1e6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b1ea:	780e      	ldrb	r6, [r1, #0]
 800b1ec:	7006      	strb	r6, [r0, #0]
 800b1ee:	3201      	adds	r2, #1
 800b1f0:	f801 5901 	strb.w	r5, [r1], #-1
 800b1f4:	e7f4      	b.n	800b1e0 <__utoa+0x68>
 800b1f6:	bf00      	nop
 800b1f8:	0800c6c8 	.word	0x0800c6c8

0800b1fc <memset>:
 800b1fc:	4402      	add	r2, r0
 800b1fe:	4603      	mov	r3, r0
 800b200:	4293      	cmp	r3, r2
 800b202:	d100      	bne.n	800b206 <memset+0xa>
 800b204:	4770      	bx	lr
 800b206:	f803 1b01 	strb.w	r1, [r3], #1
 800b20a:	e7f9      	b.n	800b200 <memset+0x4>

0800b20c <__libc_init_array>:
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	4d0d      	ldr	r5, [pc, #52]	@ (800b244 <__libc_init_array+0x38>)
 800b210:	4c0d      	ldr	r4, [pc, #52]	@ (800b248 <__libc_init_array+0x3c>)
 800b212:	1b64      	subs	r4, r4, r5
 800b214:	10a4      	asrs	r4, r4, #2
 800b216:	2600      	movs	r6, #0
 800b218:	42a6      	cmp	r6, r4
 800b21a:	d109      	bne.n	800b230 <__libc_init_array+0x24>
 800b21c:	4d0b      	ldr	r5, [pc, #44]	@ (800b24c <__libc_init_array+0x40>)
 800b21e:	4c0c      	ldr	r4, [pc, #48]	@ (800b250 <__libc_init_array+0x44>)
 800b220:	f000 f818 	bl	800b254 <_init>
 800b224:	1b64      	subs	r4, r4, r5
 800b226:	10a4      	asrs	r4, r4, #2
 800b228:	2600      	movs	r6, #0
 800b22a:	42a6      	cmp	r6, r4
 800b22c:	d105      	bne.n	800b23a <__libc_init_array+0x2e>
 800b22e:	bd70      	pop	{r4, r5, r6, pc}
 800b230:	f855 3b04 	ldr.w	r3, [r5], #4
 800b234:	4798      	blx	r3
 800b236:	3601      	adds	r6, #1
 800b238:	e7ee      	b.n	800b218 <__libc_init_array+0xc>
 800b23a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b23e:	4798      	blx	r3
 800b240:	3601      	adds	r6, #1
 800b242:	e7f2      	b.n	800b22a <__libc_init_array+0x1e>
 800b244:	0800c6f8 	.word	0x0800c6f8
 800b248:	0800c6f8 	.word	0x0800c6f8
 800b24c:	0800c6f8 	.word	0x0800c6f8
 800b250:	0800c700 	.word	0x0800c700

0800b254 <_init>:
 800b254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b256:	bf00      	nop
 800b258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b25a:	bc08      	pop	{r3}
 800b25c:	469e      	mov	lr, r3
 800b25e:	4770      	bx	lr

0800b260 <_fini>:
 800b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b262:	bf00      	nop
 800b264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b266:	bc08      	pop	{r3}
 800b268:	469e      	mov	lr, r3
 800b26a:	4770      	bx	lr
