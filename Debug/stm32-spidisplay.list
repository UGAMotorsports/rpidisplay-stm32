
stm32-spidisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009178  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031c4  0800930c  0800930c  0000a30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4d0  0800c4d0  0000e0fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c4d0  0800c4d0  0000d4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4d8  0800c4d8  0000e0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4d8  0800c4d8  0000d4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c4dc  0800c4dc  0000d4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800c4e0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015c0  200000fc  0800c5dc  0000e0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016bc  0800c5dc  0000e6bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167de  00000000  00000000  0000e12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d7e  00000000  00000000  0002490a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00028688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f9c  00000000  00000000  00029b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad20  00000000  00000000  0002aaac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e50  00000000  00000000  000457cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a00  00000000  00000000  0005e61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f001c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c0  00000000  00000000  000f0060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f5520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080092f4 	.word	0x080092f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	080092f4 	.word	0x080092f4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	4b17      	ldr	r3, [pc, #92]	@ (8000568 <MX_DMA_Init+0x68>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a16      	ldr	r2, [pc, #88]	@ (8000568 <MX_DMA_Init+0x68>)
 8000510:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_DMA_Init+0x68>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_DMA_Init+0x68>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <MX_DMA_Init+0x68>)
 800052c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <MX_DMA_Init+0x68>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200b      	movs	r0, #11
 8000544:	f001 f9db 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000548:	200b      	movs	r0, #11
 800054a:	f001 f9f4 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	203b      	movs	r0, #59	@ 0x3b
 8000554:	f001 f9d3 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000558:	203b      	movs	r0, #59	@ 0x3b
 800055a:	f001 f9ec 	bl	8001936 <HAL_NVIC_EnableIRQ>

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40023800 	.word	0x40023800

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	4b3d      	ldr	r3, [pc, #244]	@ (800067c <MX_GPIO_Init+0x110>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a3c      	ldr	r2, [pc, #240]	@ (800067c <MX_GPIO_Init+0x110>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b3a      	ldr	r3, [pc, #232]	@ (800067c <MX_GPIO_Init+0x110>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b36      	ldr	r3, [pc, #216]	@ (800067c <MX_GPIO_Init+0x110>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a35      	ldr	r2, [pc, #212]	@ (800067c <MX_GPIO_Init+0x110>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ae:	4b33      	ldr	r3, [pc, #204]	@ (800067c <MX_GPIO_Init+0x110>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b2f      	ldr	r3, [pc, #188]	@ (800067c <MX_GPIO_Init+0x110>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a2e      	ldr	r2, [pc, #184]	@ (800067c <MX_GPIO_Init+0x110>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <MX_GPIO_Init+0x110>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b28      	ldr	r3, [pc, #160]	@ (800067c <MX_GPIO_Init+0x110>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a27      	ldr	r2, [pc, #156]	@ (800067c <MX_GPIO_Init+0x110>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b25      	ldr	r3, [pc, #148]	@ (800067c <MX_GPIO_Init+0x110>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f8:	4821      	ldr	r0, [pc, #132]	@ (8000680 <MX_GPIO_Init+0x114>)
 80005fa:	f001 feab 	bl	8002354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
 8000602:	4820      	ldr	r0, [pc, #128]	@ (8000684 <MX_GPIO_Init+0x118>)
 8000604:	f001 fea6 	bl	8002354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(chip_select_GPIO_Port, chip_select_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2108      	movs	r1, #8
 800060c:	481e      	ldr	r0, [pc, #120]	@ (8000688 <MX_GPIO_Init+0x11c>)
 800060e:	f001 fea1 	bl	8002354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, register_select_Pin|reset_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2130      	movs	r1, #48	@ 0x30
 8000616:	481c      	ldr	r0, [pc, #112]	@ (8000688 <MX_GPIO_Init+0x11c>)
 8000618:	f001 fe9c 	bl	8002354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800061c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	4812      	ldr	r0, [pc, #72]	@ (8000680 <MX_GPIO_Init+0x114>)
 8000636:	f001 fd09 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800063a:	2310      	movs	r3, #16
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <MX_GPIO_Init+0x118>)
 8000652:	f001 fcfb 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : chip_select_Pin register_select_Pin reset_Pin */
  GPIO_InitStruct.Pin = chip_select_Pin|register_select_Pin|reset_Pin;
 8000656:	2338      	movs	r3, #56	@ 0x38
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	4806      	ldr	r0, [pc, #24]	@ (8000688 <MX_GPIO_Init+0x11c>)
 800066e:	f001 fced 	bl	800204c <HAL_GPIO_Init>

}
 8000672:	bf00      	nop
 8000674:	3728      	adds	r7, #40	@ 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40020800 	.word	0x40020800
 8000684:	40020000 	.word	0x40020000
 8000688:	40020400 	.word	0x40020400

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b08a      	sub	sp, #40	@ 0x28
 8000690:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 ffc3 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f865 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f7ff ff67 	bl	800056c <MX_GPIO_Init>
  MX_DMA_Init();
 800069e:	f7ff ff2f 	bl	8000500 <MX_DMA_Init>
  MX_SPI1_Init();
 80006a2:	f000 f8d1 	bl	8000848 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006a6:	f000 f907 	bl	80008b8 <MX_SPI2_Init>
  MX_TIM4_Init();
 80006aa:	f000 fa75 	bl	8000b98 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80006ae:	f008 f90b 	bl	80088c8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < 5; i++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
 80006b6:	e014      	b.n	80006e2 <main+0x56>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006be:	4824      	ldr	r0, [pc, #144]	@ (8000750 <main+0xc4>)
 80006c0:	f001 fe48 	bl	8002354 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80006c4:	2064      	movs	r0, #100	@ 0x64
 80006c6:	f001 f81b 	bl	8001700 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006d0:	481f      	ldr	r0, [pc, #124]	@ (8000750 <main+0xc4>)
 80006d2:	f001 fe3f 	bl	8002354 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80006d6:	2064      	movs	r0, #100	@ 0x64
 80006d8:	f001 f812 	bl	8001700 <HAL_Delay>
  for (int i = 0; i < 5; i++) {
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	3301      	adds	r3, #1
 80006e0:	61fb      	str	r3, [r7, #28]
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	dde7      	ble.n	80006b8 <main+0x2c>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  resetScreen();
 80006e8:	f000 fc04 	bl	8000ef4 <resetScreen>
  initializeScreen();
 80006ec:	f000 fc20 	bl	8000f30 <initializeScreen>

  char *uga = "uga motorsports";
 80006f0:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <main+0xc8>)
 80006f2:	61bb      	str	r3, [r7, #24]
  drawString(uga, FREE_SANS_18PT7B, 240, 160, NO_FLIP_OBJECT | CENTER_OBJECT);
 80006f4:	2302      	movs	r3, #2
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	23a0      	movs	r3, #160	@ 0xa0
 80006fa:	22f0      	movs	r2, #240	@ 0xf0
 80006fc:	4916      	ldr	r1, [pc, #88]	@ (8000758 <main+0xcc>)
 80006fe:	69b8      	ldr	r0, [r7, #24]
 8000700:	f000 fef3 	bl	80014ea <drawString>
  HAL_Delay(200);
 8000704:	20c8      	movs	r0, #200	@ 0xc8
 8000706:	f000 fffb 	bl	8001700 <HAL_Delay>
  clearScreenfast(0x0000);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fd60 	bl	80011d0 <clearScreenfast>
  HAL_Delay(500);
 8000710:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000714:	f000 fff4 	bl	8001700 <HAL_Delay>
  clearScreen(0x0000);
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fce3 	bl	80010e4 <clearScreen>

  char rpmresult[20] = "not recieved rpm";
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <main+0xd0>)
 8000720:	1d3c      	adds	r4, r7, #4
 8000722:	461d      	mov	r5, r3
 8000724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000728:	682b      	ldr	r3, [r5, #0]
 800072a:	7023      	strb	r3, [r4, #0]
 800072c:	f107 0315 	add.w	r3, r7, #21
 8000730:	2200      	movs	r2, #0
 8000732:	801a      	strh	r2, [r3, #0]
 8000734:	709a      	strb	r2, [r3, #2]

  while (1)
  {

	  clearScreenfast(0x0000);
 8000736:	2000      	movs	r0, #0
 8000738:	f000 fd4a 	bl	80011d0 <clearScreenfast>
	  drawString(rpmresult, FREE_MONO_BOLD_24PT7B, 240, 160, NO_FLIP_OBJECT | CENTER_OBJECT);
 800073c:	1d38      	adds	r0, r7, #4
 800073e:	2302      	movs	r3, #2
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	23a0      	movs	r3, #160	@ 0xa0
 8000744:	22f0      	movs	r2, #240	@ 0xf0
 8000746:	4906      	ldr	r1, [pc, #24]	@ (8000760 <main+0xd4>)
 8000748:	f000 fecf 	bl	80014ea <drawString>
	  clearScreenfast(0x0000);
 800074c:	bf00      	nop
 800074e:	e7f2      	b.n	8000736 <main+0xaa>
 8000750:	40020800 	.word	0x40020800
 8000754:	0800930c 	.word	0x0800930c
 8000758:	0800c4a8 	.word	0x0800c4a8
 800075c:	0800931c 	.word	0x0800931c
 8000760:	0800b160 	.word	0x0800b160

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	@ 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	@ 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f008 fd92 	bl	800929c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b29      	ldr	r3, [pc, #164]	@ (8000834 <SystemClock_Config+0xd0>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	4a28      	ldr	r2, [pc, #160]	@ (8000834 <SystemClock_Config+0xd0>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	@ 0x40
 8000798:	4b26      	ldr	r3, [pc, #152]	@ (8000834 <SystemClock_Config+0xd0>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b23      	ldr	r3, [pc, #140]	@ (8000838 <SystemClock_Config+0xd4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007b0:	4a21      	ldr	r2, [pc, #132]	@ (8000838 <SystemClock_Config+0xd4>)
 80007b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <SystemClock_Config+0xd4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c4:	2301      	movs	r3, #1
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007d8:	2319      	movs	r3, #25
 80007da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007e2:	2304      	movs	r3, #4
 80007e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e6:	2307      	movs	r3, #7
 80007e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 f81c 	bl	800382c <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007fa:	f000 f81f 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2102      	movs	r1, #2
 800081a:	4618      	mov	r0, r3
 800081c:	f003 fa7e 	bl	8003d1c <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000826:	f000 f809 	bl	800083c <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	@ 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <Error_Handler+0x8>

08000848 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_SPI1_Init+0x68>)
 800084e:	4a19      	ldr	r2, [pc, #100]	@ (80008b4 <MX_SPI1_Init+0x6c>)
 8000850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_SPI1_Init+0x68>)
 8000854:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_SPI1_Init+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000860:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_SPI1_Init+0x68>)
 8000862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000866:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_SPI1_Init+0x68>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_SPI1_Init+0x68>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000874:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_SPI1_Init+0x68>)
 8000876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800087a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_SPI1_Init+0x68>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_SPI1_Init+0x68>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_SPI1_Init+0x68>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_SPI1_Init+0x68>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_SPI1_Init+0x68>)
 8000896:	220a      	movs	r2, #10
 8000898:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_SPI1_Init+0x68>)
 800089c:	f003 fbf6 	bl	800408c <HAL_SPI_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80008a6:	f7ff ffc9 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000118 	.word	0x20000118
 80008b4:	40013000 	.word	0x40013000

080008b8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80008bc:	4b17      	ldr	r3, [pc, #92]	@ (800091c <MX_SPI2_Init+0x64>)
 80008be:	4a18      	ldr	r2, [pc, #96]	@ (8000920 <MX_SPI2_Init+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008c2:	4b16      	ldr	r3, [pc, #88]	@ (800091c <MX_SPI2_Init+0x64>)
 80008c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ca:	4b14      	ldr	r3, [pc, #80]	@ (800091c <MX_SPI2_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <MX_SPI2_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <MX_SPI2_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <MX_SPI2_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <MX_SPI2_Init+0x64>)
 80008e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <MX_SPI2_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	@ (800091c <MX_SPI2_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <MX_SPI2_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fc:	4b07      	ldr	r3, [pc, #28]	@ (800091c <MX_SPI2_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000902:	4b06      	ldr	r3, [pc, #24]	@ (800091c <MX_SPI2_Init+0x64>)
 8000904:	220a      	movs	r2, #10
 8000906:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	@ (800091c <MX_SPI2_Init+0x64>)
 800090a:	f003 fbbf 	bl	800408c <HAL_SPI_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000914:	f7ff ff92 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000170 	.word	0x20000170
 8000920:	40003800 	.word	0x40003800

08000924 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	@ 0x30
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a4a      	ldr	r2, [pc, #296]	@ (8000a6c <HAL_SPI_MspInit+0x148>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d15c      	bne.n	8000a00 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
 800094a:	4b49      	ldr	r3, [pc, #292]	@ (8000a70 <HAL_SPI_MspInit+0x14c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	4a48      	ldr	r2, [pc, #288]	@ (8000a70 <HAL_SPI_MspInit+0x14c>)
 8000950:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000954:	6453      	str	r3, [r2, #68]	@ 0x44
 8000956:	4b46      	ldr	r3, [pc, #280]	@ (8000a70 <HAL_SPI_MspInit+0x14c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	4b42      	ldr	r3, [pc, #264]	@ (8000a70 <HAL_SPI_MspInit+0x14c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a41      	ldr	r2, [pc, #260]	@ (8000a70 <HAL_SPI_MspInit+0x14c>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b3f      	ldr	r3, [pc, #252]	@ (8000a70 <HAL_SPI_MspInit+0x14c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800097e:	23a0      	movs	r3, #160	@ 0xa0
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800098e:	2305      	movs	r3, #5
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4836      	ldr	r0, [pc, #216]	@ (8000a74 <HAL_SPI_MspInit+0x150>)
 800099a:	f001 fb57 	bl	800204c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800099e:	4b36      	ldr	r3, [pc, #216]	@ (8000a78 <HAL_SPI_MspInit+0x154>)
 80009a0:	4a36      	ldr	r2, [pc, #216]	@ (8000a7c <HAL_SPI_MspInit+0x158>)
 80009a2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80009a4:	4b34      	ldr	r3, [pc, #208]	@ (8000a78 <HAL_SPI_MspInit+0x154>)
 80009a6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80009aa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ac:	4b32      	ldr	r3, [pc, #200]	@ (8000a78 <HAL_SPI_MspInit+0x154>)
 80009ae:	2240      	movs	r2, #64	@ 0x40
 80009b0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b2:	4b31      	ldr	r3, [pc, #196]	@ (8000a78 <HAL_SPI_MspInit+0x154>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000a78 <HAL_SPI_MspInit+0x154>)
 80009ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009be:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a78 <HAL_SPI_MspInit+0x154>)
 80009c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a78 <HAL_SPI_MspInit+0x154>)
 80009ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ce:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80009d0:	4b29      	ldr	r3, [pc, #164]	@ (8000a78 <HAL_SPI_MspInit+0x154>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009d6:	4b28      	ldr	r3, [pc, #160]	@ (8000a78 <HAL_SPI_MspInit+0x154>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009dc:	4b26      	ldr	r3, [pc, #152]	@ (8000a78 <HAL_SPI_MspInit+0x154>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80009e2:	4825      	ldr	r0, [pc, #148]	@ (8000a78 <HAL_SPI_MspInit+0x154>)
 80009e4:	f000 ffc2 	bl	800196c <HAL_DMA_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80009ee:	f7ff ff25 	bl	800083c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a20      	ldr	r2, [pc, #128]	@ (8000a78 <HAL_SPI_MspInit+0x154>)
 80009f6:	649a      	str	r2, [r3, #72]	@ 0x48
 80009f8:	4a1f      	ldr	r2, [pc, #124]	@ (8000a78 <HAL_SPI_MspInit+0x154>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80009fe:	e031      	b.n	8000a64 <HAL_SPI_MspInit+0x140>
  else if(spiHandle->Instance==SPI2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1e      	ldr	r2, [pc, #120]	@ (8000a80 <HAL_SPI_MspInit+0x15c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d12c      	bne.n	8000a64 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <HAL_SPI_MspInit+0x14c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <HAL_SPI_MspInit+0x14c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <HAL_SPI_MspInit+0x14c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <HAL_SPI_MspInit+0x14c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a10      	ldr	r2, [pc, #64]	@ (8000a70 <HAL_SPI_MspInit+0x14c>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <HAL_SPI_MspInit+0x14c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000a42:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8000a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a54:	2305      	movs	r3, #5
 8000a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4809      	ldr	r0, [pc, #36]	@ (8000a84 <HAL_SPI_MspInit+0x160>)
 8000a60:	f001 faf4 	bl	800204c <HAL_GPIO_Init>
}
 8000a64:	bf00      	nop
 8000a66:	3730      	adds	r7, #48	@ 0x30
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40013000 	.word	0x40013000
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000
 8000a78:	200001c8 	.word	0x200001c8
 8000a7c:	40026458 	.word	0x40026458
 8000a80:	40003800 	.word	0x40003800
 8000a84:	40020400 	.word	0x40020400

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <NMI_Handler+0x4>

08000ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <MemManage_Handler+0x4>

08000af0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <UsageFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2e:	f000 fdc7 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8000b3c:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <DMA1_Stream0_IRQHandler+0x10>)
 8000b3e:	f001 f81b 	bl	8001b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000270 	.word	0x20000270

08000b4c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000b50:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <DMA2_Stream3_IRQHandler+0x10>)
 8000b52:	f001 f811 	bl	8001b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200001c8 	.word	0x200001c8

08000b60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b64:	4802      	ldr	r0, [pc, #8]	@ (8000b70 <OTG_FS_IRQHandler+0x10>)
 8000b66:	f001 fd52 	bl	800260e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000fb8 	.word	0x20000fb8

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08e      	sub	sp, #56	@ 0x38
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bac:	f107 0320 	add.w	r3, r7, #32
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	615a      	str	r2, [r3, #20]
 8000bc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c7c <MX_TIM4_Init+0xe4>)
 8000bca:	4a2d      	ldr	r2, [pc, #180]	@ (8000c80 <MX_TIM4_Init+0xe8>)
 8000bcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bce:	4b2b      	ldr	r3, [pc, #172]	@ (8000c7c <MX_TIM4_Init+0xe4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b29      	ldr	r3, [pc, #164]	@ (8000c7c <MX_TIM4_Init+0xe4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 8000bda:	4b28      	ldr	r3, [pc, #160]	@ (8000c7c <MX_TIM4_Init+0xe4>)
 8000bdc:	2269      	movs	r2, #105	@ 0x69
 8000bde:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b26      	ldr	r3, [pc, #152]	@ (8000c7c <MX_TIM4_Init+0xe4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b25      	ldr	r3, [pc, #148]	@ (8000c7c <MX_TIM4_Init+0xe4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bec:	4823      	ldr	r0, [pc, #140]	@ (8000c7c <MX_TIM4_Init+0xe4>)
 8000bee:	f003 fe3f 	bl	8004870 <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000bf8:	f7ff fe20 	bl	800083c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c06:	4619      	mov	r1, r3
 8000c08:	481c      	ldr	r0, [pc, #112]	@ (8000c7c <MX_TIM4_Init+0xe4>)
 8000c0a:	f003 ff9b 	bl	8004b44 <HAL_TIM_ConfigClockSource>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000c14:	f7ff fe12 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c18:	4818      	ldr	r0, [pc, #96]	@ (8000c7c <MX_TIM4_Init+0xe4>)
 8000c1a:	f003 fe78 	bl	800490e <HAL_TIM_PWM_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000c24:	f7ff fe0a 	bl	800083c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	4619      	mov	r1, r3
 8000c36:	4811      	ldr	r0, [pc, #68]	@ (8000c7c <MX_TIM4_Init+0xe4>)
 8000c38:	f004 fafe 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000c42:	f7ff fdfb 	bl	800083c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c46:	2360      	movs	r3, #96	@ 0x60
 8000c48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4807      	ldr	r0, [pc, #28]	@ (8000c7c <MX_TIM4_Init+0xe4>)
 8000c5e:	f003 feaf 	bl	80049c0 <HAL_TIM_PWM_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000c68:	f7ff fde8 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c6c:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <MX_TIM4_Init+0xe4>)
 8000c6e:	f000 f85d 	bl	8000d2c <HAL_TIM_MspPostInit>

}
 8000c72:	bf00      	nop
 8000c74:	3738      	adds	r7, #56	@ 0x38
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000228 	.word	0x20000228
 8000c80:	40000800 	.word	0x40000800

08000c84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a22      	ldr	r2, [pc, #136]	@ (8000d1c <HAL_TIM_Base_MspInit+0x98>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d13d      	bne.n	8000d12 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <HAL_TIM_Base_MspInit+0x9c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	4a20      	ldr	r2, [pc, #128]	@ (8000d20 <HAL_TIM_Base_MspInit+0x9c>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <HAL_TIM_Base_MspInit+0x9c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <HAL_TIM_Base_MspInit+0xa0>)
 8000cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d28 <HAL_TIM_Base_MspInit+0xa4>)
 8000cb6:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <HAL_TIM_Base_MspInit+0xa0>)
 8000cba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cbe:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <HAL_TIM_Base_MspInit+0xa0>)
 8000cc2:	2240      	movs	r2, #64	@ 0x40
 8000cc4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <HAL_TIM_Base_MspInit+0xa0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <HAL_TIM_Base_MspInit+0xa0>)
 8000cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cd2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <HAL_TIM_Base_MspInit+0xa0>)
 8000cd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cda:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <HAL_TIM_Base_MspInit+0xa0>)
 8000cde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ce2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <HAL_TIM_Base_MspInit+0xa0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_TIM_Base_MspInit+0xa0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <HAL_TIM_Base_MspInit+0xa0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8000cf6:	480b      	ldr	r0, [pc, #44]	@ (8000d24 <HAL_TIM_Base_MspInit+0xa0>)
 8000cf8:	f000 fe38 	bl	800196c <HAL_DMA_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000d02:	f7ff fd9b 	bl	800083c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a06      	ldr	r2, [pc, #24]	@ (8000d24 <HAL_TIM_Base_MspInit+0xa0>)
 8000d0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d0c:	4a05      	ldr	r2, [pc, #20]	@ (8000d24 <HAL_TIM_Base_MspInit+0xa0>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40000800 	.word	0x40000800
 8000d20:	40023800 	.word	0x40023800
 8000d24:	20000270 	.word	0x20000270
 8000d28:	40026010 	.word	0x40026010

08000d2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <HAL_TIM_MspPostInit+0x68>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d11d      	bne.n	8000d8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <HAL_TIM_MspPostInit+0x6c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a10      	ldr	r2, [pc, #64]	@ (8000d98 <HAL_TIM_MspPostInit+0x6c>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <HAL_TIM_MspPostInit+0x6c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d6a:	2340      	movs	r3, #64	@ 0x40
 8000d6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <HAL_TIM_MspPostInit+0x70>)
 8000d86:	f001 f961 	bl	800204c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40000800 	.word	0x40000800
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020400 	.word	0x40020400

08000da0 <_Z16startTransactionv>:
#include "gfxfont.h"
#include "gpio.h"
#include "spi.h"


void startTransaction() {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2108      	movs	r1, #8
 8000da8:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <_Z16startTransactionv+0x14>)
 8000daa:	f001 fad3 	bl	8002354 <HAL_GPIO_WritePin>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40020400 	.word	0x40020400

08000db8 <_Z14endTransactionv>:

void endTransaction() {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	4802      	ldr	r0, [pc, #8]	@ (8000dcc <_Z14endTransactionv+0x14>)
 8000dc2:	f001 fac7 	bl	8002354 <HAL_GPIO_WritePin>
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40020400 	.word	0x40020400

08000dd0 <_Z14dataOrRegisterh>:

void dataOrRegister(uint8_t data) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	if (data) {
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d005      	beq.n	8000dec <_Z14dataOrRegisterh+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	2110      	movs	r1, #16
 8000de4:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <_Z14dataOrRegisterh+0x30>)
 8000de6:	f001 fab5 	bl	8002354 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8000dea:	e004      	b.n	8000df6 <_Z14dataOrRegisterh+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2110      	movs	r1, #16
 8000df0:	4803      	ldr	r0, [pc, #12]	@ (8000e00 <_Z14dataOrRegisterh+0x30>)
 8000df2:	f001 faaf 	bl	8002354 <HAL_GPIO_WritePin>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40020400 	.word	0x40020400

08000e04 <_Z14commandAndDatatPtj>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8000e12:	f7ff ffc5 	bl	8000da0 <_Z16startTransactionv>

	dataOrRegister(0);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff ffda 	bl	8000dd0 <_Z14dataOrRegisterh>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8000e1c:	f107 010e 	add.w	r1, r7, #14
 8000e20:	230a      	movs	r3, #10
 8000e22:	2201      	movs	r2, #1
 8000e24:	480a      	ldr	r0, [pc, #40]	@ (8000e50 <_Z14commandAndDatatPtj+0x4c>)
 8000e26:	f003 f9ba 	bl	800419e <HAL_SPI_Transmit>

	if (size) {
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d009      	beq.n	8000e44 <_Z14commandAndDatatPtj+0x40>
		dataOrRegister(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff ffcd 	bl	8000dd0 <_Z14dataOrRegisterh>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <_Z14commandAndDatatPtj+0x4c>)
 8000e40:	f003 f9ad 	bl	800419e <HAL_SPI_Transmit>
	}

	endTransaction();
 8000e44:	f7ff ffb8 	bl	8000db8 <_Z14endTransactionv>
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000118 	.word	0x20000118

08000e54 <_Z12startCommandt>:

void startCommand(uint16_t command) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 8000e5e:	f7ff ff9f 	bl	8000da0 <_Z16startTransactionv>
	dataOrRegister(0);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff ffb4 	bl	8000dd0 <_Z14dataOrRegisterh>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8000e68:	1db9      	adds	r1, r7, #6
 8000e6a:	230a      	movs	r3, #10
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	4803      	ldr	r0, [pc, #12]	@ (8000e7c <_Z12startCommandt+0x28>)
 8000e70:	f003 f995 	bl	800419e <HAL_SPI_Transmit>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000118 	.word	0x20000118

08000e80 <_Z20transmitRepeatedDatatj>:

void transmitRepeatedData(uint16_t data16, unsigned int count) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	80fb      	strh	r3, [r7, #6]
	dataOrRegister(1);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff ff9f 	bl	8000dd0 <_Z14dataOrRegisterh>
	for (int i = 0; i < count; i++) {
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	e008      	b.n	8000eaa <_Z20transmitRepeatedDatatj+0x2a>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
 8000e98:	1db9      	adds	r1, r7, #6
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4807      	ldr	r0, [pc, #28]	@ (8000ebc <_Z20transmitRepeatedDatatj+0x3c>)
 8000ea0:	f003 f97d 	bl	800419e <HAL_SPI_Transmit>
	for (int i = 0; i < count; i++) {
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d8f2      	bhi.n	8000e98 <_Z20transmitRepeatedDatatj+0x18>
	}
}
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000118 	.word	0x20000118

08000ec0 <_Z18transmitSingleDatat>:

void transmitSingleData(uint16_t data16) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
	dataOrRegister(1);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ff80 	bl	8000dd0 <_Z14dataOrRegisterh>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
 8000ed0:	1db9      	adds	r1, r7, #6
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <_Z18transmitSingleDatat+0x24>)
 8000ed8:	f003 f961 	bl	800419e <HAL_SPI_Transmit>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000118 	.word	0x20000118

08000ee8 <_Z10endCommandv>:

void endCommand() {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	endTransaction();
 8000eec:	f7ff ff64 	bl	8000db8 <_Z14endTransactionv>
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <resetScreen>:

void resetScreen() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2120      	movs	r1, #32
 8000efc:	480b      	ldr	r0, [pc, #44]	@ (8000f2c <resetScreen+0x38>)
 8000efe:	f001 fa29 	bl	8002354 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000f02:	2014      	movs	r0, #20
 8000f04:	f000 fbfc 	bl	8001700 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	4807      	ldr	r0, [pc, #28]	@ (8000f2c <resetScreen+0x38>)
 8000f0e:	f001 fa21 	bl	8002354 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000f12:	2014      	movs	r0, #20
 8000f14:	f000 fbf4 	bl	8001700 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	4803      	ldr	r0, [pc, #12]	@ (8000f2c <resetScreen+0x38>)
 8000f1e:	f001 fa19 	bl	8002354 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f22:	2064      	movs	r0, #100	@ 0x64
 8000f24:	f000 fbec 	bl	8001700 <HAL_Delay>
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40020400 	.word	0x40020400

08000f30 <initializeScreen>:

void initializeScreen() {
 8000f30:	b5b0      	push	{r4, r5, r7, lr}
 8000f32:	b0a0      	sub	sp, #128	@ 0x80
 8000f34:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff62 	bl	8000e04 <_Z14commandAndDatatPtj>
	commandAndData(0x11, NULL, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2011      	movs	r0, #17
 8000f46:	f7ff ff5d 	bl	8000e04 <_Z14commandAndDatatPtj>
	{
		uint16_t data[] = {0x0055};
 8000f4a:	2355      	movs	r3, #85	@ 0x55
 8000f4c:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
		commandAndData(0x3A, data, sizeof(data));
 8000f50:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000f54:	2202      	movs	r2, #2
 8000f56:	4619      	mov	r1, r3
 8000f58:	203a      	movs	r0, #58	@ 0x3a
 8000f5a:	f7ff ff53 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 8000f5e:	4b5a      	ldr	r3, [pc, #360]	@ (80010c8 <initializeScreen+0x198>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	67bb      	str	r3, [r7, #120]	@ 0x78
		commandAndData(0xC0, data, sizeof(data));
 8000f64:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000f68:	2204      	movs	r2, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	20c0      	movs	r0, #192	@ 0xc0
 8000f6e:	f7ff ff49 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8000f72:	2345      	movs	r3, #69	@ 0x45
 8000f74:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		commandAndData(0xC1, data, sizeof(data));
 8000f7e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f82:	2204      	movs	r2, #4
 8000f84:	4619      	mov	r1, r3
 8000f86:	20c1      	movs	r0, #193	@ 0xc1
 8000f88:	f7ff ff3c 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0033};
 8000f8c:	2333      	movs	r3, #51	@ 0x33
 8000f8e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
		commandAndData(0xC2, data, sizeof(data));
 8000f92:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f96:	2202      	movs	r2, #2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	20c2      	movs	r0, #194	@ 0xc2
 8000f9c:	f7ff ff32 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8000fa6:	2328      	movs	r3, #40	@ 0x28
 8000fa8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		commandAndData(0xC5, data, sizeof(data));
 8000fac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	20c5      	movs	r0, #197	@ 0xc5
 8000fb6:	f7ff ff25 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 8000fba:	4b44      	ldr	r3, [pc, #272]	@ (80010cc <initializeScreen+0x19c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xB1, data, sizeof(data));
 8000fc0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	20b1      	movs	r0, #177	@ 0xb1
 8000fca:	f7ff ff1b 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0002};
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		commandAndData(0xB4, data, sizeof(data));
 8000fd4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fd8:	2202      	movs	r2, #2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	20b4      	movs	r0, #180	@ 0xb4
 8000fde:	f7ff ff11 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 8000fe2:	4a3b      	ldr	r2, [pc, #236]	@ (80010d0 <initializeScreen+0x1a0>)
 8000fe4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fe8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fec:	6018      	str	r0, [r3, #0]
 8000fee:	3304      	adds	r3, #4
 8000ff0:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 8000ff2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ff6:	2206      	movs	r2, #6
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	20b6      	movs	r0, #182	@ 0xb6
 8000ffc:	f7ff ff02 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 8001000:	4b34      	ldr	r3, [pc, #208]	@ (80010d4 <initializeScreen+0x1a4>)
 8001002:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001006:	461d      	mov	r5, r3
 8001008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001010:	c407      	stmia	r4!, {r0, r1, r2}
 8001012:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8001014:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001018:	221e      	movs	r2, #30
 800101a:	4619      	mov	r1, r3
 800101c:	20e0      	movs	r0, #224	@ 0xe0
 800101e:	f7ff fef1 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 8001022:	4b2d      	ldr	r3, [pc, #180]	@ (80010d8 <initializeScreen+0x1a8>)
 8001024:	f107 041c 	add.w	r4, r7, #28
 8001028:	461d      	mov	r5, r3
 800102a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001032:	c407      	stmia	r4!, {r0, r1, r2}
 8001034:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	221e      	movs	r2, #30
 800103c:	4619      	mov	r1, r3
 800103e:	20e1      	movs	r0, #225	@ 0xe1
 8001040:	f7ff fee0 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8001044:	2300      	movs	r3, #0
 8001046:	833b      	strh	r3, [r7, #24]
 8001048:	2322      	movs	r3, #34	@ 0x22
 800104a:	837b      	strh	r3, [r7, #26]
		commandAndData(0xB6, data, sizeof(data));
 800104c:	f107 0318 	add.w	r3, r7, #24
 8001050:	2204      	movs	r2, #4
 8001052:	4619      	mov	r1, r3
 8001054:	20b6      	movs	r0, #182	@ 0xb6
 8001056:	f7ff fed5 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0008};
 800105a:	2308      	movs	r3, #8
 800105c:	82bb      	strh	r3, [r7, #20]
		commandAndData(0x36, data, sizeof(data));
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	2202      	movs	r2, #2
 8001064:	4619      	mov	r1, r3
 8001066:	2036      	movs	r0, #54	@ 0x36
 8001068:	f7ff fecc 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		commandAndData(0x29, NULL, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	2029      	movs	r0, #41	@ 0x29
 8001072:	f7ff fec7 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_WIDTH - 1) >> 8), (uint16_t)((SCREEN_WIDTH - 1) & 0xFF)};
 8001076:	4a19      	ldr	r2, [pc, #100]	@ (80010dc <initializeScreen+0x1ac>)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001080:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2A, data, sizeof(data));
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2208      	movs	r2, #8
 800108a:	4619      	mov	r1, r3
 800108c:	202a      	movs	r0, #42	@ 0x2a
 800108e:	f7ff feb9 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_HEIGHT - 1) >> 8), (uint16_t)((SCREEN_HEIGHT - 1) & 0xFF)};
 8001092:	4a13      	ldr	r2, [pc, #76]	@ (80010e0 <initializeScreen+0x1b0>)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	e892 0003 	ldmia.w	r2, {r0, r1}
 800109a:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2B, data, sizeof(data));
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2208      	movs	r2, #8
 80010a2:	4619      	mov	r1, r3
 80010a4:	202b      	movs	r0, #43	@ 0x2b
 80010a6:	f7ff fead 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		startCommand(0x2C);
 80010aa:	202c      	movs	r0, #44	@ 0x2c
 80010ac:	f7ff fed2 	bl	8000e54 <_Z12startCommandt>
		transmitRepeatedData(0x0000, 320 * 480);
 80010b0:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff fee3 	bl	8000e80 <_Z20transmitRepeatedDatatj>
		endCommand();
 80010ba:	f7ff ff15 	bl	8000ee8 <_Z10endCommandv>
	}
}
 80010be:	bf00      	nop
 80010c0:	3780      	adds	r7, #128	@ 0x80
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bdb0      	pop	{r4, r5, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	08009330 	.word	0x08009330
 80010cc:	08009334 	.word	0x08009334
 80010d0:	08009338 	.word	0x08009338
 80010d4:	08009340 	.word	0x08009340
 80010d8:	08009360 	.word	0x08009360
 80010dc:	08009380 	.word	0x08009380
 80010e0:	08009388 	.word	0x08009388

080010e4 <clearScreen>:

void clearScreen(uint16_t color) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_WIDTH - 1) >> 8), (uint16_t)((SCREEN_WIDTH - 1) & 0xFF)};
 80010ee:	4a15      	ldr	r2, [pc, #84]	@ (8001144 <clearScreen+0x60>)
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010f8:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2A, data, sizeof(data));
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	2208      	movs	r2, #8
 8001102:	4619      	mov	r1, r3
 8001104:	202a      	movs	r0, #42	@ 0x2a
 8001106:	f7ff fe7d 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_HEIGHT - 1) >> 8), (uint16_t)((SCREEN_HEIGHT - 1) & 0xFF)};
 800110a:	4a0f      	ldr	r2, [pc, #60]	@ (8001148 <clearScreen+0x64>)
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001114:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2B, data, sizeof(data));
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2208      	movs	r2, #8
 800111e:	4619      	mov	r1, r3
 8001120:	202b      	movs	r0, #43	@ 0x2b
 8001122:	f7ff fe6f 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		startCommand(0x2C);
 8001126:	202c      	movs	r0, #44	@ 0x2c
 8001128:	f7ff fe94 	bl	8000e54 <_Z12startCommandt>
		transmitRepeatedData(color, 320 * 480);
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fea4 	bl	8000e80 <_Z20transmitRepeatedDatatj>
		endCommand();
 8001138:	f7ff fed6 	bl	8000ee8 <_Z10endCommandv>
	}
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	08009380 	.word	0x08009380
 8001148:	08009388 	.word	0x08009388

0800114c <_Z11modifySpacetttt>:

/**
 * x2 and y2 are included in the pixels, (ex: 0 to 8 includes 0 and 8 so this is 9 pixels)
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	4604      	mov	r4, r0
 8001154:	4608      	mov	r0, r1
 8001156:	4611      	mov	r1, r2
 8001158:	461a      	mov	r2, r3
 800115a:	4623      	mov	r3, r4
 800115c:	80fb      	strh	r3, [r7, #6]
 800115e:	4603      	mov	r3, r0
 8001160:	80bb      	strh	r3, [r7, #4]
 8001162:	460b      	mov	r3, r1
 8001164:	807b      	strh	r3, [r7, #2]
 8001166:	4613      	mov	r3, r2
 8001168:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0x00FF, y1 & 0x00FF, (y2 >> 8) & 0x00FF, y2 & 0x00FF};
 800116a:	88bb      	ldrh	r3, [r7, #4]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	b29b      	uxth	r3, r3
 8001170:	823b      	strh	r3, [r7, #16]
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	b29b      	uxth	r3, r3
 8001178:	827b      	strh	r3, [r7, #18]
 800117a:	883b      	ldrh	r3, [r7, #0]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	b29b      	uxth	r3, r3
 8001180:	82bb      	strh	r3, [r7, #20]
 8001182:	883b      	ldrh	r3, [r7, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	b29b      	uxth	r3, r3
 8001188:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	2208      	movs	r2, #8
 8001190:	4619      	mov	r1, r3
 8001192:	202a      	movs	r0, #42	@ 0x2a
 8001194:	f7ff fe36 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0x00FF, x1 & 0x00FF, (x2 >> 8) & 0x00FF, x2 & 0x00FF};
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	b29b      	uxth	r3, r3
 800119e:	813b      	strh	r3, [r7, #8]
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	817b      	strh	r3, [r7, #10]
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	81bb      	strh	r3, [r7, #12]
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	2208      	movs	r2, #8
 80011be:	4619      	mov	r1, r3
 80011c0:	202b      	movs	r0, #43	@ 0x2b
 80011c2:	f7ff fe1f 	bl	8000e04 <_Z14commandAndDatatPtj>
	}
}
 80011c6:	bf00      	nop
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}
	...

080011d0 <clearScreenfast>:

static uint8_t datasentflag = 0;
void clearScreenfast(uint16_t color) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	f5ad 4d16 	sub.w	sp, sp, #38400	@ 0x9600
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4602      	mov	r2, r0
 80011dc:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 80011e0:	f2a3 630a 	subw	r3, r3, #1546	@ 0x60a
 80011e4:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[19200];
	for (int i = 0; i < 19200; i++) {
 80011e6:	2300      	movs	r3, #0
 80011e8:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 80011ec:	f102 020c 	add.w	r2, r2, #12
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e01a      	b.n	800122a <clearScreenfast+0x5a>
		buffer1[i] = color;
 80011f4:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 80011f8:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 80011fc:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 8001200:	f102 020c 	add.w	r2, r2, #12
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	f507 61c2 	add.w	r1, r7, #1552	@ 0x610
 800120a:	f2a1 610a 	subw	r1, r1, #1546	@ 0x60a
 800120e:	8809      	ldrh	r1, [r1, #0]
 8001210:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 19200; i++) {
 8001214:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 8001218:	f103 030c 	add.w	r3, r3, #12
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 8001224:	f102 020c 	add.w	r2, r2, #12
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 800122e:	f103 030c 	add.w	r3, r3, #12
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 8001238:	dbdc      	blt.n	80011f4 <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 800123a:	f240 133f 	movw	r3, #319	@ 0x13f
 800123e:	f240 12df 	movw	r2, #479	@ 0x1df
 8001242:	2100      	movs	r1, #0
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff ff81 	bl	800114c <_Z11modifySpacetttt>
	startCommand(0x2C);
 800124a:	202c      	movs	r0, #44	@ 0x2c
 800124c:	f7ff fe02 	bl	8000e54 <_Z12startCommandt>
	dataOrRegister(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff fdbd 	bl	8000dd0 <_Z14dataOrRegisterh>
	for (int i = 0; i < 8; i++) {
 8001256:	2300      	movs	r3, #0
 8001258:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 800125c:	f102 0208 	add.w	r2, r2, #8
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e01b      	b.n	800129c <clearScreenfast+0xcc>
		HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)buffer1, 19200);
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	3b08      	subs	r3, #8
 800126a:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800126e:	4619      	mov	r1, r3
 8001270:	4812      	ldr	r0, [pc, #72]	@ (80012bc <clearScreenfast+0xec>)
 8001272:	f003 f8d9 	bl	8004428 <HAL_SPI_Transmit_DMA>
		while (!datasentflag) {}
 8001276:	bf00      	nop
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <clearScreenfast+0xf0>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0fb      	beq.n	8001278 <clearScreenfast+0xa8>
		datasentflag = 0;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <clearScreenfast+0xf0>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 8001286:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 800128a:	f103 0308 	add.w	r3, r3, #8
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 8001296:	f102 0208 	add.w	r2, r2, #8
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 80012a0:	f103 0308 	add.w	r3, r3, #8
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b07      	cmp	r3, #7
 80012a8:	dddc      	ble.n	8001264 <clearScreenfast+0x94>
	}
	endCommand();
 80012aa:	f7ff fe1d 	bl	8000ee8 <_Z10endCommandv>
}
 80012ae:	bf00      	nop
 80012b0:	f507 4716 	add.w	r7, r7, #38400	@ 0x9600
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000118 	.word	0x20000118
 80012c0:	200002d0 	.word	0x200002d0

080012c4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a05      	ldr	r2, [pc, #20]	@ (80012e8 <HAL_SPI_TxCpltCallback+0x24>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d102      	bne.n	80012dc <HAL_SPI_TxCpltCallback+0x18>
		datasentflag = 1;
 80012d6:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_SPI_TxCpltCallback+0x28>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
	}
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40013000 	.word	0x40013000
 80012ec:	200002d0 	.word	0x200002d0

080012f0 <drawPoint>:

void drawVLine(uint16_t x1, uint16_t y1, uint16_t height, uint16_t color) {
	fillArea(x1, y1, 1, height, color);
}

void drawPoint(uint16_t x, uint16_t y, uint16_t color) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	80fb      	strh	r3, [r7, #6]
 80012fa:	460b      	mov	r3, r1
 80012fc:	80bb      	strh	r3, [r7, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	807b      	strh	r3, [r7, #2]
	modifySpace(x, y, x, y);
 8001302:	88bb      	ldrh	r3, [r7, #4]
 8001304:	88fa      	ldrh	r2, [r7, #6]
 8001306:	88b9      	ldrh	r1, [r7, #4]
 8001308:	88f8      	ldrh	r0, [r7, #6]
 800130a:	f7ff ff1f 	bl	800114c <_Z11modifySpacetttt>
	startCommand(0x2C);
 800130e:	202c      	movs	r0, #44	@ 0x2c
 8001310:	f7ff fda0 	bl	8000e54 <_Z12startCommandt>
	transmitSingleData(color);
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fdd2 	bl	8000ec0 <_Z18transmitSingleDatat>
	endCommand();
 800131c:	f7ff fde4 	bl	8000ee8 <_Z10endCommandv>

}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_Z15getStringCenterPtS_PcPK7GFXfont>:
			}
		}
	}
}

void getStringCenter(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	@ 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
 8001334:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 800133e:	e012      	b.n	8001366 <_Z15getStringCenterPtS_PcPK7GFXfont+0x3e>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800134c:	3b20      	subs	r3, #32
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4413      	add	r3, r2
 8001352:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	791b      	ldrb	r3, [r3, #4]
 8001358:	461a      	mov	r2, r3
 800135a:	8b7b      	ldrh	r3, [r7, #26]
 800135c:	4413      	add	r3, r2
 800135e:	837b      	strh	r3, [r7, #26]
		currentletter++;
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	3301      	adds	r3, #1
 8001364:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1e8      	bne.n	8001340 <_Z15getStringCenterPtS_PcPK7GFXfont+0x18>
	}
	*currentx -= totallength / 2;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	881a      	ldrh	r2, [r3, #0]
 8001372:	8b7b      	ldrh	r3, [r7, #26]
 8001374:	085b      	lsrs	r3, r3, #1
 8001376:	b29b      	uxth	r3, r3
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	b29a      	uxth	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 8001380:	bf00      	nop
 8001382:	3724      	adds	r7, #36	@ 0x24
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <drawChar>:

uint16_t drawChar(char letter, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t positioning) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	4611      	mov	r1, r2
 8001396:	461a      	mov	r2, r3
 8001398:	4603      	mov	r3, r0
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	460b      	mov	r3, r1
 800139e:	81bb      	strh	r3, [r7, #12]
 80013a0:	4613      	mov	r3, r2
 80013a2:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80013ae:	3b20      	subs	r3, #32
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4413      	add	r3, r2
 80013b4:	61fb      	str	r3, [r7, #28]
	int16_t width = toDraw->width, height = toDraw->height;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	789b      	ldrb	r3, [r3, #2]
 80013ba:	837b      	strh	r3, [r7, #26]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	78db      	ldrb	r3, [r3, #3]
 80013c0:	833b      	strh	r3, [r7, #24]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	795b      	ldrb	r3, [r3, #5]
 80013c6:	75fb      	strb	r3, [r7, #23]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	799b      	ldrb	r3, [r3, #6]
 80013cc:	75bb      	strb	r3, [r7, #22]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	791b      	ldrb	r3, [r3, #4]
 80013d2:	757b      	strb	r3, [r7, #21]
	uint8_t *bitlist = font->bitmap;
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	613b      	str	r3, [r7, #16]
	uint16_t bo = toDraw->bitmapOffset;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t bits = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t bit = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	for (int16_t yy = 0; yy < height; yy++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	847b      	strh	r3, [r7, #34]	@ 0x22
 80013f0:	e06e      	b.n	80014d0 <drawChar+0x144>
	  for (int16_t xx = 0; xx < width; xx++) {
 80013f2:	2300      	movs	r3, #0
 80013f4:	843b      	strh	r3, [r7, #32]
 80013f6:	e05f      	b.n	80014b8 <drawChar+0x12c>
		if (!(bit++ & 7)) {
 80013f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	2b00      	cmp	r3, #0
 8001408:	bf0c      	ite	eq
 800140a:	2301      	moveq	r3, #1
 800140c:	2300      	movne	r3, #0
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <drawChar+0x9a>
		  bits = bitlist[bo++];
 8001414:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800141a:	461a      	mov	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		}
		if (bits & 0b10000000) {
 8001426:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800142a:	2b00      	cmp	r3, #0
 800142c:	da39      	bge.n	80014a2 <drawChar+0x116>
			if (positioning & FLIP_OBJECT) {
 800142e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d017      	beq.n	800146a <drawChar+0xde>
				drawPoint((uint16_t)((int16_t)xpos + xo + xx), (uint16_t)((int16_t)ypos + yo + yy), 0xFFFF);
 800143a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800143e:	b29a      	uxth	r2, r3
 8001440:	89bb      	ldrh	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	b29a      	uxth	r2, r3
 8001446:	8c3b      	ldrh	r3, [r7, #32]
 8001448:	4413      	add	r3, r2
 800144a:	b298      	uxth	r0, r3
 800144c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001450:	b29a      	uxth	r2, r3
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	4413      	add	r3, r2
 8001456:	b29a      	uxth	r2, r3
 8001458:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800145a:	4413      	add	r3, r2
 800145c:	b29b      	uxth	r3, r3
 800145e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff ff44 	bl	80012f0 <drawPoint>
 8001468:	e01b      	b.n	80014a2 <drawChar+0x116>
			} else {
				drawPoint((uint16_t)((int16_t)xpos + xadv - xo - xx), (uint16_t)((int16_t)ypos - yy - yo), 0xFFFF);
 800146a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800146e:	b29a      	uxth	r2, r3
 8001470:	89bb      	ldrh	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	b29a      	uxth	r2, r3
 8001476:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800147a:	b29b      	uxth	r3, r3
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	b29a      	uxth	r2, r3
 8001480:	8c3b      	ldrh	r3, [r7, #32]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	b298      	uxth	r0, r3
 8001486:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001488:	88fa      	ldrh	r2, [r7, #6]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	b29a      	uxth	r2, r3
 800148e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001492:	b29b      	uxth	r3, r3
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	b29b      	uxth	r3, r3
 8001498:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff ff27 	bl	80012f0 <drawPoint>
			}
		}
		bits <<= 1;
 80014a2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	  for (int16_t xx = 0; xx < width; xx++) {
 80014ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	843b      	strh	r3, [r7, #32]
 80014b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80014bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	db99      	blt.n	80013f8 <drawChar+0x6c>
	for (int16_t yy = 0; yy < height; yy++) {
 80014c4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80014d0:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80014d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d8:	429a      	cmp	r2, r3
 80014da:	db8a      	blt.n	80013f2 <drawChar+0x66>
	  }
	}

	return (uint16_t)xadv;
 80014dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80014e0:	b29b      	uxth	r3, r3
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3728      	adds	r7, #40	@ 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <drawString>:

uint8_t drawString(char *buffer, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t positioning) {
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b08a      	sub	sp, #40	@ 0x28
 80014ee:	af02      	add	r7, sp, #8
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	4611      	mov	r1, r2
 80014f6:	461a      	mov	r2, r3
 80014f8:	460b      	mov	r3, r1
 80014fa:	80fb      	strh	r3, [r7, #6]
 80014fc:	4613      	mov	r3, r2
 80014fe:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 8001500:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <drawString+0x2e>
		getStringCenter(&xpos, &ypos, buffer, font);
 800150c:	1d39      	adds	r1, r7, #4
 800150e:	1db8      	adds	r0, r7, #6
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	f7ff ff08 	bl	8001328 <_Z15getStringCenterPtS_PcPK7GFXfont>
	}
	uint16_t xAdvance = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	83fb      	strh	r3, [r7, #30]
	if (positioning & FLIP_OBJECT) {
 800151c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d01b      	beq.n	8001560 <drawString+0x76>
		char *currentChar = buffer;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	61bb      	str	r3, [r7, #24]
		while (*currentChar) {
 800152c:	e013      	b.n	8001556 <drawString+0x6c>
			xAdvance += drawChar(*currentChar, font, xpos + xAdvance, ypos, FLIP_OBJECT);
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	7818      	ldrb	r0, [r3, #0]
 8001532:	88fa      	ldrh	r2, [r7, #6]
 8001534:	8bfb      	ldrh	r3, [r7, #30]
 8001536:	4413      	add	r3, r2
 8001538:	b29a      	uxth	r2, r3
 800153a:	88bb      	ldrh	r3, [r7, #4]
 800153c:	2101      	movs	r1, #1
 800153e:	9100      	str	r1, [sp, #0]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	f7ff ff23 	bl	800138c <drawChar>
 8001546:	4603      	mov	r3, r0
 8001548:	461a      	mov	r2, r3
 800154a:	8bfb      	ldrh	r3, [r7, #30]
 800154c:	4413      	add	r3, r2
 800154e:	83fb      	strh	r3, [r7, #30]
			currentChar++;
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	3301      	adds	r3, #1
 8001554:	61bb      	str	r3, [r7, #24]
		while (*currentChar) {
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e7      	bne.n	800152e <drawString+0x44>
 800155e:	e02d      	b.n	80015bc <drawString+0xd2>
		}
	} else {
		uint16_t buffersize = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	82fb      	strh	r3, [r7, #22]
		while (buffer[++buffersize]) {};
 8001564:	bf00      	nop
 8001566:	8afb      	ldrh	r3, [r7, #22]
 8001568:	3301      	adds	r3, #1
 800156a:	82fb      	strh	r3, [r7, #22]
 800156c:	8afb      	ldrh	r3, [r7, #22]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf14      	ite	ne
 8001578:	2301      	movne	r3, #1
 800157a:	2300      	moveq	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f1      	bne.n	8001566 <drawString+0x7c>
		for (int i = buffersize - 1; i >= 0; i--) {
 8001582:	8afb      	ldrh	r3, [r7, #22]
 8001584:	3b01      	subs	r3, #1
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	e015      	b.n	80015b6 <drawString+0xcc>
			xAdvance += drawChar(buffer[i], font, xpos + xAdvance, ypos, NO_FLIP_OBJECT);
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	7818      	ldrb	r0, [r3, #0]
 8001592:	88fa      	ldrh	r2, [r7, #6]
 8001594:	8bfb      	ldrh	r3, [r7, #30]
 8001596:	4413      	add	r3, r2
 8001598:	b29a      	uxth	r2, r3
 800159a:	88bb      	ldrh	r3, [r7, #4]
 800159c:	2100      	movs	r1, #0
 800159e:	9100      	str	r1, [sp, #0]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	f7ff fef3 	bl	800138c <drawChar>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	8bfb      	ldrh	r3, [r7, #30]
 80015ac:	4413      	add	r3, r2
 80015ae:	83fb      	strh	r3, [r7, #30]
		for (int i = buffersize - 1; i >= 0; i--) {
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	dae6      	bge.n	800158a <drawString+0xa0>
		}
	}
	return font->yAdvance;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	7b1b      	ldrb	r3, [r3, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001600 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015cc:	f7ff fad2 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d0:	480c      	ldr	r0, [pc, #48]	@ (8001604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015d2:	490d      	ldr	r1, [pc, #52]	@ (8001608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d4:	4a0d      	ldr	r2, [pc, #52]	@ (800160c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f6:	f007 fe59 	bl	80092ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fa:	f7ff f847 	bl	800068c <main>
  bx  lr    
 80015fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001600:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800160c:	0800c4e0 	.word	0x0800c4e0
  ldr r2, =_sbss
 8001610:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001614:	200016bc 	.word	0x200016bc

08001618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC_IRQHandler>
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001620:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0d      	ldr	r2, [pc, #52]	@ (800165c <HAL_Init+0x40>)
 8001626:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800162a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0a      	ldr	r2, [pc, #40]	@ (800165c <HAL_Init+0x40>)
 8001632:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	@ (800165c <HAL_Init+0x40>)
 800163e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f000 f94f 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	200f      	movs	r0, #15
 800164c:	f000 f808 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7ff fa1a 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023c00 	.word	0x40023c00

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_InitTick+0x54>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <HAL_InitTick+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f967 	bl	8001952 <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800169c:	f000 f92f 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	@ (80016bc <HAL_InitTick+0x5c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000008 	.word	0x20000008
 80016bc:	20000004 	.word	0x20000004

080016c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008
 80016e4:	200002d4 	.word	0x200002d4

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200002d4 	.word	0x200002d4

08001700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff ffee 	bl	80016e8 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001718:	d005      	beq.n	8001726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <HAL_Delay+0x44>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001726:	bf00      	nop
 8001728:	f7ff ffde 	bl	80016e8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8f7      	bhi.n	8001728 <HAL_Delay+0x28>
  {
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000008 	.word	0x20000008

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001770:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177a:	4a04      	ldr	r2, [pc, #16]	@ (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60d3      	str	r3, [r2, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4907      	ldr	r1, [pc, #28]	@ (80017e4 <__NVIC_EnableIRQ+0x38>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	@ (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	@ (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	@ 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	@ 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018c8:	f7ff ff8e 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff29 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff3e 	bl	8001790 <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ff8e 	bl	800183c <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff5d 	bl	80017e8 <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff31 	bl	80017ac <__NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffa2 	bl	80018a4 <SysTick_Config>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff feb6 	bl	80016e8 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e099      	b.n	8001abc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a8:	e00f      	b.n	80019ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019aa:	f7ff fe9d 	bl	80016e8 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d908      	bls.n	80019ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2220      	movs	r2, #32
 80019bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2203      	movs	r2, #3
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e078      	b.n	8001abc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1e8      	bne.n	80019aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	4b38      	ldr	r3, [pc, #224]	@ (8001ac4 <HAL_DMA_Init+0x158>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d107      	bne.n	8001a34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f023 0307 	bic.w	r3, r3, #7
 8001a4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d117      	bne.n	8001a8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00e      	beq.n	8001a8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fa6f 	bl	8001f54 <DMA_CheckFifoParam>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2240      	movs	r2, #64	@ 0x40
 8001a80:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e016      	b.n	8001abc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 fa26 	bl	8001ee8 <DMA_CalcBaseAndBitshift>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa4:	223f      	movs	r2, #63	@ 0x3f
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	f010803f 	.word	0xf010803f

08001ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ade:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_DMA_Start_IT+0x26>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e040      	b.n	8001b70 <HAL_DMA_Start_IT+0xa8>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d12f      	bne.n	8001b62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2202      	movs	r2, #2
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 f9b8 	bl	8001e8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b20:	223f      	movs	r2, #63	@ 0x3f
 8001b22:	409a      	lsls	r2, r3
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0216 	orr.w	r2, r2, #22
 8001b36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0208 	orr.w	r2, r2, #8
 8001b4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e005      	b.n	8001b6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b84:	4b8e      	ldr	r3, [pc, #568]	@ (8001dc0 <HAL_DMA_IRQHandler+0x248>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a8e      	ldr	r2, [pc, #568]	@ (8001dc4 <HAL_DMA_IRQHandler+0x24c>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0a9b      	lsrs	r3, r3, #10
 8001b90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01a      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0204 	bic.w	r2, r2, #4
 8001bca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be8:	2201      	movs	r2, #1
 8001bea:	409a      	lsls	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d012      	beq.n	8001c1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c06:	2201      	movs	r2, #1
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c12:	f043 0202 	orr.w	r2, r3, #2
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1e:	2204      	movs	r2, #4
 8001c20:	409a      	lsls	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d012      	beq.n	8001c50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00b      	beq.n	8001c50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c48:	f043 0204 	orr.w	r2, r3, #4
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c54:	2210      	movs	r2, #16
 8001c56:	409a      	lsls	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d043      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d03c      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c72:	2210      	movs	r2, #16
 8001c74:	409a      	lsls	r2, r3
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d018      	beq.n	8001cba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d108      	bne.n	8001ca8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d024      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
 8001ca6:	e01f      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01b      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	4798      	blx	r3
 8001cb8:	e016      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0208 	bic.w	r2, r2, #8
 8001cd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cec:	2220      	movs	r2, #32
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 808f 	beq.w	8001e18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 8087 	beq.w	8001e18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0e:	2220      	movs	r2, #32
 8001d10:	409a      	lsls	r2, r3
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d136      	bne.n	8001d90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0216 	bic.w	r2, r2, #22
 8001d30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d103      	bne.n	8001d52 <HAL_DMA_IRQHandler+0x1da>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0208 	bic.w	r2, r2, #8
 8001d60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d66:	223f      	movs	r2, #63	@ 0x3f
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d07e      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
        }
        return;
 8001d8e:	e079      	b.n	8001e84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01d      	beq.n	8001dda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10d      	bne.n	8001dc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d031      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
 8001dbc:	e02c      	b.n	8001e18 <HAL_DMA_IRQHandler+0x2a0>
 8001dbe:	bf00      	nop
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d023      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	4798      	blx	r3
 8001dd8:	e01e      	b.n	8001e18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10f      	bne.n	8001e08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0210 	bic.w	r2, r2, #16
 8001df6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d032      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d022      	beq.n	8001e72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2205      	movs	r2, #5
 8001e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	3301      	adds	r3, #1
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d307      	bcc.n	8001e60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f2      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x2cc>
 8001e5e:	e000      	b.n	8001e62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d005      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
 8001e82:	e000      	b.n	8001e86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e84:	bf00      	nop
    }
  }
}
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ea8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b40      	cmp	r3, #64	@ 0x40
 8001eb8:	d108      	bne.n	8001ecc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eca:	e007      	b.n	8001edc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	60da      	str	r2, [r3, #12]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	3b10      	subs	r3, #16
 8001ef8:	4a14      	ldr	r2, [pc, #80]	@ (8001f4c <DMA_CalcBaseAndBitshift+0x64>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f02:	4a13      	ldr	r2, [pc, #76]	@ (8001f50 <DMA_CalcBaseAndBitshift+0x68>)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d909      	bls.n	8001f2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f1e:	f023 0303 	bic.w	r3, r3, #3
 8001f22:	1d1a      	adds	r2, r3, #4
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f28:	e007      	b.n	8001f3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	aaaaaaab 	.word	0xaaaaaaab
 8001f50:	0800c4c8 	.word	0x0800c4c8

08001f54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d11f      	bne.n	8001fae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d856      	bhi.n	8002022 <DMA_CheckFifoParam+0xce>
 8001f74:	a201      	add	r2, pc, #4	@ (adr r2, 8001f7c <DMA_CheckFifoParam+0x28>)
 8001f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7a:	bf00      	nop
 8001f7c:	08001f8d 	.word	0x08001f8d
 8001f80:	08001f9f 	.word	0x08001f9f
 8001f84:	08001f8d 	.word	0x08001f8d
 8001f88:	08002023 	.word	0x08002023
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d046      	beq.n	8002026 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f9c:	e043      	b.n	8002026 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fa6:	d140      	bne.n	800202a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fac:	e03d      	b.n	800202a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fb6:	d121      	bne.n	8001ffc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d837      	bhi.n	800202e <DMA_CheckFifoParam+0xda>
 8001fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc4 <DMA_CheckFifoParam+0x70>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	08001fd5 	.word	0x08001fd5
 8001fc8:	08001fdb 	.word	0x08001fdb
 8001fcc:	08001fd5 	.word	0x08001fd5
 8001fd0:	08001fed 	.word	0x08001fed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fd8:	e030      	b.n	800203c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d025      	beq.n	8002032 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fea:	e022      	b.n	8002032 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ff4:	d11f      	bne.n	8002036 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ffa:	e01c      	b.n	8002036 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d903      	bls.n	800200a <DMA_CheckFifoParam+0xb6>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d003      	beq.n	8002010 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002008:	e018      	b.n	800203c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
      break;
 800200e:	e015      	b.n	800203c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002014:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00e      	beq.n	800203a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
      break;
 8002020:	e00b      	b.n	800203a <DMA_CheckFifoParam+0xe6>
      break;
 8002022:	bf00      	nop
 8002024:	e00a      	b.n	800203c <DMA_CheckFifoParam+0xe8>
      break;
 8002026:	bf00      	nop
 8002028:	e008      	b.n	800203c <DMA_CheckFifoParam+0xe8>
      break;
 800202a:	bf00      	nop
 800202c:	e006      	b.n	800203c <DMA_CheckFifoParam+0xe8>
      break;
 800202e:	bf00      	nop
 8002030:	e004      	b.n	800203c <DMA_CheckFifoParam+0xe8>
      break;
 8002032:	bf00      	nop
 8002034:	e002      	b.n	800203c <DMA_CheckFifoParam+0xe8>
      break;   
 8002036:	bf00      	nop
 8002038:	e000      	b.n	800203c <DMA_CheckFifoParam+0xe8>
      break;
 800203a:	bf00      	nop
    }
  } 
  
  return status; 
 800203c:	7bfb      	ldrb	r3, [r7, #15]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop

0800204c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	@ 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	e159      	b.n	800231c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002068:	2201      	movs	r2, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	f040 8148 	bne.w	8002316 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b01      	cmp	r3, #1
 8002090:	d005      	beq.n	800209e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209a:	2b02      	cmp	r3, #2
 800209c:	d130      	bne.n	8002100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d4:	2201      	movs	r2, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 0201 	and.w	r2, r3, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b03      	cmp	r3, #3
 800210a:	d017      	beq.n	800213c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d123      	bne.n	8002190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	08da      	lsrs	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3208      	adds	r2, #8
 8002150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	220f      	movs	r2, #15
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	08da      	lsrs	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3208      	adds	r2, #8
 800218a:	69b9      	ldr	r1, [r7, #24]
 800218c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0203 	and.w	r2, r3, #3
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80a2 	beq.w	8002316 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b57      	ldr	r3, [pc, #348]	@ (8002334 <HAL_GPIO_Init+0x2e8>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	4a56      	ldr	r2, [pc, #344]	@ (8002334 <HAL_GPIO_Init+0x2e8>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e2:	4b54      	ldr	r3, [pc, #336]	@ (8002334 <HAL_GPIO_Init+0x2e8>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ee:	4a52      	ldr	r2, [pc, #328]	@ (8002338 <HAL_GPIO_Init+0x2ec>)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	220f      	movs	r2, #15
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a49      	ldr	r2, [pc, #292]	@ (800233c <HAL_GPIO_Init+0x2f0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d019      	beq.n	800224e <HAL_GPIO_Init+0x202>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a48      	ldr	r2, [pc, #288]	@ (8002340 <HAL_GPIO_Init+0x2f4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <HAL_GPIO_Init+0x1fe>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a47      	ldr	r2, [pc, #284]	@ (8002344 <HAL_GPIO_Init+0x2f8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00d      	beq.n	8002246 <HAL_GPIO_Init+0x1fa>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a46      	ldr	r2, [pc, #280]	@ (8002348 <HAL_GPIO_Init+0x2fc>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d007      	beq.n	8002242 <HAL_GPIO_Init+0x1f6>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a45      	ldr	r2, [pc, #276]	@ (800234c <HAL_GPIO_Init+0x300>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d101      	bne.n	800223e <HAL_GPIO_Init+0x1f2>
 800223a:	2304      	movs	r3, #4
 800223c:	e008      	b.n	8002250 <HAL_GPIO_Init+0x204>
 800223e:	2307      	movs	r3, #7
 8002240:	e006      	b.n	8002250 <HAL_GPIO_Init+0x204>
 8002242:	2303      	movs	r3, #3
 8002244:	e004      	b.n	8002250 <HAL_GPIO_Init+0x204>
 8002246:	2302      	movs	r3, #2
 8002248:	e002      	b.n	8002250 <HAL_GPIO_Init+0x204>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <HAL_GPIO_Init+0x204>
 800224e:	2300      	movs	r3, #0
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	f002 0203 	and.w	r2, r2, #3
 8002256:	0092      	lsls	r2, r2, #2
 8002258:	4093      	lsls	r3, r2
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002260:	4935      	ldr	r1, [pc, #212]	@ (8002338 <HAL_GPIO_Init+0x2ec>)
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	3302      	adds	r3, #2
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800226e:	4b38      	ldr	r3, [pc, #224]	@ (8002350 <HAL_GPIO_Init+0x304>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002292:	4a2f      	ldr	r2, [pc, #188]	@ (8002350 <HAL_GPIO_Init+0x304>)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002298:	4b2d      	ldr	r3, [pc, #180]	@ (8002350 <HAL_GPIO_Init+0x304>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022bc:	4a24      	ldr	r2, [pc, #144]	@ (8002350 <HAL_GPIO_Init+0x304>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022c2:	4b23      	ldr	r3, [pc, #140]	@ (8002350 <HAL_GPIO_Init+0x304>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002350 <HAL_GPIO_Init+0x304>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ec:	4b18      	ldr	r3, [pc, #96]	@ (8002350 <HAL_GPIO_Init+0x304>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002310:	4a0f      	ldr	r2, [pc, #60]	@ (8002350 <HAL_GPIO_Init+0x304>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3301      	adds	r3, #1
 800231a:	61fb      	str	r3, [r7, #28]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2b0f      	cmp	r3, #15
 8002320:	f67f aea2 	bls.w	8002068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	3724      	adds	r7, #36	@ 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800
 8002338:	40013800 	.word	0x40013800
 800233c:	40020000 	.word	0x40020000
 8002340:	40020400 	.word	0x40020400
 8002344:	40020800 	.word	0x40020800
 8002348:	40020c00 	.word	0x40020c00
 800234c:	40021000 	.word	0x40021000
 8002350:	40013c00 	.word	0x40013c00

08002354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
 8002360:	4613      	mov	r3, r2
 8002362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002364:	787b      	ldrb	r3, [r7, #1]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800236a:	887a      	ldrh	r2, [r7, #2]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002370:	e003      	b.n	800237a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002372:	887b      	ldrh	r3, [r7, #2]
 8002374:	041a      	lsls	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	619a      	str	r2, [r3, #24]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af02      	add	r7, sp, #8
 800238c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e101      	b.n	800259c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f006 fc68 	bl	8008c88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2203      	movs	r2, #3
 80023bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023c6:	d102      	bne.n	80023ce <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 f8b5 	bl	8005542 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	7c1a      	ldrb	r2, [r3, #16]
 80023e0:	f88d 2000 	strb.w	r2, [sp]
 80023e4:	3304      	adds	r3, #4
 80023e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e8:	f002 ff94 	bl	8005314 <USB_CoreInit>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0ce      	b.n	800259c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f003 f8ad 	bl	8005564 <USB_SetCurrentMode>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0bf      	b.n	800259c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e04a      	b.n	80024b8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3315      	adds	r3, #21
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	3314      	adds	r3, #20
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	b298      	uxth	r0, r3
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	332e      	adds	r3, #46	@ 0x2e
 800245e:	4602      	mov	r2, r0
 8002460:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	3318      	adds	r3, #24
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	331c      	adds	r3, #28
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	3320      	adds	r3, #32
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	3324      	adds	r3, #36	@ 0x24
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	3301      	adds	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	791b      	ldrb	r3, [r3, #4]
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d3af      	bcc.n	8002422 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	e044      	b.n	8002552 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	3301      	adds	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	791b      	ldrb	r3, [r3, #4]
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	429a      	cmp	r2, r3
 800255a:	d3b5      	bcc.n	80024c8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7c1a      	ldrb	r2, [r3, #16]
 8002564:	f88d 2000 	strb.w	r2, [sp]
 8002568:	3304      	adds	r3, #4
 800256a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800256c:	f003 f846 	bl	80055fc <USB_DevInit>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2202      	movs	r2, #2
 800257a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e00c      	b.n	800259c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f004 f890 	bl	80066ba <USB_DevDisconnect>

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_PCD_Start+0x1c>
 80025bc:	2302      	movs	r3, #2
 80025be:	e022      	b.n	8002606 <HAL_PCD_Start+0x62>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f002 ff97 	bl	8005520 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f004 f83e 	bl	8006678 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800260e:	b590      	push	{r4, r7, lr}
 8002610:	b08d      	sub	sp, #52	@ 0x34
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f004 f8fc 	bl	8006822 <USB_GetMode>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	f040 848c 	bne.w	8002f4a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f004 f860 	bl	80066fc <USB_ReadInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8482 	beq.w	8002f48 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f004 f84d 	bl	80066fc <USB_ReadInterrupts>
 8002662:	4603      	mov	r3, r0
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b02      	cmp	r3, #2
 800266a:	d107      	bne.n	800267c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f002 0202 	and.w	r2, r2, #2
 800267a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f004 f83b 	bl	80066fc <USB_ReadInterrupts>
 8002686:	4603      	mov	r3, r0
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b10      	cmp	r3, #16
 800268e:	d161      	bne.n	8002754 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0210 	bic.w	r2, r2, #16
 800269e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f003 020f 	and.w	r2, r3, #15
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	3304      	adds	r3, #4
 80026be:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80026c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026ca:	d124      	bne.n	8002716 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d035      	beq.n	8002744 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	6a38      	ldr	r0, [r7, #32]
 80026ec:	f003 fe72 	bl	80063d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026fc:	441a      	add	r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800270e:	441a      	add	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	615a      	str	r2, [r3, #20]
 8002714:	e016      	b.n	8002744 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800271c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002720:	d110      	bne.n	8002744 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002728:	2208      	movs	r2, #8
 800272a:	4619      	mov	r1, r3
 800272c:	6a38      	ldr	r0, [r7, #32]
 800272e:	f003 fe51 	bl	80063d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800273e:	441a      	add	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0210 	orr.w	r2, r2, #16
 8002752:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f003 ffcf 	bl	80066fc <USB_ReadInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002764:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002768:	f040 80a7 	bne.w	80028ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f003 ffd4 	bl	8006722 <USB_ReadDevAllOutEpInterrupt>
 800277a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800277c:	e099      	b.n	80028b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800277e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 808e 	beq.w	80028a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f003 fff8 	bl	800678a <USB_ReadDevOutEPInterrupt>
 800279a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00c      	beq.n	80027c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027b2:	461a      	mov	r2, r3
 80027b4:	2301      	movs	r3, #1
 80027b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fea4 	bl	8003508 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00c      	beq.n	80027e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027d6:	461a      	mov	r2, r3
 80027d8:	2308      	movs	r3, #8
 80027da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 ff7a 	bl	80036d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027fa:	461a      	mov	r2, r3
 80027fc:	2310      	movs	r3, #16
 80027fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d030      	beq.n	800286c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002812:	2b80      	cmp	r3, #128	@ 0x80
 8002814:	d109      	bne.n	800282a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002824:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002828:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800282a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	3304      	adds	r3, #4
 800283e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	78db      	ldrb	r3, [r3, #3]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d108      	bne.n	800285a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2200      	movs	r2, #0
 800284c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f006 fb13 	bl	8008e80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	4413      	add	r3, r2
 8002862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002866:	461a      	mov	r2, r3
 8002868:	2302      	movs	r3, #2
 800286a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002882:	461a      	mov	r2, r3
 8002884:	2320      	movs	r3, #32
 8002886:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800289e:	461a      	mov	r2, r3
 80028a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	3301      	adds	r3, #1
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80028ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80028b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f47f af62 	bne.w	800277e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 ff1c 	bl	80066fc <USB_ReadInterrupts>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028ce:	f040 80db 	bne.w	8002a88 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 ff3d 	bl	8006756 <USB_ReadDevAllInEpInterrupt>
 80028dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80028e2:	e0cd      	b.n	8002a80 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80c2 	beq.w	8002a74 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 ff63 	bl	80067c6 <USB_ReadDevInEPInterrupt>
 8002900:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d057      	beq.n	80029bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	2201      	movs	r2, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	43db      	mvns	r3, r3
 8002926:	69f9      	ldr	r1, [r7, #28]
 8002928:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800292c:	4013      	ands	r3, r2
 800292e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	4413      	add	r3, r2
 8002938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800293c:	461a      	mov	r2, r3
 800293e:	2301      	movs	r3, #1
 8002940:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	799b      	ldrb	r3, [r3, #6]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d132      	bne.n	80029b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	3320      	adds	r3, #32
 800295a:	6819      	ldr	r1, [r3, #0]
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4403      	add	r3, r0
 800296a:	331c      	adds	r3, #28
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4419      	add	r1, r3
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4403      	add	r3, r0
 800297e:	3320      	adds	r3, #32
 8002980:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002984:	2b00      	cmp	r3, #0
 8002986:	d113      	bne.n	80029b0 <HAL_PCD_IRQHandler+0x3a2>
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	3324      	adds	r3, #36	@ 0x24
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d108      	bne.n	80029b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029a8:	461a      	mov	r2, r3
 80029aa:	2101      	movs	r1, #1
 80029ac:	f003 ff6a 	bl	8006884 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	4619      	mov	r1, r3
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f006 f9e7 	bl	8008d8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029d2:	461a      	mov	r2, r3
 80029d4:	2308      	movs	r3, #8
 80029d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029ee:	461a      	mov	r2, r3
 80029f0:	2310      	movs	r3, #16
 80029f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2340      	movs	r3, #64	@ 0x40
 8002a0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d023      	beq.n	8002a62 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a1c:	6a38      	ldr	r0, [r7, #32]
 8002a1e:	f002 ff51 	bl	80058c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	3310      	adds	r3, #16
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	3304      	adds	r3, #4
 8002a34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	78db      	ldrb	r3, [r3, #3]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d108      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2200      	movs	r2, #0
 8002a42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	4619      	mov	r1, r3
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f006 fa2a 	bl	8008ea4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2302      	movs	r3, #2
 8002a60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fcbd 	bl	80033ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	3301      	adds	r3, #1
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f47f af2e 	bne.w	80028e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f003 fe35 	bl	80066fc <USB_ReadInterrupts>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a9c:	d122      	bne.n	8002ae4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d108      	bne.n	8002ace <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fea4 	bl	8003814 <HAL_PCDEx_LPM_Callback>
 8002acc:	e002      	b.n	8002ad4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f006 f9c8 	bl	8008e64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 fe07 	bl	80066fc <USB_ReadInterrupts>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002af8:	d112      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d102      	bne.n	8002b10 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f006 f984 	bl	8008e18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b1e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f003 fde9 	bl	80066fc <USB_ReadInterrupts>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b34:	f040 80b7 	bne.w	8002ca6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2110      	movs	r1, #16
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 feb6 	bl	80058c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b5c:	e046      	b.n	8002bec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b70:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b82:	0151      	lsls	r1, r2, #5
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	440a      	add	r2, r1
 8002b88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ba4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bb6:	0151      	lsls	r1, r2, #5
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	440a      	add	r2, r1
 8002bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bc0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bd6:	0151      	lsls	r1, r2, #5
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	440a      	add	r2, r1
 8002bdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002be0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002be4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be8:	3301      	adds	r3, #1
 8002bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	791b      	ldrb	r3, [r3, #4]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d3b2      	bcc.n	8002b5e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c06:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c0a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7bdb      	ldrb	r3, [r3, #15]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d016      	beq.n	8002c42 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c24:	f043 030b 	orr.w	r3, r3, #11
 8002c28:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c3a:	f043 030b 	orr.w	r3, r3, #11
 8002c3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c40:	e015      	b.n	8002c6e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c54:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002c58:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c68:	f043 030b 	orr.w	r3, r3, #11
 8002c6c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c7c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c80:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c90:	461a      	mov	r2, r3
 8002c92:	f003 fdf7 	bl	8006884 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002ca4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 fd26 	bl	80066fc <USB_ReadInterrupts>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cba:	d123      	bne.n	8002d04 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f003 fdbc 	bl	800683e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 fe73 	bl	80059b6 <USB_GetDevSpeed>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681c      	ldr	r4, [r3, #0]
 8002cdc:	f001 f9ca 	bl	8004074 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f002 fb77 	bl	80053dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f006 f873 	bl	8008dda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f003 fcf7 	bl	80066fc <USB_ReadInterrupts>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d10a      	bne.n	8002d2e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f006 f850 	bl	8008dbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f002 0208 	and.w	r2, r2, #8
 8002d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f003 fce2 	bl	80066fc <USB_ReadInterrupts>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3e:	2b80      	cmp	r3, #128	@ 0x80
 8002d40:	d123      	bne.n	8002d8a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d4e:	2301      	movs	r3, #1
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d52:	e014      	b.n	8002d7e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	4619      	mov	r1, r3
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fb0a 	bl	800338c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	791b      	ldrb	r3, [r3, #4]
 8002d82:	461a      	mov	r2, r3
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d3e4      	bcc.n	8002d54 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f003 fcb4 	bl	80066fc <USB_ReadInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d9e:	d13c      	bne.n	8002e1a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002da0:	2301      	movs	r3, #1
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da4:	e02b      	b.n	8002dfe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3318      	adds	r3, #24
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d115      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002dcc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da12      	bge.n	8002df8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	3317      	adds	r3, #23
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	4619      	mov	r1, r3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 faca 	bl	800338c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	791b      	ldrb	r3, [r3, #4]
 8002e02:	461a      	mov	r2, r3
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d3cd      	bcc.n	8002da6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 fc6c 	bl	80066fc <USB_ReadInterrupts>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e2e:	d156      	bne.n	8002ede <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e30:	2301      	movs	r3, #1
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e34:	e045      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d12e      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e5e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	da2b      	bge.n	8002ebc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002e70:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d121      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eb8:	6053      	str	r3, [r2, #4]
            break;
 8002eba:	e008      	b.n	8002ece <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	791b      	ldrb	r3, [r3, #4]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d3b3      	bcc.n	8002e36 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002edc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f003 fc0a 	bl	80066fc <USB_ReadInterrupts>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ef2:	d10a      	bne.n	8002f0a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f005 ffe7 	bl	8008ec8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f003 fbf4 	bl	80066fc <USB_ReadInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d115      	bne.n	8002f4a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f005 ffd7 	bl	8008ee4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	e000      	b.n	8002f4a <HAL_PCD_IRQHandler+0x93c>
      return;
 8002f48:	bf00      	nop
    }
  }
}
 8002f4a:	3734      	adds	r7, #52	@ 0x34
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd90      	pop	{r4, r7, pc}

08002f50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_PCD_SetAddress+0x1a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e012      	b.n	8002f90 <HAL_PCD_SetAddress+0x40>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f003 fb53 	bl	800662c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	70fb      	strb	r3, [r7, #3]
 8002faa:	460b      	mov	r3, r1
 8002fac:	803b      	strh	r3, [r7, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	da0f      	bge.n	8002fde <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	f003 020f 	and.w	r2, r3, #15
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	3310      	adds	r3, #16
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	705a      	strb	r2, [r3, #1]
 8002fdc:	e00f      	b.n	8002ffe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	f003 020f 	and.w	r2, r3, #15
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	b2da      	uxtb	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800300a:	883b      	ldrh	r3, [r7, #0]
 800300c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	78ba      	ldrb	r2, [r7, #2]
 8003018:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	785b      	ldrb	r3, [r3, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d004      	beq.n	800302c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800302c:	78bb      	ldrb	r3, [r7, #2]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d102      	bne.n	8003038 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_PCD_EP_Open+0xae>
 8003042:	2302      	movs	r3, #2
 8003044:	e00e      	b.n	8003064 <HAL_PCD_EP_Open+0xcc>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68f9      	ldr	r1, [r7, #12]
 8003054:	4618      	mov	r0, r3
 8003056:	f002 fcd3 	bl	8005a00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003062:	7afb      	ldrb	r3, [r7, #11]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da0f      	bge.n	80030a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	f003 020f 	and.w	r2, r3, #15
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	3310      	adds	r3, #16
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	3304      	adds	r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	705a      	strb	r2, [r3, #1]
 800309e:	e00f      	b.n	80030c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	f003 020f 	and.w	r2, r3, #15
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	3304      	adds	r3, #4
 80030b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_PCD_EP_Close+0x6e>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e00e      	b.n	80030f8 <HAL_PCD_EP_Close+0x8c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68f9      	ldr	r1, [r7, #12]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f002 fd11 	bl	8005b10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	460b      	mov	r3, r1
 800310e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003110:	7afb      	ldrb	r3, [r7, #11]
 8003112:	f003 020f 	and.w	r2, r3, #15
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4413      	add	r3, r2
 8003126:	3304      	adds	r3, #4
 8003128:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2200      	movs	r2, #0
 800313a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2200      	movs	r2, #0
 8003140:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003142:	7afb      	ldrb	r3, [r7, #11]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	b2da      	uxtb	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	799b      	ldrb	r3, [r3, #6]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d102      	bne.n	800315c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	799b      	ldrb	r3, [r3, #6]
 8003164:	461a      	mov	r2, r3
 8003166:	6979      	ldr	r1, [r7, #20]
 8003168:	f002 fdae 	bl	8005cc8 <USB_EPStartXfer>

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	f003 020f 	and.w	r2, r3, #15
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003198:	681b      	ldr	r3, [r3, #0]
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	460b      	mov	r3, r1
 80031b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b6:	7afb      	ldrb	r3, [r7, #11]
 80031b8:	f003 020f 	and.w	r2, r3, #15
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	3310      	adds	r3, #16
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	3304      	adds	r3, #4
 80031cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2200      	movs	r2, #0
 80031de:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2201      	movs	r2, #1
 80031e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e6:	7afb      	ldrb	r3, [r7, #11]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	799b      	ldrb	r3, [r3, #6]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d102      	bne.n	8003200 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	799b      	ldrb	r3, [r3, #6]
 8003208:	461a      	mov	r2, r3
 800320a:	6979      	ldr	r1, [r7, #20]
 800320c:	f002 fd5c 	bl	8005cc8 <USB_EPStartXfer>

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	460b      	mov	r3, r1
 8003224:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	7912      	ldrb	r2, [r2, #4]
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e04f      	b.n	80032d8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323c:	2b00      	cmp	r3, #0
 800323e:	da0f      	bge.n	8003260 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	f003 020f 	and.w	r2, r3, #15
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	3310      	adds	r3, #16
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	3304      	adds	r3, #4
 8003256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	705a      	strb	r2, [r3, #1]
 800325e:	e00d      	b.n	800327c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	3304      	adds	r3, #4
 8003274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_PCD_EP_SetStall+0x82>
 8003298:	2302      	movs	r3, #2
 800329a:	e01d      	b.n	80032d8 <HAL_PCD_EP_SetStall+0xbe>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f003 f8ea 	bl	8006484 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7999      	ldrb	r1, [r3, #6]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032c8:	461a      	mov	r2, r3
 80032ca:	f003 fadb 	bl	8006884 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	7912      	ldrb	r2, [r2, #4]
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e042      	b.n	8003384 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003302:	2b00      	cmp	r3, #0
 8003304:	da0f      	bge.n	8003326 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	3310      	adds	r3, #16
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	3304      	adds	r3, #4
 800331c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	705a      	strb	r2, [r3, #1]
 8003324:	e00f      	b.n	8003346 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	f003 020f 	and.w	r2, r3, #15
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4413      	add	r3, r2
 800333c:	3304      	adds	r3, #4
 800333e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	b2da      	uxtb	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_PCD_EP_ClrStall+0x86>
 8003362:	2302      	movs	r3, #2
 8003364:	e00e      	b.n	8003384 <HAL_PCD_EP_ClrStall+0xa4>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	4618      	mov	r0, r3
 8003376:	f003 f8f3 	bl	8006560 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800339c:	2b00      	cmp	r3, #0
 800339e:	da0c      	bge.n	80033ba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	f003 020f 	and.w	r2, r3, #15
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	3310      	adds	r3, #16
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4413      	add	r3, r2
 80033b4:	3304      	adds	r3, #4
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	e00c      	b.n	80033d4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	f003 020f 	and.w	r2, r3, #15
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	3304      	adds	r3, #4
 80033d2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68f9      	ldr	r1, [r7, #12]
 80033da:	4618      	mov	r0, r3
 80033dc:	f002 ff12 	bl	8006204 <USB_EPStopXfer>
 80033e0:	4603      	mov	r3, r0
 80033e2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033e4:	7afb      	ldrb	r3, [r7, #11]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b08a      	sub	sp, #40	@ 0x28
 80033f2:	af02      	add	r7, sp, #8
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	3310      	adds	r3, #16
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	3304      	adds	r3, #4
 8003414:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	429a      	cmp	r2, r3
 8003420:	d901      	bls.n	8003426 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e06b      	b.n	80034fe <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	69fa      	ldr	r2, [r7, #28]
 8003438:	429a      	cmp	r2, r3
 800343a:	d902      	bls.n	8003442 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3303      	adds	r3, #3
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800344a:	e02a      	b.n	80034a2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	429a      	cmp	r2, r3
 8003460:	d902      	bls.n	8003468 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	3303      	adds	r3, #3
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	68d9      	ldr	r1, [r3, #12]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	4603      	mov	r3, r0
 8003484:	6978      	ldr	r0, [r7, #20]
 8003486:	f002 ff67 	bl	8006358 <USB_WritePacket>

    ep->xfer_buff  += len;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	441a      	add	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	441a      	add	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d809      	bhi.n	80034cc <PCD_WriteEmptyTxFifo+0xde>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d203      	bcs.n	80034cc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1bf      	bne.n	800344c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d811      	bhi.n	80034fc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	2201      	movs	r2, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	6939      	ldr	r1, [r7, #16]
 80034f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034f8:	4013      	ands	r3, r2
 80034fa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	333c      	adds	r3, #60	@ 0x3c
 8003520:	3304      	adds	r3, #4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	4413      	add	r3, r2
 800352e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	799b      	ldrb	r3, [r3, #6]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d17b      	bne.n	8003636 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d015      	beq.n	8003574 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	4a61      	ldr	r2, [pc, #388]	@ (80036d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	f240 80b9 	bls.w	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80b3 	beq.w	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800356a:	461a      	mov	r2, r3
 800356c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003570:	6093      	str	r3, [r2, #8]
 8003572:	e0a7      	b.n	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800358a:	461a      	mov	r2, r3
 800358c:	2320      	movs	r3, #32
 800358e:	6093      	str	r3, [r2, #8]
 8003590:	e098      	b.n	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003598:	2b00      	cmp	r3, #0
 800359a:	f040 8093 	bne.w	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	4a4b      	ldr	r2, [pc, #300]	@ (80036d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d90f      	bls.n	80035c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035bc:	461a      	mov	r2, r3
 80035be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035c2:	6093      	str	r3, [r2, #8]
 80035c4:	e07e      	b.n	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	4413      	add	r3, r2
 80035d8:	3304      	adds	r3, #4
 80035da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a1a      	ldr	r2, [r3, #32]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	0159      	lsls	r1, r3, #5
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	440b      	add	r3, r1
 80035e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f2:	1ad2      	subs	r2, r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d114      	bne.n	8003628 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d109      	bne.n	800361a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003610:	461a      	mov	r2, r3
 8003612:	2101      	movs	r1, #1
 8003614:	f003 f936 	bl	8006884 <USB_EP0_OutStart>
 8003618:	e006      	b.n	8003628 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	441a      	add	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	4619      	mov	r1, r3
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f005 fb90 	bl	8008d54 <HAL_PCD_DataOutStageCallback>
 8003634:	e046      	b.n	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	4a26      	ldr	r2, [pc, #152]	@ (80036d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d124      	bne.n	8003688 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003654:	461a      	mov	r2, r3
 8003656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800365a:	6093      	str	r3, [r2, #8]
 800365c:	e032      	b.n	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003674:	461a      	mov	r2, r3
 8003676:	2320      	movs	r3, #32
 8003678:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	4619      	mov	r1, r3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f005 fb67 	bl	8008d54 <HAL_PCD_DataOutStageCallback>
 8003686:	e01d      	b.n	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d114      	bne.n	80036b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d108      	bne.n	80036b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036b0:	461a      	mov	r2, r3
 80036b2:	2100      	movs	r1, #0
 80036b4:	f003 f8e6 	bl	8006884 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	4619      	mov	r1, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f005 fb48 	bl	8008d54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	4f54300a 	.word	0x4f54300a
 80036d4:	4f54310a 	.word	0x4f54310a

080036d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	333c      	adds	r3, #60	@ 0x3c
 80036f0:	3304      	adds	r3, #4
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a15      	ldr	r2, [pc, #84]	@ (8003760 <PCD_EP_OutSetupPacket_int+0x88>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d90e      	bls.n	800372c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003714:	2b00      	cmp	r3, #0
 8003716:	d009      	beq.n	800372c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003724:	461a      	mov	r2, r3
 8003726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800372a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f005 faff 	bl	8008d30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4a0a      	ldr	r2, [pc, #40]	@ (8003760 <PCD_EP_OutSetupPacket_int+0x88>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d90c      	bls.n	8003754 <PCD_EP_OutSetupPacket_int+0x7c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	799b      	ldrb	r3, [r3, #6]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d108      	bne.n	8003754 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800374c:	461a      	mov	r2, r3
 800374e:	2101      	movs	r1, #1
 8003750:	f003 f898 	bl	8006884 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	4f54300a 	.word	0x4f54300a

08003764 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	70fb      	strb	r3, [r7, #3]
 8003770:	4613      	mov	r3, r2
 8003772:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d107      	bne.n	8003792 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003782:	883b      	ldrh	r3, [r7, #0]
 8003784:	0419      	lsls	r1, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	430a      	orrs	r2, r1
 800378e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003790:	e028      	b.n	80037e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	0c1b      	lsrs	r3, r3, #16
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	4413      	add	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	73fb      	strb	r3, [r7, #15]
 80037a4:	e00d      	b.n	80037c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	3340      	adds	r3, #64	@ 0x40
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	4413      	add	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	3301      	adds	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
 80037c2:	7bfa      	ldrb	r2, [r7, #15]
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d3ec      	bcc.n	80037a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037cc:	883b      	ldrh	r3, [r7, #0]
 80037ce:	0418      	lsls	r0, r3, #16
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6819      	ldr	r1, [r3, #0]
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	4302      	orrs	r2, r0
 80037dc:	3340      	adds	r3, #64	@ 0x40
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	460b      	mov	r3, r1
 80037fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e267      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d075      	beq.n	8003936 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800384a:	4b88      	ldr	r3, [pc, #544]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b04      	cmp	r3, #4
 8003854:	d00c      	beq.n	8003870 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003856:	4b85      	ldr	r3, [pc, #532]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800385e:	2b08      	cmp	r3, #8
 8003860:	d112      	bne.n	8003888 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003862:	4b82      	ldr	r3, [pc, #520]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800386a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800386e:	d10b      	bne.n	8003888 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	4b7e      	ldr	r3, [pc, #504]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d05b      	beq.n	8003934 <HAL_RCC_OscConfig+0x108>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d157      	bne.n	8003934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e242      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003890:	d106      	bne.n	80038a0 <HAL_RCC_OscConfig+0x74>
 8003892:	4b76      	ldr	r3, [pc, #472]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a75      	ldr	r2, [pc, #468]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e01d      	b.n	80038dc <HAL_RCC_OscConfig+0xb0>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x98>
 80038aa:	4b70      	ldr	r3, [pc, #448]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6f      	ldr	r2, [pc, #444]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b6d      	ldr	r3, [pc, #436]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6c      	ldr	r2, [pc, #432]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e00b      	b.n	80038dc <HAL_RCC_OscConfig+0xb0>
 80038c4:	4b69      	ldr	r3, [pc, #420]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a68      	ldr	r2, [pc, #416]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b66      	ldr	r3, [pc, #408]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a65      	ldr	r2, [pc, #404]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d013      	beq.n	800390c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fd ff00 	bl	80016e8 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ec:	f7fd fefc 	bl	80016e8 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	@ 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e207      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b5b      	ldr	r3, [pc, #364]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0xc0>
 800390a:	e014      	b.n	8003936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7fd feec 	bl	80016e8 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003914:	f7fd fee8 	bl	80016e8 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	@ 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e1f3      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	4b51      	ldr	r3, [pc, #324]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0xe8>
 8003932:	e000      	b.n	8003936 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d063      	beq.n	8003a0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003942:	4b4a      	ldr	r3, [pc, #296]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800394e:	4b47      	ldr	r3, [pc, #284]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003956:	2b08      	cmp	r3, #8
 8003958:	d11c      	bne.n	8003994 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800395a:	4b44      	ldr	r3, [pc, #272]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d116      	bne.n	8003994 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003966:	4b41      	ldr	r3, [pc, #260]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_RCC_OscConfig+0x152>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e1c7      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	4937      	ldr	r1, [pc, #220]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003992:	e03a      	b.n	8003a0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d020      	beq.n	80039de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800399c:	4b34      	ldr	r3, [pc, #208]	@ (8003a70 <HAL_RCC_OscConfig+0x244>)
 800399e:	2201      	movs	r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a2:	f7fd fea1 	bl	80016e8 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039aa:	f7fd fe9d 	bl	80016e8 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e1a8      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c8:	4b28      	ldr	r3, [pc, #160]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4925      	ldr	r1, [pc, #148]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]
 80039dc:	e015      	b.n	8003a0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039de:	4b24      	ldr	r3, [pc, #144]	@ (8003a70 <HAL_RCC_OscConfig+0x244>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fd fe80 	bl	80016e8 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ec:	f7fd fe7c 	bl	80016e8 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e187      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	4b1b      	ldr	r3, [pc, #108]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d036      	beq.n	8003a84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d016      	beq.n	8003a4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1e:	4b15      	ldr	r3, [pc, #84]	@ (8003a74 <HAL_RCC_OscConfig+0x248>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a24:	f7fd fe60 	bl	80016e8 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a2c:	f7fd fe5c 	bl	80016e8 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e167      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x200>
 8003a4a:	e01b      	b.n	8003a84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a4c:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <HAL_RCC_OscConfig+0x248>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a52:	f7fd fe49 	bl	80016e8 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a58:	e00e      	b.n	8003a78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a5a:	f7fd fe45 	bl	80016e8 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d907      	bls.n	8003a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e150      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	42470000 	.word	0x42470000
 8003a74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a78:	4b88      	ldr	r3, [pc, #544]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1ea      	bne.n	8003a5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8097 	beq.w	8003bc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a92:	2300      	movs	r3, #0
 8003a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a96:	4b81      	ldr	r3, [pc, #516]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10f      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	4b7d      	ldr	r3, [pc, #500]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	4a7c      	ldr	r2, [pc, #496]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ab2:	4b7a      	ldr	r3, [pc, #488]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac2:	4b77      	ldr	r3, [pc, #476]	@ (8003ca0 <HAL_RCC_OscConfig+0x474>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d118      	bne.n	8003b00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ace:	4b74      	ldr	r3, [pc, #464]	@ (8003ca0 <HAL_RCC_OscConfig+0x474>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a73      	ldr	r2, [pc, #460]	@ (8003ca0 <HAL_RCC_OscConfig+0x474>)
 8003ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ada:	f7fd fe05 	bl	80016e8 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae2:	f7fd fe01 	bl	80016e8 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e10c      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca0 <HAL_RCC_OscConfig+0x474>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d106      	bne.n	8003b16 <HAL_RCC_OscConfig+0x2ea>
 8003b08:	4b64      	ldr	r3, [pc, #400]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0c:	4a63      	ldr	r2, [pc, #396]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b14:	e01c      	b.n	8003b50 <HAL_RCC_OscConfig+0x324>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b05      	cmp	r3, #5
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCC_OscConfig+0x30c>
 8003b1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b22:	4a5e      	ldr	r2, [pc, #376]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b24:	f043 0304 	orr.w	r3, r3, #4
 8003b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2e:	4a5b      	ldr	r2, [pc, #364]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b36:	e00b      	b.n	8003b50 <HAL_RCC_OscConfig+0x324>
 8003b38:	4b58      	ldr	r3, [pc, #352]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3c:	4a57      	ldr	r2, [pc, #348]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b3e:	f023 0301 	bic.w	r3, r3, #1
 8003b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b44:	4b55      	ldr	r3, [pc, #340]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b48:	4a54      	ldr	r2, [pc, #336]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b4a:	f023 0304 	bic.w	r3, r3, #4
 8003b4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d015      	beq.n	8003b84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b58:	f7fd fdc6 	bl	80016e8 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b60:	f7fd fdc2 	bl	80016e8 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e0cb      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b76:	4b49      	ldr	r3, [pc, #292]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0ee      	beq.n	8003b60 <HAL_RCC_OscConfig+0x334>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b84:	f7fd fdb0 	bl	80016e8 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8c:	f7fd fdac 	bl	80016e8 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e0b5      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ee      	bne.n	8003b8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d105      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb4:	4b39      	ldr	r3, [pc, #228]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	4a38      	ldr	r2, [pc, #224]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80a1 	beq.w	8003d0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bca:	4b34      	ldr	r3, [pc, #208]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d05c      	beq.n	8003c90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d141      	bne.n	8003c62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bde:	4b31      	ldr	r3, [pc, #196]	@ (8003ca4 <HAL_RCC_OscConfig+0x478>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fd fd80 	bl	80016e8 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bec:	f7fd fd7c 	bl	80016e8 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e087      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	4b27      	ldr	r3, [pc, #156]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	019b      	lsls	r3, r3, #6
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c20:	085b      	lsrs	r3, r3, #1
 8003c22:	3b01      	subs	r3, #1
 8003c24:	041b      	lsls	r3, r3, #16
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2c:	061b      	lsls	r3, r3, #24
 8003c2e:	491b      	ldr	r1, [pc, #108]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca4 <HAL_RCC_OscConfig+0x478>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3a:	f7fd fd55 	bl	80016e8 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c42:	f7fd fd51 	bl	80016e8 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e05c      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c54:	4b11      	ldr	r3, [pc, #68]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x416>
 8003c60:	e054      	b.n	8003d0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c62:	4b10      	ldr	r3, [pc, #64]	@ (8003ca4 <HAL_RCC_OscConfig+0x478>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fd fd3e 	bl	80016e8 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c70:	f7fd fd3a 	bl	80016e8 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e045      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	4b06      	ldr	r3, [pc, #24]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x444>
 8003c8e:	e03d      	b.n	8003d0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d107      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e038      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d18 <HAL_RCC_OscConfig+0x4ec>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d028      	beq.n	8003d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d121      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d11a      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cd8:	4013      	ands	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d111      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cee:	085b      	lsrs	r3, r3, #1
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800

08003d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0cc      	b.n	8003eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d30:	4b68      	ldr	r3, [pc, #416]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d90c      	bls.n	8003d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b65      	ldr	r3, [pc, #404]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b63      	ldr	r3, [pc, #396]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0b8      	b.n	8003eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d70:	4b59      	ldr	r3, [pc, #356]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	4a58      	ldr	r2, [pc, #352]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d88:	4b53      	ldr	r3, [pc, #332]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4a52      	ldr	r2, [pc, #328]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d94:	4b50      	ldr	r3, [pc, #320]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	494d      	ldr	r1, [pc, #308]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d044      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b47      	ldr	r3, [pc, #284]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d119      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e07f      	b.n	8003eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d003      	beq.n	8003dda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d107      	bne.n	8003dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dda:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e06f      	b.n	8003eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dea:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e067      	b.n	8003eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfa:	4b37      	ldr	r3, [pc, #220]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f023 0203 	bic.w	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4934      	ldr	r1, [pc, #208]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e0c:	f7fd fc6c 	bl	80016e8 <HAL_GetTick>
 8003e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e14:	f7fd fc68 	bl	80016e8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e04f      	b.n	8003eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 020c 	and.w	r2, r3, #12
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d1eb      	bne.n	8003e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e3c:	4b25      	ldr	r3, [pc, #148]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d20c      	bcs.n	8003e64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4a:	4b22      	ldr	r3, [pc, #136]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e52:	4b20      	ldr	r3, [pc, #128]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e032      	b.n	8003eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e70:	4b19      	ldr	r3, [pc, #100]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4916      	ldr	r1, [pc, #88]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d009      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e8e:	4b12      	ldr	r3, [pc, #72]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	490e      	ldr	r1, [pc, #56]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ea2:	f000 f821 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	490a      	ldr	r1, [pc, #40]	@ (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003eb4:	5ccb      	ldrb	r3, [r1, r3]
 8003eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eba:	4a09      	ldr	r2, [pc, #36]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ebe:	4b09      	ldr	r3, [pc, #36]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fd fbcc 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40023c00 	.word	0x40023c00
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	0800c4b8 	.word	0x0800c4b8
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	20000004 	.word	0x20000004

08003ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eec:	b090      	sub	sp, #64	@ 0x40
 8003eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f00:	4b59      	ldr	r3, [pc, #356]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 030c 	and.w	r3, r3, #12
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d00d      	beq.n	8003f28 <HAL_RCC_GetSysClockFreq+0x40>
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	f200 80a1 	bhi.w	8004054 <HAL_RCC_GetSysClockFreq+0x16c>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0x34>
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d003      	beq.n	8003f22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f1a:	e09b      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f1c:	4b53      	ldr	r3, [pc, #332]	@ (800406c <HAL_RCC_GetSysClockFreq+0x184>)
 8003f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f20:	e09b      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f22:	4b53      	ldr	r3, [pc, #332]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f26:	e098      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f28:	4b4f      	ldr	r3, [pc, #316]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f32:	4b4d      	ldr	r3, [pc, #308]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d028      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	099b      	lsrs	r3, r3, #6
 8003f44:	2200      	movs	r2, #0
 8003f46:	623b      	str	r3, [r7, #32]
 8003f48:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f50:	2100      	movs	r1, #0
 8003f52:	4b47      	ldr	r3, [pc, #284]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f54:	fb03 f201 	mul.w	r2, r3, r1
 8003f58:	2300      	movs	r3, #0
 8003f5a:	fb00 f303 	mul.w	r3, r0, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	4a43      	ldr	r2, [pc, #268]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f62:	fba0 1202 	umull	r1, r2, r0, r2
 8003f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f68:	460a      	mov	r2, r1
 8003f6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f6e:	4413      	add	r3, r2
 8003f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f74:	2200      	movs	r2, #0
 8003f76:	61bb      	str	r3, [r7, #24]
 8003f78:	61fa      	str	r2, [r7, #28]
 8003f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f82:	f7fc f927 	bl	80001d4 <__aeabi_uldivmod>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f8e:	e053      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f90:	4b35      	ldr	r3, [pc, #212]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	099b      	lsrs	r3, r3, #6
 8003f96:	2200      	movs	r2, #0
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	617a      	str	r2, [r7, #20]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003fa2:	f04f 0b00 	mov.w	fp, #0
 8003fa6:	4652      	mov	r2, sl
 8003fa8:	465b      	mov	r3, fp
 8003faa:	f04f 0000 	mov.w	r0, #0
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	0159      	lsls	r1, r3, #5
 8003fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb8:	0150      	lsls	r0, r2, #5
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	ebb2 080a 	subs.w	r8, r2, sl
 8003fc2:	eb63 090b 	sbc.w	r9, r3, fp
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003fda:	ebb2 0408 	subs.w	r4, r2, r8
 8003fde:	eb63 0509 	sbc.w	r5, r3, r9
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	00eb      	lsls	r3, r5, #3
 8003fec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ff0:	00e2      	lsls	r2, r4, #3
 8003ff2:	4614      	mov	r4, r2
 8003ff4:	461d      	mov	r5, r3
 8003ff6:	eb14 030a 	adds.w	r3, r4, sl
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	eb45 030b 	adc.w	r3, r5, fp
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800400e:	4629      	mov	r1, r5
 8004010:	028b      	lsls	r3, r1, #10
 8004012:	4621      	mov	r1, r4
 8004014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004018:	4621      	mov	r1, r4
 800401a:	028a      	lsls	r2, r1, #10
 800401c:	4610      	mov	r0, r2
 800401e:	4619      	mov	r1, r3
 8004020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004022:	2200      	movs	r2, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	60fa      	str	r2, [r7, #12]
 8004028:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800402c:	f7fc f8d2 	bl	80001d4 <__aeabi_uldivmod>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4613      	mov	r3, r2
 8004036:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004038:	4b0b      	ldr	r3, [pc, #44]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x180>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	3301      	adds	r3, #1
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004048:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800404a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004050:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004052:	e002      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004054:	4b05      	ldr	r3, [pc, #20]	@ (800406c <HAL_RCC_GetSysClockFreq+0x184>)
 8004056:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800405a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800405c:	4618      	mov	r0, r3
 800405e:	3740      	adds	r7, #64	@ 0x40
 8004060:	46bd      	mov	sp, r7
 8004062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800
 800406c:	00f42400 	.word	0x00f42400
 8004070:	017d7840 	.word	0x017d7840

08004074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004078:	4b03      	ldr	r3, [pc, #12]	@ (8004088 <HAL_RCC_GetHCLKFreq+0x14>)
 800407a:	681b      	ldr	r3, [r3, #0]
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000000 	.word	0x20000000

0800408c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e07b      	b.n	8004196 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d108      	bne.n	80040b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ae:	d009      	beq.n	80040c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	61da      	str	r2, [r3, #28]
 80040b6:	e005      	b.n	80040c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fc fc20 	bl	8000924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004148:	ea42 0103 	orr.w	r1, r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004150:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	f003 0104 	and.w	r1, r3, #4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	f003 0210 	and.w	r2, r3, #16
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004184:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b088      	sub	sp, #32
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	4613      	mov	r3, r2
 80041ac:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041ae:	f7fd fa9b 	bl	80016e8 <HAL_GetTick>
 80041b2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d001      	beq.n	80041c8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
 80041c6:	e12a      	b.n	800441e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_SPI_Transmit+0x36>
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e122      	b.n	800441e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_SPI_Transmit+0x48>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e11b      	b.n	800441e <HAL_SPI_Transmit+0x280>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2203      	movs	r2, #3
 80041f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	88fa      	ldrh	r2, [r7, #6]
 8004206:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	88fa      	ldrh	r2, [r7, #6]
 800420c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004234:	d10f      	bne.n	8004256 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004244:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004254:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004260:	2b40      	cmp	r3, #64	@ 0x40
 8004262:	d007      	beq.n	8004274 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004272:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800427c:	d152      	bne.n	8004324 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_SPI_Transmit+0xee>
 8004286:	8b7b      	ldrh	r3, [r7, #26]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d145      	bne.n	8004318 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004290:	881a      	ldrh	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429c:	1c9a      	adds	r2, r3, #2
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042b0:	e032      	b.n	8004318 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d112      	bne.n	80042e6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c4:	881a      	ldrh	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d0:	1c9a      	adds	r2, r3, #2
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042e4:	e018      	b.n	8004318 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042e6:	f7fd f9ff 	bl	80016e8 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d803      	bhi.n	80042fe <HAL_SPI_Transmit+0x160>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042fc:	d102      	bne.n	8004304 <HAL_SPI_Transmit+0x166>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d109      	bne.n	8004318 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e082      	b.n	800441e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1c7      	bne.n	80042b2 <HAL_SPI_Transmit+0x114>
 8004322:	e053      	b.n	80043cc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <HAL_SPI_Transmit+0x194>
 800432c:	8b7b      	ldrh	r3, [r7, #26]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d147      	bne.n	80043c2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	330c      	adds	r3, #12
 800433c:	7812      	ldrb	r2, [r2, #0]
 800433e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004358:	e033      	b.n	80043c2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b02      	cmp	r3, #2
 8004366:	d113      	bne.n	8004390 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	7812      	ldrb	r2, [r2, #0]
 8004374:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800438e:	e018      	b.n	80043c2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004390:	f7fd f9aa 	bl	80016e8 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d803      	bhi.n	80043a8 <HAL_SPI_Transmit+0x20a>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043a6:	d102      	bne.n	80043ae <HAL_SPI_Transmit+0x210>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e02d      	b.n	800441e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1c6      	bne.n	800435a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	6839      	ldr	r1, [r7, #0]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f9f9 	bl	80047c8 <SPI_EndRxTxTransaction>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800441c:	2300      	movs	r3, #0
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d001      	beq.n	8004446 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
 8004444:	e097      	b.n	8004576 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_SPI_Transmit_DMA+0x2a>
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e08f      	b.n	8004576 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_SPI_Transmit_DMA+0x3c>
 8004460:	2302      	movs	r3, #2
 8004462:	e088      	b.n	8004576 <HAL_SPI_Transmit_DMA+0x14e>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2203      	movs	r2, #3
 8004470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b2:	d10f      	bne.n	80044d4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d8:	4a29      	ldr	r2, [pc, #164]	@ (8004580 <HAL_SPI_Transmit_DMA+0x158>)
 80044da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e0:	4a28      	ldr	r2, [pc, #160]	@ (8004584 <HAL_SPI_Transmit_DMA+0x15c>)
 80044e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e8:	4a27      	ldr	r2, [pc, #156]	@ (8004588 <HAL_SPI_Transmit_DMA+0x160>)
 80044ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f0:	2200      	movs	r2, #0
 80044f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fc:	4619      	mov	r1, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800450a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800450c:	f7fd fadc 	bl	8001ac8 <HAL_DMA_Start_IT>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00b      	beq.n	800452e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451a:	f043 0210 	orr.w	r2, r3, #16
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e023      	b.n	8004576 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004538:	2b40      	cmp	r3, #64	@ 0x40
 800453a:	d007      	beq.n	800454c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800454a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0220 	orr.w	r2, r2, #32
 8004562:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0202 	orr.w	r2, r2, #2
 8004572:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	0800465d 	.word	0x0800465d
 8004584:	080045b5 	.word	0x080045b5
 8004588:	08004679 	.word	0x08004679

0800458c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045c2:	f7fd f891 	bl	80016e8 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045d6:	d03b      	beq.n	8004650 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0220 	bic.w	r2, r2, #32
 80045e6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0202 	bic.w	r2, r2, #2
 80045f6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	2164      	movs	r1, #100	@ 0x64
 80045fc:	6978      	ldr	r0, [r7, #20]
 80045fe:	f000 f8e3 	bl	80047c8 <SPI_EndRxTxTransaction>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2200      	movs	r2, #0
 8004636:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004648:	6978      	ldr	r0, [r7, #20]
 800464a:	f7ff ffa9 	bl	80045a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800464e:	e002      	b.n	8004656 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004650:	6978      	ldr	r0, [r7, #20]
 8004652:	f7fc fe37 	bl	80012c4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004668:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff ff8e 	bl	800458c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004684:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0203 	bic.w	r2, r2, #3
 8004694:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469a:	f043 0210 	orr.w	r2, r3, #16
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff ff78 	bl	80045a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046c8:	f7fd f80e 	bl	80016e8 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	4413      	add	r3, r2
 80046d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046d8:	f7fd f806 	bl	80016e8 <HAL_GetTick>
 80046dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046de:	4b39      	ldr	r3, [pc, #228]	@ (80047c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	015b      	lsls	r3, r3, #5
 80046e4:	0d1b      	lsrs	r3, r3, #20
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	fb02 f303 	mul.w	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ee:	e054      	b.n	800479a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046f6:	d050      	beq.n	800479a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046f8:	f7fc fff6 	bl	80016e8 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	429a      	cmp	r2, r3
 8004706:	d902      	bls.n	800470e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d13d      	bne.n	800478a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800471c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004726:	d111      	bne.n	800474c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004730:	d004      	beq.n	800473c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473a:	d107      	bne.n	800474c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800474a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004754:	d10f      	bne.n	8004776 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004774:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e017      	b.n	80047ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3b01      	subs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d19b      	bne.n	80046f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3720      	adds	r7, #32
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000000 	.word	0x20000000

080047c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2201      	movs	r2, #1
 80047dc:	2102      	movs	r1, #2
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f7ff ff6a 	bl	80046b8 <SPI_WaitFlagStateUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ee:	f043 0220 	orr.w	r2, r3, #32
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e032      	b.n	8004860 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004868 <SPI_EndRxTxTransaction+0xa0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a1b      	ldr	r2, [pc, #108]	@ (800486c <SPI_EndRxTxTransaction+0xa4>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	0d5b      	lsrs	r3, r3, #21
 8004806:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004818:	d112      	bne.n	8004840 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2200      	movs	r2, #0
 8004822:	2180      	movs	r1, #128	@ 0x80
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f7ff ff47 	bl	80046b8 <SPI_WaitFlagStateUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d016      	beq.n	800485e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004834:	f043 0220 	orr.w	r2, r3, #32
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e00f      	b.n	8004860 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	3b01      	subs	r3, #1
 800484a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004856:	2b80      	cmp	r3, #128	@ 0x80
 8004858:	d0f2      	beq.n	8004840 <SPI_EndRxTxTransaction+0x78>
 800485a:	e000      	b.n	800485e <SPI_EndRxTxTransaction+0x96>
        break;
 800485c:	bf00      	nop
  }

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000000 	.word	0x20000000
 800486c:	165e9f81 	.word	0x165e9f81

08004870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e041      	b.n	8004906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc f9f4 	bl	8000c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f000 fa10 	bl	8004cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e041      	b.n	80049a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d106      	bne.n	800493a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f839 	bl	80049ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2202      	movs	r2, #2
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3304      	adds	r3, #4
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f000 f9c1 	bl	8004cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049da:	2302      	movs	r3, #2
 80049dc:	e0ae      	b.n	8004b3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	f200 809f 	bhi.w	8004b2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049ee:	a201      	add	r2, pc, #4	@ (adr r2, 80049f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a29 	.word	0x08004a29
 80049f8:	08004b2d 	.word	0x08004b2d
 80049fc:	08004b2d 	.word	0x08004b2d
 8004a00:	08004b2d 	.word	0x08004b2d
 8004a04:	08004a69 	.word	0x08004a69
 8004a08:	08004b2d 	.word	0x08004b2d
 8004a0c:	08004b2d 	.word	0x08004b2d
 8004a10:	08004b2d 	.word	0x08004b2d
 8004a14:	08004aab 	.word	0x08004aab
 8004a18:	08004b2d 	.word	0x08004b2d
 8004a1c:	08004b2d 	.word	0x08004b2d
 8004a20:	08004b2d 	.word	0x08004b2d
 8004a24:	08004aeb 	.word	0x08004aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 f9dc 	bl	8004dec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0208 	orr.w	r2, r2, #8
 8004a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0204 	bic.w	r2, r2, #4
 8004a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6999      	ldr	r1, [r3, #24]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	619a      	str	r2, [r3, #24]
      break;
 8004a66:	e064      	b.n	8004b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fa22 	bl	8004eb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6999      	ldr	r1, [r3, #24]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	021a      	lsls	r2, r3, #8
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	619a      	str	r2, [r3, #24]
      break;
 8004aa8:	e043      	b.n	8004b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fa6d 	bl	8004f90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0208 	orr.w	r2, r2, #8
 8004ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0204 	bic.w	r2, r2, #4
 8004ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69d9      	ldr	r1, [r3, #28]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	61da      	str	r2, [r3, #28]
      break;
 8004ae8:	e023      	b.n	8004b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fab7 	bl	8005064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69d9      	ldr	r1, [r3, #28]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	021a      	lsls	r2, r3, #8
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	61da      	str	r2, [r3, #28]
      break;
 8004b2a:	e002      	b.n	8004b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_TIM_ConfigClockSource+0x1c>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e0b4      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x186>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b98:	d03e      	beq.n	8004c18 <HAL_TIM_ConfigClockSource+0xd4>
 8004b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b9e:	f200 8087 	bhi.w	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba6:	f000 8086 	beq.w	8004cb6 <HAL_TIM_ConfigClockSource+0x172>
 8004baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bae:	d87f      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b70      	cmp	r3, #112	@ 0x70
 8004bb2:	d01a      	beq.n	8004bea <HAL_TIM_ConfigClockSource+0xa6>
 8004bb4:	2b70      	cmp	r3, #112	@ 0x70
 8004bb6:	d87b      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b60      	cmp	r3, #96	@ 0x60
 8004bba:	d050      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x11a>
 8004bbc:	2b60      	cmp	r3, #96	@ 0x60
 8004bbe:	d877      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b50      	cmp	r3, #80	@ 0x50
 8004bc2:	d03c      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0xfa>
 8004bc4:	2b50      	cmp	r3, #80	@ 0x50
 8004bc6:	d873      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b40      	cmp	r3, #64	@ 0x40
 8004bca:	d058      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x13a>
 8004bcc:	2b40      	cmp	r3, #64	@ 0x40
 8004bce:	d86f      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b30      	cmp	r3, #48	@ 0x30
 8004bd2:	d064      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004bd4:	2b30      	cmp	r3, #48	@ 0x30
 8004bd6:	d86b      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d060      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d867      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d05c      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d05a      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004be8:	e062      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bfa:	f000 fafd 	bl	80051f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	609a      	str	r2, [r3, #8]
      break;
 8004c16:	e04f      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c28:	f000 fae6 	bl	80051f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c3a:	609a      	str	r2, [r3, #8]
      break;
 8004c3c:	e03c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f000 fa5a 	bl	8005104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2150      	movs	r1, #80	@ 0x50
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fab3 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004c5c:	e02c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f000 fa79 	bl	8005162 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2160      	movs	r1, #96	@ 0x60
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 faa3 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004c7c:	e01c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f000 fa3a 	bl	8005104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2140      	movs	r1, #64	@ 0x40
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fa93 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004c9c:	e00c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f000 fa8a 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004cae:	e003      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb4:	e000      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a3a      	ldr	r2, [pc, #232]	@ (8004dd0 <TIM_Base_SetConfig+0xfc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00f      	beq.n	8004d0c <TIM_Base_SetConfig+0x38>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf2:	d00b      	beq.n	8004d0c <TIM_Base_SetConfig+0x38>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a37      	ldr	r2, [pc, #220]	@ (8004dd4 <TIM_Base_SetConfig+0x100>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d007      	beq.n	8004d0c <TIM_Base_SetConfig+0x38>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a36      	ldr	r2, [pc, #216]	@ (8004dd8 <TIM_Base_SetConfig+0x104>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_Base_SetConfig+0x38>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a35      	ldr	r2, [pc, #212]	@ (8004ddc <TIM_Base_SetConfig+0x108>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d108      	bne.n	8004d1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2b      	ldr	r2, [pc, #172]	@ (8004dd0 <TIM_Base_SetConfig+0xfc>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01b      	beq.n	8004d5e <TIM_Base_SetConfig+0x8a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d2c:	d017      	beq.n	8004d5e <TIM_Base_SetConfig+0x8a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a28      	ldr	r2, [pc, #160]	@ (8004dd4 <TIM_Base_SetConfig+0x100>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <TIM_Base_SetConfig+0x8a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a27      	ldr	r2, [pc, #156]	@ (8004dd8 <TIM_Base_SetConfig+0x104>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00f      	beq.n	8004d5e <TIM_Base_SetConfig+0x8a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a26      	ldr	r2, [pc, #152]	@ (8004ddc <TIM_Base_SetConfig+0x108>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00b      	beq.n	8004d5e <TIM_Base_SetConfig+0x8a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a25      	ldr	r2, [pc, #148]	@ (8004de0 <TIM_Base_SetConfig+0x10c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d007      	beq.n	8004d5e <TIM_Base_SetConfig+0x8a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a24      	ldr	r2, [pc, #144]	@ (8004de4 <TIM_Base_SetConfig+0x110>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d003      	beq.n	8004d5e <TIM_Base_SetConfig+0x8a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a23      	ldr	r2, [pc, #140]	@ (8004de8 <TIM_Base_SetConfig+0x114>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d108      	bne.n	8004d70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd0 <TIM_Base_SetConfig+0xfc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d103      	bne.n	8004da4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d105      	bne.n	8004dc2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f023 0201 	bic.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	611a      	str	r2, [r3, #16]
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40014000 	.word	0x40014000
 8004de4:	40014400 	.word	0x40014400
 8004de8:	40014800 	.word	0x40014800

08004dec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f023 0201 	bic.w	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0303 	bic.w	r3, r3, #3
 8004e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f023 0302 	bic.w	r3, r3, #2
 8004e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb4 <TIM_OC1_SetConfig+0xc8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d10c      	bne.n	8004e62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f023 0308 	bic.w	r3, r3, #8
 8004e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f023 0304 	bic.w	r3, r3, #4
 8004e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a13      	ldr	r2, [pc, #76]	@ (8004eb4 <TIM_OC1_SetConfig+0xc8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d111      	bne.n	8004e8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40010000 	.word	0x40010000

08004eb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f023 0210 	bic.w	r2, r3, #16
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0320 	bic.w	r3, r3, #32
 8004f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a1e      	ldr	r2, [pc, #120]	@ (8004f8c <TIM_OC2_SetConfig+0xd4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d10d      	bne.n	8004f34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a15      	ldr	r2, [pc, #84]	@ (8004f8c <TIM_OC2_SetConfig+0xd4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d113      	bne.n	8004f64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40010000 	.word	0x40010000

08004f90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8005060 <TIM_OC3_SetConfig+0xd0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10d      	bne.n	800500a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a14      	ldr	r2, [pc, #80]	@ (8005060 <TIM_OC3_SetConfig+0xd0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d113      	bne.n	800503a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	621a      	str	r2, [r3, #32]
}
 8005054:	bf00      	nop
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	40010000 	.word	0x40010000

08005064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800509a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	031b      	lsls	r3, r3, #12
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a10      	ldr	r2, [pc, #64]	@ (8005100 <TIM_OC4_SetConfig+0x9c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d109      	bne.n	80050d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	019b      	lsls	r3, r3, #6
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40010000 	.word	0x40010000

08005104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f023 0201 	bic.w	r2, r3, #1
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800512e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f023 030a 	bic.w	r3, r3, #10
 8005140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	621a      	str	r2, [r3, #32]
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005162:	b480      	push	{r7}
 8005164:	b087      	sub	sp, #28
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f023 0210 	bic.w	r2, r3, #16
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800518c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	031b      	lsls	r3, r3, #12
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800519e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	621a      	str	r2, [r3, #32]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	f043 0307 	orr.w	r3, r3, #7
 80051e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	609a      	str	r2, [r3, #8]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	021a      	lsls	r2, r3, #8
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	431a      	orrs	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4313      	orrs	r3, r2
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	609a      	str	r2, [r3, #8]
}
 800522c:	bf00      	nop
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800524c:	2302      	movs	r3, #2
 800524e:	e050      	b.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1c      	ldr	r2, [pc, #112]	@ (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d018      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800529c:	d013      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a18      	ldr	r2, [pc, #96]	@ (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00e      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a16      	ldr	r2, [pc, #88]	@ (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d009      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a15      	ldr	r2, [pc, #84]	@ (800530c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d004      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a13      	ldr	r2, [pc, #76]	@ (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d10c      	bne.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40010000 	.word	0x40010000
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
 8005310:	40014000 	.word	0x40014000

08005314 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005314:	b084      	sub	sp, #16
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	f107 001c 	add.w	r0, r7, #28
 8005322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005326:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800532a:	2b01      	cmp	r3, #1
 800532c:	d123      	bne.n	8005376 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005332:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005356:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800535a:	2b01      	cmp	r3, #1
 800535c:	d105      	bne.n	800536a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f001 fae8 	bl	8006940 <USB_CoreReset>
 8005370:	4603      	mov	r3, r0
 8005372:	73fb      	strb	r3, [r7, #15]
 8005374:	e01b      	b.n	80053ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f001 fadc 	bl	8006940 <USB_CoreReset>
 8005388:	4603      	mov	r3, r0
 800538a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800538c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005398:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	639a      	str	r2, [r3, #56]	@ 0x38
 80053a0:	e005      	b.n	80053ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053ae:	7fbb      	ldrb	r3, [r7, #30]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d10b      	bne.n	80053cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f043 0206 	orr.w	r2, r3, #6
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f043 0220 	orr.w	r2, r3, #32
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053d8:	b004      	add	sp, #16
 80053da:	4770      	bx	lr

080053dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	4613      	mov	r3, r2
 80053e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d165      	bne.n	80054bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a41      	ldr	r2, [pc, #260]	@ (80054f8 <USB_SetTurnaroundTime+0x11c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d906      	bls.n	8005406 <USB_SetTurnaroundTime+0x2a>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a40      	ldr	r2, [pc, #256]	@ (80054fc <USB_SetTurnaroundTime+0x120>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d202      	bcs.n	8005406 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005400:	230f      	movs	r3, #15
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e062      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4a3c      	ldr	r2, [pc, #240]	@ (80054fc <USB_SetTurnaroundTime+0x120>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d306      	bcc.n	800541c <USB_SetTurnaroundTime+0x40>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4a3b      	ldr	r2, [pc, #236]	@ (8005500 <USB_SetTurnaroundTime+0x124>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d202      	bcs.n	800541c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005416:	230e      	movs	r3, #14
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e057      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4a38      	ldr	r2, [pc, #224]	@ (8005500 <USB_SetTurnaroundTime+0x124>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d306      	bcc.n	8005432 <USB_SetTurnaroundTime+0x56>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4a37      	ldr	r2, [pc, #220]	@ (8005504 <USB_SetTurnaroundTime+0x128>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d202      	bcs.n	8005432 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800542c:	230d      	movs	r3, #13
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	e04c      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4a33      	ldr	r2, [pc, #204]	@ (8005504 <USB_SetTurnaroundTime+0x128>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d306      	bcc.n	8005448 <USB_SetTurnaroundTime+0x6c>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4a32      	ldr	r2, [pc, #200]	@ (8005508 <USB_SetTurnaroundTime+0x12c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d802      	bhi.n	8005448 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005442:	230c      	movs	r3, #12
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	e041      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4a2f      	ldr	r2, [pc, #188]	@ (8005508 <USB_SetTurnaroundTime+0x12c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d906      	bls.n	800545e <USB_SetTurnaroundTime+0x82>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4a2e      	ldr	r2, [pc, #184]	@ (800550c <USB_SetTurnaroundTime+0x130>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d802      	bhi.n	800545e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005458:	230b      	movs	r3, #11
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e036      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4a2a      	ldr	r2, [pc, #168]	@ (800550c <USB_SetTurnaroundTime+0x130>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d906      	bls.n	8005474 <USB_SetTurnaroundTime+0x98>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4a29      	ldr	r2, [pc, #164]	@ (8005510 <USB_SetTurnaroundTime+0x134>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d802      	bhi.n	8005474 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800546e:	230a      	movs	r3, #10
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e02b      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4a26      	ldr	r2, [pc, #152]	@ (8005510 <USB_SetTurnaroundTime+0x134>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d906      	bls.n	800548a <USB_SetTurnaroundTime+0xae>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a25      	ldr	r2, [pc, #148]	@ (8005514 <USB_SetTurnaroundTime+0x138>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d202      	bcs.n	800548a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005484:	2309      	movs	r3, #9
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e020      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4a21      	ldr	r2, [pc, #132]	@ (8005514 <USB_SetTurnaroundTime+0x138>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d306      	bcc.n	80054a0 <USB_SetTurnaroundTime+0xc4>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4a20      	ldr	r2, [pc, #128]	@ (8005518 <USB_SetTurnaroundTime+0x13c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d802      	bhi.n	80054a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800549a:	2308      	movs	r3, #8
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	e015      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005518 <USB_SetTurnaroundTime+0x13c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d906      	bls.n	80054b6 <USB_SetTurnaroundTime+0xda>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4a1c      	ldr	r2, [pc, #112]	@ (800551c <USB_SetTurnaroundTime+0x140>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d202      	bcs.n	80054b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054b0:	2307      	movs	r3, #7
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e00a      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054b6:	2306      	movs	r3, #6
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e007      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80054c2:	2309      	movs	r3, #9
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e001      	b.n	80054cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80054c8:	2309      	movs	r3, #9
 80054ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80054e4:	431a      	orrs	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	00d8acbf 	.word	0x00d8acbf
 80054fc:	00e4e1c0 	.word	0x00e4e1c0
 8005500:	00f42400 	.word	0x00f42400
 8005504:	01067380 	.word	0x01067380
 8005508:	011a499f 	.word	0x011a499f
 800550c:	01312cff 	.word	0x01312cff
 8005510:	014ca43f 	.word	0x014ca43f
 8005514:	016e3600 	.word	0x016e3600
 8005518:	01a6ab1f 	.word	0x01a6ab1f
 800551c:	01e84800 	.word	0x01e84800

08005520 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f043 0201 	orr.w	r2, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f023 0201 	bic.w	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d115      	bne.n	80055b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005592:	200a      	movs	r0, #10
 8005594:	f7fc f8b4 	bl	8001700 <HAL_Delay>
      ms += 10U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	330a      	adds	r3, #10
 800559c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f001 f93f 	bl	8006822 <USB_GetMode>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d01e      	beq.n	80055e8 <USB_SetCurrentMode+0x84>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80055ae:	d9f0      	bls.n	8005592 <USB_SetCurrentMode+0x2e>
 80055b0:	e01a      	b.n	80055e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d115      	bne.n	80055e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055c4:	200a      	movs	r0, #10
 80055c6:	f7fc f89b 	bl	8001700 <HAL_Delay>
      ms += 10U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	330a      	adds	r3, #10
 80055ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f001 f926 	bl	8006822 <USB_GetMode>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <USB_SetCurrentMode+0x84>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2bc7      	cmp	r3, #199	@ 0xc7
 80055e0:	d9f0      	bls.n	80055c4 <USB_SetCurrentMode+0x60>
 80055e2:	e001      	b.n	80055e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e005      	b.n	80055f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80055ec:	d101      	bne.n	80055f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055fc:	b084      	sub	sp, #16
 80055fe:	b580      	push	{r7, lr}
 8005600:	b086      	sub	sp, #24
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800560a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005616:	2300      	movs	r3, #0
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	e009      	b.n	8005630 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	3340      	adds	r3, #64	@ 0x40
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	2200      	movs	r2, #0
 8005628:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	3301      	adds	r3, #1
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b0e      	cmp	r3, #14
 8005634:	d9f2      	bls.n	800561c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005636:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800563a:	2b00      	cmp	r3, #0
 800563c:	d11c      	bne.n	8005678 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800564c:	f043 0302 	orr.w	r3, r3, #2
 8005650:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005656:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005662:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	639a      	str	r2, [r3, #56]	@ 0x38
 8005676:	e00b      	b.n	8005690 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005688:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005696:	461a      	mov	r2, r3
 8005698:	2300      	movs	r3, #0
 800569a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800569c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d10d      	bne.n	80056c0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d104      	bne.n	80056b6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056ac:	2100      	movs	r1, #0
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f968 	bl	8005984 <USB_SetDevSpeed>
 80056b4:	e008      	b.n	80056c8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056b6:	2101      	movs	r1, #1
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f963 	bl	8005984 <USB_SetDevSpeed>
 80056be:	e003      	b.n	80056c8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056c0:	2103      	movs	r1, #3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f95e 	bl	8005984 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056c8:	2110      	movs	r1, #16
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f8fa 	bl	80058c4 <USB_FlushTxFifo>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f924 	bl	8005928 <USB_FlushRxFifo>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f0:	461a      	mov	r2, r3
 80056f2:	2300      	movs	r3, #0
 80056f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056fc:	461a      	mov	r2, r3
 80056fe:	2300      	movs	r3, #0
 8005700:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005708:	461a      	mov	r2, r3
 800570a:	2300      	movs	r3, #0
 800570c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800570e:	2300      	movs	r3, #0
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	e043      	b.n	800579c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005726:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800572a:	d118      	bne.n	800575e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800573e:	461a      	mov	r2, r3
 8005740:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e013      	b.n	8005770 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005754:	461a      	mov	r2, r3
 8005756:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	e008      	b.n	8005770 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576a:	461a      	mov	r2, r3
 800576c:	2300      	movs	r3, #0
 800576e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800577c:	461a      	mov	r2, r3
 800577e:	2300      	movs	r3, #0
 8005780:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800578e:	461a      	mov	r2, r3
 8005790:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005794:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	3301      	adds	r3, #1
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057a0:	461a      	mov	r2, r3
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d3b5      	bcc.n	8005714 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	e043      	b.n	8005836 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057c4:	d118      	bne.n	80057f8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d8:	461a      	mov	r2, r3
 80057da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	e013      	b.n	800580a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ee:	461a      	mov	r2, r3
 80057f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e008      	b.n	800580a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005804:	461a      	mov	r2, r3
 8005806:	2300      	movs	r3, #0
 8005808:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005816:	461a      	mov	r2, r3
 8005818:	2300      	movs	r3, #0
 800581a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005828:	461a      	mov	r2, r3
 800582a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800582e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	3301      	adds	r3, #1
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800583a:	461a      	mov	r2, r3
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4293      	cmp	r3, r2
 8005840:	d3b5      	bcc.n	80057ae <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005854:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005862:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005864:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005868:	2b00      	cmp	r3, #0
 800586a:	d105      	bne.n	8005878 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f043 0210 	orr.w	r2, r3, #16
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	4b10      	ldr	r3, [pc, #64]	@ (80058c0 <USB_DevInit+0x2c4>)
 800587e:	4313      	orrs	r3, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005884:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	f043 0208 	orr.w	r2, r3, #8
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005898:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800589c:	2b01      	cmp	r3, #1
 800589e:	d107      	bne.n	80058b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058a8:	f043 0304 	orr.w	r3, r3, #4
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058bc:	b004      	add	sp, #16
 80058be:	4770      	bx	lr
 80058c0:	803c3800 	.word	0x803c3800

080058c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3301      	adds	r3, #1
 80058d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058de:	d901      	bls.n	80058e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e01b      	b.n	800591c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	daf2      	bge.n	80058d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	019b      	lsls	r3, r3, #6
 80058f4:	f043 0220 	orr.w	r2, r3, #32
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3301      	adds	r3, #1
 8005900:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005908:	d901      	bls.n	800590e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e006      	b.n	800591c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b20      	cmp	r3, #32
 8005918:	d0f0      	beq.n	80058fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3301      	adds	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005940:	d901      	bls.n	8005946 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e018      	b.n	8005978 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	daf2      	bge.n	8005934 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2210      	movs	r2, #16
 8005956:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005964:	d901      	bls.n	800596a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e006      	b.n	8005978 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	2b10      	cmp	r3, #16
 8005974:	d0f0      	beq.n	8005958 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	68f9      	ldr	r1, [r7, #12]
 80059a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059a4:	4313      	orrs	r3, r2
 80059a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b087      	sub	sp, #28
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0306 	and.w	r3, r3, #6
 80059ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d102      	bne.n	80059dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059d6:	2300      	movs	r3, #0
 80059d8:	75fb      	strb	r3, [r7, #23]
 80059da:	e00a      	b.n	80059f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d002      	beq.n	80059e8 <USB_GetDevSpeed+0x32>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b06      	cmp	r3, #6
 80059e6:	d102      	bne.n	80059ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059e8:	2302      	movs	r3, #2
 80059ea:	75fb      	strb	r3, [r7, #23]
 80059ec:	e001      	b.n	80059f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80059ee:	230f      	movs	r3, #15
 80059f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d13a      	bne.n	8005a92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	68f9      	ldr	r1, [r7, #12]
 8005a36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d155      	bne.n	8005b00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	791b      	ldrb	r3, [r3, #4]
 8005a6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	059b      	lsls	r3, r3, #22
 8005a76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	0151      	lsls	r1, r2, #5
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	440a      	add	r2, r1
 8005a82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	e036      	b.n	8005b00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a98:	69da      	ldr	r2, [r3, #28]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d11a      	bne.n	8005b00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	791b      	ldrb	r3, [r3, #4]
 8005ae4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005afe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
	...

08005b10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	785b      	ldrb	r3, [r3, #1]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d161      	bne.n	8005bf0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b42:	d11f      	bne.n	8005b84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	0151      	lsls	r1, r2, #5
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	440a      	add	r2, r1
 8005b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	2101      	movs	r1, #1
 8005b96:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	68f9      	ldr	r1, [r7, #12]
 8005ba0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bae:	69da      	ldr	r2, [r3, #28]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	2101      	movs	r1, #1
 8005bba:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	68f9      	ldr	r1, [r7, #12]
 8005bc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bc8:	4013      	ands	r3, r2
 8005bca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	0159      	lsls	r1, r3, #5
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	440b      	add	r3, r1
 8005be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be6:	4619      	mov	r1, r3
 8005be8:	4b35      	ldr	r3, [pc, #212]	@ (8005cc0 <USB_DeactivateEndpoint+0x1b0>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	600b      	str	r3, [r1, #0]
 8005bee:	e060      	b.n	8005cb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c06:	d11f      	bne.n	8005c48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	2101      	movs	r1, #1
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	041b      	lsls	r3, r3, #16
 8005c60:	43db      	mvns	r3, r3
 8005c62:	68f9      	ldr	r1, [r7, #12]
 8005c64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c68:	4013      	ands	r3, r2
 8005c6a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	43db      	mvns	r3, r3
 8005c86:	68f9      	ldr	r1, [r7, #12]
 8005c88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	0159      	lsls	r1, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	440b      	add	r3, r1
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005caa:	4619      	mov	r1, r3
 8005cac:	4b05      	ldr	r3, [pc, #20]	@ (8005cc4 <USB_DeactivateEndpoint+0x1b4>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	ec337800 	.word	0xec337800
 8005cc4:	eff37800 	.word	0xeff37800

08005cc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08a      	sub	sp, #40	@ 0x28
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	f040 817f 	bne.w	8005fe8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d132      	bne.n	8005d58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d0c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d10:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d50:	0cdb      	lsrs	r3, r3, #19
 8005d52:	04db      	lsls	r3, r3, #19
 8005d54:	6113      	str	r3, [r2, #16]
 8005d56:	e097      	b.n	8005e88 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d72:	0cdb      	lsrs	r3, r3, #19
 8005d74:	04db      	lsls	r3, r3, #19
 8005d76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d9a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d11a      	bne.n	8005dd8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d903      	bls.n	8005db6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005dd4:	6113      	str	r3, [r2, #16]
 8005dd6:	e044      	b.n	8005e62 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	4413      	add	r3, r2
 8005de2:	1e5a      	subs	r2, r3, #1
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	8afb      	ldrh	r3, [r7, #22]
 8005dfe:	04d9      	lsls	r1, r3, #19
 8005e00:	4ba4      	ldr	r3, [pc, #656]	@ (8006094 <USB_EPStartXfer+0x3cc>)
 8005e02:	400b      	ands	r3, r1
 8005e04:	69b9      	ldr	r1, [r7, #24]
 8005e06:	0148      	lsls	r0, r1, #5
 8005e08:	69f9      	ldr	r1, [r7, #28]
 8005e0a:	4401      	add	r1, r0
 8005e0c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005e10:	4313      	orrs	r3, r2
 8005e12:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	791b      	ldrb	r3, [r3, #4]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d122      	bne.n	8005e62 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e36:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005e3a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	8afb      	ldrh	r3, [r7, #22]
 8005e4c:	075b      	lsls	r3, r3, #29
 8005e4e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005e52:	69b9      	ldr	r1, [r7, #24]
 8005e54:	0148      	lsls	r0, r1, #5
 8005e56:	69f9      	ldr	r1, [r7, #28]
 8005e58:	4401      	add	r1, r0
 8005e5a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e78:	69b9      	ldr	r1, [r7, #24]
 8005e7a:	0148      	lsls	r0, r1, #5
 8005e7c:	69f9      	ldr	r1, [r7, #28]
 8005e7e:	4401      	add	r1, r0
 8005e80:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005e84:	4313      	orrs	r3, r2
 8005e86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d14b      	bne.n	8005f26 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	791b      	ldrb	r3, [r3, #4]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d128      	bne.n	8005f04 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d110      	bne.n	8005ee4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005edc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e00f      	b.n	8005f04 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f02:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f1e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	e166      	b.n	80061f4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f40:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f44:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	791b      	ldrb	r3, [r3, #4]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d015      	beq.n	8005f7a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 814e 	beq.w	80061f4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	f003 030f 	and.w	r3, r3, #15
 8005f68:	2101      	movs	r1, #1
 8005f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6e:	69f9      	ldr	r1, [r7, #28]
 8005f70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f74:	4313      	orrs	r3, r2
 8005f76:	634b      	str	r3, [r1, #52]	@ 0x34
 8005f78:	e13c      	b.n	80061f4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d110      	bne.n	8005fac <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	e00f      	b.n	8005fcc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fca:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	68d9      	ldr	r1, [r3, #12]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	781a      	ldrb	r2, [r3, #0]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	b298      	uxth	r0, r3
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	4603      	mov	r3, r0
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f9b9 	bl	8006358 <USB_WritePacket>
 8005fe6:	e105      	b.n	80061f4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006002:	0cdb      	lsrs	r3, r3, #19
 8006004:	04db      	lsls	r3, r3, #19
 8006006:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	0151      	lsls	r1, r2, #5
 800601a:	69fa      	ldr	r2, [r7, #28]
 800601c:	440a      	add	r2, r1
 800601e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006022:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006026:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800602a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d132      	bne.n	8006098 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006060:	69b9      	ldr	r1, [r7, #24]
 8006062:	0148      	lsls	r0, r1, #5
 8006064:	69f9      	ldr	r1, [r7, #28]
 8006066:	4401      	add	r1, r0
 8006068:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800606c:	4313      	orrs	r3, r2
 800606e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800608a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800608e:	6113      	str	r3, [r2, #16]
 8006090:	e062      	b.n	8006158 <USB_EPStartXfer+0x490>
 8006092:	bf00      	nop
 8006094:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d123      	bne.n	80060e8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ac:	691a      	ldr	r2, [r3, #16]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b6:	69b9      	ldr	r1, [r7, #24]
 80060b8:	0148      	lsls	r0, r1, #5
 80060ba:	69f9      	ldr	r1, [r7, #28]
 80060bc:	4401      	add	r1, r0
 80060be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060c2:	4313      	orrs	r3, r2
 80060c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060e4:	6113      	str	r3, [r2, #16]
 80060e6:	e037      	b.n	8006158 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	4413      	add	r3, r2
 80060f2:	1e5a      	subs	r2, r3, #1
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	8afa      	ldrh	r2, [r7, #22]
 8006104:	fb03 f202 	mul.w	r2, r3, r2
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	8afb      	ldrh	r3, [r7, #22]
 800611c:	04d9      	lsls	r1, r3, #19
 800611e:	4b38      	ldr	r3, [pc, #224]	@ (8006200 <USB_EPStartXfer+0x538>)
 8006120:	400b      	ands	r3, r1
 8006122:	69b9      	ldr	r1, [r7, #24]
 8006124:	0148      	lsls	r0, r1, #5
 8006126:	69f9      	ldr	r1, [r7, #28]
 8006128:	4401      	add	r1, r0
 800612a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800612e:	4313      	orrs	r3, r2
 8006130:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006148:	69b9      	ldr	r1, [r7, #24]
 800614a:	0148      	lsls	r0, r1, #5
 800614c:	69f9      	ldr	r1, [r7, #28]
 800614e:	4401      	add	r1, r0
 8006150:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006154:	4313      	orrs	r3, r2
 8006156:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d10d      	bne.n	800617a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	68d9      	ldr	r1, [r3, #12]
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006176:	460a      	mov	r2, r1
 8006178:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	791b      	ldrb	r3, [r3, #4]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d128      	bne.n	80061d4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800618e:	2b00      	cmp	r3, #0
 8006190:	d110      	bne.n	80061b4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	e00f      	b.n	80061d4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80061f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3720      	adds	r7, #32
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	1ff80000 	.word	0x1ff80000

08006204 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	785b      	ldrb	r3, [r3, #1]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d14a      	bne.n	80062b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006236:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800623a:	f040 8086 	bne.w	800634a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	7812      	ldrb	r2, [r2, #0]
 8006252:	0151      	lsls	r1, r2, #5
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	440a      	add	r2, r1
 8006258:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800625c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006260:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	7812      	ldrb	r2, [r2, #0]
 8006276:	0151      	lsls	r1, r2, #5
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	440a      	add	r2, r1
 800627c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006280:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006284:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006292:	4293      	cmp	r3, r2
 8006294:	d902      	bls.n	800629c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	75fb      	strb	r3, [r7, #23]
          break;
 800629a:	e056      	b.n	800634a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062b4:	d0e7      	beq.n	8006286 <USB_EPStopXfer+0x82>
 80062b6:	e048      	b.n	800634a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062d0:	d13b      	bne.n	800634a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	7812      	ldrb	r2, [r2, #0]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	7812      	ldrb	r2, [r2, #0]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	440a      	add	r2, r1
 8006310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006314:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006318:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3301      	adds	r3, #1
 800631e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006326:	4293      	cmp	r3, r2
 8006328:	d902      	bls.n	8006330 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	75fb      	strb	r3, [r7, #23]
          break;
 800632e:	e00c      	b.n	800634a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006344:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006348:	d0e7      	beq.n	800631a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
}
 800634c:	4618      	mov	r0, r3
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006358:	b480      	push	{r7}
 800635a:	b089      	sub	sp, #36	@ 0x24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	4611      	mov	r1, r2
 8006364:	461a      	mov	r2, r3
 8006366:	460b      	mov	r3, r1
 8006368:	71fb      	strb	r3, [r7, #7]
 800636a:	4613      	mov	r3, r2
 800636c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006376:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800637a:	2b00      	cmp	r3, #0
 800637c:	d123      	bne.n	80063c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800637e:	88bb      	ldrh	r3, [r7, #4]
 8006380:	3303      	adds	r3, #3
 8006382:	089b      	lsrs	r3, r3, #2
 8006384:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006386:	2300      	movs	r3, #0
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	e018      	b.n	80063be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	031a      	lsls	r2, r3, #12
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4413      	add	r3, r2
 8006394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006398:	461a      	mov	r2, r3
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	3301      	adds	r3, #1
 80063a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	3301      	adds	r3, #1
 80063aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	3301      	adds	r3, #1
 80063b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	3301      	adds	r3, #1
 80063b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	3301      	adds	r3, #1
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d3e2      	bcc.n	800638c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3724      	adds	r7, #36	@ 0x24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b08b      	sub	sp, #44	@ 0x2c
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063ea:	88fb      	ldrh	r3, [r7, #6]
 80063ec:	089b      	lsrs	r3, r3, #2
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	f003 0303 	and.w	r3, r3, #3
 80063f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063fa:	2300      	movs	r3, #0
 80063fc:	623b      	str	r3, [r7, #32]
 80063fe:	e014      	b.n	800642a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	601a      	str	r2, [r3, #0]
    pDest++;
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	3301      	adds	r3, #1
 8006410:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	3301      	adds	r3, #1
 8006416:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	3301      	adds	r3, #1
 800641c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	3301      	adds	r3, #1
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	3301      	adds	r3, #1
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	6a3a      	ldr	r2, [r7, #32]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	429a      	cmp	r2, r3
 8006430:	d3e6      	bcc.n	8006400 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006432:	8bfb      	ldrh	r3, [r7, #30]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01e      	beq.n	8006476 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006442:	461a      	mov	r2, r3
 8006444:	f107 0310 	add.w	r3, r7, #16
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	fa22 f303 	lsr.w	r3, r2, r3
 8006458:	b2da      	uxtb	r2, r3
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	701a      	strb	r2, [r3, #0]
      i++;
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	3301      	adds	r3, #1
 8006462:	623b      	str	r3, [r7, #32]
      pDest++;
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	3301      	adds	r3, #1
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800646a:	8bfb      	ldrh	r3, [r7, #30]
 800646c:	3b01      	subs	r3, #1
 800646e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006470:	8bfb      	ldrh	r3, [r7, #30]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1ea      	bne.n	800644c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006478:	4618      	mov	r0, r3
 800647a:	372c      	adds	r7, #44	@ 0x2c
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	785b      	ldrb	r3, [r3, #1]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d12c      	bne.n	80064fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	db12      	blt.n	80064d8 <USB_EPSetStall+0x54>
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00f      	beq.n	80064d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	0151      	lsls	r1, r2, #5
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	440a      	add	r2, r1
 80064ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	0151      	lsls	r1, r2, #5
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	440a      	add	r2, r1
 80064ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	e02b      	b.n	8006552 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	db12      	blt.n	8006532 <USB_EPSetStall+0xae>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00f      	beq.n	8006532 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	0151      	lsls	r1, r2, #5
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	440a      	add	r2, r1
 8006528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800652c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006530:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	0151      	lsls	r1, r2, #5
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	440a      	add	r2, r1
 8006548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800654c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006550:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d128      	bne.n	80065ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	440a      	add	r2, r1
 8006592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006596:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800659a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	791b      	ldrb	r3, [r3, #4]
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d003      	beq.n	80065ac <USB_EPClearStall+0x4c>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	791b      	ldrb	r3, [r3, #4]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d138      	bne.n	800661e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	e027      	b.n	800661e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	791b      	ldrb	r3, [r3, #4]
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d003      	beq.n	80065fe <USB_EPClearStall+0x9e>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	791b      	ldrb	r3, [r3, #4]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d10f      	bne.n	800661e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800661c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800664a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800664e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006660:	68f9      	ldr	r1, [r7, #12]
 8006662:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006666:	4313      	orrs	r3, r2
 8006668:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006692:	f023 0303 	bic.w	r3, r3, #3
 8006696:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066a6:	f023 0302 	bic.w	r3, r3, #2
 80066aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80066d4:	f023 0303 	bic.w	r3, r3, #3
 80066d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066e8:	f043 0302 	orr.w	r3, r3, #2
 80066ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4013      	ands	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006714:	68fb      	ldr	r3, [r7, #12]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	4013      	ands	r3, r2
 8006744:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	0c1b      	lsrs	r3, r3, #16
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006756:	b480      	push	{r7}
 8006758:	b085      	sub	sp, #20
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	4013      	ands	r3, r2
 8006778:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	b29b      	uxth	r3, r3
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	4013      	ands	r3, r2
 80067b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067b8:	68bb      	ldr	r3, [r7, #8]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b087      	sub	sp, #28
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	fa22 f303 	lsr.w	r3, r2, r3
 80067f6:	01db      	lsls	r3, r3, #7
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	4013      	ands	r3, r2
 8006812:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006814:	68bb      	ldr	r3, [r7, #8]
}
 8006816:	4618      	mov	r0, r3
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f003 0301 	and.w	r3, r3, #1
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006858:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800685c:	f023 0307 	bic.w	r3, r3, #7
 8006860:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	460b      	mov	r3, r1
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	333c      	adds	r3, #60	@ 0x3c
 800689a:	3304      	adds	r3, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	4a26      	ldr	r2, [pc, #152]	@ (800693c <USB_EP0_OutStart+0xb8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d90a      	bls.n	80068be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068b8:	d101      	bne.n	80068be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e037      	b.n	800692e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c4:	461a      	mov	r2, r3
 80068c6:	2300      	movs	r3, #0
 80068c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068ec:	f043 0318 	orr.w	r3, r3, #24
 80068f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006900:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006904:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006906:	7afb      	ldrb	r3, [r7, #11]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d10f      	bne.n	800692c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006912:	461a      	mov	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006926:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800692a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	4f54300a 	.word	0x4f54300a

08006940 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3301      	adds	r3, #1
 8006950:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006958:	d901      	bls.n	800695e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e01b      	b.n	8006996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	daf2      	bge.n	800694c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f043 0201 	orr.w	r2, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3301      	adds	r3, #1
 800697a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006982:	d901      	bls.n	8006988 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e006      	b.n	8006996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b01      	cmp	r3, #1
 8006992:	d0f0      	beq.n	8006976 <USB_CoreReset+0x36>

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
	...

080069a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80069b0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80069b4:	f002 fc2e 	bl	8009214 <USBD_static_malloc>
 80069b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d109      	bne.n	80069d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	32b0      	adds	r2, #176	@ 0xb0
 80069ca:	2100      	movs	r1, #0
 80069cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80069d0:	2302      	movs	r3, #2
 80069d2:	e0d4      	b.n	8006b7e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80069d4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80069d8:	2100      	movs	r1, #0
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f002 fc5e 	bl	800929c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	32b0      	adds	r2, #176	@ 0xb0
 80069ea:	68f9      	ldr	r1, [r7, #12]
 80069ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	32b0      	adds	r2, #176	@ 0xb0
 80069fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	7c1b      	ldrb	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d138      	bne.n	8006a7e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a0c:	4b5e      	ldr	r3, [pc, #376]	@ (8006b88 <USBD_CDC_Init+0x1e4>)
 8006a0e:	7819      	ldrb	r1, [r3, #0]
 8006a10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a14:	2202      	movs	r2, #2
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f002 fad9 	bl	8008fce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a1c:	4b5a      	ldr	r3, [pc, #360]	@ (8006b88 <USBD_CDC_Init+0x1e4>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	f003 020f 	and.w	r2, r3, #15
 8006a24:	6879      	ldr	r1, [r7, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	440b      	add	r3, r1
 8006a30:	3324      	adds	r3, #36	@ 0x24
 8006a32:	2201      	movs	r2, #1
 8006a34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a36:	4b55      	ldr	r3, [pc, #340]	@ (8006b8c <USBD_CDC_Init+0x1e8>)
 8006a38:	7819      	ldrb	r1, [r3, #0]
 8006a3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a3e:	2202      	movs	r2, #2
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f002 fac4 	bl	8008fce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a46:	4b51      	ldr	r3, [pc, #324]	@ (8006b8c <USBD_CDC_Init+0x1e8>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	f003 020f 	and.w	r2, r3, #15
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	4613      	mov	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	440b      	add	r3, r1
 8006a5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a5e:	2201      	movs	r2, #1
 8006a60:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a62:	4b4b      	ldr	r3, [pc, #300]	@ (8006b90 <USBD_CDC_Init+0x1ec>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	f003 020f 	and.w	r2, r3, #15
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	440b      	add	r3, r1
 8006a76:	3326      	adds	r3, #38	@ 0x26
 8006a78:	2210      	movs	r2, #16
 8006a7a:	801a      	strh	r2, [r3, #0]
 8006a7c:	e035      	b.n	8006aea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a7e:	4b42      	ldr	r3, [pc, #264]	@ (8006b88 <USBD_CDC_Init+0x1e4>)
 8006a80:	7819      	ldrb	r1, [r3, #0]
 8006a82:	2340      	movs	r3, #64	@ 0x40
 8006a84:	2202      	movs	r2, #2
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f002 faa1 	bl	8008fce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a8c:	4b3e      	ldr	r3, [pc, #248]	@ (8006b88 <USBD_CDC_Init+0x1e4>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	f003 020f 	and.w	r2, r3, #15
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	3324      	adds	r3, #36	@ 0x24
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006aa6:	4b39      	ldr	r3, [pc, #228]	@ (8006b8c <USBD_CDC_Init+0x1e8>)
 8006aa8:	7819      	ldrb	r1, [r3, #0]
 8006aaa:	2340      	movs	r3, #64	@ 0x40
 8006aac:	2202      	movs	r2, #2
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f002 fa8d 	bl	8008fce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ab4:	4b35      	ldr	r3, [pc, #212]	@ (8006b8c <USBD_CDC_Init+0x1e8>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	f003 020f 	and.w	r2, r3, #15
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006acc:	2201      	movs	r2, #1
 8006ace:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8006b90 <USBD_CDC_Init+0x1ec>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	f003 020f 	and.w	r2, r3, #15
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	440b      	add	r3, r1
 8006ae4:	3326      	adds	r3, #38	@ 0x26
 8006ae6:	2210      	movs	r2, #16
 8006ae8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006aea:	4b29      	ldr	r3, [pc, #164]	@ (8006b90 <USBD_CDC_Init+0x1ec>)
 8006aec:	7819      	ldrb	r1, [r3, #0]
 8006aee:	2308      	movs	r3, #8
 8006af0:	2203      	movs	r2, #3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f002 fa6b 	bl	8008fce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006af8:	4b25      	ldr	r3, [pc, #148]	@ (8006b90 <USBD_CDC_Init+0x1ec>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	f003 020f 	and.w	r2, r3, #15
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	440b      	add	r3, r1
 8006b0c:	3324      	adds	r3, #36	@ 0x24
 8006b0e:	2201      	movs	r2, #1
 8006b10:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	33b0      	adds	r3, #176	@ 0xb0
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e018      	b.n	8006b7e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	7c1b      	ldrb	r3, [r3, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b54:	4b0d      	ldr	r3, [pc, #52]	@ (8006b8c <USBD_CDC_Init+0x1e8>)
 8006b56:	7819      	ldrb	r1, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f002 fb22 	bl	80091ac <USBD_LL_PrepareReceive>
 8006b68:	e008      	b.n	8006b7c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b6a:	4b08      	ldr	r3, [pc, #32]	@ (8006b8c <USBD_CDC_Init+0x1e8>)
 8006b6c:	7819      	ldrb	r1, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b74:	2340      	movs	r3, #64	@ 0x40
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f002 fb18 	bl	80091ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000093 	.word	0x20000093
 8006b8c:	20000094 	.word	0x20000094
 8006b90:	20000095 	.word	0x20000095

08006b94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8006c8c <USBD_CDC_DeInit+0xf8>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f002 fa37 	bl	800901a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006bac:	4b37      	ldr	r3, [pc, #220]	@ (8006c8c <USBD_CDC_DeInit+0xf8>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	f003 020f 	and.w	r2, r3, #15
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	440b      	add	r3, r1
 8006bc0:	3324      	adds	r3, #36	@ 0x24
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006bc6:	4b32      	ldr	r3, [pc, #200]	@ (8006c90 <USBD_CDC_DeInit+0xfc>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f002 fa24 	bl	800901a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8006c90 <USBD_CDC_DeInit+0xfc>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	f003 020f 	and.w	r2, r3, #15
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	440b      	add	r3, r1
 8006be6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006bea:	2200      	movs	r2, #0
 8006bec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006bee:	4b29      	ldr	r3, [pc, #164]	@ (8006c94 <USBD_CDC_DeInit+0x100>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f002 fa10 	bl	800901a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006bfa:	4b26      	ldr	r3, [pc, #152]	@ (8006c94 <USBD_CDC_DeInit+0x100>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	f003 020f 	and.w	r2, r3, #15
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	440b      	add	r3, r1
 8006c0e:	3324      	adds	r3, #36	@ 0x24
 8006c10:	2200      	movs	r2, #0
 8006c12:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006c14:	4b1f      	ldr	r3, [pc, #124]	@ (8006c94 <USBD_CDC_DeInit+0x100>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	f003 020f 	and.w	r2, r3, #15
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	440b      	add	r3, r1
 8006c28:	3326      	adds	r3, #38	@ 0x26
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	32b0      	adds	r2, #176	@ 0xb0
 8006c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01f      	beq.n	8006c80 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	33b0      	adds	r3, #176	@ 0xb0
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	32b0      	adds	r2, #176	@ 0xb0
 8006c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f002 fae4 	bl	8009230 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	32b0      	adds	r2, #176	@ 0xb0
 8006c72:	2100      	movs	r1, #0
 8006c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000093 	.word	0x20000093
 8006c90:	20000094 	.word	0x20000094
 8006c94:	20000095 	.word	0x20000095

08006c98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	32b0      	adds	r2, #176	@ 0xb0
 8006cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e0bf      	b.n	8006e48 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d050      	beq.n	8006d76 <USBD_CDC_Setup+0xde>
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	f040 80af 	bne.w	8006e38 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	88db      	ldrh	r3, [r3, #6]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d03a      	beq.n	8006d58 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	b25b      	sxtb	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	da1b      	bge.n	8006d24 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	33b0      	adds	r3, #176	@ 0xb0
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006d02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	88d2      	ldrh	r2, [r2, #6]
 8006d08:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	88db      	ldrh	r3, [r3, #6]
 8006d0e:	2b07      	cmp	r3, #7
 8006d10:	bf28      	it	cs
 8006d12:	2307      	movcs	r3, #7
 8006d14:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	89fa      	ldrh	r2, [r7, #14]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 fd53 	bl	80087c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006d22:	e090      	b.n	8006e46 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	785a      	ldrb	r2, [r3, #1]
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	88db      	ldrh	r3, [r3, #6]
 8006d32:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d34:	d803      	bhi.n	8006d3e <USBD_CDC_Setup+0xa6>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	88db      	ldrh	r3, [r3, #6]
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	e000      	b.n	8006d40 <USBD_CDC_Setup+0xa8>
 8006d3e:	2240      	movs	r2, #64	@ 0x40
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006d46:	6939      	ldr	r1, [r7, #16]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006d4e:	461a      	mov	r2, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 fd65 	bl	8008820 <USBD_CtlPrepareRx>
      break;
 8006d56:	e076      	b.n	8006e46 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	33b0      	adds	r3, #176	@ 0xb0
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	7850      	ldrb	r0, [r2, #1]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	4798      	blx	r3
      break;
 8006d74:	e067      	b.n	8006e46 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	785b      	ldrb	r3, [r3, #1]
 8006d7a:	2b0b      	cmp	r3, #11
 8006d7c:	d851      	bhi.n	8006e22 <USBD_CDC_Setup+0x18a>
 8006d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d84 <USBD_CDC_Setup+0xec>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006db5 	.word	0x08006db5
 8006d88:	08006e31 	.word	0x08006e31
 8006d8c:	08006e23 	.word	0x08006e23
 8006d90:	08006e23 	.word	0x08006e23
 8006d94:	08006e23 	.word	0x08006e23
 8006d98:	08006e23 	.word	0x08006e23
 8006d9c:	08006e23 	.word	0x08006e23
 8006da0:	08006e23 	.word	0x08006e23
 8006da4:	08006e23 	.word	0x08006e23
 8006da8:	08006e23 	.word	0x08006e23
 8006dac:	08006ddf 	.word	0x08006ddf
 8006db0:	08006e09 	.word	0x08006e09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d107      	bne.n	8006dd0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006dc0:	f107 030a 	add.w	r3, r7, #10
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 fcfd 	bl	80087c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dce:	e032      	b.n	8006e36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 fc7b 	bl	80086ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	75fb      	strb	r3, [r7, #23]
          break;
 8006ddc:	e02b      	b.n	8006e36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d107      	bne.n	8006dfa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006dea:	f107 030d 	add.w	r3, r7, #13
 8006dee:	2201      	movs	r2, #1
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fce8 	bl	80087c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006df8:	e01d      	b.n	8006e36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 fc66 	bl	80086ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006e02:	2303      	movs	r3, #3
 8006e04:	75fb      	strb	r3, [r7, #23]
          break;
 8006e06:	e016      	b.n	8006e36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d00f      	beq.n	8006e34 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 fc59 	bl	80086ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e20:	e008      	b.n	8006e34 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 fc52 	bl	80086ce <USBD_CtlError>
          ret = USBD_FAIL;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e2e:	e002      	b.n	8006e36 <USBD_CDC_Setup+0x19e>
          break;
 8006e30:	bf00      	nop
 8006e32:	e008      	b.n	8006e46 <USBD_CDC_Setup+0x1ae>
          break;
 8006e34:	bf00      	nop
      }
      break;
 8006e36:	e006      	b.n	8006e46 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 fc47 	bl	80086ce <USBD_CtlError>
      ret = USBD_FAIL;
 8006e40:	2303      	movs	r3, #3
 8006e42:	75fb      	strb	r3, [r7, #23]
      break;
 8006e44:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006e62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	32b0      	adds	r2, #176	@ 0xb0
 8006e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e065      	b.n	8006f46 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	32b0      	adds	r2, #176	@ 0xb0
 8006e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e88:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	f003 020f 	and.w	r2, r3, #15
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	440b      	add	r3, r1
 8006e9c:	3318      	adds	r3, #24
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d02f      	beq.n	8006f04 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	f003 020f 	and.w	r2, r3, #15
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	3318      	adds	r3, #24
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	f003 010f 	and.w	r1, r3, #15
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	00db      	lsls	r3, r3, #3
 8006ec6:	440b      	add	r3, r1
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4403      	add	r3, r0
 8006ecc:	331c      	adds	r3, #28
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ed4:	fb01 f303 	mul.w	r3, r1, r3
 8006ed8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d112      	bne.n	8006f04 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	f003 020f 	and.w	r2, r3, #15
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	3318      	adds	r3, #24
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ef6:	78f9      	ldrb	r1, [r7, #3]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2200      	movs	r2, #0
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f002 f934 	bl	800916a <USBD_LL_Transmit>
 8006f02:	e01f      	b.n	8006f44 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	33b0      	adds	r3, #176	@ 0xb0
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d010      	beq.n	8006f44 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	33b0      	adds	r3, #176	@ 0xb0
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	460b      	mov	r3, r1
 8006f58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	32b0      	adds	r2, #176	@ 0xb0
 8006f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	32b0      	adds	r2, #176	@ 0xb0
 8006f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e01a      	b.n	8006fb6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f002 f932 	bl	80091ee <USBD_LL_GetRxDataSize>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	33b0      	adds	r3, #176	@ 0xb0
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	32b0      	adds	r2, #176	@ 0xb0
 8006fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e024      	b.n	800702a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	33b0      	adds	r3, #176	@ 0xb0
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d019      	beq.n	8007028 <USBD_CDC_EP0_RxReady+0x6a>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006ffa:	2bff      	cmp	r3, #255	@ 0xff
 8006ffc:	d014      	beq.n	8007028 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	33b0      	adds	r3, #176	@ 0xb0
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007016:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800701e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	22ff      	movs	r2, #255	@ 0xff
 8007024:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800703c:	2182      	movs	r1, #130	@ 0x82
 800703e:	4818      	ldr	r0, [pc, #96]	@ (80070a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007040:	f000 fd0f 	bl	8007a62 <USBD_GetEpDesc>
 8007044:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007046:	2101      	movs	r1, #1
 8007048:	4815      	ldr	r0, [pc, #84]	@ (80070a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800704a:	f000 fd0a 	bl	8007a62 <USBD_GetEpDesc>
 800704e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007050:	2181      	movs	r1, #129	@ 0x81
 8007052:	4813      	ldr	r0, [pc, #76]	@ (80070a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007054:	f000 fd05 	bl	8007a62 <USBD_GetEpDesc>
 8007058:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2210      	movs	r2, #16
 8007064:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d006      	beq.n	800707a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	2200      	movs	r2, #0
 8007070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007074:	711a      	strb	r2, [r3, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d006      	beq.n	800708e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007088:	711a      	strb	r2, [r3, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2243      	movs	r2, #67	@ 0x43
 8007092:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007094:	4b02      	ldr	r3, [pc, #8]	@ (80070a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007096:	4618      	mov	r0, r3
 8007098:	3718      	adds	r7, #24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20000050 	.word	0x20000050

080070a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070ac:	2182      	movs	r1, #130	@ 0x82
 80070ae:	4818      	ldr	r0, [pc, #96]	@ (8007110 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80070b0:	f000 fcd7 	bl	8007a62 <USBD_GetEpDesc>
 80070b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070b6:	2101      	movs	r1, #1
 80070b8:	4815      	ldr	r0, [pc, #84]	@ (8007110 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80070ba:	f000 fcd2 	bl	8007a62 <USBD_GetEpDesc>
 80070be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070c0:	2181      	movs	r1, #129	@ 0x81
 80070c2:	4813      	ldr	r0, [pc, #76]	@ (8007110 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80070c4:	f000 fccd 	bl	8007a62 <USBD_GetEpDesc>
 80070c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	2210      	movs	r2, #16
 80070d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d006      	beq.n	80070ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2200      	movs	r2, #0
 80070e0:	711a      	strb	r2, [r3, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f042 0202 	orr.w	r2, r2, #2
 80070e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d006      	beq.n	80070fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	711a      	strb	r2, [r3, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f042 0202 	orr.w	r2, r2, #2
 80070fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2243      	movs	r2, #67	@ 0x43
 8007102:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007104:	4b02      	ldr	r3, [pc, #8]	@ (8007110 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000050 	.word	0x20000050

08007114 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800711c:	2182      	movs	r1, #130	@ 0x82
 800711e:	4818      	ldr	r0, [pc, #96]	@ (8007180 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007120:	f000 fc9f 	bl	8007a62 <USBD_GetEpDesc>
 8007124:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007126:	2101      	movs	r1, #1
 8007128:	4815      	ldr	r0, [pc, #84]	@ (8007180 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800712a:	f000 fc9a 	bl	8007a62 <USBD_GetEpDesc>
 800712e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007130:	2181      	movs	r1, #129	@ 0x81
 8007132:	4813      	ldr	r0, [pc, #76]	@ (8007180 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007134:	f000 fc95 	bl	8007a62 <USBD_GetEpDesc>
 8007138:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2210      	movs	r2, #16
 8007144:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d006      	beq.n	800715a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	2200      	movs	r2, #0
 8007150:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007154:	711a      	strb	r2, [r3, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d006      	beq.n	800716e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007168:	711a      	strb	r2, [r3, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2243      	movs	r2, #67	@ 0x43
 8007172:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007174:	4b02      	ldr	r3, [pc, #8]	@ (8007180 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	20000050 	.word	0x20000050

08007184 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	220a      	movs	r2, #10
 8007190:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007192:	4b03      	ldr	r3, [pc, #12]	@ (80071a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	2000000c 	.word	0x2000000c

080071a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e009      	b.n	80071cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	33b0      	adds	r3, #176	@ 0xb0
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	32b0      	adds	r2, #176	@ 0xb0
 80071ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e008      	b.n	8007210 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	371c      	adds	r7, #28
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	32b0      	adds	r2, #176	@ 0xb0
 8007230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007234:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800723c:	2303      	movs	r3, #3
 800723e:	e004      	b.n	800724a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
	...

08007258 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	32b0      	adds	r2, #176	@ 0xb0
 800726a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	32b0      	adds	r2, #176	@ 0xb0
 800727a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007282:	2303      	movs	r3, #3
 8007284:	e018      	b.n	80072b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	7c1b      	ldrb	r3, [r3, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800728e:	4b0c      	ldr	r3, [pc, #48]	@ (80072c0 <USBD_CDC_ReceivePacket+0x68>)
 8007290:	7819      	ldrb	r1, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 ff85 	bl	80091ac <USBD_LL_PrepareReceive>
 80072a2:	e008      	b.n	80072b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072a4:	4b06      	ldr	r3, [pc, #24]	@ (80072c0 <USBD_CDC_ReceivePacket+0x68>)
 80072a6:	7819      	ldrb	r1, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072ae:	2340      	movs	r3, #64	@ 0x40
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 ff7b 	bl	80091ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20000094 	.word	0x20000094

080072c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	4613      	mov	r3, r2
 80072d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072d8:	2303      	movs	r3, #3
 80072da:	e01f      	b.n	800731c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	79fa      	ldrb	r2, [r7, #7]
 800730e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f001 fdf5 	bl	8008f00 <USBD_LL_Init>
 8007316:	4603      	mov	r3, r0
 8007318:	75fb      	strb	r3, [r7, #23]

  return ret;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007338:	2303      	movs	r3, #3
 800733a:	e025      	b.n	8007388 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	32ae      	adds	r2, #174	@ 0xae
 800734e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00f      	beq.n	8007378 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	32ae      	adds	r2, #174	@ 0xae
 8007362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007368:	f107 020e 	add.w	r2, r7, #14
 800736c:	4610      	mov	r0, r2
 800736e:	4798      	blx	r3
 8007370:	4602      	mov	r2, r0
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 fdfd 	bl	8008f98 <USBD_LL_Start>
 800739e:	4603      	mov	r3, r0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d009      	beq.n	80073ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	78fa      	ldrb	r2, [r7, #3]
 80073e2:	4611      	mov	r1, r2
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	4798      	blx	r3
 80073e8:	4603      	mov	r3, r0
 80073ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	460b      	mov	r3, r1
 8007400:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	78fa      	ldrb	r2, [r7, #3]
 8007410:	4611      	mov	r1, r2
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800741c:	2303      	movs	r3, #3
 800741e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007420:	7bfb      	ldrb	r3, [r7, #15]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f001 f90c 	bl	800865a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007450:	461a      	mov	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800745e:	f003 031f 	and.w	r3, r3, #31
 8007462:	2b02      	cmp	r3, #2
 8007464:	d01a      	beq.n	800749c <USBD_LL_SetupStage+0x72>
 8007466:	2b02      	cmp	r3, #2
 8007468:	d822      	bhi.n	80074b0 <USBD_LL_SetupStage+0x86>
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <USBD_LL_SetupStage+0x4a>
 800746e:	2b01      	cmp	r3, #1
 8007470:	d00a      	beq.n	8007488 <USBD_LL_SetupStage+0x5e>
 8007472:	e01d      	b.n	80074b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fb63 	bl	8007b48 <USBD_StdDevReq>
 8007482:	4603      	mov	r3, r0
 8007484:	73fb      	strb	r3, [r7, #15]
      break;
 8007486:	e020      	b.n	80074ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fbcb 	bl	8007c2c <USBD_StdItfReq>
 8007496:	4603      	mov	r3, r0
 8007498:	73fb      	strb	r3, [r7, #15]
      break;
 800749a:	e016      	b.n	80074ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fc2d 	bl	8007d04 <USBD_StdEPReq>
 80074aa:	4603      	mov	r3, r0
 80074ac:	73fb      	strb	r3, [r7, #15]
      break;
 80074ae:	e00c      	b.n	80074ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f001 fdca 	bl	8009058 <USBD_LL_StallEP>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73fb      	strb	r3, [r7, #15]
      break;
 80074c8:	bf00      	nop
  }

  return ret;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	460b      	mov	r3, r1
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80074e6:	7afb      	ldrb	r3, [r7, #11]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d16e      	bne.n	80075ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80074f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	f040 8098 	bne.w	8007630 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	429a      	cmp	r2, r3
 800750a:	d913      	bls.n	8007534 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	1ad2      	subs	r2, r2, r3
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	4293      	cmp	r3, r2
 8007524:	bf28      	it	cs
 8007526:	4613      	movcs	r3, r2
 8007528:	461a      	mov	r2, r3
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f001 f994 	bl	800885a <USBD_CtlContinueRx>
 8007532:	e07d      	b.n	8007630 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800753a:	f003 031f 	and.w	r3, r3, #31
 800753e:	2b02      	cmp	r3, #2
 8007540:	d014      	beq.n	800756c <USBD_LL_DataOutStage+0x98>
 8007542:	2b02      	cmp	r3, #2
 8007544:	d81d      	bhi.n	8007582 <USBD_LL_DataOutStage+0xae>
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <USBD_LL_DataOutStage+0x7c>
 800754a:	2b01      	cmp	r3, #1
 800754c:	d003      	beq.n	8007556 <USBD_LL_DataOutStage+0x82>
 800754e:	e018      	b.n	8007582 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	75bb      	strb	r3, [r7, #22]
            break;
 8007554:	e018      	b.n	8007588 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800755c:	b2db      	uxtb	r3, r3
 800755e:	4619      	mov	r1, r3
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 fa64 	bl	8007a2e <USBD_CoreFindIF>
 8007566:	4603      	mov	r3, r0
 8007568:	75bb      	strb	r3, [r7, #22]
            break;
 800756a:	e00d      	b.n	8007588 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007572:	b2db      	uxtb	r3, r3
 8007574:	4619      	mov	r1, r3
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f000 fa66 	bl	8007a48 <USBD_CoreFindEP>
 800757c:	4603      	mov	r3, r0
 800757e:	75bb      	strb	r3, [r7, #22]
            break;
 8007580:	e002      	b.n	8007588 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	75bb      	strb	r3, [r7, #22]
            break;
 8007586:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007588:	7dbb      	ldrb	r3, [r7, #22]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d119      	bne.n	80075c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b03      	cmp	r3, #3
 8007598:	d113      	bne.n	80075c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800759a:	7dba      	ldrb	r2, [r7, #22]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	32ae      	adds	r2, #174	@ 0xae
 80075a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00b      	beq.n	80075c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80075aa:	7dba      	ldrb	r2, [r7, #22]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80075b2:	7dba      	ldrb	r2, [r7, #22]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	32ae      	adds	r2, #174	@ 0xae
 80075b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f001 f95a 	bl	800887c <USBD_CtlSendStatus>
 80075c8:	e032      	b.n	8007630 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80075ca:	7afb      	ldrb	r3, [r7, #11]
 80075cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	4619      	mov	r1, r3
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 fa37 	bl	8007a48 <USBD_CoreFindEP>
 80075da:	4603      	mov	r3, r0
 80075dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075de:	7dbb      	ldrb	r3, [r7, #22]
 80075e0:	2bff      	cmp	r3, #255	@ 0xff
 80075e2:	d025      	beq.n	8007630 <USBD_LL_DataOutStage+0x15c>
 80075e4:	7dbb      	ldrb	r3, [r7, #22]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d122      	bne.n	8007630 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d117      	bne.n	8007626 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80075f6:	7dba      	ldrb	r2, [r7, #22]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	32ae      	adds	r2, #174	@ 0xae
 80075fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00f      	beq.n	8007626 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007606:	7dba      	ldrb	r2, [r7, #22]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800760e:	7dba      	ldrb	r2, [r7, #22]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	32ae      	adds	r2, #174	@ 0xae
 8007614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	7afa      	ldrb	r2, [r7, #11]
 800761c:	4611      	mov	r1, r2
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	4798      	blx	r3
 8007622:	4603      	mov	r3, r0
 8007624:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007626:	7dfb      	ldrb	r3, [r7, #23]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800762c:	7dfb      	ldrb	r3, [r7, #23]
 800762e:	e000      	b.n	8007632 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b086      	sub	sp, #24
 800763e:	af00      	add	r7, sp, #0
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	460b      	mov	r3, r1
 8007644:	607a      	str	r2, [r7, #4]
 8007646:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007648:	7afb      	ldrb	r3, [r7, #11]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d16f      	bne.n	800772e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3314      	adds	r3, #20
 8007652:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800765a:	2b02      	cmp	r3, #2
 800765c:	d15a      	bne.n	8007714 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	429a      	cmp	r2, r3
 8007668:	d914      	bls.n	8007694 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	689a      	ldr	r2, [r3, #8]
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	1ad2      	subs	r2, r2, r3
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	461a      	mov	r2, r3
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f001 f8bc 	bl	80087fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007686:	2300      	movs	r3, #0
 8007688:	2200      	movs	r2, #0
 800768a:	2100      	movs	r1, #0
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f001 fd8d 	bl	80091ac <USBD_LL_PrepareReceive>
 8007692:	e03f      	b.n	8007714 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	429a      	cmp	r2, r3
 800769e:	d11c      	bne.n	80076da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d316      	bcc.n	80076da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d20f      	bcs.n	80076da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076ba:	2200      	movs	r2, #0
 80076bc:	2100      	movs	r1, #0
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f001 f89d 	bl	80087fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076cc:	2300      	movs	r3, #0
 80076ce:	2200      	movs	r2, #0
 80076d0:	2100      	movs	r1, #0
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f001 fd6a 	bl	80091ac <USBD_LL_PrepareReceive>
 80076d8:	e01c      	b.n	8007714 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d10f      	bne.n	8007706 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d009      	beq.n	8007706 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007706:	2180      	movs	r1, #128	@ 0x80
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f001 fca5 	bl	8009058 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f001 f8c7 	bl	80088a2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d03a      	beq.n	8007794 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f7ff fe42 	bl	80073a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800772c:	e032      	b.n	8007794 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800772e:	7afb      	ldrb	r3, [r7, #11]
 8007730:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007734:	b2db      	uxtb	r3, r3
 8007736:	4619      	mov	r1, r3
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 f985 	bl	8007a48 <USBD_CoreFindEP>
 800773e:	4603      	mov	r3, r0
 8007740:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	2bff      	cmp	r3, #255	@ 0xff
 8007746:	d025      	beq.n	8007794 <USBD_LL_DataInStage+0x15a>
 8007748:	7dfb      	ldrb	r3, [r7, #23]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d122      	bne.n	8007794 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b03      	cmp	r3, #3
 8007758:	d11c      	bne.n	8007794 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800775a:	7dfa      	ldrb	r2, [r7, #23]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	32ae      	adds	r2, #174	@ 0xae
 8007760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d014      	beq.n	8007794 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800776a:	7dfa      	ldrb	r2, [r7, #23]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007772:	7dfa      	ldrb	r2, [r7, #23]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	32ae      	adds	r2, #174	@ 0xae
 8007778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	7afa      	ldrb	r2, [r7, #11]
 8007780:	4611      	mov	r1, r2
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	4798      	blx	r3
 8007786:	4603      	mov	r3, r0
 8007788:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800778a:	7dbb      	ldrb	r3, [r7, #22]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007790:	7dbb      	ldrb	r3, [r7, #22]
 8007792:	e000      	b.n	8007796 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d014      	beq.n	8007804 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00e      	beq.n	8007804 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	6852      	ldr	r2, [r2, #4]
 80077f2:	b2d2      	uxtb	r2, r2
 80077f4:	4611      	mov	r1, r2
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	4798      	blx	r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007800:	2303      	movs	r3, #3
 8007802:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007804:	2340      	movs	r3, #64	@ 0x40
 8007806:	2200      	movs	r2, #0
 8007808:	2100      	movs	r1, #0
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 fbdf 	bl	8008fce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2240      	movs	r2, #64	@ 0x40
 800781c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007820:	2340      	movs	r3, #64	@ 0x40
 8007822:	2200      	movs	r2, #0
 8007824:	2180      	movs	r1, #128	@ 0x80
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 fbd1 	bl	8008fce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2240      	movs	r2, #64	@ 0x40
 8007836:	621a      	str	r2, [r3, #32]

  return ret;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	78fa      	ldrb	r2, [r7, #3]
 8007852:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b04      	cmp	r3, #4
 8007874:	d006      	beq.n	8007884 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800787c:	b2da      	uxtb	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2204      	movs	r2, #4
 8007888:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d106      	bne.n	80078bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d110      	bne.n	8007900 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00b      	beq.n	8007900 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	460b      	mov	r3, r1
 8007914:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	32ae      	adds	r2, #174	@ 0xae
 8007920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007928:	2303      	movs	r3, #3
 800792a:	e01c      	b.n	8007966 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b03      	cmp	r3, #3
 8007936:	d115      	bne.n	8007964 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	32ae      	adds	r2, #174	@ 0xae
 8007942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00b      	beq.n	8007964 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	32ae      	adds	r2, #174	@ 0xae
 8007956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	78fa      	ldrb	r2, [r7, #3]
 800795e:	4611      	mov	r1, r2
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	460b      	mov	r3, r1
 8007978:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	32ae      	adds	r2, #174	@ 0xae
 8007984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800798c:	2303      	movs	r3, #3
 800798e:	e01c      	b.n	80079ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b03      	cmp	r3, #3
 800799a:	d115      	bne.n	80079c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	32ae      	adds	r2, #174	@ 0xae
 80079a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	32ae      	adds	r2, #174	@ 0xae
 80079ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c0:	78fa      	ldrb	r2, [r7, #3]
 80079c2:	4611      	mov	r1, r2
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00e      	beq.n	8007a24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	6852      	ldr	r2, [r2, #4]
 8007a12:	b2d2      	uxtb	r2, r2
 8007a14:	4611      	mov	r1, r2
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	4798      	blx	r3
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a20:	2303      	movs	r3, #3
 8007a22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	460b      	mov	r3, r1
 8007a38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	460b      	mov	r3, r1
 8007a52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b086      	sub	sp, #24
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007a76:	2300      	movs	r3, #0
 8007a78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	885b      	ldrh	r3, [r3, #2]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	7812      	ldrb	r2, [r2, #0]
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d91f      	bls.n	8007ac8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a8e:	e013      	b.n	8007ab8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a90:	f107 030a 	add.w	r3, r7, #10
 8007a94:	4619      	mov	r1, r3
 8007a96:	6978      	ldr	r0, [r7, #20]
 8007a98:	f000 f81b 	bl	8007ad2 <USBD_GetNextDesc>
 8007a9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	785b      	ldrb	r3, [r3, #1]
 8007aa2:	2b05      	cmp	r3, #5
 8007aa4:	d108      	bne.n	8007ab8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	789b      	ldrb	r3, [r3, #2]
 8007aae:	78fa      	ldrb	r2, [r7, #3]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d008      	beq.n	8007ac6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	885b      	ldrh	r3, [r3, #2]
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	897b      	ldrh	r3, [r7, #10]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d8e5      	bhi.n	8007a90 <USBD_GetEpDesc+0x2e>
 8007ac4:	e000      	b.n	8007ac8 <USBD_GetEpDesc+0x66>
          break;
 8007ac6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007ac8:	693b      	ldr	r3, [r7, #16]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	7812      	ldrb	r2, [r2, #0]
 8007ae8:	4413      	add	r3, r2
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4413      	add	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007afc:	68fb      	ldr	r3, [r7, #12]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b087      	sub	sp, #28
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007b2c:	021b      	lsls	r3, r3, #8
 8007b2e:	b21a      	sxth	r2, r3
 8007b30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	b21b      	sxth	r3, r3
 8007b38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b3a:	89fb      	ldrh	r3, [r7, #14]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b5e:	2b40      	cmp	r3, #64	@ 0x40
 8007b60:	d005      	beq.n	8007b6e <USBD_StdDevReq+0x26>
 8007b62:	2b40      	cmp	r3, #64	@ 0x40
 8007b64:	d857      	bhi.n	8007c16 <USBD_StdDevReq+0xce>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00f      	beq.n	8007b8a <USBD_StdDevReq+0x42>
 8007b6a:	2b20      	cmp	r3, #32
 8007b6c:	d153      	bne.n	8007c16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	32ae      	adds	r2, #174	@ 0xae
 8007b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	4798      	blx	r3
 8007b84:	4603      	mov	r3, r0
 8007b86:	73fb      	strb	r3, [r7, #15]
      break;
 8007b88:	e04a      	b.n	8007c20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	785b      	ldrb	r3, [r3, #1]
 8007b8e:	2b09      	cmp	r3, #9
 8007b90:	d83b      	bhi.n	8007c0a <USBD_StdDevReq+0xc2>
 8007b92:	a201      	add	r2, pc, #4	@ (adr r2, 8007b98 <USBD_StdDevReq+0x50>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bed 	.word	0x08007bed
 8007b9c:	08007c01 	.word	0x08007c01
 8007ba0:	08007c0b 	.word	0x08007c0b
 8007ba4:	08007bf7 	.word	0x08007bf7
 8007ba8:	08007c0b 	.word	0x08007c0b
 8007bac:	08007bcb 	.word	0x08007bcb
 8007bb0:	08007bc1 	.word	0x08007bc1
 8007bb4:	08007c0b 	.word	0x08007c0b
 8007bb8:	08007be3 	.word	0x08007be3
 8007bbc:	08007bd5 	.word	0x08007bd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fa3c 	bl	8008040 <USBD_GetDescriptor>
          break;
 8007bc8:	e024      	b.n	8007c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fba1 	bl	8008314 <USBD_SetAddress>
          break;
 8007bd2:	e01f      	b.n	8007c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fbe0 	bl	800839c <USBD_SetConfig>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]
          break;
 8007be0:	e018      	b.n	8007c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fc83 	bl	80084f0 <USBD_GetConfig>
          break;
 8007bea:	e013      	b.n	8007c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fcb4 	bl	800855c <USBD_GetStatus>
          break;
 8007bf4:	e00e      	b.n	8007c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fce3 	bl	80085c4 <USBD_SetFeature>
          break;
 8007bfe:	e009      	b.n	8007c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fd07 	bl	8008616 <USBD_ClrFeature>
          break;
 8007c08:	e004      	b.n	8007c14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fd5e 	bl	80086ce <USBD_CtlError>
          break;
 8007c12:	bf00      	nop
      }
      break;
 8007c14:	e004      	b.n	8007c20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fd58 	bl	80086ce <USBD_CtlError>
      break;
 8007c1e:	bf00      	nop
  }

  return ret;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop

08007c2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c42:	2b40      	cmp	r3, #64	@ 0x40
 8007c44:	d005      	beq.n	8007c52 <USBD_StdItfReq+0x26>
 8007c46:	2b40      	cmp	r3, #64	@ 0x40
 8007c48:	d852      	bhi.n	8007cf0 <USBD_StdItfReq+0xc4>
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <USBD_StdItfReq+0x26>
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	d14e      	bne.n	8007cf0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d840      	bhi.n	8007ce2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	889b      	ldrh	r3, [r3, #4]
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d836      	bhi.n	8007cd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	889b      	ldrh	r3, [r3, #4]
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff fedb 	bl	8007a2e <USBD_CoreFindIF>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	2bff      	cmp	r3, #255	@ 0xff
 8007c80:	d01d      	beq.n	8007cbe <USBD_StdItfReq+0x92>
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d11a      	bne.n	8007cbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c88:	7bba      	ldrb	r2, [r7, #14]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	32ae      	adds	r2, #174	@ 0xae
 8007c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00f      	beq.n	8007cb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c98:	7bba      	ldrb	r2, [r7, #14]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ca0:	7bba      	ldrb	r2, [r7, #14]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	32ae      	adds	r2, #174	@ 0xae
 8007ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	4798      	blx	r3
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cb6:	e004      	b.n	8007cc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cbc:	e001      	b.n	8007cc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	88db      	ldrh	r3, [r3, #6]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d110      	bne.n	8007cec <USBD_StdItfReq+0xc0>
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10d      	bne.n	8007cec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fdd3 	bl	800887c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007cd6:	e009      	b.n	8007cec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fcf7 	bl	80086ce <USBD_CtlError>
          break;
 8007ce0:	e004      	b.n	8007cec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fcf2 	bl	80086ce <USBD_CtlError>
          break;
 8007cea:	e000      	b.n	8007cee <USBD_StdItfReq+0xc2>
          break;
 8007cec:	bf00      	nop
      }
      break;
 8007cee:	e004      	b.n	8007cfa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fceb 	bl	80086ce <USBD_CtlError>
      break;
 8007cf8:	bf00      	nop
  }

  return ret;
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	889b      	ldrh	r3, [r3, #4]
 8007d16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d20:	2b40      	cmp	r3, #64	@ 0x40
 8007d22:	d007      	beq.n	8007d34 <USBD_StdEPReq+0x30>
 8007d24:	2b40      	cmp	r3, #64	@ 0x40
 8007d26:	f200 817f 	bhi.w	8008028 <USBD_StdEPReq+0x324>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d02a      	beq.n	8007d84 <USBD_StdEPReq+0x80>
 8007d2e:	2b20      	cmp	r3, #32
 8007d30:	f040 817a 	bne.w	8008028 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff fe85 	bl	8007a48 <USBD_CoreFindEP>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d42:	7b7b      	ldrb	r3, [r7, #13]
 8007d44:	2bff      	cmp	r3, #255	@ 0xff
 8007d46:	f000 8174 	beq.w	8008032 <USBD_StdEPReq+0x32e>
 8007d4a:	7b7b      	ldrb	r3, [r7, #13]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f040 8170 	bne.w	8008032 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d52:	7b7a      	ldrb	r2, [r7, #13]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d5a:	7b7a      	ldrb	r2, [r7, #13]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	32ae      	adds	r2, #174	@ 0xae
 8007d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 8163 	beq.w	8008032 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007d6c:	7b7a      	ldrb	r2, [r7, #13]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	32ae      	adds	r2, #174	@ 0xae
 8007d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	4798      	blx	r3
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d82:	e156      	b.n	8008032 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	785b      	ldrb	r3, [r3, #1]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d008      	beq.n	8007d9e <USBD_StdEPReq+0x9a>
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	f300 8145 	bgt.w	800801c <USBD_StdEPReq+0x318>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 809b 	beq.w	8007ece <USBD_StdEPReq+0x1ca>
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d03c      	beq.n	8007e16 <USBD_StdEPReq+0x112>
 8007d9c:	e13e      	b.n	800801c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d002      	beq.n	8007db0 <USBD_StdEPReq+0xac>
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d016      	beq.n	8007ddc <USBD_StdEPReq+0xd8>
 8007dae:	e02c      	b.n	8007e0a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00d      	beq.n	8007dd2 <USBD_StdEPReq+0xce>
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	2b80      	cmp	r3, #128	@ 0x80
 8007dba:	d00a      	beq.n	8007dd2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 f949 	bl	8009058 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dc6:	2180      	movs	r1, #128	@ 0x80
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f001 f945 	bl	8009058 <USBD_LL_StallEP>
 8007dce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dd0:	e020      	b.n	8007e14 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fc7a 	bl	80086ce <USBD_CtlError>
              break;
 8007dda:	e01b      	b.n	8007e14 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	885b      	ldrh	r3, [r3, #2]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10e      	bne.n	8007e02 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00b      	beq.n	8007e02 <USBD_StdEPReq+0xfe>
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	2b80      	cmp	r3, #128	@ 0x80
 8007dee:	d008      	beq.n	8007e02 <USBD_StdEPReq+0xfe>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	88db      	ldrh	r3, [r3, #6]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d104      	bne.n	8007e02 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f001 f92b 	bl	8009058 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fd3a 	bl	800887c <USBD_CtlSendStatus>

              break;
 8007e08:	e004      	b.n	8007e14 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fc5e 	bl	80086ce <USBD_CtlError>
              break;
 8007e12:	bf00      	nop
          }
          break;
 8007e14:	e107      	b.n	8008026 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d002      	beq.n	8007e28 <USBD_StdEPReq+0x124>
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d016      	beq.n	8007e54 <USBD_StdEPReq+0x150>
 8007e26:	e04b      	b.n	8007ec0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00d      	beq.n	8007e4a <USBD_StdEPReq+0x146>
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	2b80      	cmp	r3, #128	@ 0x80
 8007e32:	d00a      	beq.n	8007e4a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e34:	7bbb      	ldrb	r3, [r7, #14]
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 f90d 	bl	8009058 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e3e:	2180      	movs	r1, #128	@ 0x80
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 f909 	bl	8009058 <USBD_LL_StallEP>
 8007e46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e48:	e040      	b.n	8007ecc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fc3e 	bl	80086ce <USBD_CtlError>
              break;
 8007e52:	e03b      	b.n	8007ecc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	885b      	ldrh	r3, [r3, #2]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d136      	bne.n	8007eca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d004      	beq.n	8007e70 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f001 f913 	bl	8009096 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fd03 	bl	800887c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff fde4 	bl	8007a48 <USBD_CoreFindEP>
 8007e80:	4603      	mov	r3, r0
 8007e82:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e84:	7b7b      	ldrb	r3, [r7, #13]
 8007e86:	2bff      	cmp	r3, #255	@ 0xff
 8007e88:	d01f      	beq.n	8007eca <USBD_StdEPReq+0x1c6>
 8007e8a:	7b7b      	ldrb	r3, [r7, #13]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d11c      	bne.n	8007eca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e90:	7b7a      	ldrb	r2, [r7, #13]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e98:	7b7a      	ldrb	r2, [r7, #13]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	32ae      	adds	r2, #174	@ 0xae
 8007e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d010      	beq.n	8007eca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ea8:	7b7a      	ldrb	r2, [r7, #13]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	32ae      	adds	r2, #174	@ 0xae
 8007eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	4798      	blx	r3
 8007eba:	4603      	mov	r3, r0
 8007ebc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007ebe:	e004      	b.n	8007eca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fc03 	bl	80086ce <USBD_CtlError>
              break;
 8007ec8:	e000      	b.n	8007ecc <USBD_StdEPReq+0x1c8>
              break;
 8007eca:	bf00      	nop
          }
          break;
 8007ecc:	e0ab      	b.n	8008026 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d002      	beq.n	8007ee0 <USBD_StdEPReq+0x1dc>
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	d032      	beq.n	8007f44 <USBD_StdEPReq+0x240>
 8007ede:	e097      	b.n	8008010 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d007      	beq.n	8007ef6 <USBD_StdEPReq+0x1f2>
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	2b80      	cmp	r3, #128	@ 0x80
 8007eea:	d004      	beq.n	8007ef6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fbed 	bl	80086ce <USBD_CtlError>
                break;
 8007ef4:	e091      	b.n	800801a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ef6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	da0b      	bge.n	8007f16 <USBD_StdEPReq+0x212>
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	3310      	adds	r3, #16
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	4413      	add	r3, r2
 8007f12:	3304      	adds	r3, #4
 8007f14:	e00b      	b.n	8007f2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f16:	7bbb      	ldrb	r3, [r7, #14]
 8007f18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fc43 	bl	80087c8 <USBD_CtlSendData>
              break;
 8007f42:	e06a      	b.n	800801a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	da11      	bge.n	8007f70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	f003 020f 	and.w	r2, r3, #15
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	4613      	mov	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	440b      	add	r3, r1
 8007f5e:	3324      	adds	r3, #36	@ 0x24
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d117      	bne.n	8007f96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fbb0 	bl	80086ce <USBD_CtlError>
                  break;
 8007f6e:	e054      	b.n	800801a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	f003 020f 	and.w	r2, r3, #15
 8007f76:	6879      	ldr	r1, [r7, #4]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	440b      	add	r3, r1
 8007f82:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d104      	bne.n	8007f96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fb9d 	bl	80086ce <USBD_CtlError>
                  break;
 8007f94:	e041      	b.n	800801a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	da0b      	bge.n	8007fb6 <USBD_StdEPReq+0x2b2>
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	3310      	adds	r3, #16
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	e00b      	b.n	8007fce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	4413      	add	r3, r2
 8007fcc:	3304      	adds	r3, #4
 8007fce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <USBD_StdEPReq+0x2d8>
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	2b80      	cmp	r3, #128	@ 0x80
 8007fda:	d103      	bne.n	8007fe4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e00e      	b.n	8008002 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 f873 	bl	80090d4 <USBD_LL_IsStallEP>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	e002      	b.n	8008002 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2202      	movs	r2, #2
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fbdd 	bl	80087c8 <USBD_CtlSendData>
              break;
 800800e:	e004      	b.n	800801a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fb5b 	bl	80086ce <USBD_CtlError>
              break;
 8008018:	bf00      	nop
          }
          break;
 800801a:	e004      	b.n	8008026 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fb55 	bl	80086ce <USBD_CtlError>
          break;
 8008024:	bf00      	nop
      }
      break;
 8008026:	e005      	b.n	8008034 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fb4f 	bl	80086ce <USBD_CtlError>
      break;
 8008030:	e000      	b.n	8008034 <USBD_StdEPReq+0x330>
      break;
 8008032:	bf00      	nop
  }

  return ret;
 8008034:	7bfb      	ldrb	r3, [r7, #15]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800804e:	2300      	movs	r3, #0
 8008050:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	885b      	ldrh	r3, [r3, #2]
 800805a:	0a1b      	lsrs	r3, r3, #8
 800805c:	b29b      	uxth	r3, r3
 800805e:	3b01      	subs	r3, #1
 8008060:	2b06      	cmp	r3, #6
 8008062:	f200 8128 	bhi.w	80082b6 <USBD_GetDescriptor+0x276>
 8008066:	a201      	add	r2, pc, #4	@ (adr r2, 800806c <USBD_GetDescriptor+0x2c>)
 8008068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806c:	08008089 	.word	0x08008089
 8008070:	080080a1 	.word	0x080080a1
 8008074:	080080e1 	.word	0x080080e1
 8008078:	080082b7 	.word	0x080082b7
 800807c:	080082b7 	.word	0x080082b7
 8008080:	08008257 	.word	0x08008257
 8008084:	08008283 	.word	0x08008283
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	7c12      	ldrb	r2, [r2, #16]
 8008094:	f107 0108 	add.w	r1, r7, #8
 8008098:	4610      	mov	r0, r2
 800809a:	4798      	blx	r3
 800809c:	60f8      	str	r0, [r7, #12]
      break;
 800809e:	e112      	b.n	80082c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	7c1b      	ldrb	r3, [r3, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10d      	bne.n	80080c4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b0:	f107 0208 	add.w	r2, r7, #8
 80080b4:	4610      	mov	r0, r2
 80080b6:	4798      	blx	r3
 80080b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3301      	adds	r3, #1
 80080be:	2202      	movs	r2, #2
 80080c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080c2:	e100      	b.n	80082c6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080cc:	f107 0208 	add.w	r2, r7, #8
 80080d0:	4610      	mov	r0, r2
 80080d2:	4798      	blx	r3
 80080d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3301      	adds	r3, #1
 80080da:	2202      	movs	r2, #2
 80080dc:	701a      	strb	r2, [r3, #0]
      break;
 80080de:	e0f2      	b.n	80082c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	885b      	ldrh	r3, [r3, #2]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b05      	cmp	r3, #5
 80080e8:	f200 80ac 	bhi.w	8008244 <USBD_GetDescriptor+0x204>
 80080ec:	a201      	add	r2, pc, #4	@ (adr r2, 80080f4 <USBD_GetDescriptor+0xb4>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	0800810d 	.word	0x0800810d
 80080f8:	08008141 	.word	0x08008141
 80080fc:	08008175 	.word	0x08008175
 8008100:	080081a9 	.word	0x080081a9
 8008104:	080081dd 	.word	0x080081dd
 8008108:	08008211 	.word	0x08008211
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00b      	beq.n	8008130 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	7c12      	ldrb	r2, [r2, #16]
 8008124:	f107 0108 	add.w	r1, r7, #8
 8008128:	4610      	mov	r0, r2
 800812a:	4798      	blx	r3
 800812c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800812e:	e091      	b.n	8008254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 facb 	bl	80086ce <USBD_CtlError>
            err++;
 8008138:	7afb      	ldrb	r3, [r7, #11]
 800813a:	3301      	adds	r3, #1
 800813c:	72fb      	strb	r3, [r7, #11]
          break;
 800813e:	e089      	b.n	8008254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00b      	beq.n	8008164 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	7c12      	ldrb	r2, [r2, #16]
 8008158:	f107 0108 	add.w	r1, r7, #8
 800815c:	4610      	mov	r0, r2
 800815e:	4798      	blx	r3
 8008160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008162:	e077      	b.n	8008254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fab1 	bl	80086ce <USBD_CtlError>
            err++;
 800816c:	7afb      	ldrb	r3, [r7, #11]
 800816e:	3301      	adds	r3, #1
 8008170:	72fb      	strb	r3, [r7, #11]
          break;
 8008172:	e06f      	b.n	8008254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00b      	beq.n	8008198 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	7c12      	ldrb	r2, [r2, #16]
 800818c:	f107 0108 	add.w	r1, r7, #8
 8008190:	4610      	mov	r0, r2
 8008192:	4798      	blx	r3
 8008194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008196:	e05d      	b.n	8008254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fa97 	bl	80086ce <USBD_CtlError>
            err++;
 80081a0:	7afb      	ldrb	r3, [r7, #11]
 80081a2:	3301      	adds	r3, #1
 80081a4:	72fb      	strb	r3, [r7, #11]
          break;
 80081a6:	e055      	b.n	8008254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00b      	beq.n	80081cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	7c12      	ldrb	r2, [r2, #16]
 80081c0:	f107 0108 	add.w	r1, r7, #8
 80081c4:	4610      	mov	r0, r2
 80081c6:	4798      	blx	r3
 80081c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ca:	e043      	b.n	8008254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fa7d 	bl	80086ce <USBD_CtlError>
            err++;
 80081d4:	7afb      	ldrb	r3, [r7, #11]
 80081d6:	3301      	adds	r3, #1
 80081d8:	72fb      	strb	r3, [r7, #11]
          break;
 80081da:	e03b      	b.n	8008254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00b      	beq.n	8008200 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	7c12      	ldrb	r2, [r2, #16]
 80081f4:	f107 0108 	add.w	r1, r7, #8
 80081f8:	4610      	mov	r0, r2
 80081fa:	4798      	blx	r3
 80081fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081fe:	e029      	b.n	8008254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fa63 	bl	80086ce <USBD_CtlError>
            err++;
 8008208:	7afb      	ldrb	r3, [r7, #11]
 800820a:	3301      	adds	r3, #1
 800820c:	72fb      	strb	r3, [r7, #11]
          break;
 800820e:	e021      	b.n	8008254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00b      	beq.n	8008234 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	7c12      	ldrb	r2, [r2, #16]
 8008228:	f107 0108 	add.w	r1, r7, #8
 800822c:	4610      	mov	r0, r2
 800822e:	4798      	blx	r3
 8008230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008232:	e00f      	b.n	8008254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fa49 	bl	80086ce <USBD_CtlError>
            err++;
 800823c:	7afb      	ldrb	r3, [r7, #11]
 800823e:	3301      	adds	r3, #1
 8008240:	72fb      	strb	r3, [r7, #11]
          break;
 8008242:	e007      	b.n	8008254 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa41 	bl	80086ce <USBD_CtlError>
          err++;
 800824c:	7afb      	ldrb	r3, [r7, #11]
 800824e:	3301      	adds	r3, #1
 8008250:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008252:	bf00      	nop
      }
      break;
 8008254:	e037      	b.n	80082c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	7c1b      	ldrb	r3, [r3, #16]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d109      	bne.n	8008272 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008266:	f107 0208 	add.w	r2, r7, #8
 800826a:	4610      	mov	r0, r2
 800826c:	4798      	blx	r3
 800826e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008270:	e029      	b.n	80082c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fa2a 	bl	80086ce <USBD_CtlError>
        err++;
 800827a:	7afb      	ldrb	r3, [r7, #11]
 800827c:	3301      	adds	r3, #1
 800827e:	72fb      	strb	r3, [r7, #11]
      break;
 8008280:	e021      	b.n	80082c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	7c1b      	ldrb	r3, [r3, #16]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10d      	bne.n	80082a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008292:	f107 0208 	add.w	r2, r7, #8
 8008296:	4610      	mov	r0, r2
 8008298:	4798      	blx	r3
 800829a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	3301      	adds	r3, #1
 80082a0:	2207      	movs	r2, #7
 80082a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082a4:	e00f      	b.n	80082c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fa10 	bl	80086ce <USBD_CtlError>
        err++;
 80082ae:	7afb      	ldrb	r3, [r7, #11]
 80082b0:	3301      	adds	r3, #1
 80082b2:	72fb      	strb	r3, [r7, #11]
      break;
 80082b4:	e007      	b.n	80082c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fa08 	bl	80086ce <USBD_CtlError>
      err++;
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	3301      	adds	r3, #1
 80082c2:	72fb      	strb	r3, [r7, #11]
      break;
 80082c4:	bf00      	nop
  }

  if (err != 0U)
 80082c6:	7afb      	ldrb	r3, [r7, #11]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d11e      	bne.n	800830a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	88db      	ldrh	r3, [r3, #6]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d016      	beq.n	8008302 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80082d4:	893b      	ldrh	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00e      	beq.n	80082f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	88da      	ldrh	r2, [r3, #6]
 80082de:	893b      	ldrh	r3, [r7, #8]
 80082e0:	4293      	cmp	r3, r2
 80082e2:	bf28      	it	cs
 80082e4:	4613      	movcs	r3, r2
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082ea:	893b      	ldrh	r3, [r7, #8]
 80082ec:	461a      	mov	r2, r3
 80082ee:	68f9      	ldr	r1, [r7, #12]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fa69 	bl	80087c8 <USBD_CtlSendData>
 80082f6:	e009      	b.n	800830c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f9e7 	bl	80086ce <USBD_CtlError>
 8008300:	e004      	b.n	800830c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 faba 	bl	800887c <USBD_CtlSendStatus>
 8008308:	e000      	b.n	800830c <USBD_GetDescriptor+0x2cc>
    return;
 800830a:	bf00      	nop
  }
}
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop

08008314 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	889b      	ldrh	r3, [r3, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d131      	bne.n	800838a <USBD_SetAddress+0x76>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	88db      	ldrh	r3, [r3, #6]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d12d      	bne.n	800838a <USBD_SetAddress+0x76>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	885b      	ldrh	r3, [r3, #2]
 8008332:	2b7f      	cmp	r3, #127	@ 0x7f
 8008334:	d829      	bhi.n	800838a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	885b      	ldrh	r3, [r3, #2]
 800833a:	b2db      	uxtb	r3, r3
 800833c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008340:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b03      	cmp	r3, #3
 800834c:	d104      	bne.n	8008358 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f9bc 	bl	80086ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008356:	e01d      	b.n	8008394 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	7bfa      	ldrb	r2, [r7, #15]
 800835c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fee1 	bl	800912c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa86 	bl	800887c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d004      	beq.n	8008380 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2202      	movs	r2, #2
 800837a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837e:	e009      	b.n	8008394 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008388:	e004      	b.n	8008394 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f99e 	bl	80086ce <USBD_CtlError>
  }
}
 8008392:	bf00      	nop
 8008394:	bf00      	nop
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	885b      	ldrh	r3, [r3, #2]
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	4b4e      	ldr	r3, [pc, #312]	@ (80084ec <USBD_SetConfig+0x150>)
 80083b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083b4:	4b4d      	ldr	r3, [pc, #308]	@ (80084ec <USBD_SetConfig+0x150>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d905      	bls.n	80083c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f985 	bl	80086ce <USBD_CtlError>
    return USBD_FAIL;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e08c      	b.n	80084e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d002      	beq.n	80083da <USBD_SetConfig+0x3e>
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d029      	beq.n	800842c <USBD_SetConfig+0x90>
 80083d8:	e075      	b.n	80084c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80083da:	4b44      	ldr	r3, [pc, #272]	@ (80084ec <USBD_SetConfig+0x150>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d020      	beq.n	8008424 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80083e2:	4b42      	ldr	r3, [pc, #264]	@ (80084ec <USBD_SetConfig+0x150>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083ec:	4b3f      	ldr	r3, [pc, #252]	@ (80084ec <USBD_SetConfig+0x150>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7fe ffe3 	bl	80073be <USBD_SetClassConfig>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d008      	beq.n	8008414 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f962 	bl	80086ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2202      	movs	r2, #2
 800840e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008412:	e065      	b.n	80084e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fa31 	bl	800887c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2203      	movs	r2, #3
 800841e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008422:	e05d      	b.n	80084e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fa29 	bl	800887c <USBD_CtlSendStatus>
      break;
 800842a:	e059      	b.n	80084e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800842c:	4b2f      	ldr	r3, [pc, #188]	@ (80084ec <USBD_SetConfig+0x150>)
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d112      	bne.n	800845a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2202      	movs	r2, #2
 8008438:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800843c:	4b2b      	ldr	r3, [pc, #172]	@ (80084ec <USBD_SetConfig+0x150>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	461a      	mov	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008446:	4b29      	ldr	r3, [pc, #164]	@ (80084ec <USBD_SetConfig+0x150>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7fe ffd2 	bl	80073f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fa12 	bl	800887c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008458:	e042      	b.n	80084e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800845a:	4b24      	ldr	r3, [pc, #144]	@ (80084ec <USBD_SetConfig+0x150>)
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	429a      	cmp	r2, r3
 8008466:	d02a      	beq.n	80084be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	b2db      	uxtb	r3, r3
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7fe ffc0 	bl	80073f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008476:	4b1d      	ldr	r3, [pc, #116]	@ (80084ec <USBD_SetConfig+0x150>)
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008480:	4b1a      	ldr	r3, [pc, #104]	@ (80084ec <USBD_SetConfig+0x150>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7fe ff99 	bl	80073be <USBD_SetClassConfig>
 800848c:	4603      	mov	r3, r0
 800848e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00f      	beq.n	80084b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f918 	bl	80086ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7fe ffa5 	bl	80073f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80084b4:	e014      	b.n	80084e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f9e0 	bl	800887c <USBD_CtlSendStatus>
      break;
 80084bc:	e010      	b.n	80084e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f9dc 	bl	800887c <USBD_CtlSendStatus>
      break;
 80084c4:	e00c      	b.n	80084e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f900 	bl	80086ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084ce:	4b07      	ldr	r3, [pc, #28]	@ (80084ec <USBD_SetConfig+0x150>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7fe ff8e 	bl	80073f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80084da:	2303      	movs	r3, #3
 80084dc:	73fb      	strb	r3, [r7, #15]
      break;
 80084de:	bf00      	nop
  }

  return ret;
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	200002d8 	.word	0x200002d8

080084f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	88db      	ldrh	r3, [r3, #6]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d004      	beq.n	800850c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f8e2 	bl	80086ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800850a:	e023      	b.n	8008554 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b02      	cmp	r3, #2
 8008516:	dc02      	bgt.n	800851e <USBD_GetConfig+0x2e>
 8008518:	2b00      	cmp	r3, #0
 800851a:	dc03      	bgt.n	8008524 <USBD_GetConfig+0x34>
 800851c:	e015      	b.n	800854a <USBD_GetConfig+0x5a>
 800851e:	2b03      	cmp	r3, #3
 8008520:	d00b      	beq.n	800853a <USBD_GetConfig+0x4a>
 8008522:	e012      	b.n	800854a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	3308      	adds	r3, #8
 800852e:	2201      	movs	r2, #1
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f948 	bl	80087c8 <USBD_CtlSendData>
        break;
 8008538:	e00c      	b.n	8008554 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	3304      	adds	r3, #4
 800853e:	2201      	movs	r2, #1
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f940 	bl	80087c8 <USBD_CtlSendData>
        break;
 8008548:	e004      	b.n	8008554 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f8be 	bl	80086ce <USBD_CtlError>
        break;
 8008552:	bf00      	nop
}
 8008554:	bf00      	nop
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800856c:	b2db      	uxtb	r3, r3
 800856e:	3b01      	subs	r3, #1
 8008570:	2b02      	cmp	r3, #2
 8008572:	d81e      	bhi.n	80085b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	88db      	ldrh	r3, [r3, #6]
 8008578:	2b02      	cmp	r3, #2
 800857a:	d004      	beq.n	8008586 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f8a5 	bl	80086ce <USBD_CtlError>
        break;
 8008584:	e01a      	b.n	80085bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008592:	2b00      	cmp	r3, #0
 8008594:	d005      	beq.n	80085a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	f043 0202 	orr.w	r2, r3, #2
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	330c      	adds	r3, #12
 80085a6:	2202      	movs	r2, #2
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 f90c 	bl	80087c8 <USBD_CtlSendData>
      break;
 80085b0:	e004      	b.n	80085bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f88a 	bl	80086ce <USBD_CtlError>
      break;
 80085ba:	bf00      	nop
  }
}
 80085bc:	bf00      	nop
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	885b      	ldrh	r3, [r3, #2]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d107      	bne.n	80085e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f94c 	bl	800887c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80085e4:	e013      	b.n	800860e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	885b      	ldrh	r3, [r3, #2]
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d10b      	bne.n	8008606 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	889b      	ldrh	r3, [r3, #4]
 80085f2:	0a1b      	lsrs	r3, r3, #8
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f93c 	bl	800887c <USBD_CtlSendStatus>
}
 8008604:	e003      	b.n	800860e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f860 	bl	80086ce <USBD_CtlError>
}
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008626:	b2db      	uxtb	r3, r3
 8008628:	3b01      	subs	r3, #1
 800862a:	2b02      	cmp	r3, #2
 800862c:	d80b      	bhi.n	8008646 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	885b      	ldrh	r3, [r3, #2]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d10c      	bne.n	8008650 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f91c 	bl	800887c <USBD_CtlSendStatus>
      }
      break;
 8008644:	e004      	b.n	8008650 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f840 	bl	80086ce <USBD_CtlError>
      break;
 800864e:	e000      	b.n	8008652 <USBD_ClrFeature+0x3c>
      break;
 8008650:	bf00      	nop
  }
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	781a      	ldrb	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3301      	adds	r3, #1
 8008674:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	781a      	ldrb	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3301      	adds	r3, #1
 8008682:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7ff fa40 	bl	8007b0a <SWAPBYTE>
 800868a:	4603      	mov	r3, r0
 800868c:	461a      	mov	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3301      	adds	r3, #1
 8008696:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3301      	adds	r3, #1
 800869c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f7ff fa33 	bl	8007b0a <SWAPBYTE>
 80086a4:	4603      	mov	r3, r0
 80086a6:	461a      	mov	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	3301      	adds	r3, #1
 80086b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3301      	adds	r3, #1
 80086b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f7ff fa26 	bl	8007b0a <SWAPBYTE>
 80086be:	4603      	mov	r3, r0
 80086c0:	461a      	mov	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	80da      	strh	r2, [r3, #6]
}
 80086c6:	bf00      	nop
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b082      	sub	sp, #8
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086d8:	2180      	movs	r1, #128	@ 0x80
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fcbc 	bl	8009058 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086e0:	2100      	movs	r1, #0
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fcb8 	bl	8009058 <USBD_LL_StallEP>
}
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d042      	beq.n	800878c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800870a:	6938      	ldr	r0, [r7, #16]
 800870c:	f000 f842 	bl	8008794 <USBD_GetLen>
 8008710:	4603      	mov	r3, r0
 8008712:	3301      	adds	r3, #1
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800871a:	d808      	bhi.n	800872e <USBD_GetString+0x3e>
 800871c:	6938      	ldr	r0, [r7, #16]
 800871e:	f000 f839 	bl	8008794 <USBD_GetLen>
 8008722:	4603      	mov	r3, r0
 8008724:	3301      	adds	r3, #1
 8008726:	b29b      	uxth	r3, r3
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	b29a      	uxth	r2, r3
 800872c:	e001      	b.n	8008732 <USBD_GetString+0x42>
 800872e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	4413      	add	r3, r2
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	7812      	ldrb	r2, [r2, #0]
 8008740:	701a      	strb	r2, [r3, #0]
  idx++;
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	3301      	adds	r3, #1
 8008746:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	4413      	add	r3, r2
 800874e:	2203      	movs	r2, #3
 8008750:	701a      	strb	r2, [r3, #0]
  idx++;
 8008752:	7dfb      	ldrb	r3, [r7, #23]
 8008754:	3301      	adds	r3, #1
 8008756:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008758:	e013      	b.n	8008782 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	4413      	add	r3, r2
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	7812      	ldrb	r2, [r2, #0]
 8008764:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	3301      	adds	r3, #1
 800876a:	613b      	str	r3, [r7, #16]
    idx++;
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	3301      	adds	r3, #1
 8008770:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008772:	7dfb      	ldrb	r3, [r7, #23]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	4413      	add	r3, r2
 8008778:	2200      	movs	r2, #0
 800877a:	701a      	strb	r2, [r3, #0]
    idx++;
 800877c:	7dfb      	ldrb	r3, [r7, #23]
 800877e:	3301      	adds	r3, #1
 8008780:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e7      	bne.n	800875a <USBD_GetString+0x6a>
 800878a:	e000      	b.n	800878e <USBD_GetString+0x9e>
    return;
 800878c:	bf00      	nop
  }
}
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80087a4:	e005      	b.n	80087b2 <USBD_GetLen+0x1e>
  {
    len++;
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	3301      	adds	r3, #1
 80087aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	3301      	adds	r3, #1
 80087b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1f5      	bne.n	80087a6 <USBD_GetLen+0x12>
  }

  return len;
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	2100      	movs	r1, #0
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 fcbb 	bl	800916a <USBD_LL_Transmit>

  return USBD_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	2100      	movs	r1, #0
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 fcaa 	bl	800916a <USBD_LL_Transmit>

  return USBD_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2203      	movs	r2, #3
 8008830:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	2100      	movs	r1, #0
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f000 fcae 	bl	80091ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	60f8      	str	r0, [r7, #12]
 8008862:	60b9      	str	r1, [r7, #8]
 8008864:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	2100      	movs	r1, #0
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 fc9d 	bl	80091ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2204      	movs	r2, #4
 8008888:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800888c:	2300      	movs	r3, #0
 800888e:	2200      	movs	r2, #0
 8008890:	2100      	movs	r1, #0
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fc69 	bl	800916a <USBD_LL_Transmit>

  return USBD_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2205      	movs	r2, #5
 80088ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088b2:	2300      	movs	r3, #0
 80088b4:	2200      	movs	r2, #0
 80088b6:	2100      	movs	r1, #0
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fc77 	bl	80091ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088cc:	2200      	movs	r2, #0
 80088ce:	4912      	ldr	r1, [pc, #72]	@ (8008918 <MX_USB_DEVICE_Init+0x50>)
 80088d0:	4812      	ldr	r0, [pc, #72]	@ (800891c <MX_USB_DEVICE_Init+0x54>)
 80088d2:	f7fe fcf7 	bl	80072c4 <USBD_Init>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d001      	beq.n	80088e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088dc:	f7f7 ffae 	bl	800083c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80088e0:	490f      	ldr	r1, [pc, #60]	@ (8008920 <MX_USB_DEVICE_Init+0x58>)
 80088e2:	480e      	ldr	r0, [pc, #56]	@ (800891c <MX_USB_DEVICE_Init+0x54>)
 80088e4:	f7fe fd1e 	bl	8007324 <USBD_RegisterClass>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088ee:	f7f7 ffa5 	bl	800083c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80088f2:	490c      	ldr	r1, [pc, #48]	@ (8008924 <MX_USB_DEVICE_Init+0x5c>)
 80088f4:	4809      	ldr	r0, [pc, #36]	@ (800891c <MX_USB_DEVICE_Init+0x54>)
 80088f6:	f7fe fc55 	bl	80071a4 <USBD_CDC_RegisterInterface>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008900:	f7f7 ff9c 	bl	800083c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008904:	4805      	ldr	r0, [pc, #20]	@ (800891c <MX_USB_DEVICE_Init+0x54>)
 8008906:	f7fe fd43 	bl	8007390 <USBD_Start>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008910:	f7f7 ff94 	bl	800083c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008914:	bf00      	nop
 8008916:	bd80      	pop	{r7, pc}
 8008918:	200000ac 	.word	0x200000ac
 800891c:	200002dc 	.word	0x200002dc
 8008920:	20000018 	.word	0x20000018
 8008924:	20000098 	.word	0x20000098

08008928 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800892c:	2200      	movs	r2, #0
 800892e:	4905      	ldr	r1, [pc, #20]	@ (8008944 <CDC_Init_FS+0x1c>)
 8008930:	4805      	ldr	r0, [pc, #20]	@ (8008948 <CDC_Init_FS+0x20>)
 8008932:	f7fe fc51 	bl	80071d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008936:	4905      	ldr	r1, [pc, #20]	@ (800894c <CDC_Init_FS+0x24>)
 8008938:	4803      	ldr	r0, [pc, #12]	@ (8008948 <CDC_Init_FS+0x20>)
 800893a:	f7fe fc6f 	bl	800721c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800893e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008940:	4618      	mov	r0, r3
 8008942:	bd80      	pop	{r7, pc}
 8008944:	200009b8 	.word	0x200009b8
 8008948:	200002dc 	.word	0x200002dc
 800894c:	200005b8 	.word	0x200005b8

08008950 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008954:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008956:	4618      	mov	r0, r3
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	6039      	str	r1, [r7, #0]
 800896a:	71fb      	strb	r3, [r7, #7]
 800896c:	4613      	mov	r3, r2
 800896e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	2b23      	cmp	r3, #35	@ 0x23
 8008974:	d84a      	bhi.n	8008a0c <CDC_Control_FS+0xac>
 8008976:	a201      	add	r2, pc, #4	@ (adr r2, 800897c <CDC_Control_FS+0x1c>)
 8008978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897c:	08008a0d 	.word	0x08008a0d
 8008980:	08008a0d 	.word	0x08008a0d
 8008984:	08008a0d 	.word	0x08008a0d
 8008988:	08008a0d 	.word	0x08008a0d
 800898c:	08008a0d 	.word	0x08008a0d
 8008990:	08008a0d 	.word	0x08008a0d
 8008994:	08008a0d 	.word	0x08008a0d
 8008998:	08008a0d 	.word	0x08008a0d
 800899c:	08008a0d 	.word	0x08008a0d
 80089a0:	08008a0d 	.word	0x08008a0d
 80089a4:	08008a0d 	.word	0x08008a0d
 80089a8:	08008a0d 	.word	0x08008a0d
 80089ac:	08008a0d 	.word	0x08008a0d
 80089b0:	08008a0d 	.word	0x08008a0d
 80089b4:	08008a0d 	.word	0x08008a0d
 80089b8:	08008a0d 	.word	0x08008a0d
 80089bc:	08008a0d 	.word	0x08008a0d
 80089c0:	08008a0d 	.word	0x08008a0d
 80089c4:	08008a0d 	.word	0x08008a0d
 80089c8:	08008a0d 	.word	0x08008a0d
 80089cc:	08008a0d 	.word	0x08008a0d
 80089d0:	08008a0d 	.word	0x08008a0d
 80089d4:	08008a0d 	.word	0x08008a0d
 80089d8:	08008a0d 	.word	0x08008a0d
 80089dc:	08008a0d 	.word	0x08008a0d
 80089e0:	08008a0d 	.word	0x08008a0d
 80089e4:	08008a0d 	.word	0x08008a0d
 80089e8:	08008a0d 	.word	0x08008a0d
 80089ec:	08008a0d 	.word	0x08008a0d
 80089f0:	08008a0d 	.word	0x08008a0d
 80089f4:	08008a0d 	.word	0x08008a0d
 80089f8:	08008a0d 	.word	0x08008a0d
 80089fc:	08008a0d 	.word	0x08008a0d
 8008a00:	08008a0d 	.word	0x08008a0d
 8008a04:	08008a0d 	.word	0x08008a0d
 8008a08:	08008a0d 	.word	0x08008a0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a0c:	bf00      	nop
  }

  return (USBD_OK);
 8008a0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	4805      	ldr	r0, [pc, #20]	@ (8008a40 <CDC_Receive_FS+0x24>)
 8008a2a:	f7fe fbf7 	bl	800721c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a2e:	4804      	ldr	r0, [pc, #16]	@ (8008a40 <CDC_Receive_FS+0x24>)
 8008a30:	f7fe fc12 	bl	8007258 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	200002dc 	.word	0x200002dc

08008a44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	371c      	adds	r7, #28
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
	...

08008a68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	6039      	str	r1, [r7, #0]
 8008a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2212      	movs	r2, #18
 8008a78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a7a:	4b03      	ldr	r3, [pc, #12]	@ (8008a88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	200000c8 	.word	0x200000c8

08008a8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	4603      	mov	r3, r0
 8008a94:	6039      	str	r1, [r7, #0]
 8008a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2204      	movs	r2, #4
 8008a9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a9e:	4b03      	ldr	r3, [pc, #12]	@ (8008aac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	200000dc 	.word	0x200000dc

08008ab0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	6039      	str	r1, [r7, #0]
 8008aba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d105      	bne.n	8008ace <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	4907      	ldr	r1, [pc, #28]	@ (8008ae4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ac6:	4808      	ldr	r0, [pc, #32]	@ (8008ae8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ac8:	f7ff fe12 	bl	80086f0 <USBD_GetString>
 8008acc:	e004      	b.n	8008ad8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	4904      	ldr	r1, [pc, #16]	@ (8008ae4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ad2:	4805      	ldr	r0, [pc, #20]	@ (8008ae8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ad4:	f7ff fe0c 	bl	80086f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ad8:	4b02      	ldr	r3, [pc, #8]	@ (8008ae4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20000db8 	.word	0x20000db8
 8008ae8:	08009390 	.word	0x08009390

08008aec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	6039      	str	r1, [r7, #0]
 8008af6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	4904      	ldr	r1, [pc, #16]	@ (8008b0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008afc:	4804      	ldr	r0, [pc, #16]	@ (8008b10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008afe:	f7ff fdf7 	bl	80086f0 <USBD_GetString>
  return USBD_StrDesc;
 8008b02:	4b02      	ldr	r3, [pc, #8]	@ (8008b0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20000db8 	.word	0x20000db8
 8008b10:	080093a8 	.word	0x080093a8

08008b14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	221a      	movs	r2, #26
 8008b24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b26:	f000 f843 	bl	8008bb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b2a:	4b02      	ldr	r3, [pc, #8]	@ (8008b34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	200000e0 	.word	0x200000e0

08008b38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	6039      	str	r1, [r7, #0]
 8008b42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d105      	bne.n	8008b56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	4907      	ldr	r1, [pc, #28]	@ (8008b6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b4e:	4808      	ldr	r0, [pc, #32]	@ (8008b70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b50:	f7ff fdce 	bl	80086f0 <USBD_GetString>
 8008b54:	e004      	b.n	8008b60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	4904      	ldr	r1, [pc, #16]	@ (8008b6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b5a:	4805      	ldr	r0, [pc, #20]	@ (8008b70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b5c:	f7ff fdc8 	bl	80086f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b60:	4b02      	ldr	r3, [pc, #8]	@ (8008b6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20000db8 	.word	0x20000db8
 8008b70:	080093bc 	.word	0x080093bc

08008b74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	6039      	str	r1, [r7, #0]
 8008b7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d105      	bne.n	8008b92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	4907      	ldr	r1, [pc, #28]	@ (8008ba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b8a:	4808      	ldr	r0, [pc, #32]	@ (8008bac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b8c:	f7ff fdb0 	bl	80086f0 <USBD_GetString>
 8008b90:	e004      	b.n	8008b9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	4904      	ldr	r1, [pc, #16]	@ (8008ba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b96:	4805      	ldr	r0, [pc, #20]	@ (8008bac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b98:	f7ff fdaa 	bl	80086f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b9c:	4b02      	ldr	r3, [pc, #8]	@ (8008ba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000db8 	.word	0x20000db8
 8008bac:	080093c8 	.word	0x080093c8

08008bb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8008bf4 <Get_SerialNum+0x44>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8008bf8 <Get_SerialNum+0x48>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8008bfc <Get_SerialNum+0x4c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4413      	add	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d009      	beq.n	8008bea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bd6:	2208      	movs	r2, #8
 8008bd8:	4909      	ldr	r1, [pc, #36]	@ (8008c00 <Get_SerialNum+0x50>)
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 f814 	bl	8008c08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008be0:	2204      	movs	r2, #4
 8008be2:	4908      	ldr	r1, [pc, #32]	@ (8008c04 <Get_SerialNum+0x54>)
 8008be4:	68b8      	ldr	r0, [r7, #8]
 8008be6:	f000 f80f 	bl	8008c08 <IntToUnicode>
  }
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	1fff7a10 	.word	0x1fff7a10
 8008bf8:	1fff7a14 	.word	0x1fff7a14
 8008bfc:	1fff7a18 	.word	0x1fff7a18
 8008c00:	200000e2 	.word	0x200000e2
 8008c04:	200000f2 	.word	0x200000f2

08008c08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b087      	sub	sp, #28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	4613      	mov	r3, r2
 8008c14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	75fb      	strb	r3, [r7, #23]
 8008c1e:	e027      	b.n	8008c70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	0f1b      	lsrs	r3, r3, #28
 8008c24:	2b09      	cmp	r3, #9
 8008c26:	d80b      	bhi.n	8008c40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	0f1b      	lsrs	r3, r3, #28
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	005b      	lsls	r3, r3, #1
 8008c32:	4619      	mov	r1, r3
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	440b      	add	r3, r1
 8008c38:	3230      	adds	r2, #48	@ 0x30
 8008c3a:	b2d2      	uxtb	r2, r2
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	e00a      	b.n	8008c56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	0f1b      	lsrs	r3, r3, #28
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	005b      	lsls	r3, r3, #1
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	440b      	add	r3, r1
 8008c50:	3237      	adds	r2, #55	@ 0x37
 8008c52:	b2d2      	uxtb	r2, r2
 8008c54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	3301      	adds	r3, #1
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	4413      	add	r3, r2
 8008c66:	2200      	movs	r2, #0
 8008c68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c6a:	7dfb      	ldrb	r3, [r7, #23]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	75fb      	strb	r3, [r7, #23]
 8008c70:	7dfa      	ldrb	r2, [r7, #23]
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d3d3      	bcc.n	8008c20 <IntToUnicode+0x18>
  }
}
 8008c78:	bf00      	nop
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
	...

08008c88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08a      	sub	sp, #40	@ 0x28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c90:	f107 0314 	add.w	r3, r7, #20
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	605a      	str	r2, [r3, #4]
 8008c9a:	609a      	str	r2, [r3, #8]
 8008c9c:	60da      	str	r2, [r3, #12]
 8008c9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ca8:	d13a      	bne.n	8008d20 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008caa:	2300      	movs	r3, #0
 8008cac:	613b      	str	r3, [r7, #16]
 8008cae:	4b1e      	ldr	r3, [pc, #120]	@ (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008cb4:	f043 0301 	orr.w	r3, r3, #1
 8008cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008cba:	4b1b      	ldr	r3, [pc, #108]	@ (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	613b      	str	r3, [r7, #16]
 8008cc4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008cc6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ccc:	2302      	movs	r3, #2
 8008cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008cd8:	230a      	movs	r3, #10
 8008cda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cdc:	f107 0314 	add.w	r3, r7, #20
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4812      	ldr	r0, [pc, #72]	@ (8008d2c <HAL_PCD_MspInit+0xa4>)
 8008ce4:	f7f9 f9b2 	bl	800204c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cec:	4a0e      	ldr	r2, [pc, #56]	@ (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cf2:	6353      	str	r3, [r2, #52]	@ 0x34
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008cfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d02:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d04:	4b08      	ldr	r3, [pc, #32]	@ (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d0c:	60fb      	str	r3, [r7, #12]
 8008d0e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d10:	2200      	movs	r2, #0
 8008d12:	2100      	movs	r1, #0
 8008d14:	2043      	movs	r0, #67	@ 0x43
 8008d16:	f7f8 fdf2 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d1a:	2043      	movs	r0, #67	@ 0x43
 8008d1c:	f7f8 fe0b 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d20:	bf00      	nop
 8008d22:	3728      	adds	r7, #40	@ 0x28
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	40023800 	.word	0x40023800
 8008d2c:	40020000 	.word	0x40020000

08008d30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008d44:	4619      	mov	r1, r3
 8008d46:	4610      	mov	r0, r2
 8008d48:	f7fe fb6f 	bl	800742a <USBD_LL_SetupStage>
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008d66:	78fa      	ldrb	r2, [r7, #3]
 8008d68:	6879      	ldr	r1, [r7, #4]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	00db      	lsls	r3, r3, #3
 8008d6e:	4413      	add	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	440b      	add	r3, r1
 8008d74:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	78fb      	ldrb	r3, [r7, #3]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f7fe fba9 	bl	80074d4 <USBD_LL_DataOutStage>
}
 8008d82:	bf00      	nop
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	460b      	mov	r3, r1
 8008d94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008d9c:	78fa      	ldrb	r2, [r7, #3]
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	4613      	mov	r3, r2
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	440b      	add	r3, r1
 8008daa:	3320      	adds	r3, #32
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	4619      	mov	r1, r3
 8008db2:	f7fe fc42 	bl	800763a <USBD_LL_DataInStage>
}
 8008db6:	bf00      	nop
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fe fd7c 	bl	80078ca <USBD_LL_SOF>
}
 8008dd2:	bf00      	nop
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008de2:	2301      	movs	r3, #1
 8008de4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	79db      	ldrb	r3, [r3, #7]
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d001      	beq.n	8008df2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008dee:	f7f7 fd25 	bl	800083c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008df8:	7bfa      	ldrb	r2, [r7, #15]
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fe fd20 	bl	8007842 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fe fcc8 	bl	800779e <USBD_LL_Reset>
}
 8008e0e:	bf00      	nop
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
	...

08008e18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe fd1b 	bl	8007862 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	6812      	ldr	r2, [r2, #0]
 8008e3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008e3e:	f043 0301 	orr.w	r3, r3, #1
 8008e42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	7adb      	ldrb	r3, [r3, #11]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d005      	beq.n	8008e58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e4c:	4b04      	ldr	r3, [pc, #16]	@ (8008e60 <HAL_PCD_SuspendCallback+0x48>)
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	4a03      	ldr	r2, [pc, #12]	@ (8008e60 <HAL_PCD_SuspendCallback+0x48>)
 8008e52:	f043 0306 	orr.w	r3, r3, #6
 8008e56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e58:	bf00      	nop
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	e000ed00 	.word	0xe000ed00

08008e64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe fd11 	bl	800789a <USBD_LL_Resume>
}
 8008e78:	bf00      	nop
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e92:	78fa      	ldrb	r2, [r7, #3]
 8008e94:	4611      	mov	r1, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fe fd69 	bl	800796e <USBD_LL_IsoOUTIncomplete>
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008eb6:	78fa      	ldrb	r2, [r7, #3]
 8008eb8:	4611      	mov	r1, r2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe fd25 	bl	800790a <USBD_LL_IsoINIncomplete>
}
 8008ec0:	bf00      	nop
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fe fd7b 	bl	80079d2 <USBD_LL_DevConnected>
}
 8008edc:	bf00      	nop
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fe fd78 	bl	80079e8 <USBD_LL_DevDisconnected>
}
 8008ef8:	bf00      	nop
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d13c      	bne.n	8008f8a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f10:	4a20      	ldr	r2, [pc, #128]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f1c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f20:	4b1c      	ldr	r3, [pc, #112]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f28:	4b1a      	ldr	r3, [pc, #104]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f2a:	2204      	movs	r2, #4
 8008f2c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f2e:	4b19      	ldr	r3, [pc, #100]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f30:	2202      	movs	r2, #2
 8008f32:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f34:	4b17      	ldr	r3, [pc, #92]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f3a:	4b16      	ldr	r3, [pc, #88]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f40:	4b14      	ldr	r3, [pc, #80]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f46:	4b13      	ldr	r3, [pc, #76]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f4c:	4b11      	ldr	r3, [pc, #68]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008f52:	4b10      	ldr	r3, [pc, #64]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f58:	4b0e      	ldr	r3, [pc, #56]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f5e:	480d      	ldr	r0, [pc, #52]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f60:	f7f9 fa11 	bl	8002386 <HAL_PCD_Init>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f6a:	f7f7 fc67 	bl	800083c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f6e:	2180      	movs	r1, #128	@ 0x80
 8008f70:	4808      	ldr	r0, [pc, #32]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f72:	f7fa fc3e 	bl	80037f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f76:	2240      	movs	r2, #64	@ 0x40
 8008f78:	2100      	movs	r1, #0
 8008f7a:	4806      	ldr	r0, [pc, #24]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f7c:	f7fa fbf2 	bl	8003764 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f80:	2280      	movs	r2, #128	@ 0x80
 8008f82:	2101      	movs	r1, #1
 8008f84:	4803      	ldr	r0, [pc, #12]	@ (8008f94 <USBD_LL_Init+0x94>)
 8008f86:	f7fa fbed 	bl	8003764 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	20000fb8 	.word	0x20000fb8

08008f98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7f9 faf8 	bl	80025a4 <HAL_PCD_Start>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 f942 	bl	8009244 <USBD_Get_USB_Status>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b084      	sub	sp, #16
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	4608      	mov	r0, r1
 8008fd8:	4611      	mov	r1, r2
 8008fda:	461a      	mov	r2, r3
 8008fdc:	4603      	mov	r3, r0
 8008fde:	70fb      	strb	r3, [r7, #3]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70bb      	strb	r3, [r7, #2]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008ff6:	78bb      	ldrb	r3, [r7, #2]
 8008ff8:	883a      	ldrh	r2, [r7, #0]
 8008ffa:	78f9      	ldrb	r1, [r7, #3]
 8008ffc:	f7f9 ffcc 	bl	8002f98 <HAL_PCD_EP_Open>
 8009000:	4603      	mov	r3, r0
 8009002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 f91c 	bl	8009244 <USBD_Get_USB_Status>
 800900c:	4603      	mov	r3, r0
 800900e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009010:	7bbb      	ldrb	r3, [r7, #14]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	460b      	mov	r3, r1
 8009024:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009034:	78fa      	ldrb	r2, [r7, #3]
 8009036:	4611      	mov	r1, r2
 8009038:	4618      	mov	r0, r3
 800903a:	f7fa f817 	bl	800306c <HAL_PCD_EP_Close>
 800903e:	4603      	mov	r3, r0
 8009040:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	4618      	mov	r0, r3
 8009046:	f000 f8fd 	bl	8009244 <USBD_Get_USB_Status>
 800904a:	4603      	mov	r3, r0
 800904c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800904e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009072:	78fa      	ldrb	r2, [r7, #3]
 8009074:	4611      	mov	r1, r2
 8009076:	4618      	mov	r0, r3
 8009078:	f7fa f8cf 	bl	800321a <HAL_PCD_EP_SetStall>
 800907c:	4603      	mov	r3, r0
 800907e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009080:	7bfb      	ldrb	r3, [r7, #15]
 8009082:	4618      	mov	r0, r3
 8009084:	f000 f8de 	bl	8009244 <USBD_Get_USB_Status>
 8009088:	4603      	mov	r3, r0
 800908a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800908c:	7bbb      	ldrb	r3, [r7, #14]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090b0:	78fa      	ldrb	r2, [r7, #3]
 80090b2:	4611      	mov	r1, r2
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fa f913 	bl	80032e0 <HAL_PCD_EP_ClrStall>
 80090ba:	4603      	mov	r3, r0
 80090bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090be:	7bfb      	ldrb	r3, [r7, #15]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 f8bf 	bl	8009244 <USBD_Get_USB_Status>
 80090c6:	4603      	mov	r3, r0
 80090c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	da0b      	bge.n	8009108 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090f6:	68f9      	ldr	r1, [r7, #12]
 80090f8:	4613      	mov	r3, r2
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	4413      	add	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	440b      	add	r3, r1
 8009102:	3316      	adds	r3, #22
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	e00b      	b.n	8009120 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800910e:	68f9      	ldr	r1, [r7, #12]
 8009110:	4613      	mov	r3, r2
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	4413      	add	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	440b      	add	r3, r1
 800911a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800911e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009120:	4618      	mov	r0, r3
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	460b      	mov	r3, r1
 8009136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009146:	78fa      	ldrb	r2, [r7, #3]
 8009148:	4611      	mov	r1, r2
 800914a:	4618      	mov	r0, r3
 800914c:	f7f9 ff00 	bl	8002f50 <HAL_PCD_SetAddress>
 8009150:	4603      	mov	r3, r0
 8009152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	4618      	mov	r0, r3
 8009158:	f000 f874 	bl	8009244 <USBD_Get_USB_Status>
 800915c:	4603      	mov	r3, r0
 800915e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009160:	7bbb      	ldrb	r3, [r7, #14]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b086      	sub	sp, #24
 800916e:	af00      	add	r7, sp, #0
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	603b      	str	r3, [r7, #0]
 8009176:	460b      	mov	r3, r1
 8009178:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009188:	7af9      	ldrb	r1, [r7, #11]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	f7fa f80a 	bl	80031a6 <HAL_PCD_EP_Transmit>
 8009192:	4603      	mov	r3, r0
 8009194:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	4618      	mov	r0, r3
 800919a:	f000 f853 	bl	8009244 <USBD_Get_USB_Status>
 800919e:	4603      	mov	r3, r0
 80091a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	607a      	str	r2, [r7, #4]
 80091b6:	603b      	str	r3, [r7, #0]
 80091b8:	460b      	mov	r3, r1
 80091ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80091ca:	7af9      	ldrb	r1, [r7, #11]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	f7f9 ff96 	bl	8003100 <HAL_PCD_EP_Receive>
 80091d4:	4603      	mov	r3, r0
 80091d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091d8:	7dfb      	ldrb	r3, [r7, #23]
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 f832 	bl	8009244 <USBD_Get_USB_Status>
 80091e0:	4603      	mov	r3, r0
 80091e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3718      	adds	r7, #24
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b082      	sub	sp, #8
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	460b      	mov	r3, r1
 80091f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009200:	78fa      	ldrb	r2, [r7, #3]
 8009202:	4611      	mov	r1, r2
 8009204:	4618      	mov	r0, r3
 8009206:	f7f9 ffb6 	bl	8003176 <HAL_PCD_EP_GetRxCount>
 800920a:	4603      	mov	r3, r0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800921c:	4b03      	ldr	r3, [pc, #12]	@ (800922c <USBD_static_malloc+0x18>)
}
 800921e:	4618      	mov	r0, r3
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	2000149c 	.word	0x2000149c

08009230 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]

}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800924e:	2300      	movs	r3, #0
 8009250:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	2b03      	cmp	r3, #3
 8009256:	d817      	bhi.n	8009288 <USBD_Get_USB_Status+0x44>
 8009258:	a201      	add	r2, pc, #4	@ (adr r2, 8009260 <USBD_Get_USB_Status+0x1c>)
 800925a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925e:	bf00      	nop
 8009260:	08009271 	.word	0x08009271
 8009264:	08009277 	.word	0x08009277
 8009268:	0800927d 	.word	0x0800927d
 800926c:	08009283 	.word	0x08009283
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]
    break;
 8009274:	e00b      	b.n	800928e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009276:	2303      	movs	r3, #3
 8009278:	73fb      	strb	r3, [r7, #15]
    break;
 800927a:	e008      	b.n	800928e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800927c:	2301      	movs	r3, #1
 800927e:	73fb      	strb	r3, [r7, #15]
    break;
 8009280:	e005      	b.n	800928e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009282:	2303      	movs	r3, #3
 8009284:	73fb      	strb	r3, [r7, #15]
    break;
 8009286:	e002      	b.n	800928e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009288:	2303      	movs	r3, #3
 800928a:	73fb      	strb	r3, [r7, #15]
    break;
 800928c:	bf00      	nop
  }
  return usb_status;
 800928e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <memset>:
 800929c:	4402      	add	r2, r0
 800929e:	4603      	mov	r3, r0
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d100      	bne.n	80092a6 <memset+0xa>
 80092a4:	4770      	bx	lr
 80092a6:	f803 1b01 	strb.w	r1, [r3], #1
 80092aa:	e7f9      	b.n	80092a0 <memset+0x4>

080092ac <__libc_init_array>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	4d0d      	ldr	r5, [pc, #52]	@ (80092e4 <__libc_init_array+0x38>)
 80092b0:	4c0d      	ldr	r4, [pc, #52]	@ (80092e8 <__libc_init_array+0x3c>)
 80092b2:	1b64      	subs	r4, r4, r5
 80092b4:	10a4      	asrs	r4, r4, #2
 80092b6:	2600      	movs	r6, #0
 80092b8:	42a6      	cmp	r6, r4
 80092ba:	d109      	bne.n	80092d0 <__libc_init_array+0x24>
 80092bc:	4d0b      	ldr	r5, [pc, #44]	@ (80092ec <__libc_init_array+0x40>)
 80092be:	4c0c      	ldr	r4, [pc, #48]	@ (80092f0 <__libc_init_array+0x44>)
 80092c0:	f000 f818 	bl	80092f4 <_init>
 80092c4:	1b64      	subs	r4, r4, r5
 80092c6:	10a4      	asrs	r4, r4, #2
 80092c8:	2600      	movs	r6, #0
 80092ca:	42a6      	cmp	r6, r4
 80092cc:	d105      	bne.n	80092da <__libc_init_array+0x2e>
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
 80092d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d4:	4798      	blx	r3
 80092d6:	3601      	adds	r6, #1
 80092d8:	e7ee      	b.n	80092b8 <__libc_init_array+0xc>
 80092da:	f855 3b04 	ldr.w	r3, [r5], #4
 80092de:	4798      	blx	r3
 80092e0:	3601      	adds	r6, #1
 80092e2:	e7f2      	b.n	80092ca <__libc_init_array+0x1e>
 80092e4:	0800c4d8 	.word	0x0800c4d8
 80092e8:	0800c4d8 	.word	0x0800c4d8
 80092ec:	0800c4d8 	.word	0x0800c4d8
 80092f0:	0800c4dc 	.word	0x0800c4dc

080092f4 <_init>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	bf00      	nop
 80092f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fa:	bc08      	pop	{r3}
 80092fc:	469e      	mov	lr, r3
 80092fe:	4770      	bx	lr

08009300 <_fini>:
 8009300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009302:	bf00      	nop
 8009304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009306:	bc08      	pop	{r3}
 8009308:	469e      	mov	lr, r3
 800930a:	4770      	bx	lr
